<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stories on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/stories/</link><description>Recent content in Stories on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2023 Personal page</copyright><atom:link href="https://romankurnovskii.com/en/stories/index.xml" rel="self" type="application/rss+xml"/><item><title>Enhancing Trading Bot with Abstraction and Async Management</title><link>https://romankurnovskii.com/en/stories/004-trading-bot-refactor-orders/</link><pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/stories/004-trading-bot-refactor-orders/</guid><description>Abstraction Today worked on refining some abstraction level in framework. The main objective of today&amp;rsquo;s work was to enhance the abstraction in the classes and improve the overall code structure.
The goal was to make the code more adaptable and easier to maintain.
For example, instead of having Binance hardcoded in the from_binance_order method, now use the Exchanges enum, which makes the code more versatile and ready for additional exchanges in the future.
def from_binance_order(binance_order: BinanceOrder): exchange = Exchanges.</description></item><item><title>Creating a GUI for a Trading Bot</title><link>https://romankurnovskii.com/en/stories/003-trading-bot-gui-init-tkinter/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/stories/003-trading-bot-gui-init-tkinter/</guid><description>The journey towards creating a light trading bot framework begins with a simple, intuitive graphical user interface (GUI). For this venture, I have chosen to rely on Python&amp;rsquo;s built-in Tkinter library to provide the fundamental building blocks for my GUI.
Embracing Simplicity The initial goal is to keep the GUI as straightforward as possible, focusing on the core functionalities required for a trading bot. The main elements incorporated are:
Start/Stop Buttons: These allow the user to control the operation of the bot.</description></item><item><title>Setup OpenVPN Server on AWS EC2 Ubuntu</title><link>https://romankurnovskii.com/en/stories/002-openvpn-aws-ec2-setup/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/stories/002-openvpn-aws-ec2-setup/</guid><description>Today, I embarked on a journey to create an accessible, affordable, and easy-to-use VPN solution that anyone can set up on their devices using AWS.
Finding a reasonably priced solution was critical. I opted for Amazon&amp;rsquo;s t3a.nano ARM Ubuntu image, which costs ~$0.0047/hour ~ $3.8/month.
Various Amazon EC2 instances and their prices are listed on Amazon&amp;rsquo;s On-Demand Pricing page.
Here is the list of all Ubuntu AMI images to identify the appropriate image for the project. The selected image combined with the CloudFormation template, which was inspired by the AWS CloudFormation General Reference, provides a seamless and consistent user experience.</description></item><item><title>Visualize Algorithms - Rediscovering Backtracking</title><link>https://romankurnovskii.com/en/stories/001-rediscovering-backtracking-algo/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/stories/001-rediscovering-backtracking-algo/</guid><description>Today, I tackled a LeetCode programming problem that pushed me to rediscover a forgotten concept and devise a creative solution to share my learning experience with others.
The problem centered around a backtracking algorithm. Although I had previously explored this topic, I couldn&amp;rsquo;t quite remember the exact steps and logic involved. Determined to refresh my memory, I set out not only to solve the problem but also to find a way to make it easier for myself and others to visualize and comprehend the algorithm in the future.</description></item></channel></rss>