<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CheatSheet on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/tags/cheatsheet/</link><description>Recent content in CheatSheet on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2025</copyright><lastBuildDate>Tue, 21 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/tags/cheatsheet/index.xml" rel="self" type="application/rss+xml"/><item><title>Python Cheat Sheet</title><link>https://romankurnovskii.com/en/posts/python-snippets/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/python-snippets/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">sum_of_digits&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">sum&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">sum&lt;/span> &lt;span style="color:#666">+=&lt;/span> n &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">//=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">sum&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Single line comments start with a number symbol.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34; Multiline strings can be written
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> using three &amp;#34;s, and are often used
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> as documentation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 1. Primitive Datatypes and Operators&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You have numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Math is what you would expect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">8&lt;/span> &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">35&lt;/span> &lt;span style="color:#666">/&lt;/span> &lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 7.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Integer division rounds down for both positive and negative numbers.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#666">//&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#666">//&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; -2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">5.0&lt;/span> &lt;span style="color:#666">//&lt;/span> &lt;span style="color:#40a070">3.0&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1.0 # works on floats too&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">5.0&lt;/span> &lt;span style="color:#666">//&lt;/span> &lt;span style="color:#40a070">3.0&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; -2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># The result of division is always a float&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">10.0&lt;/span> &lt;span style="color:#666">/&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 3.3333333333333335&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Modulo operation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">7&lt;/span> &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># i % j have the same sign as j, unlike C&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">7&lt;/span> &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Exponentiation (x**y, x to the yth power)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span>&lt;span style="color:#666">**&lt;/span>&lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Enforce precedence with parentheses&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">3&lt;/span>) &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Boolean values are primitives (Note: the capitalization)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">False&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># negate with not&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">False&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Boolean Operators&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Note &amp;#34;and&amp;#34; and &amp;#34;or&amp;#34; are case-sensitive&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#007020;font-weight:bold">and&lt;/span> &lt;span style="color:#007020;font-weight:bold">False&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">False&lt;/span> &lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># True and False are actually 1 and 0 but with different keywords&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">8&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">False&lt;/span> &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; -5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Comparison operators look at the numerical value of True and False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#007020;font-weight:bold">False&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#007020;font-weight:bold">False&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># All other values are True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>([]) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>({}) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#007020">set&lt;/span>()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#40a070">4&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">6&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Using boolean logical operators on ints casts them to booleans for evaluation, but their non-cast value is returned&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Don&amp;#39;t mix up with bool(ints) and bitwise and/or (&amp;amp;,|)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#007020;font-weight:bold">and&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">5&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; -5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Equality is ==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Inequality is !=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># More comparisons&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">&amp;lt;=&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">&amp;gt;=&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Seeing whether a value is in a range&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#007020;font-weight:bold">and&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#007020;font-weight:bold">and&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Chaining makes this look nicer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># (is vs. ==) is checks if two variables refer to the same object, but == checks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># if the objects pointed to have the same values.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Point a at a new list, [1, 2, 3, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#666">=&lt;/span> a &lt;span style="color:#60a0b0;font-style:italic"># Point b at what a is pointing to&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#007020;font-weight:bold">is&lt;/span> a &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True, a and b refer to the same object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#666">==&lt;/span> a &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True, a&amp;#39;s and b&amp;#39;s objects are equal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Point b at a new list, [1, 2, 3, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#007020;font-weight:bold">is&lt;/span> a &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False, a and b do not refer to the same object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#666">==&lt;/span> a &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True, a&amp;#39;s and b&amp;#39;s objects are equal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Strings are created with &amp;#34; or &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;This is a string.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;This is also a string.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Strings can be added too&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34;world!&amp;#34;&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;Hello world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># String literals (but not variables) can be concatenated without using &amp;#39;+&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;world!&amp;#34;&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;Hello world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># A string can be treated like a list of characters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;Hello world!&amp;#34;&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#39;H&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can find the length of a string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">len&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;This is a string&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can also format using f-strings or formatted string literals (in Python 3.6+)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Reiko&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;She said her name is &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>name&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">.&amp;#34;&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;She said her name is Reiko&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can basically put any Python expression inside the braces and it will be output in the string.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>name&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0"> is &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>&lt;span style="color:#007020">len&lt;/span>(name)&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0"> characters long.&amp;#34;&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;Reiko is 5 characters long.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># None is an object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">None&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Don&amp;#39;t use the equality &amp;#34;==&amp;#34; symbol to compare objects to None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Use &amp;#34;is&amp;#34; instead. This checks for equality of object identity.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;etc&amp;#34;&lt;/span> &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">None&lt;/span> &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># All other values are True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>([]) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>({}) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">bool&lt;/span>(&lt;span style="color:#007020">set&lt;/span>()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 2. Variables and Collections&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Python has a print function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;I&amp;#39;m Python. Nice to meet you!&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; I&amp;#39;m Python. Nice to meet you!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># By default the print function also prints out a newline at the end.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Use the optional argument end to change the end string.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Hello, World&amp;#34;&lt;/span>, end&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;!&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Hello, World!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Simple way to get input data from console&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input_string_var &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">input&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Enter some data: &amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># Returns the data as a string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># There are no declarations, only assignments.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Convention is to use lower_case_with_underscores&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>some_var &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>some_var &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Accessing a previously unassigned variable is an exception.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># See Control Flow to learn more about exception handling.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>some_unknown_var &lt;span style="color:#60a0b0;font-style:italic"># Raises a NameError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># if can be used as an expression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Equivalent of C&amp;#39;s &amp;#39;?:&amp;#39; ternary operator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;yay!&amp;#34;&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#4070a0">&amp;#34;nay!&amp;#34;&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;nay!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Lists store sequences&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li &lt;span style="color:#666">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can start with a prefilled list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>other_li &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Add stuff to the end of a list with append&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>append(&lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># li is now [1]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>append(&lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># li is now [1, 2]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>append(&lt;span style="color:#40a070">4&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># li is now [1, 2, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>append(&lt;span style="color:#40a070">3&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># li is now [1, 2, 4, 3]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Remove from the end with pop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>pop() &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 3 and li is now [1, 2, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Let&amp;#39;s put it back&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>append(&lt;span style="color:#40a070">3&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># li is now [1, 2, 4, 3] again.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Access a list like you would any array&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li[&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Look at the last element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li[&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Looking out of bounds is an IndexError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li[&lt;span style="color:#40a070">4&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Raises an IndexError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can look at ranges with slice syntax.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># The start index is included, the end index is not&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># (It&amp;#39;s a closed/open range for you mathy types.)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li[&lt;span style="color:#40a070">1&lt;/span>:&lt;span style="color:#40a070">3&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Return list from index 1 to 3 =&amp;gt; [2, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li[&lt;span style="color:#40a070">2&lt;/span>:] &lt;span style="color:#60a0b0;font-style:italic"># Return list starting from index 2 =&amp;gt; [4, 3]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li[:&lt;span style="color:#40a070">3&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Return list from beginning until index 3 =&amp;gt; [1, 2, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li[::&lt;span style="color:#40a070">2&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Return list selecting every second entry =&amp;gt; [1, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li[::&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Return list in reverse order =&amp;gt; [3, 4, 2, 1]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Use any combination of these to make advanced slices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># li[start:end:step]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Make a one layer deep copy using slices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li2 &lt;span style="color:#666">=&lt;/span> li[:] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; li2 = [1, 2, 4, 3] but (li2 is li) will result in false.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Remove arbitrary elements from a list with &amp;#34;del&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">del&lt;/span> li[&lt;span style="color:#40a070">2&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># li is now [1, 2, 3]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Remove first occurrence of a value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>remove(&lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># li is now [1, 3]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>remove(&lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># Raises a ValueError as 2 is not in the list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Insert an element at a specific index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>insert(&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># li is now [1, 2, 3] again&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Get the index of the first item found matching the argument&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>index(&lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>index(&lt;span style="color:#40a070">4&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># Raises a ValueError as 4 is not in the list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can add lists&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Note: values for li and for other_li are not modified.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li &lt;span style="color:#666">+&lt;/span> other_li &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [1, 2, 3, 4, 5, 6]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Concatenate lists with &amp;#34;extend()&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>li&lt;span style="color:#666">.&lt;/span>extend(other_li) &lt;span style="color:#60a0b0;font-style:italic"># Now li is [1, 2, 3, 4, 5, 6]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Check for existence in a list with &amp;#34;in&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> li &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Examine the length with &amp;#34;len()&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">len&lt;/span>(li) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Tuples are like lists but are immutable.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tup &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tup[&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tup[&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Raises a TypeError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Note that a tuple of length one has to have a comma after the last element but&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># tuples of other lengths, even zero, do not.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">type&lt;/span>((&lt;span style="color:#40a070">1&lt;/span>)) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">type&lt;/span>((&lt;span style="color:#40a070">1&lt;/span>,)) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">type&lt;/span>(()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can do most of the list operations on tuples too&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">len&lt;/span>(tup) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tup &lt;span style="color:#666">+&lt;/span> (&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; (1, 2, 3, 4, 5, 6)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tup[:&lt;span style="color:#40a070">2&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; (1, 2)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> tup &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can unpack tuples (or lists) into variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a, b, c &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># a is now 1, b is now 2 and c is now 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can also do extended unpacking&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a, &lt;span style="color:#666">*&lt;/span>b, c &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># a is now 1, b is now [2, 3] and c is now 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Tuples are created by default if you leave out the parentheses&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d, e, f &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># tuple 4, 5, 6 is unpacked into variables d, e and f&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># respectively such that d = 4, e = 5 and f = 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Now look how easy it is to swap two values&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e, d &lt;span style="color:#666">=&lt;/span> d, e &lt;span style="color:#60a0b0;font-style:italic"># d is now 5 and e is now 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Dictionaries store mappings from keys to values&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>empty_dict &lt;span style="color:#666">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Here is a prefilled dictionary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;one&amp;#34;&lt;/span>: &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;two&amp;#34;&lt;/span>: &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;three&amp;#34;&lt;/span>: &lt;span style="color:#40a070">3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Note keys for dictionaries have to be immutable types. This is to ensure that&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># the key can be converted to a constant hash value for quick look-ups.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Immutable types include ints, floats, strings, tuples.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>invalid_dict &lt;span style="color:#666">=&lt;/span> {[&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">2&lt;/span>,&lt;span style="color:#40a070">3&lt;/span>]: &lt;span style="color:#4070a0">&amp;#34;123&amp;#34;&lt;/span>} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Raises a TypeError: unhashable type: &amp;#39;list&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>valid_dict &lt;span style="color:#666">=&lt;/span> {(&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">2&lt;/span>,&lt;span style="color:#40a070">3&lt;/span>):[&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">2&lt;/span>,&lt;span style="color:#40a070">3&lt;/span>]} &lt;span style="color:#60a0b0;font-style:italic"># Values can be of any type, however.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Look up values with []&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict[&lt;span style="color:#4070a0">&amp;#34;one&amp;#34;&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Get all keys as an iterable with &amp;#34;keys()&amp;#34;. We need to wrap the call in list()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># to turn it into a list. We&amp;#39;ll talk about those later. Note - for Python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># versions &amp;lt;3.7, dictionary key ordering is not guaranteed. Your results might&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># not match the example below exactly. However, as of Python 3.7, dictionary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># items maintain the order at which they are inserted into the dictionary.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(filled_dict&lt;span style="color:#666">.&lt;/span>keys()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [&amp;#34;three&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;one&amp;#34;] in Python &amp;lt;3.7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(filled_dict&lt;span style="color:#666">.&lt;/span>keys()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34;] in Python 3.7+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Get all values as an iterable with &amp;#34;values()&amp;#34;. Once again we need to wrap it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># in list() to get it out of the iterable. Note - Same as above regarding key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># ordering.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(filled_dict&lt;span style="color:#666">.&lt;/span>values()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [3, 2, 1] in Python &amp;lt;3.7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(filled_dict&lt;span style="color:#666">.&lt;/span>values()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [1, 2, 3] in Python 3.7+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Check for existence of keys in a dictionary with &amp;#34;in&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;one&amp;#34;&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> filled_dict &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> filled_dict &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Looking up a non-existing key is a KeyError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict[&lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># KeyError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Use &amp;#34;get()&amp;#34; method to avoid the KeyError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#34;one&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># The get method supports a default argument when the value is missing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># &amp;#34;setdefault()&amp;#34; inserts into a dictionary only if the given key isn&amp;#39;t present&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict&lt;span style="color:#666">.&lt;/span>setdefault(&lt;span style="color:#4070a0">&amp;#34;five&amp;#34;&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># filled_dict[&amp;#34;five&amp;#34;] is set to 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict&lt;span style="color:#666">.&lt;/span>setdefault(&lt;span style="color:#4070a0">&amp;#34;five&amp;#34;&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># filled_dict[&amp;#34;five&amp;#34;] is still 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Adding to a dictionary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict&lt;span style="color:#666">.&lt;/span>update({&lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>:&lt;span style="color:#40a070">4&lt;/span>}) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {&amp;#34;one&amp;#34;: 1, &amp;#34;two&amp;#34;: 2, &amp;#34;three&amp;#34;: 3, &amp;#34;four&amp;#34;: 4}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict[&lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">4&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># another way to add to dict&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Remove keys from a dictionary with del&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">del&lt;/span> filled_dict[&lt;span style="color:#4070a0">&amp;#34;one&amp;#34;&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Removes the key &amp;#34;one&amp;#34; from filled dict&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># From Python 3.5 you can also use the additional unpacking options&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>: &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#666">**&lt;/span>{&lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span>: &lt;span style="color:#40a070">2&lt;/span>}} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>: &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#666">**&lt;/span>{&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>: &lt;span style="color:#40a070">2&lt;/span>}} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {&amp;#39;a&amp;#39;: 2}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Sets store ... well sets&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>empty_set &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>some_set &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>} &lt;span style="color:#60a0b0;font-style:italic"># some_set is now {1, 2, 3, 4}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Similar to keys of a dictionary, elements of a set have to be immutable.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>invalid_set &lt;span style="color:#666">=&lt;/span> {[&lt;span style="color:#40a070">1&lt;/span>], &lt;span style="color:#40a070">1&lt;/span>} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Raises a TypeError: unhashable type: &amp;#39;list&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>valid_set &lt;span style="color:#666">=&lt;/span> {(&lt;span style="color:#40a070">1&lt;/span>,), &lt;span style="color:#40a070">1&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Add one more item to the set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_set &lt;span style="color:#666">=&lt;/span> some_set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_set&lt;span style="color:#666">.&lt;/span>add(&lt;span style="color:#40a070">5&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># filled_set is now {1, 2, 3, 4, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Sets do not have duplicate elements&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_set&lt;span style="color:#666">.&lt;/span>add(&lt;span style="color:#40a070">5&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># it remains as before {1, 2, 3, 4, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Do set intersection with &amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>other_set &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_set &lt;span style="color:#666">&amp;amp;&lt;/span> other_set &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {3, 4, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Do set union with |&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_set &lt;span style="color:#666">|&lt;/span> other_set &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {1, 2, 3, 4, 5, 6}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Do set difference with -&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>} &lt;span style="color:#666">-&lt;/span> {&lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {1, 4}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Do set symmetric difference with ^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>} &lt;span style="color:#666">^&lt;/span> {&lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {1, 4, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Check if set on the left is a superset of set on the right&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>} &lt;span style="color:#666">&amp;gt;=&lt;/span> {&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Check if set on the left is a subset of set on the right&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>} &lt;span style="color:#666">&amp;lt;=&lt;/span> {&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Check for existence in a set with in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> filled_set &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> filled_set &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Make a one layer deep copy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_set &lt;span style="color:#666">=&lt;/span> some_set&lt;span style="color:#666">.&lt;/span>copy() &lt;span style="color:#60a0b0;font-style:italic"># filled_set is {1, 2, 3, 4, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_set &lt;span style="color:#007020;font-weight:bold">is&lt;/span> some_set &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 3. Control Flow and Iterables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Let&amp;#39;s just make a variable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>some_var &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Here is an if statement. Indentation is significant in Python!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Convention is to use four spaces, not tabs.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># This prints &amp;#34;some_var is smaller than 10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> some_var &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">10&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;some_var is totally bigger than 10.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">elif&lt;/span> some_var &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">10&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># This elif clause is optional.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;some_var is smaller than 10.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">else&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># This is optional too.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;some_var is indeed 10.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">For loops iterate over lists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> dog is a mammal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> cat is a mammal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> mouse is a mammal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> animal &lt;span style="color:#007020;font-weight:bold">in&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;dog&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;cat&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;mouse&amp;#34;&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># You can use format() to interpolate formatted strings&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0"> is a mammal&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>format(animal))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;range(number)&amp;#34; returns an iterable of numbers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">from zero to the given number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">4&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;range(lower, upper)&amp;#34; returns an iterable of numbers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">from the lower number to the upper number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;range(lower, upper, step)&amp;#34; returns an iterable of numbers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">from the lower number to the upper number, while incrementing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">by step. If step is not indicated, the default value is 1.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">To loop over a list, and retrieve both the index and the value of each item in the list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 0 dog
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 1 cat
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 2 mouse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>animals &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;dog&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;cat&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;mouse&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i, value &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">enumerate&lt;/span>(animals):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i, value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">While loops go until a condition is no longer met.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">while&lt;/span> x &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Shorthand for x = x + 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Handle exceptions with a try/except block&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Use &amp;#34;raise&amp;#34; to raise an error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">raise&lt;/span> &lt;span style="color:#007020">IndexError&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;This is an index error&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">except&lt;/span> &lt;span style="color:#007020">IndexError&lt;/span> &lt;span style="color:#007020;font-weight:bold">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">pass&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Pass is just a no-op. Usually you would do recovery here.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">except&lt;/span> (&lt;span style="color:#007020">TypeError&lt;/span>, &lt;span style="color:#007020">NameError&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">pass&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Multiple exceptions can be handled together, if required.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">else&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># Optional clause to the try/except block. Must follow all except blocks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;All good!&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># Runs only if the code in try raises no exceptions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">finally&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># Execute under all circumstances&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;We can clean up resources here&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Instead of try/finally to cleanup resources you can use a with statement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;myfile.txt&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> line &lt;span style="color:#007020;font-weight:bold">in&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Writing to a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>contents &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;aa&amp;#34;&lt;/span>: &lt;span style="color:#40a070">12&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;bb&amp;#34;&lt;/span>: &lt;span style="color:#40a070">21&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;myfile1.txt&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;w+&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file&lt;span style="color:#666">.&lt;/span>write(&lt;span style="color:#007020">str&lt;/span>(contents)) &lt;span style="color:#60a0b0;font-style:italic"># writes a string to a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;myfile2.txt&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;w+&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file&lt;span style="color:#666">.&lt;/span>write(json&lt;span style="color:#666">.&lt;/span>dumps(contents)) &lt;span style="color:#60a0b0;font-style:italic"># writes an object to a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Reading from a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;myfile1.txt&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;r+&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> contents &lt;span style="color:#666">=&lt;/span> file&lt;span style="color:#666">.&lt;/span>read() &lt;span style="color:#60a0b0;font-style:italic"># reads a string from a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(contents)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># print: {&amp;#34;aa&amp;#34;: 12, &amp;#34;bb&amp;#34;: 21}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;myfile2.txt&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;r+&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> contents &lt;span style="color:#666">=&lt;/span> json&lt;span style="color:#666">.&lt;/span>load(file) &lt;span style="color:#60a0b0;font-style:italic"># reads a json object from a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(contents)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># print: {&amp;#34;aa&amp;#34;: 12, &amp;#34;bb&amp;#34;: 21}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Python offers a fundamental abstraction called the Iterable.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># An iterable is an object that can be treated as a sequence.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># The object returned by the range function, is an iterable.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filled_dict &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;one&amp;#34;&lt;/span>: &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;two&amp;#34;&lt;/span>: &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;three&amp;#34;&lt;/span>: &lt;span style="color:#40a070">3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>our_iterable &lt;span style="color:#666">=&lt;/span> filled_dict&lt;span style="color:#666">.&lt;/span>keys()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(our_iterable) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; dict_keys([&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;]). This is an object that implements our Iterable interface.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># We can loop over it.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> our_iterable:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i) &lt;span style="color:#60a0b0;font-style:italic"># Prints one, two, three&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># However we cannot address elements by index.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>our_iterable[&lt;span style="color:#40a070">1&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># Raises a TypeError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># An iterable is an object that knows how to create an iterator.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>our_iterator &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">iter&lt;/span>(our_iterable)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Our iterator is an object that can remember the state as we traverse through it.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># We get the next object with &amp;#34;next()&amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">next&lt;/span>(our_iterator) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># It maintains state as we iterate.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">next&lt;/span>(our_iterator) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;two&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">next&lt;/span>(our_iterator) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;three&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># After the iterator has returned all of its data, it raises a StopIteration exception&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">next&lt;/span>(our_iterator) &lt;span style="color:#60a0b0;font-style:italic"># Raises StopIteration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># We can also loop over it, in fact, &amp;#34;for&amp;#34; does this implicitly!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>our_iterator &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">iter&lt;/span>(our_iterable)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> our_iterator:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i) &lt;span style="color:#60a0b0;font-style:italic"># Prints one, two, three&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can grab all the elements of an iterable or iterator by calling list() on it.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(our_iterable) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Returns [&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(our_iterator) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Returns [] because state is saved&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 4. Functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Use &amp;#34;def&amp;#34; to create new functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">add&lt;/span>(x, y):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;x is &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0"> and y is &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>format(x, y))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> x &lt;span style="color:#666">+&lt;/span> y &lt;span style="color:#60a0b0;font-style:italic"># Return values with a return statement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Calling functions with parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add(&lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; prints out &amp;#34;x is 5 and y is 6&amp;#34; and returns 11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Another way to call functions is with keyword arguments&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add(y&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">6&lt;/span>, x&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">5&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># Keyword arguments can arrive in any order.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can define functions that take a variable number of&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># positional arguments&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">varargs&lt;/span>(&lt;span style="color:#666">*&lt;/span>args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> args
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>varargs(&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; (1, 2, 3)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can define functions that take a variable number of&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># keyword arguments, as well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">keyword_args&lt;/span>(&lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> kwargs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Let&amp;#39;s call it to see what happens&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>keyword_args(big&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;foot&amp;#34;&lt;/span>, loch&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;ness&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {&amp;#34;big&amp;#34;: &amp;#34;foot&amp;#34;, &amp;#34;loch&amp;#34;: &amp;#34;ness&amp;#34;}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can do both at once, if you like&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">all_the_args&lt;/span>(&lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">all_the_args(1, 2, a=3, b=4) prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> (1, 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> {&amp;#34;a&amp;#34;: 3, &amp;#34;b&amp;#34;: 4}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># When calling functions, you can do the opposite of args/kwargs!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Use * to expand tuples and use ** to expand kwargs.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>args &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kwargs &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;a&amp;#34;&lt;/span>: &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;b&amp;#34;&lt;/span>: &lt;span style="color:#40a070">4&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all_the_args(&lt;span style="color:#666">*&lt;/span>args) &lt;span style="color:#60a0b0;font-style:italic"># equivalent to all_the_args(1, 2, 3, 4)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all_the_args(&lt;span style="color:#666">**&lt;/span>kwargs) &lt;span style="color:#60a0b0;font-style:italic"># equivalent to all_the_args(a=3, b=4)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all_the_args(&lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs) &lt;span style="color:#60a0b0;font-style:italic"># equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Returning multiple values (with tuple assignments)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">swap&lt;/span>(x, y):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> y, x &lt;span style="color:#60a0b0;font-style:italic"># Return multiple values as a tuple without the parenthesis.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># (Note: parenthesis have been excluded but can be included)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x, y &lt;span style="color:#666">=&lt;/span> swap(x, y) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; x = 2, y = 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># (x, y) = swap(x,y) # Again parenthesis have been excluded but can be included.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Function Scope&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">set_x&lt;/span>(num):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Local var x not the same as global variable x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">=&lt;/span> num &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 43&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(x) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 43&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">set_global_x&lt;/span>(num):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">global&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(x) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">=&lt;/span> num &lt;span style="color:#60a0b0;font-style:italic"># global var x is now set to 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(x) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set_x(&lt;span style="color:#40a070">43&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set_global_x(&lt;span style="color:#40a070">6&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Python has first class functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">create_adder&lt;/span>(x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">adder&lt;/span>(y):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> x &lt;span style="color:#666">+&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> adder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add_10 &lt;span style="color:#666">=&lt;/span> create_adder(&lt;span style="color:#40a070">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add_10(&lt;span style="color:#40a070">3&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># There are also anonymous functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020;font-weight:bold">lambda&lt;/span> x: x &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">2&lt;/span>)(&lt;span style="color:#40a070">3&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020;font-weight:bold">lambda&lt;/span> x, y: x &lt;span style="color:#666">**&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">+&lt;/span> y &lt;span style="color:#666">**&lt;/span> &lt;span style="color:#40a070">2&lt;/span>)(&lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># There are built-in higher order functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(&lt;span style="color:#007020">map&lt;/span>(add_10, [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>])) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [11, 12, 13]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(&lt;span style="color:#007020">map&lt;/span>(&lt;span style="color:#007020">max&lt;/span>, [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>], [&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>])) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [4, 2, 3]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">list&lt;/span>(&lt;span style="color:#007020">filter&lt;/span>(&lt;span style="color:#007020;font-weight:bold">lambda&lt;/span> x: x &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">5&lt;/span>, [&lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>, &lt;span style="color:#40a070">7&lt;/span>])) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [6, 7]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># We can use list comprehensions for nice maps and filters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># List comprehension stores the output as a list which can itself be a nested list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[add_10(i) &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>]] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [11, 12, 13]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[x &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> [&lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>, &lt;span style="color:#40a070">7&lt;/span>] &lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">5&lt;/span>] &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [6, 7]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can construct set and dict comprehensions as well.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{x &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#4070a0">&amp;#39;abcddeef&amp;#39;&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#4070a0">&amp;#39;abc&amp;#39;&lt;/span>} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {&amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{x: x&lt;span style="color:#666">**&lt;/span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">5&lt;/span>)} &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 5. Modules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can import modules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">math&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(math&lt;span style="color:#666">.&lt;/span>sqrt(&lt;span style="color:#40a070">16&lt;/span>)) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 4.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can get specific functions from a module&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">math&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> ceil, floor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(ceil(&lt;span style="color:#40a070">3.7&lt;/span>)) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 4.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(floor(&lt;span style="color:#40a070">3.7&lt;/span>)) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 3.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can import all functions from a module.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Warning: this is not recommended&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">math&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can shorten module names&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">math&lt;/span> &lt;span style="color:#007020;font-weight:bold">as&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>math&lt;span style="color:#666">.&lt;/span>sqrt(&lt;span style="color:#40a070">16&lt;/span>) &lt;span style="color:#666">==&lt;/span> m&lt;span style="color:#666">.&lt;/span>sqrt(&lt;span style="color:#40a070">16&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Python modules are just ordinary Python files. You&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># can write your own, and import them. The name of the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># module is the same as the name of the file.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can find out which functions and attributes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># are defined in a module.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">math&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">dir&lt;/span>(math)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># If you have a Python script named math.py in the same&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># folder as your current script, the file math.py will&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># be loaded instead of the built-in Python module.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># This happens because the local folder has priority&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># over Python&amp;#39;s built-in libraries.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 6. Classes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># We use the &amp;#34;class&amp;#34; statement to create a class&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Human&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># A class attribute. It is shared by all instances of this class&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> species &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;H. sapiens&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Basic initializer, this is called when this class is instantiated.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Note that the double leading and trailing underscores denote objects&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># or attributes that are used by Python but that live in user-controlled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># namespaces. Methods(or objects or attributes) like: __init__, __str__,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># __repr__ etc. are called special methods (or sometimes called dunder methods)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># You should not invent such names on your own.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Assign the argument to the instance&amp;#39;s name attribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>name &lt;span style="color:#666">=&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Initialize property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>_age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># An instance method. All methods take &amp;#34;self&amp;#34; as the first argument&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">say&lt;/span>(self, msg):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#70a0d0">{name}&lt;/span>&lt;span style="color:#4070a0">: &lt;/span>&lt;span style="color:#70a0d0">{message}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>format(name&lt;span style="color:#666">=&lt;/span>self&lt;span style="color:#666">.&lt;/span>name, message&lt;span style="color:#666">=&lt;/span>msg))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Another instance method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">sing&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#39;yo... yo... microphone check... one two... one two...&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># A class method is shared among all instances&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># They are called with the calling class as the first argument&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@classmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_species&lt;/span>(cls):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> cls&lt;span style="color:#666">.&lt;/span>species
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># A static method is called without a class or instance reference&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@staticmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">grunt&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*grunt*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># A property is just like a getter.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># It turns the method age() into a read-only attribute of the same name.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># There&amp;#39;s no need to write trivial getters and setters in Python, though.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">age&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> self&lt;span style="color:#666">.&lt;/span>_age
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This allows the property to be set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@age.setter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">age&lt;/span>(self, age):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>_age &lt;span style="color:#666">=&lt;/span> age
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This allows the property to be deleted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@age.deleter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">age&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">del&lt;/span> self&lt;span style="color:#666">.&lt;/span>_age
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># When a Python interpreter reads a source file it executes all its code.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># This __name__ check makes sure this code block is only executed when this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># module is the main program.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> __name__ &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Instantiate a class&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#666">=&lt;/span> Human(name&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Ian&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#666">.&lt;/span>say(&lt;span style="color:#4070a0">&amp;#34;hi&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># &amp;#34;Ian: hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#666">=&lt;/span> Human(&lt;span style="color:#4070a0">&amp;#34;Joel&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j&lt;span style="color:#666">.&lt;/span>say(&lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># &amp;#34;Joel: hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># i and j are instances of type Human, or in other words: they are Human objects&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Call our class method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#666">.&lt;/span>say(i&lt;span style="color:#666">.&lt;/span>get_species()) &lt;span style="color:#60a0b0;font-style:italic"># &amp;#34;Ian: H. sapiens&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Change the shared attribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Human&lt;span style="color:#666">.&lt;/span>species &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;H. neanderthalensis&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#666">.&lt;/span>say(i&lt;span style="color:#666">.&lt;/span>get_species()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;Ian: H. neanderthalensis&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j&lt;span style="color:#666">.&lt;/span>say(j&lt;span style="color:#666">.&lt;/span>get_species()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;Joel: H. neanderthalensis&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Call the static method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(Human&lt;span style="color:#666">.&lt;/span>grunt()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;*grunt*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Static methods can be called by instances too&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i&lt;span style="color:#666">.&lt;/span>grunt()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;*grunt*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Update the property for this instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#666">.&lt;/span>age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Get the property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#666">.&lt;/span>say(i&lt;span style="color:#666">.&lt;/span>age) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;Ian: 42&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j&lt;span style="color:#666">.&lt;/span>say(j&lt;span style="color:#666">.&lt;/span>age) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;#34;Joel: 0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Delete the property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">del&lt;/span> i&lt;span style="color:#666">.&lt;/span>age
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># i.age # =&amp;gt; this would raise an AttributeError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 6.1 Inheritance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Inheritance allows new child classes to be defined that inherit methods and&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># variables from their parent class.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Using the Human class defined above as the base or parent class, we can&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># define a child class, Superhero, which inherits the class variables like&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># &amp;#34;species&amp;#34;, &amp;#34;name&amp;#34;, and &amp;#34;age&amp;#34;, as well as methods, like &amp;#34;sing&amp;#34; and &amp;#34;grunt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># from the Human class, but can also have its own unique properties.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># To take advantage of modularization by file you could place the classes above in their own files,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># say, human.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># To import functions from other files use the following format&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># from &amp;#34;filename-without-extension&amp;#34; import &amp;#34;function-or-class&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">human&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> Human
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Specify the parent class(es) as parameters to the class definition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Superhero&lt;/span>(Human):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># If the child class should inherit all of the parent&amp;#39;s definitions without&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># any modifications, you can just use the &amp;#34;pass&amp;#34; keyword (and nothing else)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># but in this case it is commented out to allow for a unique child class:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Child classes can override their parents&amp;#39; attributes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> species &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Superhuman&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Children automatically inherit their parent class&amp;#39;s constructor including&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># its arguments, but can also define additional arguments or definitions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># and override its methods such as the class constructor.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This constructor inherits the &amp;#34;name&amp;#34; argument from the &amp;#34;Human&amp;#34; class and&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># adds the &amp;#34;superpower&amp;#34; and &amp;#34;movie&amp;#34; arguments:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, name, movie&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">False&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> superpowers&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#4070a0">&amp;#34;super strength&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;bulletproofing&amp;#34;&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># add additional class attributes:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>fictional &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>movie &lt;span style="color:#666">=&lt;/span> movie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># be aware of mutable default values, since defaults are shared&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>superpowers &lt;span style="color:#666">=&lt;/span> superpowers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># The &amp;#34;super&amp;#34; function lets you access the parent class&amp;#39;s methods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># that are overridden by the child, in this case, the __init__ method.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This calls the parent class constructor:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">super&lt;/span>()&lt;span style="color:#666">.&lt;/span>__init__(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># override the sing method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">sing&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Dun, dun, DUN!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># add an additional instance method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">boast&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> power &lt;span style="color:#007020;font-weight:bold">in&lt;/span> self&lt;span style="color:#666">.&lt;/span>superpowers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;I wield the power of &lt;/span>&lt;span style="color:#70a0d0">{pow}&lt;/span>&lt;span style="color:#4070a0">!&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>format(&lt;span style="color:#007020">pow&lt;/span>&lt;span style="color:#666">=&lt;/span>power))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> __name__ &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sup &lt;span style="color:#666">=&lt;/span> Superhero(name&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Tick&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Instance type checks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">isinstance&lt;/span>(sup, Human):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;I am human&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">type&lt;/span>(sup) &lt;span style="color:#007020;font-weight:bold">is&lt;/span> Superhero:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;I am a superhero&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Get the Method Resolution search Order used by both getattr() and super()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This attribute is dynamic and can be updated&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(Superhero&lt;span style="color:#666">.&lt;/span>__mro__) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; (&amp;lt;class &amp;#39;__main__.Superhero&amp;#39;&amp;gt;,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;lt;class &amp;#39;human.Human&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;object&amp;#39;&amp;gt;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calls parent method but uses its own class attribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>get_species()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Superhuman&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calls overridden method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>sing()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Dun, dun, DUN!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calls method from Human&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sup&lt;span style="color:#666">.&lt;/span>say(&lt;span style="color:#4070a0">&amp;#39;Spoon&amp;#39;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Tick: Spoon&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Call method that exists only in Superhero&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sup&lt;span style="color:#666">.&lt;/span>boast() &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; I wield the power of super strength!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; I wield the power of bulletproofing!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Inherited class attribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sup&lt;span style="color:#666">.&lt;/span>age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">31&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>age) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 31&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Attribute that only exists within Superhero&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;Am I Oscar eligible? &amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020">str&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>movie))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 6.2 Multiple Inheritance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Another class definition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># bat.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Bat&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> species &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Baty&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, can_fly&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>fly &lt;span style="color:#666">=&lt;/span> can_fly
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This class also has a say method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">say&lt;/span>(self, msg):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;... ... ...&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> msg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># And its own method as well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">sonar&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#39;))) ... (((&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> __name__ &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#666">=&lt;/span> Bat()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(b&lt;span style="color:#666">.&lt;/span>say(&lt;span style="color:#4070a0">&amp;#39;hello&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(b&lt;span style="color:#666">.&lt;/span>fly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># And yet another class definition that inherits from Superhero and Bat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># superhero.py&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">superhero&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> Superhero
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">bat&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> Bat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Define Batman as a child that inherits from both Superhero and Bat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Batman&lt;/span>(Superhero, Bat):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, &lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Typically to inherit attributes you have to call super:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># super(Batman, self).__init__(*args, **kwargs)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># However we are dealing with multiple inheritance here, and super()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># only works with the next base class in the MRO list.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># So instead we explicitly call __init__ for all ancestors.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># The use of *args and **kwargs allows for a clean way to pass arguments,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># with each parent &amp;#34;peeling a layer of the onion&amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Superhero&lt;span style="color:#666">.&lt;/span>__init__(self, &lt;span style="color:#4070a0">&amp;#39;anonymous&amp;#39;&lt;/span>, movie&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> superpowers&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#4070a0">&amp;#39;Wealthy&amp;#39;&lt;/span>], &lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Bat&lt;span style="color:#666">.&lt;/span>__init__(self, &lt;span style="color:#666">*&lt;/span>args, can_fly&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">False&lt;/span>, &lt;span style="color:#666">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># override the value for the name attribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Sad Affleck&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">sing&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#39;nan nan nan nan nan batman!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> __name__ &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sup &lt;span style="color:#666">=&lt;/span> Batman()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Get the Method Resolution search Order used by both getattr() and super().&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This attribute is dynamic and can be updated&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(Batman&lt;span style="color:#666">.&lt;/span>__mro__) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; (&amp;lt;class &amp;#39;__main__.Batman&amp;#39;&amp;gt;,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;lt;class &amp;#39;superhero.Superhero&amp;#39;&amp;gt;,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;lt;class &amp;#39;human.Human&amp;#39;&amp;gt;,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; &amp;lt;class &amp;#39;bat.Bat&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;object&amp;#39;&amp;gt;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calls parent method but uses its own class attribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>get_species()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Superhuman&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calls overridden method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>sing()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; nan nan nan nan nan batman!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calls method from Human, because inheritance order matters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sup&lt;span style="color:#666">.&lt;/span>say(&lt;span style="color:#4070a0">&amp;#39;I agree&amp;#39;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Sad Affleck: I agree&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Call method that exists only in 2nd ancestor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>sonar()) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; ))) ... (((&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Inherited class attribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sup&lt;span style="color:#666">.&lt;/span>age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>age) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Inherited attribute from 2nd ancestor whose default value was overridden.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;Can I fly? &amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020">str&lt;/span>(sup&lt;span style="color:#666">.&lt;/span>fly)) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; Can I fly? False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">## 7. Advanced&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">####################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Generators help you make lazy code.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">double_numbers&lt;/span>(iterable):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> iterable:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">yield&lt;/span> i &lt;span style="color:#666">+&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Generators are memory-efficient because they only load the data needed to&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># process the next value in the iterable. This allows them to perform&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># operations on otherwise prohibitively large value ranges.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># NOTE: `range` replaces `xrange` in Python 3.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> double_numbers(&lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">900000000&lt;/span>)): &lt;span style="color:#60a0b0;font-style:italic"># `range` is a generator.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> i &lt;span style="color:#666">&amp;gt;=&lt;/span> &lt;span style="color:#40a070">30&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Just as you can create a list comprehension, you can create generator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># comprehensions as well.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>values &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#666">-&lt;/span>x &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">2&lt;/span>,&lt;span style="color:#40a070">3&lt;/span>,&lt;span style="color:#40a070">4&lt;/span>,&lt;span style="color:#40a070">5&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(x) &lt;span style="color:#60a0b0;font-style:italic"># prints -1 -2 -3 -4 -5 to console/terminal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># You can also cast a generator comprehension directly to a list.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>values &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#666">-&lt;/span>x &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">2&lt;/span>,&lt;span style="color:#40a070">3&lt;/span>,&lt;span style="color:#40a070">4&lt;/span>,&lt;span style="color:#40a070">5&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gen_to_list &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">list&lt;/span>(values)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(gen_to_list) &lt;span style="color:#60a0b0;font-style:italic"># =&amp;gt; [-1, -2, -3, -4, -5]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Decorators&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># In this example `beg` wraps `say`. If say_please is True then it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># will change the returned message.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">functools&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> wraps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">beg&lt;/span>(target_function):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@wraps&lt;/span>(target_function)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">wrapper&lt;/span>(&lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg, say_please &lt;span style="color:#666">=&lt;/span> target_function(&lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> say_please:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0"> &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>format(msg, &lt;span style="color:#4070a0">&amp;#34;Please! I am poor :(&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> msg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> wrapper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@beg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">say&lt;/span>(say_please&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">False&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Can you buy me a beer?&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> msg, say_please
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(say()) &lt;span style="color:#60a0b0;font-style:italic"># Can you buy me a beer?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(say(say_please&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>)) &lt;span style="color:#60a0b0;font-style:italic"># Can you buy me a beer? Please! I am poor :(&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Top Docker Commands</title><link>https://romankurnovskii.com/en/posts/docker-commands/</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/docker-commands/</guid><description>&lt;h2 id="most-popular">most popular&lt;/h2>
&lt;pre>&lt;code>docker images ## lists the images
docker pull imagename ## Pull an image or a repository from a registry
docker ps -a ## See a list of all containers, even the ones not running
docker build -t imagename . ## Create image using this directory's Dockerfile
docker run -p 4000:80 imagename ## Run &amp;quot;imagename&amp;quot; mapping port 4000 to 80
docker rmi ## removes the image
docker rm ## removes the container
docker stop ## stops the container
docker volume ls ## lists the volumes
docker kill ## kills the container
docker logs ## see logs
docker inspect ## shows all the info of a container
&lt;/code>&lt;/pre>
&lt;h2 id="docker">docker&lt;/h2>
&lt;pre>&lt;code>docker cp ## Copy files/folders between a container and the local filesystem
docker pull imagename ## Pull an image or a repository from a registry
docker build -t imagename . ## Create image using this directory's Dockerfile
docker run -p 4000:80 imagename ## Run &amp;quot;imagename&amp;quot; mapping port 4000 to 80
docker run -d -p 4000:80 imagename ## Same thing, but in detached mode
docker exec -it [container-id] bash ## Enter a running container
docker ps ## See a list of all running containers
docker stop &amp;lt;hash&amp;gt; ## Gracefully stop the specified container
docker ps -a ## See a list of all containers, even the ones not running
docker kill &amp;lt;hash&amp;gt; ## Force shutdown of the specified container
docker rm &amp;lt;hash&amp;gt; ## Remove the specified container from this machine
docker rm -f &amp;lt;hash&amp;gt; ## Remove force specified container from this machine
docker rm $(docker ps -a -q) ## Remove all containers from this machine
docker images -a ## Show all images on this machine
docker rmi &amp;lt;imagename&amp;gt; ## Remove the specified image from this machine
docker rmi $(docker images -q) ## Remove all images from this machine
docker top &amp;lt;container-id&amp;gt; ## Display the running processes of a container
docker logs &amp;lt;container-id&amp;gt; -f ## Live tail a container's logs
docker login ## Log in this CLI session using your Docker credentials
docker tag &amp;lt;image&amp;gt; username/repository:tag ## Tag &amp;lt;image&amp;gt; for upload to registry
docker push username/repository:tag ## Upload tagged image to registry
docker run username/repository:tag ## Run image from a registry
docker system prune ## Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes. (Docker 17.06.1-ce and superior)
docker system prune -a ## Remove all unused containers, networks, images not just dangling ones (Docker 17.06.1-ce and superior)
docker volume prune ## Remove all unused local volumes
docker network prune ## Remove all unused networks
&lt;/code>&lt;/pre>
&lt;h2 id="docker-compose">docker compose&lt;/h2>
&lt;pre>&lt;code>docker-compose up # Create and start containers
docker-compose up -d # Create and start containers in detached mode
docker-compose down # Stop and remove containers, networks, images, and volumes
docker-compose logs # View output from containers
docker-compose restart # Restart all service
docker-compose pull # Pull all image service
docker-compose build # Build all image service
docker-compose config # Validate and view the Compose file
docker-compose scale &amp;lt;service_name&amp;gt;=&amp;lt;replica&amp;gt; # Scale special service(s)
docker-compose top # Display the running processes
docker-compose run -rm -p 2022:22 web bash # Start web service and runs bash as its command, remove old container.
&lt;/code>&lt;/pre>
&lt;h2 id="docker-services">docker services&lt;/h2>
&lt;pre>&lt;code>docker service create &amp;lt;options&amp;gt; &amp;lt;image&amp;gt; &amp;lt;command&amp;gt; # Create new service
docker service inspect --pretty &amp;lt;service_name&amp;gt; # Display detailed information Service(s)
docker service ls # List Services
docker service ps # List the tasks of Services
docker service scale &amp;lt;service_name&amp;gt;=&amp;lt;replica&amp;gt; # Scale special service(s)
docker service update &amp;lt;options&amp;gt; &amp;lt;service_name&amp;gt; # Update Service options
&lt;/code>&lt;/pre>
&lt;h2 id="docker-stack">docker stack&lt;/h2>
&lt;pre>&lt;code>docker stack ls # List all running applications on this Docker host
docker stack deploy -c &amp;lt;composefile&amp;gt; &amp;lt;appname&amp;gt; # Run the specified Compose file
docker stack services &amp;lt;appname&amp;gt; # List the services associated with an app
docker stack ps &amp;lt;appname&amp;gt; # List the running containers associated with an app
docker stack rm &amp;lt;appname&amp;gt; # Tear down an application
&lt;/code>&lt;/pre>
&lt;h2 id="docker-machine">docker machine&lt;/h2>
&lt;pre>&lt;code>docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)
docker-machine create -d hyperv --hyperv-virtual-switch &amp;quot;myswitch&amp;quot; myvm1 # Win10
docker-machine env myvm1 # View basic information about your node
docker-machine ssh myvm1 &amp;quot;docker node ls&amp;quot; # List the nodes in your swarm
docker-machine ssh myvm1 &amp;quot;docker node inspect &amp;lt;node ID&amp;gt;&amp;quot; # Inspect a node
docker-machine ssh myvm1 &amp;quot;docker swarm join-token -q worker&amp;quot; # View join token
docker-machine ssh myvm1 # Open an SSH session with the VM; type &amp;quot;exit&amp;quot; to end
docker-machine ssh myvm2 &amp;quot;docker swarm leave&amp;quot; # Make the worker leave the swarm
docker-machine ssh myvm1 &amp;quot;docker swarm leave -f&amp;quot; # Make master leave, kill swarm
docker-machine start myvm1 # Start a VM that is currently not running
docker-machine stop $(docker-machine ls -q) # Stop all running VMs
docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images
docker-machine scp docker-compose.yml myvm1:~ # Copy file to node's home dir
docker-machine ssh myvm1 &amp;quot;docker stack deploy -c &amp;lt;file&amp;gt; &amp;lt;app&amp;gt;&amp;quot; # Deploy an app
&lt;/code>&lt;/pre>
&lt;h2 id="options-for-popular-commands">Options for popular commands&lt;/h2>
&lt;h3 id="docker-build">docker build&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/build/">Docs&lt;/a>
Build an image from a Dockerfile.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker build &lt;span style="color:#666">[&lt;/span>DOCKERFILE PATH&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Example&lt;/strong>&lt;/p>
&lt;p>Build an image tagged &lt;code>my-org/my-image&lt;/code> where the Dockerfile can be found at
&lt;code>/tmp/Dockerfile&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker build -t my-org:my-image -f /tmp/Dockerfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>--file -f&lt;/code> Path where to find the Dockerfile&lt;/li>
&lt;li>&lt;code>--force-rm&lt;/code> Always remove intermediate containers&lt;/li>
&lt;li>&lt;code>--no-cache&lt;/code> Do not use cache when building the image&lt;/li>
&lt;li>&lt;code>--rm&lt;/code> Remove intermediate containers after a successful build (this is
&lt;code>true&lt;/code>) by default&lt;/li>
&lt;li>&lt;code>--tag -t&lt;/code> Name and optionally a tag in the ‘name:tag’ format&lt;/li>
&lt;/ul>
&lt;h3 id="docker-run">docker run&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/run/">Docs&lt;/a>&lt;/p>
&lt;p>Creates and starts a container in one operation. Could be used to execute a
single command as well as start a long-running container.&lt;/p>
&lt;p>&lt;strong>Example&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run -it ubuntu:latest /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will start a ubuntu container with the entrypoint &lt;code>/bin/bash&lt;/code>. Note that
if you do not have the &lt;code>ubuntu&lt;/code> image downloaded it will download it before
running it.&lt;/p>
&lt;ul>
&lt;li>&lt;code>-it&lt;/code> This will not make the container you started shut down immediately, as
it will create a pseudo-TTY session (&lt;code>-t&lt;/code>) and keep STDIN open (&lt;code>-i&lt;/code>)&lt;/li>
&lt;li>&lt;code>--rm&lt;/code> Automatically remove the container when it exit. Otherwise it will be
stored and visible running &lt;code>docker ps -a&lt;/code>.&lt;/li>
&lt;li>&lt;code>--detach -d&lt;/code> Run container in background and print container ID&lt;/li>
&lt;li>&lt;code>--volume -v&lt;/code> Bind mount a volume. Useful for accessing folders on your local
disk inside your docker container, like configuration files or storage that
should be persisted (database, logs etc.).&lt;/li>
&lt;/ul>
&lt;h3 id="docker-exec">docker exec&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/exec/">Docs&lt;/a>&lt;/p>
&lt;p>Execute a command inside a &lt;strong>running&lt;/strong> container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#007020">exec&lt;/span> &lt;span style="color:#666">[&lt;/span>CONTAINER ID&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Example&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#007020">exec&lt;/span> &lt;span style="color:#666">[&lt;/span>CONTAINER ID&lt;span style="color:#666">]&lt;/span> touch /tmp/exec_works
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>--detach -d&lt;/code> Detached mode: run command in the background&lt;/li>
&lt;li>&lt;code>-it&lt;/code> This will not make the container you started shut down immediately, as
it will create a pseudo-TTY session (&lt;code>-t&lt;/code>) and keep STDIN open (&lt;code>-i&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h3 id="docker-images">docker images&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/images/">Docs&lt;/a>&lt;/p>
&lt;p>List all downloaded/created images.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker images
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-q&lt;/code> Only show numeric IDs&lt;/li>
&lt;/ul>
&lt;h3 id="docker-inspect">docker inspect&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/inspect">Docs&lt;/a>&lt;/p>
&lt;p>Shows all the info of a container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker inspect &lt;span style="color:#666">[&lt;/span>CONTAINER ID&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="docker-logs">docker logs&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/logs/">Docs&lt;/a>&lt;/p>
&lt;p>Gets logs from container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker logs &lt;span style="color:#666">[&lt;/span>CONTAINER ID&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>--details&lt;/code> Log extra details&lt;/li>
&lt;li>&lt;code>--follow -f&lt;/code> Follow log output. Do not stop when end of file is reached, but
rather wait for additional data to be appended to the input.&lt;/li>
&lt;li>&lt;code>--timestamps -t&lt;/code> Show timestamps&lt;/li>
&lt;/ul>
&lt;h3 id="docker-ps">docker ps&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/ps/">Docs&lt;/a>&lt;/p>
&lt;p>Shows information about all running containers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker ps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>--all -a&lt;/code> Show all containers (default shows just running)&lt;/li>
&lt;li>&lt;code>--filter -f&lt;/code> Filter output based on conditions provided, &lt;code>docker ps -f=&amp;quot;name=&amp;quot;example&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>--quiet -q&lt;/code> Only display numeric IDs&lt;/li>
&lt;/ul>
&lt;h3 id="docker-rmi">docker rmi&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/rmi/">Docs&lt;/a>&lt;/p>
&lt;p>Remove one or more images.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker rmi &lt;span style="color:#666">[&lt;/span>IMAGE ID&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>--force -f&lt;/code> Force removal of the image&lt;/li>
&lt;/ul>
&lt;h2 id="snippets">Snippets&lt;/h2>
&lt;p>A collection of useful tips and tricks for Docker.&lt;/p>
&lt;h3 id="delete-all-containers">Delete all containers&lt;/h3>
&lt;p>&lt;strong>NOTE:&lt;/strong> This will remove ALL your containers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker container prune
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OR, if you&amp;rsquo;re using an older docker client:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker rm &lt;span style="color:#007020;font-weight:bold">$(&lt;/span>docker ps -a -q&lt;span style="color:#007020;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="delete-all-untagged-containers">Delete all untagged containers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker image prune
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OR, if you&amp;rsquo;re using an older docker client:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker rmi &lt;span style="color:#007020;font-weight:bold">$(&lt;/span>docker images | grep &lt;span style="color:#4070a0">&amp;#39;^&amp;lt;none&amp;gt;&amp;#39;&lt;/span> | awk &lt;span style="color:#4070a0">&amp;#39;{print $3}&amp;#39;&lt;/span>&lt;span style="color:#007020;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="remove-all-images">Remove all images&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker rmi --force &lt;span style="color:#007020;font-weight:bold">$(&lt;/span>docker images -q&lt;span style="color:#007020;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="remove-all-docker-images-with-none-tag">Remove all docker images with none tag&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker rmi --force &lt;span style="color:#007020;font-weight:bold">$(&lt;/span>docker images --filter &lt;span style="color:#4070a0">&amp;#34;dangling=true&amp;#34;&lt;/span> -q&lt;span style="color:#007020;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-all-space-docker-take-up">See all space Docker take up&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker system df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="get-ip-address-of-running-container">Get IP address of running container&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker inspect &lt;span style="color:#666">[&lt;/span>CONTAINER ID&lt;span style="color:#666">]&lt;/span> | grep -wm1 IPAddress | cut -d &lt;span style="color:#4070a0">&amp;#39;&amp;#34;&amp;#39;&lt;/span> -f &lt;span style="color:#40a070">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="kill-all-running-containers">Kill all running containers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#007020">kill&lt;/span> &lt;span style="color:#007020;font-weight:bold">$(&lt;/span>docker ps -q&lt;span style="color:#007020;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="resources">Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/reference/run/">docs.docker.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/wsargent/docker-cheat-sheet">docker-cheat-sheet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/LeCoupa/awesome-cheatsheets/blob/master/tools/docker.sh">docker-cheat-sheet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sourabhbajaj.com/mac-setup/Docker/">https://sourabhbajaj.com/mac-setup/Docker/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Tar command Cheat Sheet</title><link>https://romankurnovskii.com/en/posts/cheat-sheet-command-tar/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/cheat-sheet-command-tar/</guid><description>&lt;h2 id="common-options">Common options&lt;/h2>
&lt;pre>&lt;code>z compress with gzip
c create an archive
u append files which are newer than
the corresponding copy ibn the archive
f filename of the archive
v verbose, display what is inflated or deflated
a unlike of z, determine compression based on file extension
&lt;/code>&lt;/pre>
&lt;h2 id="create-tar-named-archivetar-containing-directory">Create tar named archive.tar containing directory&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar cf archive.tar /path/files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="concatenate-files-into-a-single-tar">Concatenate files into a single tar&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar -cf archive.tar /path/files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="extract-the-contents-from-archivetar">Extract the contents from archive.tar&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar xf archive.tar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-a-gzip-compressed-tar-file-name-archivetargz">Create a gzip compressed tar file name archive.tar.gz&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar czf archive.tar.gz /path/files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="extract-a-gzip-compressed-tar-file">Extract a gzip compressed tar file&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar xzf archive.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="create-a-tar-file-with-bzip2-compression">Create a tar file with bzip2 compression&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar cjf archive.tar.bz2 /path/files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="extract-a-bzip2-compressed-tar-file">Extract a bzip2 compressed tar file&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar xjf archive.tar.bz2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="list-content-of-tar-file">List content of tar file&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar -tvf archive.tar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>