<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/tags/javascript/</link><description>Recent content in Javascript on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2025</copyright><lastBuildDate>Mon, 13 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Solana SDK migration Guide (v1 → @solana/web3.js 2.x)</title><link>https://romankurnovskii.com/en/posts/solana-migration-v1-v2/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/solana-migration-v1-v2/</guid><description>&lt;p>The 2.x SDK leverages modern TypeScript features for enhanced type-safety, this means you get:&lt;/p>
&lt;ul>
&lt;li>More compile-time errors and fewer run time errors&lt;/li>
&lt;li>Improved IDE completions and IntelliSense&lt;/li>
&lt;li>Harder for bugs and mistakes to make it to production&lt;/li>
&lt;/ul>
&lt;p>Following incidents will result in type errors:&lt;/p>
&lt;ul>
&lt;li>Transaction missing a blockhash&lt;/li>
&lt;li>Transaction missing a signature&lt;/li>
&lt;li>Instruction missing an account&lt;/li>
&lt;li>Lookup tables passed in legacy transactions&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install --save @solana/web3.js@next
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># This repository has been archived by the owner on Jan 10, 2025. Could be skipped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install --save @solana/spl-token@latest &lt;span style="color:#60a0b0;font-style:italic"># seems next point to an old version&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="types">Types&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>Finality &lt;span style="color:#666">-&amp;gt;&lt;/span> Commitment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>connection: &lt;span style="color:#902000">Connection&lt;/span> &lt;span style="color:#666">-&amp;gt;&lt;/span> rpc: &lt;span style="color:#902000">ReturnType&lt;/span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">typeof&lt;/span> &lt;span style="color:#4070a0">createSolanaRpc&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">-&amp;gt;&lt;/span> rpcSubscriptions: &lt;span style="color:#902000">ReturnType&lt;/span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">typeof&lt;/span> &lt;span style="color:#4070a0">rpcSubscriptions&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>V1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>connection: &lt;span style="color:#902000">Connection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> connection &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> Connection(process.env.RPC_URL&lt;span style="color:#666">!&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wsEndpoint: &lt;span style="color:#902000">process.env.RPC_WSS_URL&lt;/span>&lt;span style="color:#666">!&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commitment&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#39;confirmed&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>V2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>rpc: &lt;span style="color:#902000">ReturnType&lt;/span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">typeof&lt;/span> &lt;span style="color:#4070a0">createSolanaRpc&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> rpc &lt;span style="color:#666">=&lt;/span> createSolanaRpc(process.env.RPC_URL&lt;span style="color:#666">!&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> rpcSubscriptions &lt;span style="color:#666">=&lt;/span> createSolanaRpcSubscriptions(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process.env.RPC_WSS_URL&lt;span style="color:#666">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>V1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> owner: &lt;span style="color:#902000">Keypair&lt;/span> &lt;span style="color:#666">=&lt;/span> Keypair.fromSecretKey(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bs58.decode(process.env.WALLET_PRIVATE_KEY&lt;span style="color:#666">!&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>owner.publicKey &lt;span style="color:#666">-&amp;gt;&lt;/span> owner.address
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>V2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> bs58 &lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#4070a0">&amp;#39;bs58&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> { createKeyPairSignerFromBytes, KeyPairSigner } &lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#4070a0">&amp;#39;@solana/web3.js&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> owner: &lt;span style="color:#902000">KeyPairSigner&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> createKeyPairSignerFromBytes(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bs58.decode(process.env.WALLET_PRIVATE_KEY&lt;span style="color:#666">!&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>V1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>await connection.getAccountInfo(owner.publicKey)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>await connection.getTokenAccountsByOwner(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> owner.address,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { programId: TOKEN_PROGRAM_ID }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>V2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>await rpc.getAccountInfo(owner.address).send();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>await rpc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .getTokenAccountsByOwner(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> owner.address,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { programId: address(TOKEN_PROGRAM_ID.toBase58()) },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { commitment: &amp;#39;confirmed&amp;#39; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .send();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="send-transactions">Send transactions&lt;/h2>
&lt;p>V2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">//&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#bbb"> &lt;/span>Crete&lt;span style="color:#bbb"> &lt;/span>function&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">`&lt;/span>sendAndConfirmTransaction&lt;span style="color:#666">`&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#666">//&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#40a070">2&lt;/span>&lt;span style="color:#bbb"> &lt;/span>Setup&lt;span style="color:#bbb"> &lt;/span>lifetime&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span>&lt;span style="color:#bbb"> &lt;/span>a&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">transaction&lt;/span>&lt;span style="color:#bbb"> &lt;/span>(Every&lt;span style="color:#bbb"> &lt;/span>transaction&lt;span style="color:#bbb"> &lt;/span>needs&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">to&lt;/span>&lt;span style="color:#bbb"> &lt;/span>specify&lt;span style="color:#bbb"> &lt;/span>a&lt;span style="color:#bbb"> &lt;/span>valid&lt;span style="color:#bbb"> &lt;/span>lifetime&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span>&lt;span style="color:#bbb"> &lt;/span>it&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">to&lt;/span>&lt;span style="color:#bbb"> &lt;/span>be&lt;span style="color:#bbb"> &lt;/span>accepted&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span>&lt;span style="color:#bbb"> &lt;/span>execution&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">on&lt;/span>&lt;span style="color:#bbb"> &lt;/span>the&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">*&lt;/span>&lt;span style="color:#bbb"> &lt;/span>network.)&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#666">//&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#40a070">3&lt;/span>&lt;span style="color:#bbb"> &lt;/span>Crete&lt;span style="color:#bbb"> &lt;/span>transaction&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#666">//&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>const&lt;span style="color:#bbb"> &lt;/span>sendAndConfirmTransaction&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">sendAndConfirmTransactionFactory&lt;/span>(&lt;span style="">{&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#60a0b0;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"> * The RPC implements a `sendTransaction` method which relays transactions to the network.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"> */&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>rpc,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#60a0b0;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"> * RPC subscriptions allow the transaction sender to subscribe to the status of our transaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"> * The sender will resolve when the transaction is reported to have been confirmed, or will
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"> * reject in the event of an error, or a timeout if the transaction lifetime is thought to have
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"> * expired.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"> */&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>rpcSubscriptions,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="">}&lt;/span>);&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>const&lt;span style="color:#bbb"> &lt;/span>&lt;span style="">{&lt;/span>&lt;span style="color:#bbb"> &lt;/span>value:&lt;span style="color:#bbb"> &lt;/span>latestBlockhash&lt;span style="color:#bbb"> &lt;/span>&lt;span style="">}&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#bbb"> &lt;/span>await&lt;span style="color:#bbb"> &lt;/span>rpc.&lt;span style="color:#06287e">getLatestBlockhash&lt;/span>().&lt;span style="color:#06287e">send&lt;/span>();&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>const&lt;span style="color:#bbb"> &lt;/span>transactionMessage&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">pipe&lt;/span>(&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">createTransactionMessage&lt;/span>(&lt;span style="">{&lt;/span>&lt;span style="color:#bbb"> &lt;/span>version:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#40a070">0&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="">}&lt;/span>),&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>tx&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">=&amp;gt;&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">setTransactionMessageFeePayer&lt;/span>(FEE_PAYER_ADDRESS,&lt;span style="color:#bbb"> &lt;/span>tx),&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>tx&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">=&amp;gt;&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">setTransactionMessageLifetimeUsingBlockhash&lt;/span>(latestBlockhash,&lt;span style="color:#bbb"> &lt;/span>tx),&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>tx&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">=&amp;gt;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">appendTransactionMessageInstructions&lt;/span>(&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>[&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">getTransferSolInstruction&lt;/span>(&lt;span style="">{&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>amount:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">lamports&lt;/span>(&lt;span style="color:#40a070">12345678&lt;/span>n),&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>destination:&lt;span style="color:#bbb"> &lt;/span>DESTINATION_ADDRESS,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>source:&lt;span style="color:#bbb"> &lt;/span>SOURCE_ACCOUNT_SIGNER,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="">}&lt;/span>),&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#06287e">getAddMemoInstruction&lt;/span>(&lt;span style="">{&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>memo:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#4070a0">&amp;#39;hello from @solana/web3.js&amp;#39;&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="">}&lt;/span>),&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>],&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>tx,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>),&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>);&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="errors">Errors&lt;/h2>
&lt;blockquote>
&lt;blockquote>
&lt;p>SolanaError: JSON-RPC error: The JSON sent is not a valid &lt;code>Request&lt;/code> object (Encoded binary (base 58) data should be less than 128 bytes, please use Base64 encoding.)&lt;/p>&lt;/blockquote>&lt;/blockquote>
&lt;p>Fix by adding encoding:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encoding&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#39;base64&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> tokenAccountsResponse &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> connection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .getTokenAccountsByOwner(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ownerPublicKey,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> programId: &lt;span style="color:#902000">address&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encoding&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#39;base64&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .send();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> tokenAccountsResponse &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> connection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .getTokenAccountsByOwner(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ownerPublicKey,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> programId: &lt;span style="color:#902000">address&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encoding&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#39;jsonParsed&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .send();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Telegram bot with Google Apps Script (GAS)</title><link>https://romankurnovskii.com/en/posts/howto-setup-telegram-bot-and-google-apps-script/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-setup-telegram-bot-and-google-apps-script/</guid><description>&lt;h2 id="1-set-up-the-telegram-bot">1. Set Up the Telegram Bot&lt;/h2>
&lt;ul>
&lt;li>Use the &lt;a href="https://t.me/botfather">BotFather&lt;/a> on Telegram to create a new bot.&lt;/li>
&lt;li>Get your HTTP API token.&lt;/li>
&lt;/ul>
&lt;h2 id="2-google-apps-script-code">2. Google Apps Script Code&lt;/h2>
&lt;p>Google Apps Script for a Telegram bot:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> TOKEN &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;YOUR_TELEGRAM_BOT_TOKEN&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> WEBHOOK_URL &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;YOUR_WEB_APP_URL&amp;#39;&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// web app URL of your GAS deployment.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> USERS_SPREAD_SHEET_NAME&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#39;usersAnswers&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> COLUMN_STEP_1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;E&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> COLUMN_STEP_2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;F&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> COLUMN_DATE &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;A&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> setWebhook() { &lt;span style="color:#60a0b0;font-style:italic">// run after every deploy and updated WEBHOOK_URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> url &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;https://api.telegram.org/bot&amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> TOKEN &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;/setWebhook?url=&amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> WEBHOOK_URL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UrlFetchApp.fetch(url);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> doPost(e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> data &lt;span style="color:#666">=&lt;/span> JSON.parse(e.postData.contents);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> message &lt;span style="color:#666">=&lt;/span> data.message.text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> chatId &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">String&lt;/span>(data.message.chat.id);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> name &lt;span style="color:#666">=&lt;/span> data.message.chat.first_name &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> data.message.chat.last_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> userData &lt;span style="color:#666">=&lt;/span> data.message.from
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> propertiesService &lt;span style="color:#666">=&lt;/span> PropertiesService.getScriptProperties()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> chatDialogStatus &lt;span style="color:#666">=&lt;/span> propertiesService.getProperty(chatId)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> msg &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> COMMANDS &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;\n/start\n/about\n/stat\n/add\n/show\n/pause\n/request&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (message &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#4070a0">&amp;#39;/start&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> propertiesService.deleteProperty(chatId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveRequestToSpreadsheet(userData, message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Choose an action:&amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> COMMANDS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (message &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#4070a0">&amp;#39;/add&amp;#39;&lt;/span>) { &lt;span style="color:#60a0b0;font-style:italic">// Will be in two steps (requests from user)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> propertiesService.setProperty(chatId, &lt;span style="color:#4070a0">&amp;#39;WAITING_FOR_ADD_STEP_1&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updateChatText(userData, &lt;span style="color:#007020">Date&lt;/span>.now().toLocaleString(), COLUMN_DATE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Step 1. Send first value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (chatDialogStatus &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;WAITING_FOR_ADD_STEP_1&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updateChatText(userData, message, COLUMN_STEP_1); &lt;span style="color:#60a0b0;font-style:italic">// Save to spreadsheet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> propertiesService.setProperty(chatId, &lt;span style="color:#4070a0">&amp;#39;WAITING_FOR_ADD_STEP_2&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Step 2. Send second value&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (chatDialogStatus &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#4070a0">&amp;#39;WAITING_FOR_ADD_STEP_2&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> propertiesService.deleteProperty(chatId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updateChatText(userData, message, COLUMN_STEP_2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Done. Two values saved in different columns&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#007020;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> propertiesService.deleteProperty(chatId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveRequestToSpreadsheet(userData, message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Hello &amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> name &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39; id: &amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> chatId &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;\nYour text:\n&amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> message
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;\nPossible commands:&amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> COMMANDS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#007020;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msg &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;\n Error: &amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> e &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;\nStatus: &amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> chatDialogStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sendToTGM(chatId, msg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> sendTelegramMessage(chatId, text) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> apiUrl &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;https://api.telegram.org/bot&amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> TOKEN &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39;/sendMessage&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> payload &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#39;method&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#39;post&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#39;payload&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#39;chat_id&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span> chatId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#39;text&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020">String&lt;/span>(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UrlFetchApp.fetch(apiUrl, payload);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> saveToSpreadsheet(userData, text) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> spreadsheet &lt;span style="color:#666">=&lt;/span> SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SPREAD_SHEET_NAME);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spreadsheet.appendRow([userData.id, userData.first_name, userData.last_name, userData.username, text]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> getAllSessionsForUser(userData) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> spreadsheet &lt;span style="color:#666">=&lt;/span> SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SPREAD_SHEET_NAME);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> rows &lt;span style="color:#666">=&lt;/span> spreadsheet.getDataRange().getValues();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> sessions &lt;span style="color:#666">=&lt;/span> [];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> rows.length; i&lt;span style="color:#666">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (rows[i][&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#666">===&lt;/span> userData.id) { &lt;span style="color:#60a0b0;font-style:italic">// If user id matches
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> sessions.push(rows[i][&lt;span style="color:#40a070">4&lt;/span>]); &lt;span style="color:#60a0b0;font-style:italic">// Assuming answer to question 1 is in the 5th column
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> sessions;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// helpers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> updateChatText(userData, text, column) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> sheet &lt;span style="color:#666">=&lt;/span> SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SPREAD_SHEET_NAME);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> data &lt;span style="color:#666">=&lt;/span> sheet.getDataRange().getValues();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> rowIndex &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> data.length; i&lt;span style="color:#666">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (data[i][&lt;span style="color:#40a070">0&lt;/span>] &lt;span style="color:#666">==&lt;/span> userData.id) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rowIndex &lt;span style="color:#666">=&lt;/span> i &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Adding 1 to convert index to row number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> columnNumber &lt;span style="color:#666">=&lt;/span> column.charCodeAt(&lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">65&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Convert column letter to number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (rowIndex &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sheet.getRange(rowIndex, columnNumber).setValue(text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Logger.log(&lt;span style="color:#4070a0">&amp;#34;Text updated successfully.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#007020;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Logger.log(&lt;span style="color:#4070a0">&amp;#34;ChatId not found. Creating new.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveToSpreadsheet(userData, text, columnNumber)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-as-web-app">Deploy as Web App&lt;/h2>
&lt;ul>
&lt;li>Click on the cloud icon in GAS to &amp;ldquo;Deploy&amp;rdquo; &amp;gt; &amp;ldquo;New Deployment&amp;rdquo;.&lt;/li>
&lt;li>Choose type as &amp;ldquo;Web app&amp;rdquo;.&lt;/li>
&lt;li>Set permissions and deploy.&lt;/li>
&lt;li>You will get a URL (This is what you&amp;rsquo;ll use as WEB_APP_URL in the above code).&lt;/li>
&lt;/ul>
&lt;h2 id="run-setwebhook-function">Run setWebhook() Function&lt;/h2>
&lt;ul>
&lt;li>This tells Telegram where your bot&amp;rsquo;s web app is hosted.&lt;/li>
&lt;/ul>
&lt;h2 id="bot-commands">Bot Commands&lt;/h2>
&lt;p>After you&amp;rsquo;ve done the above, you can send /start to your bot, and it should respond with the options.&lt;/p></description></item><item><title>JavaScript: convert array of objects to dictionary</title><link>https://romankurnovskii.com/en/posts/js-convert-array-to-dict/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/js-convert-array-to-dict/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">type&lt;/span> ObjectWithKeyName &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [key: &lt;span style="color:#902000">string&lt;/span>]&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#902000">any&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// transform array of objects to dict
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// use object provided keyName as a key of dict
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// expected for each object in array this keyName value is unique
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> transformArrayToDict &lt;span style="color:#666">=&lt;/span> (objects: &lt;span style="color:#902000">ObjectWithKeyName&lt;/span>[], keyName: &lt;span style="color:#902000">string&lt;/span>) &lt;span style="color:#666">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> res: &lt;span style="color:#902000">ObjectWithKeyName&lt;/span> &lt;span style="color:#666">=&lt;/span> {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> objects.forEach((obj) &lt;span style="color:#666">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res[obj[keyName]] &lt;span style="color:#666">=&lt;/span> obj;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How to publish JavaScript package to npm registry</title><link>https://romankurnovskii.com/en/posts/howto-publish-js-npm-project/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-publish-js-npm-project/</guid><description>&lt;p>In this post, we&amp;rsquo;ll dive deeper into the process of creating, structuring, and publishing a JavaScript package to the npm registry. We&amp;rsquo;ll use the repository &lt;a href="https://github.com/romankurnovskii/npm-js-package-template">https://github.com/romankurnovskii/npm-js-package-template&lt;/a> as a reference for this guide.&lt;/p>
&lt;h2 id="tldr">TLDR&lt;/h2>
&lt;ol>
&lt;li>Open template: &lt;a href="https://github.com/romankurnovskii/npm-js-package-template">https://github.com/romankurnovskii/npm-js-package-template&lt;/a>&lt;/li>
&lt;li>Click &lt;code>Use this template&lt;/code>&lt;/li>
&lt;li>Create repo from this template.&lt;/li>
&lt;li>git clone new repo&lt;/li>
&lt;li>update code &lt;code>src/index.ts&lt;/code>, &lt;code>src/bin.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>How to check if &lt;code>bin&lt;/code> script works from terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm link &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> npm link mypackage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mypackage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Publish:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm run prepublishOnly
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="folder-structure">Folder Structure&lt;/h2>
&lt;p>Let&amp;rsquo;s go through the folder structure of the repository:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>.eslintignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.eslintrc.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.gitattributes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.npmrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.prettierrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── .github
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── dependabot.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── workflows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── create-release.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── test-environments.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── CHANGELOG.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── LICENSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── jestconfig.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── package.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| ├── bin.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| └── index.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── tests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── index.test.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="file-descriptions">File Descriptions&lt;/h3>
&lt;ul>
&lt;li>&lt;code>.github/dependabot.yml&lt;/code>: This &lt;a href="https://github.com/romankurnovskii/npm-js-package-template/blob/main/.github/dependabot.yml">file&lt;/a> configures Dependabot for your project. Dependabot will automatically create pull requests to update your npm dependencies and GitHub Actions workflows as specified in the file.&lt;/li>
&lt;li>&lt;code>.github/workflows/create-release.yml&lt;/code>: This GitHub Actions workflow is triggered when you push to the main branch or create a release. It builds, tests, and releases your package. The workflow is configured to create a release with the version specified in &lt;code>package.json&lt;/code>.&lt;/li>
&lt;li>&lt;code>.github/workflows/test-environments.yml&lt;/code>: This GitHub Actions workflow is triggered when you push to the main branch or create a pull request. It sets up a matrix of Node.js versions (14, 16, 18) and runs the build and test steps for each version. This ensures your package works correctly across different Node.js environments.&lt;/li>
&lt;li>&lt;code>.eslintignore&lt;/code>: Specifies the files and directories that should be ignored by ESLint.&lt;/li>
&lt;li>&lt;code>.eslintrc.json&lt;/code>: Configuration file for ESLint, a popular linting tool for JavaScript.&lt;/li>
&lt;li>&lt;code>.gitattributes&lt;/code>: Specifies the attributes for paths in the repository.&lt;/li>
&lt;li>&lt;code>.gitignore&lt;/code>: Specifies the files and directories that should be ignored by Git.&lt;/li>
&lt;li>&lt;code>.npmrc&lt;/code>: Configuration file for npm, the package manager for JavaScript.&lt;/li>
&lt;li>&lt;code>.prettierrc&lt;/code>: Configuration file for Prettier, a popular code formatter for JavaScript.&lt;/li>
&lt;li>&lt;code>CHANGELOG.md&lt;/code>: A file that lists the notable changes made to the project.&lt;/li>
&lt;li>&lt;code>LICENSE&lt;/code>: The license file for the project, in this case, the MIT License.&lt;/li>
&lt;li>&lt;code>README.md&lt;/code>: The main documentation file for the project.&lt;/li>
&lt;li>&lt;code>jestconfig.json&lt;/code>: Configuration file for Jest, a popular testing framework for JavaScript.&lt;/li>
&lt;li>&lt;code>package.json&lt;/code>: Lists the project&amp;rsquo;s metadata, dependencies, and scripts.&lt;/li>
&lt;li>&lt;code>src/bin.js&lt;/code>: The main entry point for the command line interface (CLI) of the package.&lt;/li>
&lt;li>&lt;code>src/index.js&lt;/code>: The main entry point for the package when imported as a module.&lt;/li>
&lt;li>&lt;code>tests/index.test.js&lt;/code>: The test file for the package, containing test cases for the package&amp;rsquo;s functions.&lt;/li>
&lt;/ul>
&lt;h2 id="publish-to-npm">Publish to NPM&lt;/h2>
&lt;p>Before you publish the package, make sure you have followed these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Update the &lt;code>package.json&lt;/code> file with the correct name, version, description, and other metadata.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ensure your code is in the src folder, and the main entry points are &lt;code>src/index.js&lt;/code> (for modules) and &lt;code>src/bin.js&lt;/code> (for CLI).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Update the test cases in the &lt;code>tests&lt;/code> folder.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After making all the necessary updates to your package, such as updating the README.md, package.json, and other files as needed, ensure that you&amp;rsquo;ve built the package by running:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm run build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Before publishing, you should test your package and ensure that all tests pass:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm &lt;span style="color:#007020">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Also, make sure your code is properly formatted and follows the linting rules:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm run prettier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm run lint
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>If there are any linting issues, you can try to automatically fix them using:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm run lint:fix
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Once everything is set up and ready, you can publish your package to the npm registry by running:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm run prepublishOnly
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>This will build, test, and format your code, ensuring that your package is ready for publishing. Once published, your package will be available for others to install and use through the npm registry.&lt;/li>
&lt;/ol></description></item><item><title>How to publish typescript package to npm registry</title><link>https://romankurnovskii.com/en/posts/howto-publish-ts-npm-project/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-publish-ts-npm-project/</guid><description>&lt;ol>
&lt;li>Open template: &lt;a href="https://github.com/romankurnovskii/npm-typescript-package-template">https://github.com/romankurnovskii/npm-typescript-package-template&lt;/a>&lt;/li>
&lt;li>Click &lt;code>Use this template&lt;/code>&lt;/li>
&lt;li>Create repo from this template.&lt;/li>
&lt;li>git clone new repo&lt;/li>
&lt;li>update code &lt;code>src/index.ts&lt;/code>, &lt;code>src/bin.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>How to check if &lt;code>bin&lt;/code> script works from terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm link &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> npm link mypackage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mypackage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Publish:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm run prepublishOnly
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How to add copy code button on HUGO highligh code block</title><link>https://romankurnovskii.com/en/posts/hugo-add-copy-button-on-highlight-block/</link><pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/hugo-add-copy-button-on-highlight-block/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> addCopyButtonToCodeBlocks() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Get all code blocks with a class of &amp;#34;language-*&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> codeBlocks &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.querySelectorAll(&lt;span style="color:#4070a0">&amp;#39;code[class^=&amp;#34;language-&amp;#34;]&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// For each code block, add a copy button inside the block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> codeBlocks.forEach(codeBlock =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Create the copy button element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> copyButton &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createElement(&lt;span style="color:#4070a0">&amp;#39;button&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> copyButton.classList.add(&lt;span style="color:#4070a0">&amp;#39;copy-code-button&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> copyButton.innerHTML &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;lt;i class=&amp;#34;far fa-copy&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Add a click event listener to the copy button
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> copyButton.addEventListener(&lt;span style="color:#4070a0">&amp;#39;click&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Copy the code inside the code block to the clipboard
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> codeToCopy &lt;span style="color:#666">=&lt;/span> codeBlock.innerText;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> navigator.clipboard.writeText(codeToCopy);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Update the copy button text to indicate that the code has been copied
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> copyButton.innerHTML &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;lt;i class=&amp;#34;fas fa-check&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setTimeout(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> copyButton.innerHTML &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;lt;i class=&amp;#34;far fa-copy&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#40a070">1500&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Add the copy button to the code block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> codeBlock.parentNode.insertBefore(copyButton, codeBlock);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>JavaScript code snippets</title><link>https://romankurnovskii.com/en/posts/js-snippets/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/js-snippets/</guid><description>&lt;h2 id="web--browser">Web / Browser&lt;/h2>
&lt;h3 id="get-base-url">get base URL&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> getBaseURL &lt;span style="color:#666">=&lt;/span> url =&amp;gt; url.replace(&lt;span style="color:#235388">/[?#].*$/&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>getBaseURL(&lt;span style="color:#4070a0">&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// &amp;#39;http://url.com/page&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> url &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> URL(&lt;span style="color:#4070a0">&amp;#34;https://example.com/login?user=someguy&amp;amp;page=news&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url.origin &lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;https://example.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>url.host &lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;example.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>url.protocol &lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;https:&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>url.pathname &lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;/login&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>url.searchParams.get(&lt;span style="color:#4070a0">&amp;#39;user&amp;#39;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;someuser&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="get-url-parameters-as-object">get URL parameters as object&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> getURLParameters &lt;span style="color:#666">=&lt;/span> url =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (url.match(&lt;span style="color:#235388">/([^?=&amp;amp;]+)(=([^&amp;amp;]*))/g&lt;/span>) &lt;span style="color:#666">||&lt;/span> []).reduce(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (a, v) =&amp;gt; (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (a[v.slice(&lt;span style="color:#40a070">0&lt;/span>, v.indexOf(&lt;span style="color:#4070a0">&amp;#39;=&amp;#39;&lt;/span>))] &lt;span style="color:#666">=&lt;/span> v.slice(v.indexOf(&lt;span style="color:#4070a0">&amp;#39;=&amp;#39;&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>)), a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>getURLParameters(&lt;span style="color:#4070a0">&amp;#39;google.com&amp;#39;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>getURLParameters(&lt;span style="color:#4070a0">&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// {name: &amp;#39;Adam&amp;#39;, surname: &amp;#39;Smith&amp;#39;}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// One line
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020">Object&lt;/span>.fromEntries(&lt;span style="color:#4070a0">&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;&lt;/span>.split(&lt;span style="color:#4070a0">&amp;#39;?&amp;#39;&lt;/span>)[&lt;span style="color:#40a070">1&lt;/span>].split(&lt;span style="color:#4070a0">&amp;#39;&amp;amp;&amp;#39;&lt;/span>).map(x=&amp;gt;x.split(&lt;span style="color:#4070a0">&amp;#39;=&amp;#39;&lt;/span>)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="if-doc-element-contains-another-element">if DOC element contains another element&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> elementContains &lt;span style="color:#666">=&lt;/span> (parent, child) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent &lt;span style="color:#666">!==&lt;/span> child &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> parent.contains(child);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>elementContains(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">document&lt;/span>.querySelector(&lt;span style="color:#4070a0">&amp;#39;head&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">document&lt;/span>.querySelector(&lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>elementContains(&lt;span style="color:#007020">document&lt;/span>.querySelector(&lt;span style="color:#4070a0">&amp;#39;body&amp;#39;&lt;/span>), &lt;span style="color:#007020">document&lt;/span>.querySelector(&lt;span style="color:#4070a0">&amp;#39;body&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="date">Date&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> {locale, timeZone} &lt;span style="color:#666">=&lt;/span> Intl.DateTimeFormat().resolvedOptions();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> date &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> &lt;span style="color:#007020">Date&lt;/span>(&lt;span style="color:#007020">Date&lt;/span>.now());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">new&lt;/span> Intl.DateTimeFormat(&lt;span style="color:#4070a0">&amp;#34;en-US&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeZone&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;America/Los_Angeles&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minute&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;numeric&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hour&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;numeric&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}).format(date);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// 9:45 AM (returns the current time in that timeZone)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="is-date-valid">is Date valid&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> isDateValid &lt;span style="color:#666">=&lt;/span> (...val) =&amp;gt; &lt;span style="color:#666">!&lt;/span>&lt;span style="color:#007020">Number&lt;/span>.&lt;span style="color:#007020">isNaN&lt;/span>(&lt;span style="color:#007020;font-weight:bold">new&lt;/span> &lt;span style="color:#007020">Date&lt;/span>(...val).valueOf());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>isDateValid(&lt;span style="color:#4070a0">&amp;#39;December 17, 1995 03:24:00&amp;#39;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>isDateValid(&lt;span style="color:#4070a0">&amp;#39;1995-12-17T03:24:00&amp;#39;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>isDateValid(&lt;span style="color:#4070a0">&amp;#39;1995-12-17 T03:24:00&amp;#39;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>isDateValid(&lt;span style="color:#4070a0">&amp;#39;Duck&amp;#39;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>isDateValid(&lt;span style="color:#40a070">2023&lt;/span>, &lt;span style="color:#40a070">01&lt;/span>, &lt;span style="color:#40a070">22&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>isDateValid(&lt;span style="color:#40a070">1995&lt;/span>, &lt;span style="color:#40a070">11&lt;/span>, &lt;span style="color:#40a070">17&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;Duck&amp;#39;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>isDateValid({}); &lt;span style="color:#60a0b0;font-style:italic">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="unix-timestamp-from-date">UNIX timestamp from Date&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> getTimestamp &lt;span style="color:#666">=&lt;/span> (date &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> &lt;span style="color:#007020">Date&lt;/span>()) =&amp;gt; &lt;span style="color:#007020">Math&lt;/span>.floor(date.getTime() &lt;span style="color:#666">/&lt;/span> &lt;span style="color:#40a070">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>getTimestamp(); &lt;span style="color:#60a0b0;font-style:italic">// 1602162242
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="compare-dates--sort">Compare dates / sort&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span> compareDates(date1, date2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>date1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// move date1 to the end of the array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>date2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// move date2 to the end of the array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Convert the date strings to Date objects
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> d1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> &lt;span style="color:#007020">Date&lt;/span>(date1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> d2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> &lt;span style="color:#007020">Date&lt;/span>(date2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Compare the dates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (d1.getTime() &lt;span style="color:#666">===&lt;/span> d2.getTime()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// dates are equal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (d1 &lt;span style="color:#666">&amp;lt;&lt;/span> d2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// date1 is earlier than date2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// date1 is later than date2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> sortedItems &lt;span style="color:#666">=&lt;/span> allItems.sort((itemA, itemB) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> compareDates(itemA.date, itemB.date)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="login">Login&lt;/h2>
&lt;p>&lt;a href="https://blog.appsignal.com/2022/09/14/secure-your-nodejs-app-with-json-web-tokens">Secure Your Node.js App with JSON Web Tokens&lt;/a>&lt;/p>
&lt;h3 id="clientts">client.ts&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// client.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> axios, { AxiosInstance } &lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#4070a0">&amp;#39;axios&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">class&lt;/span> Client {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">private&lt;/span> _client: &lt;span style="color:#902000">AxiosInstance&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">constructor&lt;/span>(accessToken?: &lt;span style="color:#902000">string&lt;/span>, url?: &lt;span style="color:#902000">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> apiUrl &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.selectApiTarget();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> headers &lt;span style="color:#666">=&lt;/span> {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (accessToken &lt;span style="color:#666">!==&lt;/span> &lt;span style="color:#007020;font-weight:bold">undefined&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#39;Authorization&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">`Bearer &lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>accessToken&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>._client &lt;span style="color:#666">=&lt;/span> axios.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> baseURL: &lt;span style="color:#902000">url&lt;/span> &lt;span style="color:#666">||&lt;/span> apiUrl,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers: &lt;span style="color:#902000">headers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">private&lt;/span> selectApiTarget()&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#902000">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> backendUrl &lt;span style="color:#666">=&lt;/span> config.backend.url;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#007020">window&lt;/span>.location.host.includes(&lt;span style="color:#4070a0">&amp;#34;node.sharedtodos.com&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backendUrl &lt;span style="color:#666">=&lt;/span> config.backend.url.slice().replace(&lt;span style="color:#4070a0">&amp;#34;api.sharedtodos.com&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;node-api.sharedtodos.com&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">`&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>backendUrl&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">/api/v1/`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> getLoggedInUser()&lt;span style="color:#666">:&lt;/span> Promise&amp;lt;&lt;span style="color:#062873;font-weight:bold">User&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>._client.&lt;span style="color:#007020;font-weight:bold">get&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;/user/me&amp;#39;&lt;/span>).then((response) &lt;span style="color:#666">=&amp;gt;&lt;/span> response.data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> forgetLoggedInUser()&lt;span style="color:#666">:&lt;/span> Promise&amp;lt;&lt;span style="color:#062873;font-weight:bold">void&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>._client.&lt;span style="color:#007020;font-weight:bold">delete&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;/user/me&amp;#39;&lt;/span>).then((response) &lt;span style="color:#666">=&amp;gt;&lt;/span> response.data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> getTasks(listId: &lt;span style="color:#902000">number&lt;/span>)&lt;span style="color:#666">:&lt;/span> Promise&amp;lt;&lt;span style="color:#062873;font-weight:bold">Task&lt;/span>&lt;span style="">[]&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>._client.&lt;span style="color:#007020;font-weight:bold">get&lt;/span>(&lt;span style="color:#4070a0">`boards/&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>listId&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">/tasks`&lt;/span>).then((response) &lt;span style="color:#666">=&amp;gt;&lt;/span> response.data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> deleteTask(listId: &lt;span style="color:#902000">number&lt;/span>, taskId: &lt;span style="color:#902000">number&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>._client.&lt;span style="color:#007020;font-weight:bold">delete&lt;/span>(&lt;span style="color:#4070a0">`boards/&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>listId&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">/tasks/&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>taskId&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">`&lt;/span>).then((response) &lt;span style="color:#666">=&amp;gt;&lt;/span> response.data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> createTask(listId: &lt;span style="color:#902000">number&lt;/span>, title: &lt;span style="color:#902000">string&lt;/span>, description: &lt;span style="color:#902000">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> task: &lt;span style="color:#902000">Task&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title: &lt;span style="color:#902000">title&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: &lt;span style="color:#902000">description&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>._client.post(&lt;span style="color:#4070a0">`boards/&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>listId&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">/tasks`&lt;/span>, task);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> updateTask(listId: &lt;span style="color:#902000">number&lt;/span>, taskId: &lt;span style="color:#902000">string&lt;/span>, task: &lt;span style="color:#902000">Task&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>._client.put(&lt;span style="color:#4070a0">`boards/&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>listId&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">/tasks/&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>taskId&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">`&lt;/span>, task);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> login(email: &lt;span style="color:#902000">string&lt;/span>)&lt;span style="color:#666">:&lt;/span> Promise&amp;lt;&lt;span style="color:#062873;font-weight:bold">string&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> data &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> FormData();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data.append(&lt;span style="color:#4070a0">&amp;#39;user_email&amp;#39;&lt;/span>, email);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>._client.post(&lt;span style="color:#4070a0">`login`&lt;/span>, data, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers&lt;span style="color:#666">:&lt;/span> {&lt;span style="color:#4070a0">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#39;multipart/form-data&amp;#39;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).then((response) &lt;span style="color:#666">=&amp;gt;&lt;/span> response.data.access_token);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> getClient &lt;span style="color:#666">=&lt;/span> (accessToken&lt;span style="color:#666">?&lt;/span>, url&lt;span style="color:#666">?&lt;/span>)&lt;span style="color:#666">:&lt;/span> Client &lt;span style="color:#666">=&amp;gt;&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> Client(accessToken, url);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configts">config.ts&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// config.ts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">interface&lt;/span> ConfigOptions {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backend&lt;span style="color:#666">:&lt;/span> { url: &lt;span style="color:#902000">string&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth0: &lt;span style="color:#902000">any&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authentication&lt;span style="color:#666">:&lt;/span> { provider: &lt;span style="color:#902000">string&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authorization&lt;span style="color:#666">:&lt;/span> { embedUrl: &lt;span style="color:#902000">string&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">declare&lt;/span> &lt;span style="color:#007020;font-weight:bold">global&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">interface&lt;/span> Window {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _env_: &lt;span style="color:#902000">any&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> Config: &lt;span style="color:#902000">ConfigOptions&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backend&lt;span style="color:#666">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">process.env.REACT_APP_BACKEND_URL&lt;/span> &lt;span style="color:#666">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">window&lt;/span>&lt;span style="color:#666">?&lt;/span>._env_&lt;span style="color:#666">?&lt;/span>.BACKEND_URL &lt;span style="color:#666">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;http://localhost:8008&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth0&lt;span style="color:#666">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> domain:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">process.env.AUTH0_DOMAIN&lt;/span> &lt;span style="color:#666">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">window&lt;/span>&lt;span style="color:#666">?&lt;/span>._env_&lt;span style="color:#666">?&lt;/span>.AUTH0_DOMAIN &lt;span style="color:#666">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;acalla-demoapp.us.auth0.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientId:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">process.env.AUTH0_CLIENT_ID&lt;/span> &lt;span style="color:#666">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">window&lt;/span>&lt;span style="color:#666">?&lt;/span>._env_&lt;span style="color:#666">?&lt;/span>.AUTH0_CLIENT_ID &lt;span style="color:#666">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;myClientID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> audience:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">process.env.AUTH0_AUDIENCE&lt;/span> &lt;span style="color:#666">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">window&lt;/span>&lt;span style="color:#666">?&lt;/span>._env_&lt;span style="color:#666">?&lt;/span>.AUTH0_AUDIENCE &lt;span style="color:#666">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;https://demoapi.server.com/v1/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authentication&lt;span style="color:#666">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;auth0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authorization&lt;span style="color:#666">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embedUrl: &lt;span style="color:#902000">window?._env_?.AUTHZ_EMBED_URL&lt;/span> &lt;span style="color:#666">||&lt;/span> &lt;span style="color:#4070a0">&amp;#34;http://localhost:3000&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">default&lt;/span> Config;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="data-structures">Data Structures&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> shuffleArray &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span>(array&lt;span style="color:#666">:&lt;/span> T[])&lt;span style="color:#666">:&lt;/span> T[] =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">let&lt;/span> i &lt;span style="color:#666">=&lt;/span> array.length &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; i &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i&lt;span style="color:#666">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> j &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">Math&lt;/span>.floor(&lt;span style="color:#007020">Math&lt;/span>.random() &lt;span style="color:#666">*&lt;/span> (i &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [array[i], array[j]] &lt;span style="color:#666">=&lt;/span> [array[j], array[i]];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> array;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cheat-sheet">Cheat Sheet&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Single-line comments start with two slashes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">/* Multiline comments start with slash-star,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"> and end with star-slash */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Statements can be terminated by ;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>doStuff();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// ... but they don&amp;#39;t have to be, as semicolons are automatically inserted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// wherever there&amp;#39;s a newline, except in certain cases.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>doStuff()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Because those cases can cause unexpected results, we&amp;#39;ll keep on using
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// semicolons in this guide.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">///////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// 1. Numbers, Strings and Operators
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// JavaScript has one number type (which is a 64-bit IEEE 754 double).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Doubles have a 52-bit mantissa, which is enough to store integers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// up to about 9✕10¹⁵ precisely.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">3&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">1.5&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 1.5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Some basic arithmetic works as you&amp;#39;d expect.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">0.1&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">0.2&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 0.30000000000000004
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">8&lt;/span> &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">2&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 20
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">35&lt;/span> &lt;span style="color:#666">/&lt;/span> &lt;span style="color:#40a070">5&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Including uneven division.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#666">/&lt;/span> &lt;span style="color:#40a070">2&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 2.5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// And modulo division.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">2&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">30&lt;/span> &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">4&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">18.5&lt;/span> &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">7&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 4.5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Bitwise operations also work; when you perform a bitwise operation your float
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// is converted to a signed int *up to* 32 bits.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#40a070">2&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Precedence is enforced with parentheses.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>(&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">3&lt;/span>) &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">2&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = 8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// There are three special not-a-real-number values:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">Infinity&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// result of e.g. 1/0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#007020;font-weight:bold">Infinity&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// result of e.g. -1/0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">NaN&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// result of e.g. 0/0, stands for &amp;#39;Not a Number&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// There&amp;#39;s also a boolean type.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Strings are created with &amp;#39; or &amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#39;abc&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;Hello, world&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Negation uses the ! symbol
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#666">!&lt;/span>&lt;span style="color:#007020;font-weight:bold">true&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#666">!&lt;/span>&lt;span style="color:#007020;font-weight:bold">false&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Equality is ===
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Inequality is !==
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">!==&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">!==&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// More comparisons
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">10&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">10&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">&amp;lt;=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">&amp;gt;=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Strings are concatenated with +
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34;world!&amp;#34;&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;Hello world!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// ... which works with more than just strings
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;1, 2, &amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">3&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;1, 2, 3&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;world&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;!&amp;#34;&lt;/span>]; &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;Hello world,!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// and are compared with &amp;lt; and &amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;a&amp;#34;&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;b&amp;#34;&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Type coercion is performed for comparisons with double equals...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;5&amp;#34;&lt;/span> &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">5&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">null&lt;/span> &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#007020;font-weight:bold">undefined&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// ...unless you use ===
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;5&amp;#34;&lt;/span> &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#40a070">5&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">null&lt;/span> &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#007020;font-weight:bold">undefined&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// ...which can result in some weird behaviour...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#40a070">13&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">!&lt;/span>&lt;span style="color:#40a070">0&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// 14
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;13&amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">!&lt;/span>&lt;span style="color:#40a070">0&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// &amp;#39;13true&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// You can access characters in a string with `charAt`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;This is a string&amp;#34;&lt;/span>.charAt(&lt;span style="color:#40a070">0&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#39;T&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// ...or use `substring` to get larger pieces.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Hello world&amp;#34;&lt;/span>.substring(&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;Hello&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// `length` is a property, so don&amp;#39;t use ().
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Hello&amp;#34;&lt;/span>.length; &lt;span style="color:#60a0b0;font-style:italic">// = 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// There&amp;#39;s also `null` and `undefined`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">null&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// used to indicate a deliberate non-value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">undefined&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// used to indicate a value is not currently present (although
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// `undefined` is actually a value itself)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// false, null, undefined, NaN, 0 and &amp;#34;&amp;#34; are falsy; everything else is truthy.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Note that 0 is falsy and &amp;#34;0&amp;#34; is truthy, even though 0 == &amp;#34;0&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">///////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// 2. Variables, Arrays and Objects
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Variables are declared with the `var` keyword. JavaScript is dynamically
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// typed, so you don&amp;#39;t need to specify type. Assignment uses a single `=`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// character.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> someVar &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// If you leave the var keyword off, you won&amp;#39;t get an error...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>someOtherVar &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// ...but your variable will be created in the global scope, not in the scope
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// you defined it in.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Variables declared without being assigned to are set to undefined.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> someThirdVar; &lt;span style="color:#60a0b0;font-style:italic">// = undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// If you want to declare a couple of variables, then you could use a comma
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// separator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> someFourthVar &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>, someFifthVar &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// There&amp;#39;s shorthand for performing math operations on variables:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>someVar &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// equivalent to someVar = someVar + 5; someVar is 10 now
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>someVar &lt;span style="color:#666">*=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// now someVar is 100
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// and an even-shorter-hand for adding or subtracting 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>someVar&lt;span style="color:#666">++&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// now someVar is 101
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>someVar&lt;span style="color:#666">--&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// back to 100
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Arrays are ordered lists of values, of any type.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myArray &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;Hello&amp;#34;&lt;/span>, &lt;span style="color:#40a070">45&lt;/span>, &lt;span style="color:#007020;font-weight:bold">true&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Their members can be accessed using the square-brackets subscript syntax.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Array indices start at zero.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myArray[&lt;span style="color:#40a070">1&lt;/span>]; &lt;span style="color:#60a0b0;font-style:italic">// = 45
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Arrays are mutable and of variable length.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myArray.push(&lt;span style="color:#4070a0">&amp;#34;World&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myArray.length; &lt;span style="color:#60a0b0;font-style:italic">// = 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Add/Modify at specific index
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myArray[&lt;span style="color:#40a070">3&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Add and remove element from front or back end of an array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myArray.unshift(&lt;span style="color:#40a070">3&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// Add as the first element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>someVar &lt;span style="color:#666">=&lt;/span> myArray.shift(); &lt;span style="color:#60a0b0;font-style:italic">// Remove first element and return it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myArray.push(&lt;span style="color:#40a070">3&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// Add as the last element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>someVar &lt;span style="color:#666">=&lt;/span> myArray.pop(); &lt;span style="color:#60a0b0;font-style:italic">// Remove last element and return it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Join all elements of an array with semicolon
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myArray0 &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">32&lt;/span>,&lt;span style="color:#007020;font-weight:bold">false&lt;/span>,&lt;span style="color:#4070a0">&amp;#34;js&amp;#34;&lt;/span>,&lt;span style="color:#40a070">12&lt;/span>,&lt;span style="color:#40a070">56&lt;/span>,&lt;span style="color:#40a070">90&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myArray0.join(&lt;span style="color:#4070a0">&amp;#34;;&amp;#34;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;32;false;js;12;56;90&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Get subarray of elements from index 1 (include) to 4 (exclude)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myArray0.slice(&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">4&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = [false,&amp;#34;js&amp;#34;,12]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Remove 4 elements starting from index 2, and insert there strings
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;hi&amp;#34;,&amp;#34;wr&amp;#34; and &amp;#34;ld&amp;#34;; return removed subarray
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myArray0.splice(&lt;span style="color:#40a070">2&lt;/span>,&lt;span style="color:#40a070">4&lt;/span>,&lt;span style="color:#4070a0">&amp;#34;hi&amp;#34;&lt;/span>,&lt;span style="color:#4070a0">&amp;#34;wr&amp;#34;&lt;/span>,&lt;span style="color:#4070a0">&amp;#34;ld&amp;#34;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = [&amp;#34;js&amp;#34;,12,56,90]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// myArray0 === [32,false,&amp;#34;hi&amp;#34;,&amp;#34;wr&amp;#34;,&amp;#34;ld&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// JavaScript&amp;#39;s objects are equivalent to &amp;#34;dictionaries&amp;#34; or &amp;#34;maps&amp;#34; in other
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// languages: an unordered collection of key-value pairs.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myObj &lt;span style="color:#666">=&lt;/span> {key1&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Hello&amp;#34;&lt;/span>, key2&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;World&amp;#34;&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Keys are strings, but quotes aren&amp;#39;t required if they&amp;#39;re a valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// JavaScript identifier. Values can be any type.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myObj &lt;span style="color:#666">=&lt;/span> {myKey&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;myValue&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;my other key&amp;#34;&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">4&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Object attributes can also be accessed using the subscript syntax,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myObj[&lt;span style="color:#4070a0">&amp;#34;my other key&amp;#34;&lt;/span>]; &lt;span style="color:#60a0b0;font-style:italic">// = 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// ... or using the dot syntax, provided the key is a valid identifier.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myObj.myKey; &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;myValue&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Objects are mutable; values can be changed and new keys added.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myObj.myThirdKey &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// If you try to access a value that&amp;#39;s not yet set, you&amp;#39;ll get undefined.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myObj.myFourthKey; &lt;span style="color:#60a0b0;font-style:italic">// = undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">///////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// 3. Logic and Control Structures
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The `if` structure works as you&amp;#39;d expect.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> count &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (count &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">3&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// evaluated if count is 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>} &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (count &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">4&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// evaluated if count is 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>} &lt;span style="color:#007020;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// evaluated if it&amp;#39;s not either 3 or 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// As does `while`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">while&lt;/span> (&lt;span style="color:#007020;font-weight:bold">true&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// An infinite loop!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Do-while loops are like while loops, except they always run at least once.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> input;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input &lt;span style="color:#666">=&lt;/span> getInput();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#007020;font-weight:bold">while&lt;/span> (&lt;span style="color:#666">!&lt;/span>isValid(input));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The `for` loop is the same as C and Java:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// initialization; continue condition; iteration.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">5&lt;/span>; i&lt;span style="color:#666">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// will run 5 times
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Breaking out of labeled loops is similar to Java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>outer&lt;span style="color:#666">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">10&lt;/span>; i&lt;span style="color:#666">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> j &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; j &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">10&lt;/span>; j&lt;span style="color:#666">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (i &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#666">==&lt;/span>&lt;span style="color:#40a070">5&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span> outer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// breaks out of outer loop instead of only the inner one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The for/in statement allows iteration over properties of an object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> description &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> person &lt;span style="color:#666">=&lt;/span> {fname&lt;span style="color:#666">:&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Paul&amp;#34;&lt;/span>, lname&lt;span style="color:#666">:&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Ken&amp;#34;&lt;/span>, age&lt;span style="color:#666">:&lt;/span>&lt;span style="color:#40a070">18&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> person){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description &lt;span style="color:#666">+=&lt;/span> person[x] &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#60a0b0;font-style:italic">// description = &amp;#39;Paul Ken 18 &amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The for/of statement allows iteration over iterable objects (including the built-in String,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// and user-defined iterables).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myPets &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> pets &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;cat&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;dog&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;hamster&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;hedgehog&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> pet &lt;span style="color:#007020;font-weight:bold">of&lt;/span> pets){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myPets &lt;span style="color:#666">+=&lt;/span> pet &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#60a0b0;font-style:italic">// myPets = &amp;#39;cat dog hamster hedgehog &amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// &amp;amp;&amp;amp; is logical and, || is logical or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (house.size &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#34;big&amp;#34;&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> house.colour &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#34;blue&amp;#34;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> house.contains &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;bear&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (colour &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#34;red&amp;#34;&lt;/span> &lt;span style="color:#666">||&lt;/span> colour &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#34;blue&amp;#34;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// colour is either red or blue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// &amp;amp;&amp;amp; and || &amp;#34;short circuit&amp;#34;, which is useful for setting default values.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> name &lt;span style="color:#666">=&lt;/span> otherName &lt;span style="color:#666">||&lt;/span> &lt;span style="color:#4070a0">&amp;#34;default&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The `switch` statement checks for equality with `===`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Use &amp;#39;break&amp;#39; after each case
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// or the cases after the correct one will be executed too.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>grade &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;B&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">switch&lt;/span> (grade) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#4070a0">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#4070a0">&amp;#34;Great job&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#4070a0">&amp;#39;B&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#4070a0">&amp;#34;OK job&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#4070a0">&amp;#39;C&amp;#39;&lt;/span>&lt;span style="color:#666">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#4070a0">&amp;#34;You can do better&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">default&lt;/span>&lt;span style="color:#666">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#4070a0">&amp;#34;Oy vey&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">///////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// 4. Functions, Scope and Closures
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// JavaScript functions are declared with the `function` keyword.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> myFunction(thing){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> thing.toUpperCase();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myFunction(&lt;span style="color:#4070a0">&amp;#34;foo&amp;#34;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;FOO&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Note that the value to be returned must start on the same line as the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// `return` keyword, otherwise you&amp;#39;ll always return `undefined` due to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// automatic semicolon insertion. Watch out for this when using Allman style.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> myFunction(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// &amp;lt;- semicolon automatically inserted here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> {thisIsAn&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#39;object literal&amp;#39;&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myFunction(); &lt;span style="color:#60a0b0;font-style:italic">// = undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// JavaScript functions are first class objects, so they can be reassigned to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// different variable names and passed to other functions as arguments - for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// example, when supplying an event handler:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> myFunction(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// this code will be called in 5 seconds&amp;#39; time
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setTimeout(myFunction, &lt;span style="color:#40a070">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Note: setTimeout isn&amp;#39;t part of the JS language, but is provided by browsers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// and Node.js.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Another function provided by browsers is setInterval
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> myFunction(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// this code will be called every 5 seconds
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setInterval(myFunction, &lt;span style="color:#40a070">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Function objects don&amp;#39;t even have to be declared with a name - you can write
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// an anonymous function definition directly into the arguments of another.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>setTimeout(&lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// this code will be called in 5 seconds&amp;#39; time
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}, &lt;span style="color:#40a070">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// JavaScript has function scope; functions get their own scope but other blocks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// do not.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#007020;font-weight:bold">true&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i; &lt;span style="color:#60a0b0;font-style:italic">// = 5 - not undefined as you&amp;#39;d expect in a block-scoped language
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// This has led to a common pattern of &amp;#34;immediately-executing anonymous
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// functions&amp;#34;, which prevent temporary variables from leaking into the global
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// scope.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>(&lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> temporary &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// We can access the global scope by assigning to the &amp;#34;global object&amp;#34;, which
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// in a web browser is always `window`. The global object may have a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// different name in non-browser environments such as Node.js.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020">window&lt;/span>.permanent &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>temporary; &lt;span style="color:#60a0b0;font-style:italic">// raises ReferenceError
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>permanent; &lt;span style="color:#60a0b0;font-style:italic">// = 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// One of JavaScript&amp;#39;s most powerful features is closures. If a function is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// defined inside another function, the inner function has access to all the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// outer function&amp;#39;s variables, even after the outer function exits.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> sayHelloInFiveSeconds(name){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> prompt &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> name &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34;!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Inner functions are put in the local scope by default, as if they were
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// declared with `var`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span> inner(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alert(prompt);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setTimeout(inner, &lt;span style="color:#40a070">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// setTimeout is asynchronous, so the sayHelloInFiveSeconds function will
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// exit immediately, and setTimeout will call inner afterwards. However,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// because inner is &amp;#34;closed over&amp;#34; sayHelloInFiveSeconds, inner still has
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// access to the `prompt` variable when it is finally called.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sayHelloInFiveSeconds(&lt;span style="color:#4070a0">&amp;#34;Adam&amp;#34;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// will open a popup with &amp;#34;Hello, Adam!&amp;#34; in 5s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">///////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// 5. More about Objects; Constructors and Prototypes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Objects can contain functions.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myObj &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myFunc&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Hello world!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.myFunc(); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;Hello world!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// When functions attached to an object are called, they can access the object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// they&amp;#39;re attached to using the `this` keyword.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myObj &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myString&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Hello world!&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myFunc&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.myString;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.myFunc(); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;Hello world!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// What this is set to has to do with how the function is called, not where
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// it&amp;#39;s defined. So, our function doesn&amp;#39;t work if it isn&amp;#39;t called in the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// context of the object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myFunc &lt;span style="color:#666">=&lt;/span> myObj.myFunc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myFunc(); &lt;span style="color:#60a0b0;font-style:italic">// = undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Inversely, a function can be assigned to the object and gain access to it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// through `this`, even if it wasn&amp;#39;t attached when it was defined.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myOtherFunc &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.myString.toUpperCase();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.myOtherFunc &lt;span style="color:#666">=&lt;/span> myOtherFunc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.myOtherFunc(); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;HELLO WORLD!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// We can also specify a context for a function to execute in when we invoke it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// using `call` or `apply`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> anotherFunc &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(s){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.myString &lt;span style="color:#666">+&lt;/span> s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>anotherFunc.call(myObj, &lt;span style="color:#4070a0">&amp;#34; And Hello Moon!&amp;#34;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;Hello World! And Hello Moon!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The `apply` function is nearly identical, but takes an array for an argument
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>anotherFunc.apply(myObj, [&lt;span style="color:#4070a0">&amp;#34; And Hello Sun!&amp;#34;&lt;/span>]); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;Hello World! And Hello Sun!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// This is useful when working with a function that accepts a sequence of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// arguments and you want to pass an array.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">Math&lt;/span>.min(&lt;span style="color:#40a070">42&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>, &lt;span style="color:#40a070">27&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020">Math&lt;/span>.min([&lt;span style="color:#40a070">42&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>, &lt;span style="color:#40a070">27&lt;/span>]); &lt;span style="color:#60a0b0;font-style:italic">// = NaN (uh-oh!)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020">Math&lt;/span>.min.apply(&lt;span style="color:#007020">Math&lt;/span>, [&lt;span style="color:#40a070">42&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>, &lt;span style="color:#40a070">27&lt;/span>]); &lt;span style="color:#60a0b0;font-style:italic">// = 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// But, `call` and `apply` are only temporary. When we want it to stick, we can
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// use `bind`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> boundFunc &lt;span style="color:#666">=&lt;/span> anotherFunc.bind(myObj);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>boundFunc(&lt;span style="color:#4070a0">&amp;#34; And Hello Saturn!&amp;#34;&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;Hello World! And Hello Saturn!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// `bind` can also be used to partially apply (curry) a function.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> product &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(a, b){ &lt;span style="color:#007020;font-weight:bold">return&lt;/span> a &lt;span style="color:#666">*&lt;/span> b; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> doubler &lt;span style="color:#666">=&lt;/span> product.bind(&lt;span style="color:#007020;font-weight:bold">this&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>doubler(&lt;span style="color:#40a070">8&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// = 16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// When you call a function with the `new` keyword, a new object is created, and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// made available to the function via the `this` keyword. Functions designed to be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// called like that are called constructors.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> MyConstructor &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.myNumber &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myNewObj &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> MyConstructor(); &lt;span style="color:#60a0b0;font-style:italic">// = {myNumber: 5}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myNewObj.myNumber; &lt;span style="color:#60a0b0;font-style:italic">// = 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Unlike most other popular object-oriented languages, JavaScript has no
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// concept of &amp;#39;instances&amp;#39; created from &amp;#39;class&amp;#39; blueprints; instead, JavaScript
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// combines instantiation and inheritance into a single concept: a &amp;#39;prototype&amp;#39;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Every JavaScript object has a &amp;#39;prototype&amp;#39;. When you go to access a property
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// on an object that doesn&amp;#39;t exist on the actual object, the interpreter will
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// look at its prototype.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Some JS implementations let you access an object&amp;#39;s prototype on the magic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// property `__proto__`. While this is useful for explaining prototypes it&amp;#39;s not
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// part of the standard; we&amp;#39;ll get to standard ways of using prototypes later.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myObj &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myString&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Hello world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myPrototype &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meaningOfLife&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">42&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myFunc&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.myString.toLowerCase();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.__proto__ &lt;span style="color:#666">=&lt;/span> myPrototype;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.meaningOfLife; &lt;span style="color:#60a0b0;font-style:italic">// = 42
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// This works for functions, too.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myObj.myFunc(); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;hello world!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Of course, if your property isn&amp;#39;t on your prototype, the prototype&amp;#39;s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// prototype is searched, and so on.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myPrototype.__proto__ &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myBoolean&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.myBoolean; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// There&amp;#39;s no copying involved here; each object stores a reference to its
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// prototype. This means we can alter the prototype and our changes will be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// reflected everywhere.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myPrototype.meaningOfLife &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">43&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.meaningOfLife; &lt;span style="color:#60a0b0;font-style:italic">// = 43
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The for/in statement allows iteration over properties of an object,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// walking up the prototype chain until it sees a null prototype.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> myObj){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(myObj[x]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">///prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Hello world!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// 43
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// [Function: myFunc]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// To only consider properties attached to the object itself
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// and not its prototypes, use the `hasOwnProperty()` check.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">var&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> myObj){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (myObj.hasOwnProperty(x)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(myObj[x]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">///prints:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Hello world!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// We mentioned that `__proto__` was non-standard, and there&amp;#39;s no standard way to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// change the prototype of an existing object. However, there are two ways to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// create a new object with a given prototype.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The first is Object.create, which is a recent addition to JS, and therefore
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// not available in all implementations yet.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myObj &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">Object&lt;/span>.create(myPrototype);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myObj.meaningOfLife; &lt;span style="color:#60a0b0;font-style:italic">// = 43
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The second way, which works anywhere, has to do with constructors.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Constructors have a property called prototype. This is *not* the prototype of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// the constructor function itself; instead, it&amp;#39;s the prototype that new objects
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// are given when they&amp;#39;re created with that constructor and the new keyword.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>MyConstructor.prototype &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myNumber&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getMyNumber&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.myNumber;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myNewObj2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> MyConstructor();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myNewObj2.getMyNumber(); &lt;span style="color:#60a0b0;font-style:italic">// = 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myNewObj2.myNumber &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myNewObj2.getMyNumber(); &lt;span style="color:#60a0b0;font-style:italic">// = 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Built-in types like strings and numbers also have constructors that create
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// equivalent wrapper objects.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myNumber &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">12&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> myNumberObj &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> &lt;span style="color:#007020">Number&lt;/span>(&lt;span style="color:#40a070">12&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myNumber &lt;span style="color:#666">==&lt;/span> myNumberObj; &lt;span style="color:#60a0b0;font-style:italic">// = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Except, they aren&amp;#39;t exactly equivalent.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">typeof&lt;/span> myNumber; &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#39;number&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">typeof&lt;/span> myNumberObj; &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#39;object&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>myNumber &lt;span style="color:#666">===&lt;/span> myNumberObj; &lt;span style="color:#60a0b0;font-style:italic">// = false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#40a070">0&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// This code won&amp;#39;t execute, because 0 is falsy.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#007020;font-weight:bold">new&lt;/span> &lt;span style="color:#007020">Number&lt;/span>(&lt;span style="color:#40a070">0&lt;/span>)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// This code will execute, because wrapped numbers are objects, and objects
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// are always truthy.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// However, the wrapper objects and the regular builtins share a prototype, so
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// you can actually add functionality to a string, for instance.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020">String&lt;/span>.prototype.firstCharacter &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.charAt(&lt;span style="color:#40a070">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#34;abc&amp;#34;&lt;/span>.firstCharacter(); &lt;span style="color:#60a0b0;font-style:italic">// = &amp;#34;a&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// This fact is often used in &amp;#34;polyfilling&amp;#34;, which is implementing newer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// features of JavaScript in an older subset of JavaScript, so that they can be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// used in older environments such as outdated browsers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// For instance, we mentioned that Object.create isn&amp;#39;t yet available in all
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// implementations, but we can still use it with this polyfill:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#007020">Object&lt;/span>.create &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#007020;font-weight:bold">undefined&lt;/span>){ &lt;span style="color:#60a0b0;font-style:italic">// don&amp;#39;t overwrite it if it exists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020">Object&lt;/span>.create &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(proto){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// make a temporary constructor with the right prototype
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> Constructor &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span>(){};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Constructor.prototype &lt;span style="color:#666">=&lt;/span> proto;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// then use it to create a new, appropriately-prototyped object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> Constructor();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// ES6 Additions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The &amp;#34;let&amp;#34; keyword allows you to define variables in a lexical scope,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// as opposed to a function scope like the var keyword does.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Billy&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Variables defined with let can be reassigned new values.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;William&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The &amp;#34;const&amp;#34; keyword allows you to define a variable in a lexical scope
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// like with let, but you cannot reassign the value once one has been assigned.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> pi &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">3.14&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pi &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">4.13&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// You cannot do this.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// There is a new syntax for functions in ES6 known as &amp;#34;lambda syntax&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// This allows functions to be defined in a lexical scope like with variables
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// defined by const and let.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> isEven &lt;span style="color:#666">=&lt;/span> (number) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> number &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>isEven(&lt;span style="color:#40a070">7&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The &amp;#34;equivalent&amp;#34; of this function in the traditional syntax would look like this:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> isEven(number) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> number &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// I put the word &amp;#34;equivalent&amp;#34; in double quotes because a function defined
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// using the lambda syntax cannnot be called before the definition.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The following is an example of invalid usage:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add(&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> add &lt;span style="color:#666">=&lt;/span> (firstNumber, secondNumber) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> firstNumber &lt;span style="color:#666">+&lt;/span> secondNumber;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cheat-sheet-typescript">Cheat Sheet Typescript&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// There are 3 basic types in TypeScript
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> isDone: &lt;span style="color:#902000">boolean&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> lines: &lt;span style="color:#902000">number&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> name: &lt;span style="color:#902000">string&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Anders&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// But you can omit the type annotation if the variables are derived
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// from explicit literals
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> isDone &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> lines &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Anders&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// When it&amp;#39;s impossible to know, there is the &amp;#34;Any&amp;#34; type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> notSure: &lt;span style="color:#902000">any&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>notSure &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;maybe a string instead&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>notSure &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">false&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// okay, definitely a boolean
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Use const keyword for constants
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> numLivesForCat &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">9&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numLivesForCat &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// For collections, there are typed arrays and generic arrays
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> list: &lt;span style="color:#902000">number&lt;/span>[] &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Alternatively, using the generic array type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> list: &lt;span style="color:#902000">Array&lt;/span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">number&lt;/span>&amp;gt; &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// For enumerations:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">enum&lt;/span> Color { Red, Green, Blue };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> c: &lt;span style="color:#902000">Color&lt;/span> &lt;span style="color:#666">=&lt;/span> Color.Green;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(Color[c]); &lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;Green&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Lastly, &amp;#34;void&amp;#34; is used in the special case of a function returning nothing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> bigHorribleAlert()&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">void&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alert(&lt;span style="color:#4070a0">&amp;#34;I&amp;#39;m a little annoying box!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Functions are first class citizens, support the lambda &amp;#34;fat arrow&amp;#34; syntax and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// use type inference
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The following are equivalent, the same signature will be inferred by the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// compiler, and same JavaScript will be emitted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> f1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span> (i: &lt;span style="color:#902000">number&lt;/span>)&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#902000">number&lt;/span> { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> i &lt;span style="color:#666">*&lt;/span> i; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Return type inferred
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> f2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span> (i: &lt;span style="color:#902000">number&lt;/span>) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> i &lt;span style="color:#666">*&lt;/span> i; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;Fat arrow&amp;#34; syntax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> f3 &lt;span style="color:#666">=&lt;/span> (i: &lt;span style="color:#902000">number&lt;/span>)&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#902000">number&lt;/span> &lt;span style="color:#666">=&amp;gt;&lt;/span> { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> i &lt;span style="color:#666">*&lt;/span> i; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;Fat arrow&amp;#34; syntax with return type inferred
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> f4 &lt;span style="color:#666">=&lt;/span> (i: &lt;span style="color:#902000">number&lt;/span>) &lt;span style="color:#666">=&amp;gt;&lt;/span> { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> i &lt;span style="color:#666">*&lt;/span> i; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// &amp;#34;Fat arrow&amp;#34; syntax with return type inferred, braceless means no return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// keyword needed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> f5 &lt;span style="color:#666">=&lt;/span> (i: &lt;span style="color:#902000">number&lt;/span>) &lt;span style="color:#666">=&amp;gt;&lt;/span> i &lt;span style="color:#666">*&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Interfaces are structural, anything that has the properties is compliant with
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// the interface
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">interface&lt;/span> Person {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#902000">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Optional properties, marked with a &amp;#34;?&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> age?: &lt;span style="color:#902000">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// And of course functions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> move()&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">void&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Object that implements the &amp;#34;Person&amp;#34; interface
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Can be treated as a Person since it has the name and move properties
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> p: &lt;span style="color:#902000">Person&lt;/span> &lt;span style="color:#666">=&lt;/span> { name&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Bobby&amp;#34;&lt;/span>, move&lt;span style="color:#666">:&lt;/span> () &lt;span style="color:#666">=&amp;gt;&lt;/span> { } };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Objects that have the optional property:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> validPerson: &lt;span style="color:#902000">Person&lt;/span> &lt;span style="color:#666">=&lt;/span> { name&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Bobby&amp;#34;&lt;/span>, age: &lt;span style="color:#902000">42&lt;/span>, move&lt;span style="color:#666">:&lt;/span> () &lt;span style="color:#666">=&amp;gt;&lt;/span> { } };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Is not a person because age is not a number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> invalidPerson: &lt;span style="color:#902000">Person&lt;/span> &lt;span style="color:#666">=&lt;/span> { name&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Bobby&amp;#34;&lt;/span>, age: &lt;span style="color:#902000">true&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Interfaces can also describe a function type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">interface&lt;/span> SearchFunc {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (source: &lt;span style="color:#902000">string&lt;/span>, subString: &lt;span style="color:#902000">string&lt;/span>)&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">boolean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Only the parameters&amp;#39; types are important, names are not important.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> mySearch: &lt;span style="color:#902000">SearchFunc&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mySearch &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span> (src: &lt;span style="color:#902000">string&lt;/span>, sub: &lt;span style="color:#902000">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> src.search(sub) &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Classes - members are public by default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> Point {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Properties
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> x: &lt;span style="color:#902000">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Constructor - the public/private keywords in this context will generate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// the boiler plate code for the property and the initialization in the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// constructor.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// In this example, &amp;#34;y&amp;#34; will be defined just like &amp;#34;x&amp;#34; is, but with less code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// Default values are also supported
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">constructor&lt;/span>(x: &lt;span style="color:#902000">number&lt;/span>, &lt;span style="color:#007020;font-weight:bold">public&lt;/span> y: &lt;span style="color:#902000">number&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.x &lt;span style="color:#666">=&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Functions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> dist()&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#902000">number&lt;/span> { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">Math&lt;/span>.sqrt(&lt;span style="color:#007020;font-weight:bold">this&lt;/span>.x &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.x &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.y &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.y); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Static members
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> origin &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> Point(&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Classes can be explicitly marked as implementing an interface.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Any missing properties will then cause an error at compile-time.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> PointPerson &lt;span style="color:#007020;font-weight:bold">implements&lt;/span> Person {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#902000">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> move() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> p1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> Point(&lt;span style="color:#40a070">10&lt;/span>, &lt;span style="color:#40a070">20&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> p2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> Point(&lt;span style="color:#40a070">25&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">//y will be 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Inheritance
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> Point3D &lt;span style="color:#007020;font-weight:bold">extends&lt;/span> Point {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">constructor&lt;/span>(x: &lt;span style="color:#902000">number&lt;/span>, y: &lt;span style="color:#902000">number&lt;/span>, &lt;span style="color:#007020;font-weight:bold">public&lt;/span> z: &lt;span style="color:#902000">number&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">super&lt;/span>(x, y); &lt;span style="color:#60a0b0;font-style:italic">// Explicit call to the super class constructor is mandatory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Overwrite
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> dist()&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#902000">number&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> d &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">super&lt;/span>.dist();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">Math&lt;/span>.sqrt(d &lt;span style="color:#666">*&lt;/span> d &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.z &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.z);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Modules, &amp;#34;.&amp;#34; can be used as separator for sub modules
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>module Geometry {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">export&lt;/span> &lt;span style="color:#007020;font-weight:bold">class&lt;/span> Square {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">constructor&lt;/span>(&lt;span style="color:#007020;font-weight:bold">public&lt;/span> sideLength: &lt;span style="color:#902000">number&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> area() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">Math&lt;/span>.pow(&lt;span style="color:#007020;font-weight:bold">this&lt;/span>.sideLength, &lt;span style="color:#40a070">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> s1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> Geometry.Square(&lt;span style="color:#40a070">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Local alias for referencing a module
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> G &lt;span style="color:#666">=&lt;/span> Geometry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> s2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> G.Square(&lt;span style="color:#40a070">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Generics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Classes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> Tuple&amp;lt;&lt;span style="color:#062873;font-weight:bold">T1&lt;/span>, &lt;span style="color:#4070a0">T2&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">constructor&lt;/span>(&lt;span style="color:#007020;font-weight:bold">public&lt;/span> item1: &lt;span style="color:#902000">T1&lt;/span>, &lt;span style="color:#007020;font-weight:bold">public&lt;/span> item2: &lt;span style="color:#902000">T2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Interfaces
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">interface&lt;/span> Pair&amp;lt;&lt;span style="color:#062873;font-weight:bold">T&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item1: &lt;span style="color:#902000">T&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item2: &lt;span style="color:#902000">T&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// And functions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> pairToTuple &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">T&lt;/span>&amp;gt;(p: &lt;span style="color:#902000">Pair&lt;/span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">T&lt;/span>&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> Tuple(p.item1, p.item2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> tuple &lt;span style="color:#666">=&lt;/span> pairToTuple({ item1&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>, item2&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;world&amp;#34;&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Including references to a definition file:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">/// &amp;lt;reference path=&amp;#34;jquery.d.ts&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Template Strings (strings that use backticks)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// String Interpolation with Template Strings
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Tyrone&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> greeting &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">`Hi &lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>name&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">, how are you?`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Multiline Strings with Template Strings
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> multiline &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">`This is an example
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">of a multiline string`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// READONLY: New Feature in TypeScript 3.1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">interface&lt;/span> Person {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">readonly&lt;/span> name: &lt;span style="color:#902000">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">readonly&lt;/span> age: &lt;span style="color:#902000">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> p1: &lt;span style="color:#902000">Person&lt;/span> &lt;span style="color:#666">=&lt;/span> { name&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tyrone&amp;#34;&lt;/span>, age: &lt;span style="color:#902000">42&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p1.age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">25&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Error, p1.age is read-only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> p2 &lt;span style="color:#666">=&lt;/span> { name&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;John&amp;#34;&lt;/span>, age: &lt;span style="color:#902000">60&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">var&lt;/span> p3: &lt;span style="color:#902000">Person&lt;/span> &lt;span style="color:#666">=&lt;/span> p2; &lt;span style="color:#60a0b0;font-style:italic">// Ok, read-only alias for p2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>p3.age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">35&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Error, p3.age is read-only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>p2.age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">45&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Ok, but also changes p3.age because of aliasing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> Car {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">readonly&lt;/span> make: &lt;span style="color:#902000">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">readonly&lt;/span> model: &lt;span style="color:#902000">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">readonly&lt;/span> year &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2018&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">constructor&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.make &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Unknown Make&amp;#34;&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Assignment permitted in constructor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.model &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Unknown Model&amp;#34;&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Assignment permitted in constructor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> numbers: &lt;span style="color:#902000">Array&lt;/span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">number&lt;/span>&amp;gt; &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> moreNumbers: &lt;span style="color:#902000">ReadonlyArray&lt;/span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">number&lt;/span>&amp;gt; &lt;span style="color:#666">=&lt;/span> numbers;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreNumbers[&lt;span style="color:#40a070">5&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Error, elements are read-only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>moreNumbers.push(&lt;span style="color:#40a070">5&lt;/span>); &lt;span style="color:#60a0b0;font-style:italic">// Error, no push method (because it mutates array)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>moreNumbers.length &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">3&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Error, length is read-only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>numbers &lt;span style="color:#666">=&lt;/span> moreNumbers; &lt;span style="color:#60a0b0;font-style:italic">// Error, mutating methods are missing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Tagged Union Types for modelling state that can be in one of many shapes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">type&lt;/span> State &lt;span style="color:#666">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">|&lt;/span> { &lt;span style="color:#007020;font-weight:bold">type&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;loading&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">|&lt;/span> { &lt;span style="color:#007020;font-weight:bold">type&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;success&amp;#34;&lt;/span>, value: &lt;span style="color:#902000">number&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">|&lt;/span> { &lt;span style="color:#007020;font-weight:bold">type&lt;/span>&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;error&amp;#34;&lt;/span>, message: &lt;span style="color:#902000">string&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">declare&lt;/span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> state: &lt;span style="color:#902000">State&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (state.&lt;span style="color:#007020;font-weight:bold">type&lt;/span> &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#4070a0">&amp;#34;success&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(state.value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (state.&lt;span style="color:#007020;font-weight:bold">type&lt;/span> &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#4070a0">&amp;#34;error&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(state.message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Template Literal Types
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Use to create complex string types
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">type&lt;/span> OrderSize &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;regular&amp;#34;&lt;/span> &lt;span style="color:#666">|&lt;/span> &lt;span style="color:#4070a0">&amp;#34;large&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">type&lt;/span> OrderItem &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Espresso&amp;#34;&lt;/span> &lt;span style="color:#666">|&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Cappuccino&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">type&lt;/span> Order &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">`A &lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>OrderSize&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0"> &lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>OrderItem&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> order1: &lt;span style="color:#902000">Order&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;A regular Cappuccino&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> order2: &lt;span style="color:#902000">Order&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;A large Espresso&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> order3: &lt;span style="color:#902000">Order&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;A small Espresso&amp;#34;&lt;/span>; &lt;span style="color:#60a0b0;font-style:italic">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Iterators and Generators
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// for..of statement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// iterate over the list of values on the object being iterated
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> arrayOfAnyType &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;string&amp;#34;&lt;/span>, &lt;span style="color:#007020;font-weight:bold">false&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">const&lt;/span> val &lt;span style="color:#007020;font-weight:bold">of&lt;/span> arrayOfAnyType) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(val); &lt;span style="color:#60a0b0;font-style:italic">// 1, &amp;#34;string&amp;#34;, false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> list &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">const&lt;/span> i &lt;span style="color:#007020;font-weight:bold">of&lt;/span> list) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(i); &lt;span style="color:#60a0b0;font-style:italic">// 4, 5, 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// for..in statement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// iterate over the list of keys on the object being iterated
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">const&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> list) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(i); &lt;span style="color:#60a0b0;font-style:italic">// 0, 1, 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Type Assertion
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> foo &lt;span style="color:#666">=&lt;/span> {} &lt;span style="color:#60a0b0;font-style:italic">// Creating foo as an empty object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>foo.bar &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">123&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// Error: property &amp;#39;bar&amp;#39; does not exist on `{}`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>foo.baz &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;hello world&amp;#39;&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// Error: property &amp;#39;baz&amp;#39; does not exist on `{}`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Because the inferred type of foo is `{}` (an object with 0 properties), you
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// are not allowed to add bar and baz to it. However with type assertion,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// the following will pass:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">interface&lt;/span> Foo {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bar: &lt;span style="color:#902000">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> baz: &lt;span style="color:#902000">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> foo &lt;span style="color:#666">=&lt;/span> {} &lt;span style="color:#007020;font-weight:bold">as&lt;/span> Foo; &lt;span style="color:#60a0b0;font-style:italic">// Type assertion here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>foo.bar &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">123&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo.baz &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="resources">Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://devhints.io/react">react cheatsheet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learnxinyminutes.com/docs/typescript/">https://learnxinyminutes.com/docs/typescript/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Add search to Hugo multilingual static site with Lunr</title><link>https://romankurnovskii.com/en/posts/hugo-add-search-lunr-popup/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/hugo-add-search-lunr-popup/</guid><description>&lt;h2 id="initial">Initial&lt;/h2>
&lt;p>I had the need to implement search functionality on my site. Content on is in different languages.&lt;/p>
&lt;p>The goal is to impelemnt search for all pages and separate search results for each and every language.&lt;/p>
&lt;h2 id="how-it-works">How it works&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Hugo generates the search index. In this case it means that we get &lt;em>json&lt;/em> file with every static page on the site.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To make search works we need to create &lt;em>index&lt;/em>. &lt;a href="http://lunrjs.com/">lunr.js&lt;/a> takes care of it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Client send query -&amp;gt; our script &amp;ldquo;tries to find&amp;rdquo; in the index&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Render the results&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>This is how the logic looks like:&lt;/p>
&lt;p>&lt;p class="md__image">
&lt;img
src="./img/logic.jpg"
id="zoom-default"
alt=""
loading="lazy"
/>
&lt;/p>
&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;ol>
&lt;li>Create search form&lt;/li>
&lt;li>Create popup modal where will render search results&lt;/li>
&lt;li>Connect Lunr.js script&lt;/li>
&lt;li>Generate pages data&lt;/li>
&lt;li>Connect search/result forms with lunr.js search&lt;/li>
&lt;/ol>
&lt;h3 id="tldr">TL;DR&lt;/h3>
&lt;p>&lt;strong>Files to change/create:&lt;/strong>&lt;/p>
&lt;details>
&lt;summary>1. `/layouts/partials/header.html`&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">form&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">input&lt;/span> &lt;span style="color:#4070a0">type&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#4070a0">type&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search&amp;#34;&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search-input&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#062873;font-weight:bold">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;details>
&lt;summary>2. `/layouts/partials/components/search-list-popup.html`&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search-result&amp;#34;&lt;/span> &lt;span style="color:#4070a0">tabindex&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;-1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 max-w-xs &amp;#34;&lt;/span> &lt;span style="color:#4070a0">hidden&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;relative p-4 w-full max-w-xs h-full md:h-auto&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;relative bg-white rounded-lg shadow dark:bg-gray-700&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;p-6&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">h3&lt;/span>&amp;gt;Search results&amp;lt;/&lt;span style="color:#062873;font-weight:bold">h3&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search-results&amp;#34;&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;prose&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;details>
&lt;summary>3. `/layouts/partials/footer.html`&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ $languageMode := .Site.Language }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">script&lt;/span> &lt;span style="color:#4070a0">src&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;https://unpkg.com/lunr/lunr.min.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#062873;font-weight:bold">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">script&lt;/span> &lt;span style="color:#4070a0">src&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;/js/search.js?1&amp;#34;&lt;/span> &lt;span style="color:#4070a0">languageMode&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">{{&lt;/span> &lt;span style="">$&lt;/span>&lt;span style="color:#4070a0">languageMode&lt;/span> &lt;span style="">}}&lt;/span> &amp;gt;&amp;lt;/&lt;span style="color:#062873;font-weight:bold">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ partial &amp;#34;components/search-list-popup.html&amp;#34; . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;details>
&lt;summary>4. `/layouts/_default/index.json`&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="color:#007020;font-weight:bold">range&lt;/span> &lt;span style="">$&lt;/span>index, &lt;span style="">$&lt;/span>page &lt;span style="color:#666">:=&lt;/span> .Site.RegularPages.ByTitle &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> gt &lt;span style="">$&lt;/span>index &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#666">-&lt;/span>}} , {{&lt;span style="color:#666">-&lt;/span> end &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="">$&lt;/span>entry &lt;span style="color:#666">:=&lt;/span> dict &lt;span style="color:#4070a0">&amp;#34;uri&amp;#34;&lt;/span> &lt;span style="">$&lt;/span>page.RelPermalink &lt;span style="color:#4070a0">&amp;#34;title&amp;#34;&lt;/span> &lt;span style="">$&lt;/span>page.Title &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="">$&lt;/span>entry = merge &lt;span style="">$&lt;/span>&lt;span style="color:#06287e">entry&lt;/span> (dict &lt;span style="color:#4070a0">&amp;#34;description&amp;#34;&lt;/span> .Description) &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="">$&lt;/span>entry = merge &lt;span style="">$&lt;/span>&lt;span style="color:#06287e">entry&lt;/span> (dict &lt;span style="color:#4070a0">&amp;#34;content&amp;#34;&lt;/span> (.Plain | htmlUnescape)) &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="">$&lt;/span>entry | jsonify &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> end &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;details>
&lt;summary>5. `config.yaml`&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># config.yaml&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#60a0b0;font-style:italic"># need for search popup service / creates search.json index fo lunr.js&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#062873;font-weight:bold">outputFormats&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">SearchIndex&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">baseName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>search&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">mediaType&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>application/json&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#062873;font-weight:bold">outputs&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">home&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- HTML&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- RSS&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- SearchIndex&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;details>
&lt;summary>6. `static/js/search.js`&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> languageMode &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">window&lt;/span>.&lt;span style="color:#007020">document&lt;/span>.currentScript.getAttribute(&lt;span style="color:#4070a0">&amp;#39;languageMode&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MAX_SEARCH_RESULTS &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> searchIndex &lt;span style="color:#666">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> pagesStore &lt;span style="color:#666">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Need to create ONLY once , maybe before push | during build
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> createIndex &lt;span style="color:#666">=&lt;/span> (documents) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchIndex &lt;span style="color:#666">=&lt;/span> lunr(&lt;span style="color:#007020;font-weight:bold">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.field(&lt;span style="color:#4070a0">&amp;#34;title&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.field(&lt;span style="color:#4070a0">&amp;#34;content&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.field(&lt;span style="color:#4070a0">&amp;#34;description&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.field(&lt;span style="color:#4070a0">&amp;#34;uri&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.ref(&lt;span style="color:#4070a0">&amp;#39;uri&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> documents.forEach(&lt;span style="color:#007020;font-weight:bold">function&lt;/span> (doc) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pagesStore[doc[&lt;span style="color:#4070a0">&amp;#39;uri&amp;#39;&lt;/span>]] &lt;span style="color:#666">=&lt;/span> doc[&lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.add(doc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#007020;font-weight:bold">this&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> loadIndexData &lt;span style="color:#666">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> url &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">`/&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>languageMode&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">/search.json`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> xmlhttp &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> XMLHttpRequest();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmlhttp.onreadystatechange &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#007020;font-weight:bold">this&lt;/span>.readyState &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">4&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.status &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">200&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> pages_content &lt;span style="color:#666">=&lt;/span> JSON.parse(&lt;span style="color:#007020;font-weight:bold">this&lt;/span>.responseText);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> createIndex(pages_content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmlhttp.open(&lt;span style="color:#4070a0">&amp;#34;GET&amp;#34;&lt;/span>, url, &lt;span style="color:#007020;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmlhttp.send();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> search &lt;span style="color:#666">=&lt;/span> (text) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> result &lt;span style="color:#666">=&lt;/span> searchIndex.search(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> hideSearchResults &lt;span style="color:#666">=&lt;/span> (event, divBlock) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event.preventDefault()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>divBlock.contains(event.target)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> divBlock.style.display &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;none&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> divBlock.setAttribute(&lt;span style="color:#4070a0">&amp;#39;class&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;hidden&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// TODO refactor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> renderSearchResults &lt;span style="color:#666">=&lt;/span> (results) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> searchResultsViewBlock &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.getElementById(&lt;span style="color:#4070a0">&amp;#39;search-result&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// hide on move mouse from results block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020">document&lt;/span>.addEventListener(&lt;span style="color:#4070a0">&amp;#39;mouseup&amp;#39;&lt;/span>, (e) =&amp;gt; hideSearchResults(e, searchResultsViewBlock));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> searchResultsDiv &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.getElementById(&lt;span style="color:#4070a0">&amp;#39;search-results&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchResultsDiv.innerHTML &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchResultsViewBlock.style.display &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;initial&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchResultsViewBlock.removeAttribute(&lt;span style="color:#4070a0">&amp;#39;hidden&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> resultsBlock &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createElement(&lt;span style="color:#4070a0">&amp;#39;ul&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">let&lt;/span> post &lt;span style="color:#007020;font-weight:bold">of&lt;/span> results) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> url &lt;span style="color:#666">=&lt;/span> post[&lt;span style="color:#4070a0">&amp;#39;ref&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> title &lt;span style="color:#666">=&lt;/span> pagesStore[url]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> commentBlock &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createElement(&lt;span style="color:#4070a0">&amp;#39;li&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> link &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createElement(&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>,)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> linkText &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createTextNode(title);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link.appendChild(linkText)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link.href &lt;span style="color:#666">=&lt;/span> url
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commentBlock.appendChild(link)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resultsBlock.appendChild(commentBlock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchResultsDiv.appendChild(resultsBlock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> searchFormObserver &lt;span style="color:#666">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> form &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.getElementById(&lt;span style="color:#4070a0">&amp;#34;search&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> input &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.getElementById(&lt;span style="color:#4070a0">&amp;#34;search-input&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> form.addEventListener(&lt;span style="color:#4070a0">&amp;#34;submit&amp;#34;&lt;/span>, &lt;span style="color:#007020;font-weight:bold">function&lt;/span> (event) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event.preventDefault();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> term &lt;span style="color:#666">=&lt;/span> input.value.trim();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>term) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> search_results &lt;span style="color:#666">=&lt;/span> search(term, languageMode);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> renderSearchResults(search_results.slice(&lt;span style="color:#40a070">0&lt;/span>, MAX_SEARCH_RESULTS))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#007020;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// create indexes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>loadIndexData()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>searchFormObserver()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;h3 id="search-form">Search form&lt;/h3>
&lt;p>I am going to add search form to the header part. For thios purpose edit &lt;code>header.html&lt;/code> file in the path &lt;code>/layouts/partials/header.html&lt;/code>&lt;/p>
&lt;p>Set form id: &lt;code>search&lt;/code>. By this id script can find this form&lt;/p>
&lt;p>Minimal form for work:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">form&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">input&lt;/span> &lt;span style="color:#4070a0">type&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#4070a0">type&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search&amp;#34;&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search-input&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#062873;font-weight:bold">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I use Tailwind, so this is how my form looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;relative pt-4 md:pt-0&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">form&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search&amp;#34;&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;flex items-center&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">label&lt;/span> &lt;span style="color:#4070a0">for&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search-input&amp;#34;&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;sr-only&amp;#34;&lt;/span>&amp;gt;Search&amp;lt;/&lt;span style="color:#062873;font-weight:bold">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;relative w-full&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">input&lt;/span> &lt;span style="color:#4070a0">type&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#4070a0">type&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search&amp;#34;&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search-input&amp;#34;&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500&amp;#34;&lt;/span> &lt;span style="color:#4070a0">placeholder&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Search&amp;#34;&lt;/span> &lt;span style="color:#4070a0">required&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#062873;font-weight:bold">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;p class="md__image">
&lt;img
src="./img/search-form.png"
id="zoom-default"
alt=""
loading="lazy"
/>
&lt;/p>
&lt;/p>
&lt;h3 id="modal-with-results">Modal with results&lt;/h3>
&lt;p>By default this modal window is hidden. So don&amp;rsquo;t need to add this to any page. But need to add somewhere.&lt;/p>
&lt;p>&lt;strong>1. Create .html component&lt;/strong>&lt;/p>
&lt;p>path: &lt;code>/layouts/partials/components/search-list-popup.html&lt;/code>&lt;/p>
&lt;p>For modal block to show or hide I use id: &lt;code>search-result&lt;/code>&lt;/p>
&lt;p>For block with search results id is: &lt;code>search-results&lt;/code>&lt;/p>
&lt;p>Content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search-result&amp;#34;&lt;/span> &lt;span style="color:#4070a0">tabindex&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;-1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 max-w-xs &amp;#34;&lt;/span> &lt;span style="color:#4070a0">hidden&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;relative p-4 w-full max-w-xs h-full md:h-auto&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;relative bg-white rounded-lg shadow dark:bg-gray-700&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;p-6&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">h3&lt;/span>&amp;gt;Search results&amp;lt;/&lt;span style="color:#062873;font-weight:bold">h3&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">div&lt;/span> &lt;span style="color:#4070a0">id&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;search-results&amp;#34;&lt;/span> &lt;span style="color:#4070a0">class&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;prose&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#062873;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2. Add component to the site&lt;/strong>&lt;/p>
&lt;p>Add this component to the footer. File path: &lt;code>/layouts/partials/footer.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &lt;span style="color:#4070a0">&amp;#34;components/search-list-popup.html&amp;#34;&lt;/span> . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="connect-lunrjs">Connect Lunr.js&lt;/h3>
&lt;p>Add link to this script to the footer template too&lt;/p>
&lt;p>Part of the footer template:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#062873;font-weight:bold">script&lt;/span> &lt;span style="color:#4070a0">src&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;https://unpkg.com/lunr/lunr.min.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#062873;font-weight:bold">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &amp;#34;components/search-list-popup.html&amp;#34; . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="generate-pages-data">Generate pages data&lt;/h3>
&lt;p>Hugo can generate the search index the same way it generates RSS feeds for example, it’s just another output format.&lt;/p>
&lt;p>&lt;strong>1. Generate script&lt;/strong>&lt;/p>
&lt;p>This generator is for multilingual site&lt;/p>
&lt;p>Creates json in each language catalog in format:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>[{&amp;#34;title&amp;#34;:&amp;#34;title01&amp;#34;,...}]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Fepends on fileds inckluded in the layout &lt;code>/layouts/_default/index.json&lt;/code>&lt;/em>&lt;/p>
&lt;p>Create file &lt;code>/layouts/_default/index.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="color:#007020;font-weight:bold">range&lt;/span> &lt;span style="">$&lt;/span>index, &lt;span style="">$&lt;/span>page &lt;span style="color:#666">:=&lt;/span> .Site.RegularPages.ByTitle &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="">$&lt;/span>page.IsTranslated &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#06287e">gt&lt;/span> (index &lt;span style="">$&lt;/span>page.Translations &lt;span style="color:#40a070">0&lt;/span>).WordCount &lt;span style="color:#40a070">0&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ &lt;span style="color:#007020;font-weight:bold">range&lt;/span> .Translations }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> gt &lt;span style="">$&lt;/span>translatedCount &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#666">-&lt;/span>}} , {{&lt;span style="color:#666">-&lt;/span> end &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="">$&lt;/span>entry &lt;span style="color:#666">:=&lt;/span> dict &lt;span style="color:#4070a0">&amp;#34;uri&amp;#34;&lt;/span> .RelPermalink &lt;span style="color:#4070a0">&amp;#34;title&amp;#34;&lt;/span> .Title &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="">$&lt;/span>entry = merge &lt;span style="">$&lt;/span>&lt;span style="color:#06287e">entry&lt;/span> (dict &lt;span style="color:#4070a0">&amp;#34;description&amp;#34;&lt;/span> .Description) &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="">$&lt;/span>entry = merge &lt;span style="">$&lt;/span>&lt;span style="color:#06287e">entry&lt;/span> (dict &lt;span style="color:#4070a0">&amp;#34;content&amp;#34;&lt;/span> (.Plain | htmlUnescape)) &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> &lt;span style="">$&lt;/span>entry | jsonify &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ &lt;span style="">$&lt;/span>translatedCount = add &lt;span style="">$&lt;/span>translatedCount &lt;span style="color:#40a070">1&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ end}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ end }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> end &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{&lt;span style="color:#666">-&lt;/span> end &lt;span style="color:#666">-&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Creates search.json file with page indexes in &lt;code>/public/search.json&lt;/code>&lt;/p>
&lt;p>&lt;strong>2. Set index file path&lt;/strong>&lt;/p>
&lt;p>Update &lt;code>config.yaml&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># config.yaml&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#60a0b0;font-style:italic"># need for search popup service / creates search.json index fo lunr.js&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#062873;font-weight:bold">outputFormats&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">SearchIndex&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">baseName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>search&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">mediaType&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>application/json&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#062873;font-weight:bold">outputs&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">home&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- HTML&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- RSS&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- SearchIndex&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="connect-searchresult-forms-with-lunrjs-search">Connect search/result forms with lunr.js search&lt;/h3>
&lt;p>Create file in the path: &lt;code>static/js/search.js&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> languageMode &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">window&lt;/span>.&lt;span style="color:#007020">document&lt;/span>.currentScript.getAttribute(&lt;span style="color:#4070a0">&amp;#39;languageMode&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MAX_SEARCH_RESULTS &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> searchIndex &lt;span style="color:#666">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">let&lt;/span> pagesStore &lt;span style="color:#666">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Need to create ONLY once , maybe before push | during build
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> createIndex &lt;span style="color:#666">=&lt;/span> (documents) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchIndex &lt;span style="color:#666">=&lt;/span> lunr(&lt;span style="color:#007020;font-weight:bold">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.field(&lt;span style="color:#4070a0">&amp;#34;title&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.field(&lt;span style="color:#4070a0">&amp;#34;content&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.field(&lt;span style="color:#4070a0">&amp;#34;description&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.field(&lt;span style="color:#4070a0">&amp;#34;uri&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.ref(&lt;span style="color:#4070a0">&amp;#39;uri&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> documents.forEach(&lt;span style="color:#007020;font-weight:bold">function&lt;/span> (doc) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pagesStore[doc[&lt;span style="color:#4070a0">&amp;#39;uri&amp;#39;&lt;/span>]] &lt;span style="color:#666">=&lt;/span> doc[&lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.add(doc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#007020;font-weight:bold">this&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> loadIndexData &lt;span style="color:#666">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> url &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">`/&lt;/span>&lt;span style="color:#70a0d0">${&lt;/span>languageMode&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">/search.json`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> xmlhttp &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> XMLHttpRequest();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmlhttp.onreadystatechange &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#007020;font-weight:bold">this&lt;/span>.readyState &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">4&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#007020;font-weight:bold">this&lt;/span>.status &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">200&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> pages_content &lt;span style="color:#666">=&lt;/span> JSON.parse(&lt;span style="color:#007020;font-weight:bold">this&lt;/span>.responseText);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> createIndex(pages_content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmlhttp.open(&lt;span style="color:#4070a0">&amp;#34;GET&amp;#34;&lt;/span>, url, &lt;span style="color:#007020;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmlhttp.send();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> search &lt;span style="color:#666">=&lt;/span> (text) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> result &lt;span style="color:#666">=&lt;/span> searchIndex.search(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> hideSearchResults &lt;span style="color:#666">=&lt;/span> (event, divBlock) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event.preventDefault()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>divBlock.contains(event.target)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> divBlock.style.display &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;none&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> divBlock.setAttribute(&lt;span style="color:#4070a0">&amp;#39;class&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;hidden&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// TODO refactor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> renderSearchResults &lt;span style="color:#666">=&lt;/span> (results) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> searchResultsViewBlock &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.getElementById(&lt;span style="color:#4070a0">&amp;#39;search-result&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// hide on move mouse from results block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020">document&lt;/span>.addEventListener(&lt;span style="color:#4070a0">&amp;#39;mouseup&amp;#39;&lt;/span>, (e) =&amp;gt; hideSearchResults(e, searchResultsViewBlock));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> searchResultsDiv &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.getElementById(&lt;span style="color:#4070a0">&amp;#39;search-results&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchResultsDiv.innerHTML &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchResultsViewBlock.style.display &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;initial&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchResultsViewBlock.removeAttribute(&lt;span style="color:#4070a0">&amp;#39;hidden&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> resultsBlock &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createElement(&lt;span style="color:#4070a0">&amp;#39;ul&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#007020;font-weight:bold">let&lt;/span> post &lt;span style="color:#007020;font-weight:bold">of&lt;/span> results) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> url &lt;span style="color:#666">=&lt;/span> post[&lt;span style="color:#4070a0">&amp;#39;ref&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> title &lt;span style="color:#666">=&lt;/span> pagesStore[url]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> commentBlock &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createElement(&lt;span style="color:#4070a0">&amp;#39;li&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> link &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createElement(&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>,)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> linkText &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.createTextNode(title);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link.appendChild(linkText)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link.href &lt;span style="color:#666">=&lt;/span> url
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commentBlock.appendChild(link)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resultsBlock.appendChild(commentBlock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchResultsDiv.appendChild(resultsBlock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> searchFormObserver &lt;span style="color:#666">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> form &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.getElementById(&lt;span style="color:#4070a0">&amp;#34;search&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> input &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">document&lt;/span>.getElementById(&lt;span style="color:#4070a0">&amp;#34;search-input&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> form.addEventListener(&lt;span style="color:#4070a0">&amp;#34;submit&amp;#34;&lt;/span>, &lt;span style="color:#007020;font-weight:bold">function&lt;/span> (event) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event.preventDefault();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">var&lt;/span> term &lt;span style="color:#666">=&lt;/span> input.value.trim();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>term) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> search_results &lt;span style="color:#666">=&lt;/span> search(term, languageMode);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> renderSearchResults(search_results.slice(&lt;span style="color:#40a070">0&lt;/span>, MAX_SEARCH_RESULTS))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#007020;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// create indexes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>loadIndexData()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>searchFormObserver()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next need to add this file to the site: &lt;code>/layouts/partials/footer.html&lt;/code>&lt;/p>
&lt;p>Now footer looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ $languageMode := .Site.Language }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">script&lt;/span> &lt;span style="color:#4070a0">src&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;https://unpkg.com/lunr/lunr.min.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#062873;font-weight:bold">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">script&lt;/span> &lt;span style="color:#4070a0">src&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;/js/search.js?1&amp;#34;&lt;/span> &lt;span style="color:#4070a0">languageMode&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">{{&lt;/span> &lt;span style="">$&lt;/span>&lt;span style="color:#4070a0">languageMode&lt;/span> &lt;span style="">}}&lt;/span> &amp;gt;&amp;lt;/&lt;span style="color:#062873;font-weight:bold">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ partial &amp;#34;components/search-list-popup.html&amp;#34; . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How to create a deep clone of an object in JavaScript</title><link>https://romankurnovskii.com/en/posts/howto-create-deepclone-js/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-create-deepclone-js/</guid><description>&lt;p>We can use recursion.
Use &lt;code>Object.assign()&lt;/code> and an empty object ({}) to create a shallow clone of the original.
&lt;code>Use Object.keys()&lt;/code> and &lt;code>Array.prototype.forEach()&lt;/code> to determine which key-value pairs need to be deep cloned.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> deepClone &lt;span style="color:#666">=&lt;/span> obj =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">let&lt;/span> clone &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">Object&lt;/span>.assign({}, obj);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">Object&lt;/span>.keys(clone).forEach(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key =&amp;gt; (clone[key] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">typeof&lt;/span> obj[key] &lt;span style="color:#666">===&lt;/span> &lt;span style="color:#4070a0">&amp;#39;object&amp;#39;&lt;/span> &lt;span style="color:#666">?&lt;/span> deepClone(obj[key]) &lt;span style="color:#666">:&lt;/span> obj[key])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">Array&lt;/span>.isArray(obj) &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> obj.length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">?&lt;/span> (clone.length &lt;span style="color:#666">=&lt;/span> obj.length) &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#007020">Array&lt;/span>.from(clone)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#007020">Array&lt;/span>.isArray(obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">?&lt;/span> &lt;span style="color:#007020">Array&lt;/span>.from(obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">:&lt;/span> clone;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> a &lt;span style="color:#666">=&lt;/span> { foo&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#39;bar&amp;#39;&lt;/span>, obj&lt;span style="color:#666">:&lt;/span> { a&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">1&lt;/span>, b&lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">2&lt;/span> } };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> b &lt;span style="color:#666">=&lt;/span> deepClone(a); &lt;span style="color:#60a0b0;font-style:italic">// a !== b, a.obj !== b.obj
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>