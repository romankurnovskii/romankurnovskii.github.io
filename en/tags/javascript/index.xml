<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/tags/javascript/</link><description>Recent content in JavaScript on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2023 Personal page</copyright><lastBuildDate>Mon, 11 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Telegram bot with Google Apps Script (GAS)</title><link>https://romankurnovskii.com/en/posts/howto-setup-telegram-bot-and-google-apps-script/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-setup-telegram-bot-and-google-apps-script/</guid><description>1. Set Up the Telegram Bot Use the BotFather on Telegram to create a new bot. Get your HTTP API token. 2. Google Apps Script Code Google Apps Script for a Telegram bot:
var TOKEN = &amp;#39;YOUR_TELEGRAM_BOT_TOKEN&amp;#39;; var WEBHOOK_URL = &amp;#39;YOUR_WEB_APP_URL&amp;#39;; // web app URL of your GAS deployment. var USERS_SPREAD_SHEET_NAME=&amp;#39;usersAnswers&amp;#39; var COLUMN_STEP_1 = &amp;#39;E&amp;#39; var COLUMN_STEP_2 = &amp;#39;F&amp;#39; var COLUMN_DATE = &amp;#39;A&amp;#39; function setWebhook() { // run after every deploy and updated WEBHOOK_URL var url = &amp;#39;https://api.telegram.org/bot&amp;#39; + TOKEN + &amp;#39;/setWebhook?</description></item><item><title>JavaScript: convert array of objects to dictionary</title><link>https://romankurnovskii.com/en/posts/js-convert-array-to-dict/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/js-convert-array-to-dict/</guid><description>type ObjectWithKeyName = { [key: string]: any; }; // transform array of objects to dict // use object provided keyName as a key of dict // expected for each object in array this keyName value is unique const transformArrayToDict = (objects: ObjectWithKeyName[], keyName: string) =&amp;gt; { const res: ObjectWithKeyName = {}; objects.forEach((obj) =&amp;gt; { res[obj[keyName]] = obj; }); return res; };</description></item><item><title>How to publish JavaScript package to npm registry</title><link>https://romankurnovskii.com/en/posts/howto-publish-js-npm-project/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-publish-js-npm-project/</guid><description>In this post, we&amp;rsquo;ll dive deeper into the process of creating, structuring, and publishing a JavaScript package to the npm registry. We&amp;rsquo;ll use the repository https://github.com/romankurnovskii/npm-js-package-template as a reference for this guide.
TLDR Open template: https://github.com/romankurnovskii/npm-js-package-template Click Use this template Create repo from this template. git clone new repo update code src/index.ts, src/bin.ts How to check if bin script works from terminal:
npm link &amp;amp;&amp;amp; npm link mypackage mypackage Publish:
npm run prepublishOnly npm publish Folder Structure Let&amp;rsquo;s go through the folder structure of the repository:</description></item><item><title>How to publish typescript package to npm registry</title><link>https://romankurnovskii.com/en/posts/howto-publish-ts-npm-project/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-publish-ts-npm-project/</guid><description> Open template: https://github.com/romankurnovskii/npm-typescript-package-template Click Use this template Create repo from this template. git clone new repo update code src/index.ts, src/bin.ts How to check if bin script works from terminal:
npm link &amp;amp;&amp;amp; npm link mypackage mypackage Publish:
npm run prepublishOnly npm publish</description></item><item><title>How to add copy code button on HUGO highligh code block</title><link>https://romankurnovskii.com/en/posts/hugo-add-copy-button-on-highlight-block/</link><pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/hugo-add-copy-button-on-highlight-block/</guid><description>function addCopyButtonToCodeBlocks() { // Get all code blocks with a class of &amp;#34;language-*&amp;#34; const codeBlocks = document.querySelectorAll(&amp;#39;code[class^=&amp;#34;language-&amp;#34;]&amp;#39;); // For each code block, add a copy button inside the block codeBlocks.forEach(codeBlock =&amp;gt; { // Create the copy button element const copyButton = document.createElement(&amp;#39;button&amp;#39;); copyButton.classList.add(&amp;#39;copy-code-button&amp;#39;); copyButton.innerHTML = &amp;#39;&amp;lt;i class=&amp;#34;far fa-copy&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;; // Add a click event listener to the copy button copyButton.addEventListener(&amp;#39;click&amp;#39;, () =&amp;gt; { // Copy the code inside the code block to the clipboard const codeToCopy = codeBlock.innerText; navigator.clipboard.writeText(codeToCopy); // Update the copy button text to indicate that the code has been copied copyButton.</description></item><item><title>JavaScript code snippets</title><link>https://romankurnovskii.com/en/posts/js-snippets/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/js-snippets/</guid><description>Web / Browser get base URL const getBaseURL = url =&amp;gt; url.replace(/[?#].*$/, &amp;#39;&amp;#39;); getBaseURL(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;); // &amp;#39;http://url.com/page&amp;#39; const url = new URL(&amp;#34;https://example.com/login?user=someguy&amp;amp;page=news&amp;#34;); url.origin // &amp;#34;https://example.com&amp;#34; url.host // &amp;#34;example.com&amp;#34; url.protocol // &amp;#34;https:&amp;#34; url.pathname // &amp;#34;/login&amp;#34; url.searchParams.get(&amp;#39;user&amp;#39;) // &amp;#34;someuser&amp;#34; get URL parameters as object const getURLParameters = url =&amp;gt; (url.match(/([^?=&amp;amp;]+)(=([^&amp;amp;]*))/g) || []).reduce( (a, v) =&amp;gt; ( (a[v.slice(0, v.indexOf(&amp;#39;=&amp;#39;))] = v.slice(v.indexOf(&amp;#39;=&amp;#39;) + 1)), a ), {} ); getURLParameters(&amp;#39;google.com&amp;#39;); // {} getURLParameters(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;); // {name: &amp;#39;Adam&amp;#39;, surname: &amp;#39;Smith&amp;#39;} // One line Object.fromEntries(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;.split(&amp;#39;?&amp;#39;)[1].split(&amp;#39;&amp;amp;&amp;#39;).map(x=&amp;gt;x.split(&amp;#39;=&amp;#39;))) if DOC element contains another element const elementContains = (parent, child) =&amp;gt; parent !</description></item><item><title>Add search to Hugo multilingual static site with Lunr</title><link>https://romankurnovskii.com/en/posts/hugo-add-search-lunr-popup/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/hugo-add-search-lunr-popup/</guid><description>Initial I had the need to implement search functionality on my site. Content on is in different languages.
The goal is to impelemnt search for all pages and separate search results for each and every language.
How it works Hugo generates the search index. In this case it means that we get json file with every static page on the site.
To make search works we need to create index. lunr.js takes care of it.
Client send query -&amp;gt; our script &amp;ldquo;tries to find&amp;rdquo; in the index</description></item><item><title>How to create a deep clone of an object in JavaScript</title><link>https://romankurnovskii.com/en/posts/howto-create-deepclone-js/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-create-deepclone-js/</guid><description>We can use recursion. Use Object.assign() and an empty object ({}) to create a shallow clone of the original. Use Object.keys() and Array.prototype.forEach() to determine which key-value pairs need to be deep cloned.
const deepClone = obj =&amp;gt; { let clone = Object.assign({}, obj); Object.keys(clone).forEach( key =&amp;gt; (clone[key] = typeof obj[key] === &amp;#39;object&amp;#39; ? deepClone(obj[key]) : obj[key]) ); return Array.isArray(obj) &amp;amp;&amp;amp; obj.length ? (clone.length = obj.length) &amp;amp;&amp;amp; Array.from(clone) : Array.isArray(obj) ? Array.from(obj) : clone; }; const a = { foo: &amp;#39;bar&amp;#39;, obj: { a: 1, b: 2 } }; const b = deepClone(a); // a !</description></item></channel></rss>