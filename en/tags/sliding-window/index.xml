<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sliding Window on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/tags/sliding-window/</link><description>Recent content in Sliding Window on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2022 &lt;a href="https://romankurnovskii.com">Roman Kurnovskii&lt;/a> personal page</copyright><lastBuildDate>Tue, 18 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/tags/sliding-window/index.xml" rel="self" type="application/rss+xml"/><item><title>3. Longest Substring Without Repeating Characters</title><link>https://romankurnovskii.com/en/docs/algorithms-101/problems/3-longest-substring-without-repeating-characters/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/docs/algorithms-101/problems/3-longest-substring-without-repeating-characters/</guid><description>LeetCode problem
Given a string s, find the length of the longest substring without repeating characters.
Example 1:
Input: s = &amp;quot;abcabcbb&amp;quot; Output: 3 Explanation: The answer is &amp;quot;abc&amp;quot;, with the length of 3. First accepted Idea:
Loop through string Calculate max count of elements in substring If get double element, then go back until get this element and do step 2. Proceed the main loop 1class Solution: 2 def lengthOfLongestSubstring(self, s: str) -&amp;gt; int: 3 uniqs = set() 4 len_max = 0 5 len_current = 0 6 idx = 0 7 for i in s: 8 if i in uniqs: 9 len_max = max(len_max, len_current) 10 len_current = 1 11 uniqs = set(i) 12 for j in reversed(s[:idx]): 13 if j == i: 14 break 15 else: 16 len_current += 1 17 uniqs.</description></item></channel></rss>