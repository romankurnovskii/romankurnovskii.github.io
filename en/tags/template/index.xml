<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Template on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/tags/template/</link><description>Recent content in Template on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2023 Personal page</copyright><lastBuildDate>Thu, 25 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/tags/template/index.xml" rel="self" type="application/rss+xml"/><item><title>Linters &amp; Formatters Setup for Python, Groovy, JavaScript in VSCode</title><link>https://romankurnovskii.com/en/posts/python-groovy-lint-format-setup/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/python-groovy-lint-format-setup/</guid><description>В этой статье мы рассмотрим, как настроить
Black и Flake8 для Python, CodeNarc для Groovy ESLint и Prettier для JavaScript в среде разработки VSCode. Python Для настройки Python с использованием Black и Flake8 вам понадобятся файлы конфигурации: pyproject.tomlдля Black и .flake8 для Flake8.
Black - это форматтер кода для Python, который форматирует весь файл в соответствии с строгим подмножеством стандарта PEP 8. Black упрощает процесс рецензирования кода, создавая минимально возможные различия между версиями кода.
Flake8 - мощный инструмент, который проверяет ваш код на соответствие некоторым конвенциям стиля PEP 8, объединяя возможности нескольких других инструментов, включая PyFlakes (проверка на логические ошибки), pycodestyle (проверка на ошибки форматирования) и скрипт McCabe от Ned Batchelder (проверка сложности кода).</description></item><item><title>Python docstring templates</title><link>https://romankurnovskii.com/en/posts/python-docstring-templates/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/python-docstring-templates/</guid><description>Template def function_name(param1: Type1, param2: Type2, ...) -&amp;gt; ReturnType: &amp;#34;&amp;#34;&amp;#34;Brief description of the function. More detailed explanation of the function if necessary. This can span multiple lines as needed. Args: param1 (Type1): Description of param1. param2 (Type2): Description of param2. ... Returns: ReturnType: Description of the return value. Raises: ExceptionType: Explanation of the conditions under which this exception is raised. Example: &amp;gt;&amp;gt;&amp;gt; function_name(param1_value, param2_value) Expected output &amp;#34;&amp;#34;&amp;#34; ... Example With Type Hints def add_numbers(num1: int, num2: int = 5) -&amp;gt; int: &amp;#34;&amp;#34;&amp;#34;Adds two numbers together.</description></item></channel></rss>