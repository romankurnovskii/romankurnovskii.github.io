<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/categories/programming/</link><description>Recent content in programming on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2023 Personal page</copyright><lastBuildDate>Sat, 29 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Algorithms 101</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/</guid><description>Smart / OKR What is SMART and OKR
SMART Specific:
Goal: prepare for contests. Pass 50-&amp;gt;75-&amp;gt;100% of contest problems in time Improve python skills. Improve understanding of common algorithms and data structures. Measurable: How will we know that change has occurred?
solve top 100 questions that cover common algorithms and data structures. Achievable:
participate in LeetCode contest, solve 50%+ problems in time. Relevant: Is it possible to achieve this objective?
achievable with practice. improve skills in solving business problems more efficiently, quickly, understandable.</description></item><item><title>Binary Tree</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/data-structures/binary-tree/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/data-structures/binary-tree/</guid><description>1. What is a Binary Tree?
A binary tree is a data structure in which each node has at most two children, which are referred to as the left child and the right child.
2. Representing a Binary Tree in Python
To represent a binary tree in Python, we can create a class called Node to represent each node in the tree. Each node will have a value and references to its left and right children.
If a node doesn&amp;rsquo;t have a left or right child, the reference will be set to None.</description></item><item><title>Segment Tree</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/data-structures/segment-tree/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/data-structures/segment-tree/</guid><description>A Segment Tree is a data structure used for efficiently processing queries over intervals or ranges. It is commonly used for solving problems that involve finding information about a set of elements and their sub-intervals.
Since a Segment Tree is a binary tree, a simple linear array can be used to represent the Segment Tree. Before building the Segment Tree, one must figure what needs to be stored in the Segment Tree&amp;rsquo;s node?.
Each leaf node represents a single element, and each internal node represents the union of its children&amp;rsquo;s ranges.</description></item><item><title>Easy</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/leetcode/easy/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/leetcode/easy/</guid><description/></item><item><title>LeetCode</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/leetcode/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/leetcode/</guid><description>Python template
Prepare Use these VSCode extensions to debug/submit:
LeetCode Debug LeetCode Tips I learned Don&amp;rsquo;t code before &amp;ldquo;design&amp;rdquo; and understand the solution algorithm First 20 problems. Spent 5 min for thinking. Next look for 2-3 different approaches. Understand. Decide. Write. Resources https://walkccc.me/LeetCode/problems/ https://books.halfrost.com/leetcode/ https://grandyang.com/leetcode/ Competitive Programmer&amp;rsquo;s Handbook</description></item><item><title>Medium</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/leetcode/medium/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/leetcode/medium/</guid><description/></item><item><title>Other</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/leetcode/medium/other/</link><pubDate>Sat, 29 Apr 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/leetcode/medium/other/</guid><description/></item><item><title>Data Structures</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/data-structures/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/data-structures/</guid><description>Tree class Node: def __init__(self, value): self.value = value self.children = {} def insert(self, s, idx): # idx: index of the current character in s if idx != len(s): self.children.setdefault(s[idx], Node(s[idx])) self.children.get(s[idx]).insert(s, idx + 1) Fenwick Tree class Fenwick: #also known as Binary Indexed Tree (BIT) def __init__(self, n): self.n = n self.bit = [0] * (n+1) def add(self, idx, val): while idx &amp;lt;= self.n: self.bit[idx] += val idx += idx &amp;amp; -idx def add_range(self, l, r, val): self.</description></item><item><title>How to upload an opensource application to SourceForge</title><link>https://romankurnovskii.com/en/posts/how-to-upload-app-to-sourceforge/</link><pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/how-to-upload-app-to-sourceforge/</guid><description>Step 1: Create a SourceForge account Go to the SourceForge website at https://sourceforge.net/ Click on the &amp;ldquo;Join&amp;rdquo; button in the top-right corner. Fill in the required fields, such as username, email, and password, then click &amp;ldquo;Register&amp;rdquo; You&amp;rsquo;ll receive a confirmation email from SourceForge. Click on the link provided to confirm your account. Step 2: Start a new project Log in to your SourceForge account. Click on the &amp;ldquo;Create&amp;rdquo; button in the top-right corner of the page. Select &amp;ldquo;Create Your Project Now&amp;rdquo; from the dropdown menu.</description></item><item><title>How to publish typescript package to npm registry</title><link>https://romankurnovskii.com/en/posts/howto-publish-ts-npm-project/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-publish-ts-npm-project/</guid><description> Open template: https://github.com/romankurnovskii/npm-typescript-package-template Click Use this template Create repo from this template. git clone new repo update code src/index.ts, src/bin.ts How to check if bin script works from terminal:
npm link &amp;amp;&amp;amp; npm link mypackage mypackage Publish:
npm run prepublishOnly npm publish</description></item><item><title>How to add copy code button on HUGO highligh code block</title><link>https://romankurnovskii.com/en/posts/hugo-add-copy-button-on-highlight-block/</link><pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/hugo-add-copy-button-on-highlight-block/</guid><description>function addCopyButtonToCodeBlocks() { // Get all code blocks with a class of &amp;#34;language-*&amp;#34; const codeBlocks = document.querySelectorAll(&amp;#39;code[class^=&amp;#34;language-&amp;#34;]&amp;#39;); // For each code block, add a copy button inside the block codeBlocks.forEach(codeBlock =&amp;gt; { // Create the copy button element const copyButton = document.createElement(&amp;#39;button&amp;#39;); copyButton.classList.add(&amp;#39;copy-code-button&amp;#39;); copyButton.innerHTML = &amp;#39;&amp;lt;i class=&amp;#34;far fa-copy&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;; // Add a click event listener to the copy button copyButton.addEventListener(&amp;#39;click&amp;#39;, () =&amp;gt; { // Copy the code inside the code block to the clipboard const codeToCopy = codeBlock.innerText; navigator.clipboard.writeText(codeToCopy); // Update the copy button text to indicate that the code has been copied copyButton.</description></item><item><title>Bash code snippets</title><link>https://romankurnovskii.com/en/posts/bash-snippets/</link><pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/bash-snippets/</guid><description>Rename all files by pattern in current directory
files=(*) # Loop through all files for file in &amp;#34;${files[@]}&amp;#34; do # Check if the file name contains the &amp;#34;№&amp;#34; symbol if [[ $file == *&amp;#34;№&amp;#34;* ]]; then # Remove everything before and including the &amp;#34;№&amp;#34; symbol new_file=${file##*&amp;#34;№&amp;#34;} mv &amp;#34;$file&amp;#34; &amp;#34;$new_file&amp;#34; echo &amp;#34;Renamed $file to $new_file&amp;#34; fi done</description></item><item><title>Python bitwise operators</title><link>https://romankurnovskii.com/en/posts/python-bitwise-operators/</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/python-bitwise-operators/</guid><description>&amp;laquo; Left Shift Moves the bits of its first operand to the left by the number of places specified in its second operand.
Shifting a single bit to the left by one place doubles its value. Shifting to two places to the left by one place quadruple its value. $ a &amp;laquo; n = a * 2^n $
&amp;gt;&amp;gt;&amp;gt; 100 &amp;lt;&amp;lt; 1 200 &amp;gt;&amp;gt;&amp;gt; 100 &amp;lt;&amp;lt; 2 400 &amp;gt;&amp;gt;&amp;gt; 100 &amp;lt;&amp;lt; 3 800 &amp;raquo; Right Shift The rightmost bits always get dropped.</description></item><item><title>Hugo shortcode examples</title><link>https://romankurnovskii.com/en/posts/hugo-shortcode-examples/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/hugo-shortcode-examples/</guid><description>Source code of examples can be found in the repo
Image - insert resizable image in post</description></item><item><title>JavaScript code snippets</title><link>https://romankurnovskii.com/en/posts/js-snippets/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/js-snippets/</guid><description>Web / Browser get base URL const getBaseURL = url =&amp;gt; url.replace(/[?#].*$/, &amp;#39;&amp;#39;); getBaseURL(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;); // &amp;#39;http://url.com/page&amp;#39; const url = new URL(&amp;#34;https://example.com/login?user=someguy&amp;amp;page=news&amp;#34;); url.origin // &amp;#34;https://example.com&amp;#34; url.host // &amp;#34;example.com&amp;#34; url.protocol // &amp;#34;https:&amp;#34; url.pathname // &amp;#34;/login&amp;#34; url.searchParams.get(&amp;#39;user&amp;#39;) // &amp;#34;someuser&amp;#34; get URL parameters as object const getURLParameters = url =&amp;gt; (url.match(/([^?=&amp;amp;]+)(=([^&amp;amp;]*))/g) || []).reduce( (a, v) =&amp;gt; ( (a[v.slice(0, v.indexOf(&amp;#39;=&amp;#39;))] = v.slice(v.indexOf(&amp;#39;=&amp;#39;) + 1)), a ), {} ); getURLParameters(&amp;#39;google.com&amp;#39;); // {} getURLParameters(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;); // {name: &amp;#39;Adam&amp;#39;, surname: &amp;#39;Smith&amp;#39;} // One line Object.fromEntries(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;.split(&amp;#39;?&amp;#39;)[1].split(&amp;#39;&amp;amp;&amp;#39;).map(x=&amp;gt;x.split(&amp;#39;=&amp;#39;))) if DOC element contains another element const elementContains = (parent, child) =&amp;gt; parent !</description></item><item><title>Add search to Hugo multilingual static site with Lunr</title><link>https://romankurnovskii.com/en/posts/hugo-add-search-lunr-popup/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/hugo-add-search-lunr-popup/</guid><description>Initial I had the need to implement search functionality on my site. Content on is in different languages.
The goal is to impelemnt search for all pages and separate search results for each and every language.
How it works Hugo generates the search index. In this case it means that we get json file with every static page on the site.
To make search works we need to create index. lunr.js takes care of it.
Client send query -&amp;gt; our script &amp;ldquo;tries to find&amp;rdquo; in the index</description></item><item><title>Hugo resize a picture on click</title><link>https://romankurnovskii.com/en/posts/hugo-add-image-zoomin/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/hugo-add-image-zoomin/</guid><description>Introduction Hugo by default uses parsing of markdown files. This means that we get the html code as it is written in markdown.
In order to understand which images we can enhance, we add a separate tag/key/id to those images
Tools To implement the functionality, we need to:
Write/connect a script/handler that will perform the zoomin effect on the images we need Add the necessary metadata to the images, so the script can find them zoomin script To add the ability to zoom on click, we will use the medium-zoom package.</description></item><item><title>Python Cheat Sheet</title><link>https://romankurnovskii.com/en/posts/python-snippets/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/python-snippets/</guid><description>def sum_of_digits(n): sum = 0 while n: sum += n % 10 n //= 10 return sum # Single line comments start with a number symbol. &amp;#34;&amp;#34;&amp;#34; Multiline strings can be written using three &amp;#34;s, and are often used as documentation. &amp;#34;&amp;#34;&amp;#34; #################################################### ## 1. Primitive Datatypes and Operators #################################################### # You have numbers 3 # =&amp;gt; 3 # Math is what you would expect 1 + 1 # =&amp;gt; 2 8 - 1 # =&amp;gt; 7 10 * 2 # =&amp;gt; 20 35 / 5 # =&amp;gt; 7.</description></item><item><title>How to rename files in Python</title><link>https://romankurnovskii.com/en/posts/howto-rename-files-in-python/</link><pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-rename-files-in-python/</guid><description>Learn different ways to rename files in Python using the os and pathlib modules.
os.rename Rename files with os
You can use
os.rename(old_name, new_name) For example we can combine it with os.path.splitext() to get the base name and file extension, and then combine it to a new name:
import os for file in os.listdir(): name, ext = os.path.splitext(file) new_name = f&amp;#34;{name}_new{ext}&amp;#34; os.rename(file, new_name) pathlib Rename files with pathlib
The same could be achieved with the pathlib module and</description></item><item><title>How to create a deep clone of an object in JavaScript</title><link>https://romankurnovskii.com/en/posts/howto-create-deepclone-js/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-create-deepclone-js/</guid><description>We can use recursion. Use Object.assign() and an empty object ({}) to create a shallow clone of the original. Use Object.keys() and Array.prototype.forEach() to determine which key-value pairs need to be deep cloned.
const deepClone = obj =&amp;gt; { let clone = Object.assign({}, obj); Object.keys(clone).forEach( key =&amp;gt; (clone[key] = typeof obj[key] === &amp;#39;object&amp;#39; ? deepClone(obj[key]) : obj[key]) ); return Array.isArray(obj) &amp;amp;&amp;amp; obj.length ? (clone.length = obj.length) &amp;amp;&amp;amp; Array.from(clone) : Array.isArray(obj) ? Array.from(obj) : clone; }; const a = { foo: &amp;#39;bar&amp;#39;, obj: { a: 1, b: 2 } }; const b = deepClone(a); // a !</description></item></channel></rss>