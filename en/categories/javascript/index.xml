<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/categories/javascript/</link><description>Recent content in JavaScript on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2023 &lt;a href="https://romankurnovskii.com">Roman Kurnovskii&lt;/a> personal page</copyright><lastBuildDate>Thu, 15 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript code snippets</title><link>https://romankurnovskii.com/en/posts/js-snippets/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/js-snippets/</guid><description>Web / Browser get base URL 1const getBaseURL = url =&amp;gt; url.replace(/[?#].*$/, &amp;#39;&amp;#39;); 2 3getBaseURL(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;); 4// &amp;#39;http://url.com/page&amp;#39; 5 6const url = new URL(&amp;#34;https://example.com/login?user=someguy&amp;amp;page=news&amp;#34;); 7 8url.origin // &amp;#34;https://example.com&amp;#34; 9url.host // &amp;#34;example.com&amp;#34; 10url.protocol // &amp;#34;https:&amp;#34; 11url.pathname // &amp;#34;/login&amp;#34; 12url.searchParams.get(&amp;#39;user&amp;#39;) // &amp;#34;someuser&amp;#34; get URL parameters as object 1const getURLParameters = url =&amp;gt; 2 (url.match(/([^?=&amp;amp;]+)(=([^&amp;amp;]*))/g) || []).reduce( 3 (a, v) =&amp;gt; ( 4 (a[v.slice(0, v.indexOf(&amp;#39;=&amp;#39;))] = v.slice(v.indexOf(&amp;#39;=&amp;#39;) + 1)), a 5 ), 6 {} 7 ); 8 9getURLParameters(&amp;#39;google.com&amp;#39;); // {} 10getURLParameters(&amp;#39;http://url.</description></item><item><title>How to create a deep clone of an object in JavaScript</title><link>https://romankurnovskii.com/en/posts/howto-create-deepclone-js/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/howto-create-deepclone-js/</guid><description>We can use recursion. Use Object.assign() and an empty object ({}) to create a shallow clone of the original. Use Object.keys() and Array.prototype.forEach() to determine which key-value pairs need to be deep cloned.
1const deepClone = obj =&amp;gt; { 2 let clone = Object.assign({}, obj); 3 Object.keys(clone).forEach( 4 key =&amp;gt; (clone[key] = typeof obj[key] === &amp;#39;object&amp;#39; ? deepClone(obj[key]) : obj[key]) 5 ); 6 return Array.isArray(obj) &amp;amp;&amp;amp; obj.length 7 ? (clone.length = obj.length) &amp;amp;&amp;amp; Array.from(clone) 8 : Array.</description></item></channel></rss>