<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CheatSheet on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/categories/cheatsheet/</link><description>Recent content in CheatSheet on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2023 Personal page</copyright><lastBuildDate>Tue, 14 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/categories/cheatsheet/index.xml" rel="self" type="application/rss+xml"/><item><title>Bash Special Variables $! $0 $? $$</title><link>https://romankurnovskii.com/en/posts/bash-variables/</link><pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/bash-variables/</guid><description>$0 - The Name of the Script $0 represents the name of the Bash script as it was called.
If you execute a script with bash myscript.sh, then within myscript.sh, $0 will be myscript.sh.
$1, $2, $3, &amp;hellip; - Positional Parameters These variables correspond to the arguments passed to the script. $1 is the first argument, $2 is the second, and so on.
In the command bash myscript.sh arg1 arg2, $1 equals arg1, and $2 equals arg2.
$! - PID of the Last Background Process This holds the process ID of the most recent background process.</description></item><item><title>Bash code snippets</title><link>https://romankurnovskii.com/en/posts/bash-snippets/</link><pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/bash-snippets/</guid><description>Rename all files in current directory / Remove prefix #!/bin/bash REMOVE_PREFIX=$1 files=(*) for file in &amp;#34;${files[@]}&amp;#34; do if [[ $file == *&amp;#34;${REMOVE_PREFIX}&amp;#34;* ]]; then # Remove everything before and including the &amp;#34;â„–&amp;#34; symbol new_file=${file##*&amp;#34;${REMOVE_PREFIX}&amp;#34;} mv &amp;#34;$file&amp;#34; &amp;#34;$new_file&amp;#34; echo &amp;#34;Renamed $file to $new_file&amp;#34; fi done $ ./rename_files.sh abc renamed file abc123.txt -&amp;gt; 123.txt Add substring to filename #!/bin/bash DIR=&amp;#34;/path/to/folder&amp;#34; cd &amp;#34;$DIR&amp;#34; # Rename all .png files and add &amp;#34;.ru&amp;#34; before .png for file in *.png; do base=$(basename &amp;#34;$file&amp;#34; .png) mv &amp;#34;$file&amp;#34; &amp;#34;${base}.</description></item><item><title>Git snippets</title><link>https://romankurnovskii.com/en/posts/git-snippets/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/git-snippets/</guid><description>Commits More info about commits style
Github Actions Submodules Sync name: &amp;#39;Submodules Sync&amp;#39; on: schedule: - cron: &amp;#34;0 * * * *&amp;#34; jobs: sync: runs-on: ubuntu-latest steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v2 with: submodules: true - name: Pull &amp;amp; update submodules recursively run: | git pull --recurse-submodules git submodule update --remote --recursive - name: Commit &amp;amp; push changes run: | git config --global user.name &amp;#39;Git bot&amp;#39; git config --global user.</description></item><item><title>JavaScript code snippets</title><link>https://romankurnovskii.com/en/posts/js-snippets/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/js-snippets/</guid><description>Web / Browser get base URL const getBaseURL = url =&amp;gt; url.replace(/[?#].*$/, &amp;#39;&amp;#39;); getBaseURL(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;); // &amp;#39;http://url.com/page&amp;#39; const url = new URL(&amp;#34;https://example.com/login?user=someguy&amp;amp;page=news&amp;#34;); url.origin // &amp;#34;https://example.com&amp;#34; url.host // &amp;#34;example.com&amp;#34; url.protocol // &amp;#34;https:&amp;#34; url.pathname // &amp;#34;/login&amp;#34; url.searchParams.get(&amp;#39;user&amp;#39;) // &amp;#34;someuser&amp;#34; get URL parameters as object const getURLParameters = url =&amp;gt; (url.match(/([^?=&amp;amp;]+)(=([^&amp;amp;]*))/g) || []).reduce( (a, v) =&amp;gt; ( (a[v.slice(0, v.indexOf(&amp;#39;=&amp;#39;))] = v.slice(v.indexOf(&amp;#39;=&amp;#39;) + 1)), a ), {} ); getURLParameters(&amp;#39;google.com&amp;#39;); // {} getURLParameters(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;); // {name: &amp;#39;Adam&amp;#39;, surname: &amp;#39;Smith&amp;#39;} // One line Object.fromEntries(&amp;#39;http://url.com/page?name=Adam&amp;amp;surname=Smith&amp;#39;.split(&amp;#39;?&amp;#39;)[1].split(&amp;#39;&amp;amp;&amp;#39;).map(x=&amp;gt;x.split(&amp;#39;=&amp;#39;))) if DOC element contains another element const elementContains = (parent, child) =&amp;gt; parent !</description></item><item><title>Python Cheat Sheet</title><link>https://romankurnovskii.com/en/posts/python-snippets/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/python-snippets/</guid><description>def sum_of_digits(n): sum = 0 while n: sum += n % 10 n //= 10 return sum # Single line comments start with a number symbol. &amp;#34;&amp;#34;&amp;#34; Multiline strings can be written using three &amp;#34;s, and are often used as documentation. &amp;#34;&amp;#34;&amp;#34; #################################################### ## 1. Primitive Datatypes and Operators #################################################### # You have numbers 3 # =&amp;gt; 3 # Math is what you would expect 1 + 1 # =&amp;gt; 2 8 - 1 # =&amp;gt; 7 10 * 2 # =&amp;gt; 20 35 / 5 # =&amp;gt; 7.</description></item><item><title>Top Docker Commands</title><link>https://romankurnovskii.com/en/posts/docker-commands/</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/docker-commands/</guid><description>most popular docker images ## lists the images docker pull imagename ## Pull an image or a repository from a registry docker ps -a ## See a list of all containers, even the ones not running docker build -t imagename . ## Create image using this directory's Dockerfile docker run -p 4000:80 imagename ## Run &amp;quot;imagename&amp;quot; mapping port 4000 to 80 docker rmi ## removes the image docker rm ## removes the container docker stop ## stops the container docker volume ls ## lists the volumes docker kill ## kills the container docker logs ## see logs docker inspect ## shows all the info of a container docker docker cp ## Copy files/folders between a container and the local filesystem docker pull imagename ## Pull an image or a repository from a registry docker build -t imagename .</description></item><item><title>Tar command Cheat Sheet</title><link>https://romankurnovskii.com/en/posts/cheat-sheet-command-tar/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/cheat-sheet-command-tar/</guid><description>Common options z compress with gzip c create an archive u append files which are newer than the corresponding copy ibn the archive f filename of the archive v verbose, display what is inflated or deflated a unlike of z, determine compression based on file extension Create tar named archive.tar containing directory tar cf archive.tar /path/files Concatenate files into a single tar tar -cf archive.tar /path/files Extract the contents from archive.tar tar xf archive.tar Create a gzip compressed tar file name archive.</description></item><item><title>Markdown Cheat Sheet</title><link>https://romankurnovskii.com/en/posts/markdown-syntax/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/posts/markdown-syntax/</guid><description>&lt;p>This article offers an example of the basic Markdown syntax that can be used and also shows whether the basic elements of HTML are decorated with CSS.&lt;/p></description></item></channel></rss>