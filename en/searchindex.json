[{"content":"class Solution: def findKOr(self, nums: List[int], k: int) -\u003e int: res = 0 for i in range(32): cnt = sum(x \u003e\u003e i \u0026 1 for x in nums) if cnt \u003e= k: res |= 1 \u003c\u003c i return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2917/"},{"content":"class Solution: def findChampion(self, grid: List[List[int]]) -\u003e int: for i, row in enumerate(grid): if all(x == 1 for j, x in enumerate(row) if i != j): return i ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2923/"},{"content":"class Solution: def distributeCandies(self, n: int, limit: int) -\u003e int: if n \u003e 3 * limit: return 0 res = comb(n + 2, 2) if n \u003e limit: res -= 3 * comb(n - limit + 1, 2) if n - 2 \u003e= 2 * limit: res += 3 * comb(n - 2 * limit, 2) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2928/"},{"content":"class Trie: __slots__ = (\"children\", \"cnt\") def __init__(self): self.children: List[Trie | None] = [None, None] self.cnt = 0 def insert(self, x: int): node = self for i in range(7, -1, -1): v = x \u003e\u003e i \u0026 1 if node.children[v] is None: node.children[v] = Trie() node = node.children[v] node.cnt += 1 def search(self, x: int) -\u003e int: node = self res = 0 for i in range(7, -1, -1): v = x \u003e\u003e i \u0026 1 if node.children[v ^ 1] and node.children[v ^ 1].cnt: res |= 1 \u003c\u003c i node = node.children[v ^ 1] else: node = node.children[v] return res def remove(self, x: int): node = self for i in range(7, -1, -1): v = x \u003e\u003e i \u0026 1 node = node.children[v] node.cnt -= 1 class Solution: def maximumStrongPairXor(self, nums: List[int]) -\u003e int: nums.sort() tree = Trie() res = i = 0 for y in nums: tree.insert(y) while y \u003e nums[i] * 2: tree.remove(nums[i]) i += 1 res = max(res, tree.search(y)) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2932/"},{"content":"class Solution: def findMinimumOperations(self, s1: str, s2: str, s3: str) -\u003e int: s = len(s1) + len(s2) + len(s3) n = min(len(s1), len(s2), len(s3)) for i in range(n): if not s1[i] == s2[i] == s3[i]: return -1 if i == 0 else s - 3 * i return s - 3 * n ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2937/"},{"content":"class Solution: def findWordsContaining(self, words: List[str], x: str) -\u003e List[int]: return [i for i, w in enumerate(words) if x in w] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2942/"},{"content":"class Solution: def areSimilar(self, mat: List[List[int]], k: int) -\u003e bool: n = len(mat[0]) for i, row in enumerate(mat): for j, x in enumerate(row): if i % 2 == 1 and x != mat[i][(j + k) % n]: return False if i % 2 == 0 and x != mat[i][(j - k + n) % n]: return False return True ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2946/"},{"content":"class Solution: def findPeaks(self, mountain: List[int]) -\u003e List[int]: return [ i for i in range(1, len(mountain) - 1) if mountain[i - 1] \u003c mountain[i] \u003e mountain[i + 1] ] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2951/"},{"content":"class Solution: def findIntersectionValues(self, nums1: List[int], nums2: List[int]) -\u003e List[int]: s1, s2 = set(nums1), set(nums2) return [sum(x in s2 for x in nums1), sum(x in s1 for x in nums2)] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2956/"},{"content":"class Solution: def countTestedDevices(self, batteryPercentages: List[int]) -\u003e int: res = 0 for x in batteryPercentages: x -= res res += x \u003e 0 return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2960/"},{"content":"class Solution: def findMissingAndRepeatedValues(self, grid: List[List[int]]) -\u003e List[int]: n = len(grid) cnt = [0] * (n * n + 1) for row in grid: for v in row: cnt[v] += 1 res = [0] * 2 for i in range(1, n * n + 1): if cnt[i] == 2: res[0] = i if cnt[i] == 0: res[1] = i return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2965/"},{"content":"class Solution: def incremovableSubarrayCount(self, nums: List[int]) -\u003e int: i, n = 0, len(nums) while i + 1 \u003c n and nums[i] \u003c nums[i + 1]: i += 1 if i == n - 1: return n * (n + 1) // 2 res = i + 2 j = n - 1 while j: while i \u003e= 0 and nums[i] \u003e= nums[j]: i -= 1 res += i + 2 if nums[j - 1] \u003e= nums[j]: break j -= 1 return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2970/"},{"content":"class Solution: def numberGame(self, nums: List[int]) -\u003e List[int]: nums.sort() for i in range(0, len(nums), 2): nums[i], nums[i + 1] = nums[i + 1], nums[i] return nums ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2974/"},{"content":"class Solution: def hasTrailingZeros(self, nums: List[int]) -\u003e bool: return sum(x \u0026 1 ^ 1 for x in nums) \u003e= 2 ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2980/"},{"content":"class Solution: def missingInteger(self, nums: List[int]) -\u003e int: s, j = nums[0], 1 while j \u003c len(nums) and nums[j] == nums[j - 1] + 1: s += nums[j] j += 1 vis = set(nums) for x in count(s): if x not in vis: return x ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/2996/"},{"content":"class Solution: def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -\u003e int: res = mx = 0 for l, w in dimensions: t = l**2 + w**2 if mx \u003c t: mx = t res = l * w elif mx == t: res = max(res, l * w) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3000/"},{"content":"class Solution: def maxFrequencyElements(self, nums: List[int]) -\u003e int: cnt = Counter(nums) mx = max(cnt.values()) return sum(x for x in cnt.values() if x == mx) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3005/"},{"content":"class Solution: def minimumCost(self, nums: List[int]) -\u003e int: a, b, c = nums[0], inf, inf for x in nums[1:]: if x \u003c b: c, b = b, x elif x \u003c c: c = x return a + b + c ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3010/"},{"content":"class Solution: def minimumPushes(self, word: str) -\u003e int: n = len(word) res, k = 0, 1 for _ in range(n // 8): res += k * 8 k += 1 res += k * (n % 8) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3014/"},{"content":"class Solution: def countKeyChanges(self, s: str) -\u003e int: return sum(a.lower() != b.lower() for a, b in pairwise(s)) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3019/"},{"content":"class Solution: def triangleType(self, nums: List[int]) -\u003e str: nums.sort() if nums[0] + nums[1] \u003c= nums[2]: return \"none\" if nums[0] == nums[2]: return \"equilateral\" if nums[0] == nums[1] or nums[1] == nums[2]: return \"isosceles\" return \"scalene\" ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3024/"},{"content":"class Solution: def returnToBoundaryCount(self, nums: List[int]) -\u003e int: return sum(s == 0 for s in accumulate(nums)) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3028/"},{"content":"class Solution: def numberCount(self, a: int, b: int) -\u003e int: return sum(len(set(str(num))) == len(str(num)) for num in range(a, b + 1)) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3032/"},{"content":"class Solution: def modifiedMatrix(self, matrix: List[List[int]]) -\u003e List[List[int]]: m, n = len(matrix), len(matrix[0]) for j in range(n): mx = max(matrix[i][j] for i in range(m)) for i in range(m): if matrix[i][j] == -1: matrix[i][j] = mx return matrix ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3033/"},{"content":"class Solution: def resultArray(self, nums: List[int]) -\u003e List[int]: ar1 = [nums[0]] ar2 = [nums[1]] for x in nums[2:]: if ar1[-1] \u003e ar2[-1]: ar1.append(x) else: ar2.append(x) return ar1 + ar2 ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/3069/"},{"content":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def diameterOfBinaryTree(self, root: TreeNode) -\u003e int: diameter = [0] def dfs(root): if not root: return (0, 0) left = max(dfs(root.left)) right = max(dfs(root.right)) diameter[0] = max(diameter[0], left + right) return (left + 1, right + 1) dfs(root) return diameter[0] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/easy/543/"},{"content":"class Solution: def getGoodIndices(self, variables: List[List[int]], target: int) -\u003e List[int]: return [ i for i, (a, b, c, m) in enumerate(variables) if pow(pow(a, b, 10), c, m) == target ] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2961/"},{"content":"class Solution: def divisibleTripletCount(self, nums: List[int], d: int) -\u003e int: cnt = defaultdict(int) res, n = 0, len(nums) for j in range(n): for k in range(j + 1, n): x = (d - (nums[j] + nums[k]) % d) % d res += cnt[x] cnt[nums[j] % d] += 1 return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2964/"},{"content":"class Solution: def divideArray(self, nums: List[int], k: int) -\u003e List[List[int]]: nums.sort() res = [] n = len(nums) for i in range(0, n, 3): t = nums[i : i + 3] if t[2] - t[0] \u003e k: return [] res.append(t) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2966/"},{"content":"ps = [] for i in range(1, 10**5 + 1): s = str(i) t1 = s[::-1] t2 = s[:-1][::-1] ps.append(int(s + t1)) ps.append(int(s + t2)) ps.sort() class Solution: def minimumCost(self, nums: List[int]) -\u003e int: def f(x: int) -\u003e int: return sum(abs(v - x) for v in nums) nums.sort() i = bisect_left(ps, nums[len(nums) // 2]) return min(f(ps[j]) for j in range(i - 1, i + 2) if 0 \u003c= j \u003c len(ps)) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2967/"},{"content":"class Solution: def maximizeSquareArea( self, m: int, n: int, hFences: List[int], vFences: List[int] ) -\u003e int: def f(nums: List[int], k: int) -\u003e Set[int]: nums.extend([1, k]) nums.sort() return {b - a for a, b in combinations(nums, 2)} mod = 10**9 + 7 hs = f(hFences, m) vs = f(vFences, n) res = max(hs \u0026 vs, default=0) return res**2 % mod if res else -1 ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2975/"},{"content":"class Solution: def minimumCost( self, source: str, target: str, original: List[str], changed: List[str], cost: List[int], ) -\u003e int: g = [[inf] * 26 for _ in range(26)] for i in range(26): g[i][i] = 0 for x, y, z in zip(original, changed, cost): x = ord(x) - ord('a') y = ord(y) - ord('a') g[x][y] = min(g[x][y], z) for k in range(26): for i in range(26): for j in range(26): g[i][j] = min(g[i][j], g[i][k] + g[k][j]) res = 0 for a, b in zip(source, target): if a != b: x, y = ord(a) - ord('a'), ord(b) - ord('a') if g[x][y] \u003e= inf: return -1 res += g[x][y] return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2976/"},{"content":"class Solution: def mostExpensiveItem(self, primeOne: int, primeTwo: int) -\u003e int: return primeOne * primeTwo - primeOne - primeTwo ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2979/"},{"content":"class Solution: def maximumLength(self, s: str) -\u003e int: def check(x: int) -\u003e bool: cnt = defaultdict(int) i = 0 while i \u003c n: j = i + 1 while j \u003c n and s[j] == s[i]: j += 1 cnt[s[i]] += max(0, j - i - x + 1) i = j return max(cnt.values()) \u003e= 3 n = len(s) l, r = 0, n while l \u003c r: mid = (l + r + 1) \u003e\u003e 1 if check(mid): l = mid else: r = mid - 1 return -1 if l == 0 else l ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2981/"},{"content":"class Solution: def maximumLength(self, s: str) -\u003e int: def check(x: int) -\u003e bool: cnt = defaultdict(int) i = 0 while i \u003c n: j = i + 1 while j \u003c n and s[j] == s[i]: j += 1 cnt[s[i]] += max(0, j - i - x + 1) i = j return max(cnt.values()) \u003e= 3 n = len(s) l, r = 0, n while l \u003c r: mid = (l + r + 1) \u003e\u003e 1 if check(mid): l = mid else: r = mid - 1 return -1 if l == 0 else l ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2982/"},{"content":"class Solution: def selfDivisiblePermutationCount(self, n: int) -\u003e int: f = [0] * (1 \u003c\u003c n) f[0] = 1 for mask in range(1 \u003c\u003c n): i = mask.bit_count() for j in range(1, n + 1): if (mask \u003e\u003e (j - 1) \u0026 1) == 1 and (i % j == 0 or j % i == 0): f[mask] += f[mask ^ (1 \u003c\u003c (j - 1))] return f[-1] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2992/"},{"content":"class Solution: def minOperations(self, nums: List[int], k: int) -\u003e int: return reduce(xor, nums, k).bit_count() ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2997/"},{"content":"class Solution: def minimumOperationsToMakeEqual(self, x: int, y: int) -\u003e int: @cache def dfs(x: int) -\u003e int: if y \u003e= x: return y - x res = x - y res = min(res, x % 5 + 1 + dfs(x // 5)) res = min(res, 5 - x % 5 + 1 + dfs(x // 5 + 1)) res = min(res, x % 11 + 1 + dfs(x // 11)) res = min(res, 11 - x % 11 + 1 + dfs(x // 11 + 1)) return res return dfs(x) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/2998/"},{"content":"class Solution: def minMovesToCaptureTheQueen( self, a: int, b: int, c: int, d: int, e: int, f: int ) -\u003e int: def check(dirs, sx, sy, bx, by) -\u003e bool: for dx, dy in pairwise(dirs): for k in range(1, 8): x = sx + dx * k y = sy + dy * k if not (1 \u003c= x \u003c= 8 and 1 \u003c= y \u003c= 8) or (x, y) == (bx, by): break if (x, y) == (e, f): return True return False dirs1 = (-1, 0, 1, 0, -1) dirs2 = (-1, 1, 1, -1, -1) return 1 if check(dirs1, a, b, c, d) or check(dirs2, c, d, a, b) else 2 ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3001/"},{"content":"class Solution: def maximumSetSize(self, nums1: List[int], nums2: List[int]) -\u003e int: s1 = set(nums1) s2 = set(nums2) n = len(nums1) a = min(len(s1 - s2), n // 2) b = min(len(s2 - s1), n // 2) return min(a + b + len(s1 \u0026 s2), n) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3002/"},{"content":"class Solution: def maximumSubtreeSize(self, edges: List[List[int]], colors: List[int]) -\u003e int: def dfs(a: int, fa: int) -\u003e bool: ok = True for b in g[a]: if b != fa: t = dfs(b, a) ok = ok and colors[a] == colors[b] and t size[a] += size[b] if ok: nonlocal res res = max(res, size[a]) return ok n = len(edges) + 1 g = [[] for _ in range(n)] size = [1] * n for a, b in edges: g[a].append(b) g[b].append(a) res = 0 dfs(0, -1) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3004/"},{"content":"class Solution: def beautifulIndices(self, s: str, a: str, b: str, k: int) -\u003e List[int]: def build_prefix_function(pattern): prefix_function = [0] * len(pattern) j = 0 for i in range(1, len(pattern)): while j \u003e 0 and pattern[i] != pattern[j]: j = prefix_function[j - 1] if pattern[i] == pattern[j]: j += 1 prefix_function[i] = j return prefix_function def kmp_search(pattern, text, prefix_function): occurrences = [] j = 0 for i in range(len(text)): while j \u003e 0 and text[i] != pattern[j]: j = prefix_function[j - 1] if text[i] == pattern[j]: j += 1 if j == len(pattern): occurrences.append(i - j + 1) j = prefix_function[j - 1] return occurrences prefix_a = build_prefix_function(a) prefix_b = build_prefix_function(b) resa = kmp_search(a, s, prefix_a) resb = kmp_search(b, s, prefix_b) res = [] print(resa, resb) i = 0 j = 0 while i \u003c len(resa): while j \u003c len(resb): if abs(resb[j] - resa[i]) \u003c= k: res.append(resa[i]) break elif j + 1 \u003c len(resb) and abs(resb[j + 1] - resa[i]) \u003c abs( resb[j] - resa[i] ): j += 1 else: break i += 1 return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3006/"},{"content":"class Solution: def findMaximumNumber(self, k: int, x: int) -\u003e int: @cache def dfs(pos, limit, cnt): if pos == 0: return cnt res = 0 up = (self.num \u003e\u003e (pos - 1) \u0026 1) if limit else 1 for i in range(up + 1): res += dfs(pos - 1, limit and i == up, cnt + (i == 1 and pos % x == 0)) return res l, r = 1, 10**18 while l \u003c r: mid = (l + r + 1) \u003e\u003e 1 self.num = mid v = dfs(mid.bit_length(), True, 0) dfs.cache_clear() if v \u003c= k: l = mid else: r = mid - 1 return l ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3007/"},{"content":"class Solution: def canSortArray(self, nums: List[int]) -\u003e bool: pre_mx = -inf i, n = 0, len(nums) while i \u003c n: j = i + 1 cnt = nums[i].bit_count() mi = mx = nums[i] while j \u003c n and nums[j].bit_count() == cnt: mi = min(mi, nums[j]) mx = max(mx, nums[j]) j += 1 if pre_mx \u003e mi: return False pre_mx = mx i = j return True ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3011/"},{"content":"class Solution: def minimumArrayLength(self, nums: List[int]) -\u003e int: mi = min(nums) if any(x % mi for x in nums): return 1 return (nums.count(mi) + 1) // 2 ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3012/"},{"content":"class Solution: def countOfPairs(self, n: int, x: int, y: int) -\u003e List[int]: x, y = x - 1, y - 1 res = [0] * n for i in range(n): for j in range(i + 1, n): a = j - i b = abs(i - x) + 1 + abs(j - y) c = abs(i - y) + 1 + abs(j - x) res[min(a, b, c) - 1] += 2 return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3015/"},{"content":"class Solution: def minimumPushes(self, word: str) -\u003e int: cnt = Counter(word) res = 0 for i, x in enumerate(sorted(cnt.values(), reverse=True)): res += (i // 8 + 1) * x return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3016/"},{"content":"class Solution: def maximumLength(self, nums: List[int]) -\u003e int: cnt = Counter(nums) res = cnt[1] - (cnt[1] % 2 ^ 1) del cnt[1] for x in cnt: t = 0 while cnt[x] \u003e 1: x = x * x t += 2 t += 1 if cnt[x] else -1 res = max(res, t) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3020/"},{"content":"class Solution: def flowerGame(self, n: int, m: int) -\u003e int: return (n * m) // 2 ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3021/"},{"content":"# Definition for an infinite stream. # class InfiniteStream: # def next(self) -\u003e int: # pass class Solution: def findPattern( self, stream: Optional[\"InfiniteStream\"], pattern: List[int] ) -\u003e int: a = b = 0 m = len(pattern) half = m \u003e\u003e 1 mask1 = (1 \u003c\u003c half) - 1 mask2 = (1 \u003c\u003c (m - half)) - 1 for i in range(half): a |= pattern[i] \u003c\u003c (half - 1 - i) for i in range(half, m): b |= pattern[i] \u003c\u003c (m - 1 - i) x = y = 0 for i in count(1): v = stream.next() y = y \u003c\u003c 1 | v v = y \u003e\u003e (m - half) \u0026 1 y \u0026= mask2 x = x \u003c\u003c 1 | v x \u0026= mask1 if i \u003e= m and a == x and b == y: return i - m ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3023/"},{"content":"class Solution: def numberOfPairs(self, points: List[List[int]]) -\u003e int: points.sort(key=lambda x: (x[0], -x[1])) res = 0 for i, (_, y1) in enumerate(points): max_y = -inf for _, y2 in points[i + 1 :]: if max_y \u003c y2 \u003c= y1: max_y = y2 res += 1 return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3025/"},{"content":"class Solution: def maximumSubarraySum(self, nums: List[int], k: int) -\u003e int: res = -inf p = {nums[0]: 0} s, n = 0, len(nums) for i, x in enumerate(nums): s += x if x - k in p: res = max(res, s - p[x - k]) if x + k in p: res = max(res, s - p[x + k]) if i + 1 \u003c n and (nums[i + 1] not in p or p[nums[i + 1]] \u003e s): p[nums[i + 1]] = s return 0 if res == -inf else res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3026/"},{"content":"class Hashing: __slots__ = [\"mod\", \"h\", \"p\"] def __init__(self, s: str, base: int, mod: int): self.mod = mod self.h = [0] * (len(s) + 1) self.p = [1] * (len(s) + 1) for i in range(1, len(s) + 1): self.h[i] = (self.h[i - 1] * base + ord(s[i - 1])) % mod self.p[i] = (self.p[i - 1] * base) % mod def query(self, l: int, r: int) -\u003e int: return (self.h[r] - self.h[l - 1] * self.p[r - l + 1]) % self.mod class Solution: def minimumTimeToInitialState(self, word: str, k: int) -\u003e int: hashing = Hashing(word, 13331, 998244353) n = len(word) for i in range(k, n, k): if hashing.query(1, n - i) == hashing.query(i + 1, n): return i // k return (n + k - 1) // k ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3029/"},{"content":"class Solution: def resultGrid(self, image: List[List[int]], threshold: int) -\u003e List[List[int]]: n, m = len(image), len(image[0]) res = [[0] * m for _ in range(n)] ct = [[0] * m for _ in range(n)] for i in range(n - 2): for j in range(m - 2): region = True for k in range(3): for l in range(2): region \u0026= ( abs(image[i + k][j + l] - image[i + k][j + l + 1]) \u003c= threshold ) for k in range(2): for l in range(3): region \u0026= ( abs(image[i + k][j + l] - image[i + k + 1][j + l]) \u003c= threshold ) if region: tot = 0 for k in range(3): for l in range(3): tot += image[i + k][j + l] for k in range(3): for l in range(3): ct[i + k][j + l] += 1 res[i + k][j + l] += tot // 9 for i in range(n): for j in range(m): if ct[i][j] == 0: res[i][j] = image[i][j] else: res[i][j] //= ct[i][j] return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3030/"},{"content":"class Solution: def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -\u003e int: def f(a: int, b: int) -\u003e int: return 0 if a == b else (1 if a \u003c b else -1) res = 0 for i in range(len(nums) - len(pattern)): res += all( f(nums[i + k], nums[i + k + 1]) == p for k, p in enumerate(pattern) ) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3034/"},{"content":"class Solution: def maxPalindromesAfterOperations(self, words: List[str]) -\u003e int: s = mask = 0 for w in words: s += len(w) for c in w: mask ^= 1 \u003c\u003c (ord(c) - ord(\"a\")) s -= mask.bit_count() words.sort(key=len) res = 0 for w in words: s -= len(w) // 2 * 2 if s \u003c 0: break res += 1 return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/3035/"},{"content":"class Solution: def findTargetSumWays(self, nums: List[int], target: int) -\u003e int: @cache def dfs(i, t): if i == n: if t == target: return 1 return 0 return dfs(i + 1, t + nums[i]) + dfs(i + 1, t - nums[i]) res, n = 0, len(nums) return dfs(0, 0) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/494/"},{"content":"class Solution: def __init__(self, rects: List[List[int]]): self.rects = rects self.s = [0] * len(rects) for i, (x1, y1, x2, y2) in enumerate(rects): self.s[i] = self.s[i - 1] + (x2 - x1 + 1) * (y2 - y1 + 1) def pick(self) -\u003e List[int]: v = random.randint(1, self.s[-1]) idx = bisect_left(self.s, v) x1, y1, x2, y2 = self.rects[idx] return [random.randint(x1, x2), random.randint(y1, y2)] # Your Solution object will be instantiated and called as such: # obj = Solution(rects) # param_1 = obj.pick() ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/497/"},{"content":"class Solution: def findDiagonalOrder(self, mat: List[List[int]]) -\u003e List[int]: m, n = len(mat), len(mat[0]) res = [] for k in range(m + n - 1): t = [] i = 0 if k \u003c n else k - n + 1 j = k if k \u003c n else n - 1 while i \u003c m and j \u003e= 0: t.append(mat[i][j]) i += 1 j -= 1 if k % 2 == 0: t = t[::-1] res.extend(t) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/498/"},{"content":"class Solution: def nextGreaterElements(self, nums: List[int]) -\u003e List[int]: n = len(nums) res = [-1] * n stk = [] for i in range(n * 2 - 1, -1, -1): i %= n while stk and stk[-1] \u003c= nums[i]: stk.pop() if stk: res[i] = stk[-1] stk.append(nums[i]) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/503/"},{"content":"class Solution: def shortestDistance( self, maze: List[List[int]], start: List[int], destination: List[int] ) -\u003e int: m, n = len(maze), len(maze[0]) dirs = (-1, 0, 1, 0, -1) si, sj = start di, dj = destination q = deque([(si, sj)]) dist = [[inf] * n for _ in range(m)] dist[si][sj] = 0 while q: i, j = q.popleft() for a, b in pairwise(dirs): x, y, k = i, j, dist[i][j] while 0 \u003c= x + a \u003c m and 0 \u003c= y + b \u003c n and maze[x + a][y + b] == 0: x, y, k = x + a, y + b, k + 1 if k \u003c dist[x][y]: dist[x][y] = k q.append((x, y)) return -1 if dist[di][dj] == inf else dist[di][dj] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/505/"},{"content":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def findFrequentTreeSum(self, root: TreeNode) -\u003e List[int]: def dfs(root): if root is None: return 0 left, right = dfs(root.left), dfs(root.right) s = root.val + left + right counter[s] += 1 return s counter = Counter() dfs(root) mx = max(counter.values()) return [k for k, v in counter.items() if v == mx] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/508/"},{"content":"\"\"\" # Definition for a Node. class Node: def __init__(self, val): self.val = val self.left = None self.right = None self.parent = None \"\"\" class Solution: def inorderSuccessor(self, node: 'Node') -\u003e 'Optional[Node]': if node.right: node = node.right while node.left: node = node.left return node while node.parent and node == node.parent.right: node = node.parent return node.parent ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/510/"},{"content":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def findBottomLeftValue(self, root: Optional[TreeNode]) -\u003e int: def dfs(root, curr): nonlocal res, mx if root is None: return dfs(root.left, curr + 1) dfs(root.right, curr + 1) if mx \u003c curr: mx = curr res = root.val res = mx = 0 dfs(root, 1) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/513/"},{"content":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def largestValues(self, root: Optional[TreeNode]) -\u003e List[int]: def dfs(root, curr): if root is None: return if curr == len(res): res.append(root.val) else: res[curr] = max(res[curr], root.val) dfs(root.left, curr + 1) dfs(root.right, curr + 1) res = [] dfs(root, 0) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/515/"},{"content":"class Solution: def longestPalindromeSubseq(self, s: str) -\u003e int: n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for j in range(1, n): for i in range(j - 1, -1, -1): if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][-1] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/516/"},{"content":"class Solution: def change(self, amount: int, coins: List[int]) -\u003e int: dp = [0] * (amount + 1) dp[0] = 1 for coin in coins: for j in range(coin, amount + 1): dp[j] += dp[j - coin] return dp[-1] ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/518/"},{"content":"class Solution: def __init__(self, m: int, n: int): self.m = m self.n = n self.total = m * n self.mp = {} def flip(self) -\u003e List[int]: self.total -= 1 x = random.randint(0, self.total) idx = self.mp.get(x, x) self.mp[x] = self.mp.get(self.total, self.total) return [idx // self.n, idx % self.n] def reset(self) -\u003e None: self.total = self.m * self.n self.mp.clear() # Your Solution object will be instantiated and called as such: # obj = Solution(m, n) # param_1 = obj.flip() # obj.reset() ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/519/"},{"content":"class Solution: def findLUSlength(self, strs: List[str]) -\u003e int: def check(a, b): i = j = 0 while i \u003c len(a) and j \u003c len(b): if a[i] == b[j]: j += 1 i += 1 return j == len(b) n = len(strs) res = -1 for i in range(n): j = 0 while j \u003c n: if i == j or not check(strs[j], strs[i]): j += 1 else: break if j == n: res = max(res, len(strs[i])) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/522/"},{"content":"class Solution: def checkSubarraySum(self, nums: List[int], k: int) -\u003e bool: s = 0 mp = {0: -1} for i, v in enumerate(nums): s += v r = s % k if r in mp and i - mp[r] \u003e= 2: return True if r not in mp: mp[r] = i return False ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/523/"},{"content":"class Solution: def findLongestWord(self, s: str, dictionary: List[str]) -\u003e str: def check(a, b): m, n = len(a), len(b) i = j = 0 while i \u003c m and j \u003c n: if a[i] == b[j]: j += 1 i += 1 return j == n res = '' for a in dictionary: if check(s, a) and (len(res) \u003c len(a) or (len(res) == len(a) and res \u003e a)): res = a return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/524/"},{"content":"class Solution: def findMaxLength(self, nums: List[int]) -\u003e int: s = res = 0 mp = {0: -1} for i, v in enumerate(nums): s += 1 if v == 1 else -1 if s in mp: res = max(res, i - mp[s]) else: mp[s] = i return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/525/"},{"content":"class Solution: def countArrangement(self, n: int) -\u003e int: def dfs(i): nonlocal res, n if i == n + 1: res += 1 return for j in match[i]: if not vis[j]: vis[j] = True dfs(i + 1) vis[j] = False res = 0 vis = [False] * (n + 1) match = defaultdict(list) for i in range(1, n + 1): for j in range(1, n + 1): if j % i == 0 or i % j == 0: match[i].append(j) dfs(1) return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/526/"},{"content":"class Solution: def __init__(self, w: List[int]): self.s = [0] for c in w: self.s.append(self.s[-1] + c) def pickIndex(self) -\u003e int: x = random.randint(1, self.s[-1]) left, right = 1, len(self.s) - 1 while left \u003c right: mid = (left + right) \u003e\u003e 1 if self.s[mid] \u003e= x: right = mid else: left = mid + 1 return left - 1 # Your Solution object will be instantiated and called as such: # obj = Solution(w) # param_1 = obj.pickIndex() ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/528/"},{"content":"class Solution: def updateBoard(self, board: List[List[str]], click: List[int]) -\u003e List[List[str]]: def dfs(i: int, j: int): cnt = 0 for x in range(i - 1, i + 2): for y in range(j - 1, j + 2): if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and board[x][y] == \"M\": cnt += 1 if cnt: board[i][j] = str(cnt) else: board[i][j] = \"B\" for x in range(i - 1, i + 2): for y in range(j - 1, j + 2): if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and board[x][y] == \"E\": dfs(x, y) m, n = len(board), len(board[0]) i, j = click if board[i][j] == \"M\": board[i][j] = \"X\" else: dfs(i, j) return board ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/529/"},{"content":"class Solution: def findLonelyPixel(self, picture: List[List[str]]) -\u003e int: m, n = len(picture), len(picture[0]) rows, cols = [0] * m, [0] * n for i in range(m): for j in range(n): if picture[i][j] == 'B': rows[i] += 1 cols[j] += 1 res = 0 for i in range(m): if rows[i] == 1: for j in range(n): if picture[i][j] == 'B' and cols[j] == 1: res += 1 break return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/531/"},{"content":"class Solution: def findPairs(self, nums: List[int], k: int) -\u003e int: vis, res = set(), set() for v in nums: if v - k in vis: res.add(v - k) if v + k in vis: res.add(v) vis.add(v) return len(res) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/532/"},{"content":"class Solution: def findBlackPixel(self, picture: List[List[str]], target: int) -\u003e int: m, n = len(picture), len(picture[0]) rows = [0] * m cols = defaultdict(list) for i in range(m): for j in range(n): if picture[i][j] == 'B': rows[i] += 1 cols[j].append(i) t = [[False] * m for _ in range(m)] for i in range(m): for k in range(i, m): if i == k: t[i][k] = True else: t[i][k] = all([picture[i][j] == picture[k][j] for j in range(n)]) t[k][i] = t[i][k] res = 0 for i in range(m): if rows[i] == target: for j in range(n): if len(cols[j]) == target and all([t[i][k] for k in cols[j]]): res += 1 return res ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/533/"},{"content":"class Codec: def __init__(self): self.m = defaultdict() self.idx = 0 self.domain = 'https://tinyurl.com/' def encode(self, longUrl: str) -\u003e str: \"\"\"Encodes a URL to a shortened URL.\"\"\" self.idx += 1 self.m[str(self.idx)] = longUrl return f'{self.domain}{self.idx}' def decode(self, shortUrl: str) -\u003e str: \"\"\"Decodes a shortened URL to its original URL.\"\"\" idx = shortUrl.split('/')[-1] return self.m[idx] # Your Codec object will be instantiated and called as such: # codec = Codec() # codec.decode(codec.encode(url)) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/535/"},{"content":"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def str2tree(self, s: str) -\u003e TreeNode: def dfs(s): if not s: return None p = s.find('(') if p == -1: return TreeNode(int(s)) root = TreeNode(int(s[:p])) start = p cnt = 0 for i in range(p, len(s)): if s[i] == '(': cnt += 1 elif s[i] == ')': cnt -= 1 if cnt == 0: if start == p: root.left = dfs(s[start + 1 : i]) start = i + 1 else: root.right = dfs(s[start + 1 : i]) return root return dfs(s) ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/536/"},{"content":"class Solution: def complexNumberMultiply(self, num1: str, num2: str) -\u003e str: a, b = map(int, num1[:-1].split('+')) c, d = map(int, num2[:-1].split('+')) return f'{a * c - b * d}+{a * d + c * b}i' ","description":"","title":"","uri":"/en/tracks/algorithms-101/leetcode/medium/537/"},{"content":"LeetCode problem\nProblem Statement In this problem, you’re given an array of integers nums and an integer target. Your task is to find the indices of two numbers in the array that add up to the target. The input array is guaranteed to have exactly one solution, and you can’t use the same element twice. The indices can be returned in any order.\nNaive Solution A naive solution would involve using two nested loops to iterate through each pair of elements in the array and check if their sum is equal to the target. This approach has a time complexity of O(n^2), where n is the length of the input array. However, there is a more efficient solution that uses a hash table and has a time complexity of O(n).\nHints \u0026 Tips A hash table (or dictionary in Python) is a data structure that allows you to store and retrieve values in O(1) time on average. It uses key-value pairs, where each key is unique and maps to a specific value.\nApproach To solve this problem efficiently, we’ll use a hash table to store the indices of the numbers we’ve seen so far. For each number, we’ll check if the difference between the target and the current number is already in the hash table. If it is, we’ve found the two numbers that add up to the target, and we’ll return their indices.\nSteps Initialize an empty hash table to store the indices of the numbers we’ve seen so far. Iterate through the input array, for each number: Calculate the difference between the target and the current number. Check if the difference is already in the hash table. If it is, return the indices of the current number and the number that corresponds to the difference. If the difference is not in the hash table, add the current number and its index to the hash table. Since the problem guarantees that there is always a solution, we’ll always find the two numbers that add up to the target. Solution Here’s the Python code to implement this approach:\nfrom typing import List def twoSum(nums: List[int], target: int) -\u003e List[int]: seen = {} # Iterate through the input array for i, num in enumerate(nums): # Calculate the difference between the target and the current number diff = target - num # Check if the difference is already in the hash table if diff in seen: # Return the indices of the current number and the number that corresponds to the difference return [seen[diff], i] # Add the current number and its index to the hash table seen[num] = i ","description":"LeetCode 1. Two Sum","title":"1. Two Sum","uri":"/en/tracks/algorithms-101/leetcode/easy/1/"},{"content":"LeetCode 100\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -\u003e bool: if not p and not q: return True if not p or not q: return False if p.val != q.val: return False left = self.isSameTree(p.left, q.left) right = self.isSameTree(p.right, q.right) return left == right == True ","description":"LeetCode 100. Same Tree","title":"100. Same Tree","uri":"/en/tracks/algorithms-101/leetcode/easy/100/"},{"content":"LeetCode Problem 1004\nProblem Statement Given a binary array nums and an integer k, the task is to return the maximum number of consecutive 1’s in the array, with the possibility to flip at most k 0’s.\nNaive Solution A straight forward approach is to try flipping every combination of k zeros and checking for the longest sequence of 1’s. This would involve nested loops, with the outer loop iterating through the array and the inner loops flipping zeros and calculating sequences of 1’s. This approach can be extremely slow, especially for larger arrays.\nHints \u0026 Tips The task can be tackled more efficiently with a sliding window approach. This technique can be applied when we want to examine a continuous chunk of elements in an array, such as a substring or subarray.\nApproach: Sliding Window We expand our window to the right each time and record the zeros we find. If the number of zeros exceeds k, we shrink the window from the left until we’re back to at most k zeros. We can track the longest window we’ve found during this process, which corresponds to the maximum number of consecutive 1’s. If the number of zeros exceeds k, we shrink the window from the left until we’re back to at most k zeros.\nWe can track the longest window we’ve found during this process, which corresponds to the maximum number of consecutive 1’s.\nSteps Initialize two pointers, left and right, to represent the window’s boundaries. Also, initialize a counter zero_count to track zeros in the current window. Expand the right boundary of the window by moving the right pointer. If the current number is 0, increment the zero_count. If zero_count exceeds k, 4.1 move the left pointer to the right until a zero is excluded, 4.2 and decrement the zero_count. Track the maximum length of the window found. Solution def longestOnes(nums, k): left = 0 zero_count = 0 max_len = 0 for right in range(len(nums)): if nums[right] == 0: zero_count += 1 while zero_count \u003e k: if nums[left] == 0: zero_count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len ","description":"Understand the problem of finding the maximum consecutive ones in a binary array with the possibility of flipping some zeros.","title":"1004. Max Consecutive Ones III","uri":"/en/tracks/algorithms-101/leetcode/medium/1004/"},{"content":"LeetCode задача 104\nЗадача Дан корень бинарного дерева. Задача состоит в том, чтобы найти его максимальную глубину. Глубина бинарного дерева определяется как максимальное количество узлов на пути от корня дерева до любого листового узла, включая сам корень.\nПодсказки Бинарное дерево представляет собой иерархическую структуру, в которой каждый узел имеет максимум двух потомков: левого и правого.\nПодход / Идея решения Чтобы найти максимальную глубину бинарного дерева, можно использовать рекурсивный метод. Для каждого узла дерева, максимальная глубина поддерева с этим узлом в качестве корня будет равна максимуму из глубин левого и правого поддеревьев, увеличенному на 1 (сам узел).\nСам алгоритм кажется интуитивно понятным, если представить дерево как иерархию: чтобы узнать, насколько “глубоко” уходит каждая ветвь, просто спуститесь по ней, пока не достигнете конца, затем вернитесь, собирая информацию о глубине каждого поддерева.\nАлгоритм Если узел пуст, вернуть 0 (глубина пустого дерева равна 0). Рекурсивно найти глубину левого поддерева. Рекурсивно найти глубину правого поддерева. Максимальная глубина для текущего узла равна максимуму из глубин левого и правого поддеревьев, увеличенному на 1. Решение # Определение для бинарного дерева. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right def maxDepth(root): if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1 ","description":"LeetCode 104. Нахождение максимальной глубины бинарного дерева. Разбор задачи.","title":"104. Maximum Depth of Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/easy/104/"},{"content":"LeetCode problem 1046\nclass Solution: def lastStoneWeight(self, stones: List[int]) -\u003e int: h = [-x for x in stones] heapify(h) while len(h) \u003e 1: y, x = -heappop(h), -heappop(h) if x != y: heappush(h, x - y) return 0 if not h else -h[0] ","description":"1046. Last Stone Weight","title":"1046. Last Stone Weight","uri":"/en/tracks/algorithms-101/leetcode/easy/1046/"},{"content":"LeetCode problem 1047\nclass Solution: def removeDuplicates(self, s: str) -\u003e str: stk = [] for c in s: if stk and stk[-1] == c: stk.pop() else: stk.append(c) return ''.join(stk) ","description":"1047. Remove All Adjacent Duplicates In String","title":"1047. Remove All Adjacent Duplicates In String","uri":"/en/tracks/algorithms-101/leetcode/easy/1047/"},{"content":"LeetCode problem 1048\nProblem Statement You are given an array of words where each word consists of lowercase English letters. Your task is to determine the longest string chain you can form given this list. A word A can be a predecessor of word B if by adding exactly one letter to A (at any position), B is formed. The objective is to find the longest sequence where each word is a predecessor of the next.\nNaive Solution The straightforward brute-force way would be to try all possible combinations of word chains. Starting with each word, try to find its successor in the list and continue this until no more successors can be found. Remember the longest chain you can form. This solution, however, will be inefficient, especially with larger lists.\nHints \u0026 Tips A valuable hint for this problem is to consider sorting the words based on their lengths. This ensures that words of length n will only ever be predecessors to words of length n + 1.\nApproach The efficient way to solve this problem is using Dynamic Programming. The core idea is to maintain a hashmap where the key is a word and the value is the maximum chain length with that word as the end. This hashmap will assist in building solutions for longer words based on the solutions of shorter ones.\nSteps Sort the Words: First, sort the words by their lengths. This guarantees when processing a word, all potential predecessors have already been handled. Hashmap for Chain Length: As each word is processed, inspect all its possible predecessors (by removing one character from the word). Use the hashmap to fetch the chain length of the predecessor and add one to it. Determine Maximum Chain Length: As each word is processed, update the maximum chain length. Solution def longestStrChain(words): words.sort(key=len) dp = {} # remember the maximum chain length for each word max_chain = 0 for word in words: dp[word] = 1 # Every word's minimum chain length is 1 for i in range(len(word)): # For each word, explore all its potential predecessors prev_word = word[:i] + word[i+1:] if prev_word in dp: dp[word] = max(dp[word], dp[prev_word] + 1) max_chain = max(max_chain, dp[word]) return max_chain ","description":"Solving the 1048. Longest String Chain problem using Dynamic Programming.","title":"1048. Longest String Chain","uri":"/en/tracks/algorithms-101/leetcode/medium/1048/"},{"content":"LeetCode problem 1051\nclass Solution: def heightChecker(self, heights: List[int]) -\u003e int: cnt = [0] * 101 for h in heights: cnt[h] += 1 res = i = 0 for j in range(1, 101): while cnt[j]: cnt[j] -= 1 if heights[i] != j: res += 1 i += 1 return res ","description":"1051. Height Checker","title":"1051. Height Checker","uri":"/en/tracks/algorithms-101/leetcode/easy/1051/"},{"content":"LeetCode problem 1056\nclass Solution: def confusingNumber(self, n: int) -\u003e bool: x, y = n, 0 d = [0, 1, -1, -1, -1, -1, 9, -1, 8, 6] while x: x, v = divmod(x, 10) if d[v] \u003c 0: return False y = y * 10 + d[v] return y != n ","description":"1056. Confusing Number","title":"1056. Confusing Number","uri":"/en/tracks/algorithms-101/leetcode/easy/1056/"},{"content":"LeetCode problem 1064\nclass Solution: def fixedPoint(self, arr: List[int]) -\u003e int: left, right = 0, len(arr) - 1 while left \u003c right: mid = (left + right) \u003e\u003e 1 if arr[mid] \u003e= mid: right = mid else: left = mid + 1 return left if arr[left] == left else -1 ","description":"1064. Fixed Point","title":"1064. Fixed Point","uri":"/en/tracks/algorithms-101/leetcode/easy/1064/"},{"content":"LeetCode problem 1065\nclass Trie: def __init__(self): self.children = [None] * 26 self.is_end = False def insert(self, word): node = self for c in word: idx = ord(c) - ord('a') if node.children[idx] is None: node.children[idx] = Trie() node = node.children[idx] node.is_end = True class Solution: def indexPairs(self, text: str, words: List[str]) -\u003e List[List[int]]: trie = Trie() for w in words: trie.insert(w) n = len(text) res = [] for i in range(n): node = trie for j in range(i, n): idx = ord(text[j]) - ord('a') if node.children[idx] is None: break node = node.children[idx] if node.is_end: res.append([i, j]) return res ","description":"1065. Index Pairs of a String","title":"1065. Index Pairs of a String","uri":"/en/tracks/algorithms-101/leetcode/easy/1065/"},{"content":"LeetCode problem\nProblem Statement The problem is about finding a greatest common divisor (GCD) of two strings. The term “GCD” might be familiar from mathematics, as the largest number that divides two numbers without leaving a remainder. Here, we extend the idea to strings: a string x is a GCD of strings str1 and str2 if x can be repeatedly appended to itself to obtain str1 and str2.\nNaive Solution A naive approach would be to find all possible divisors of str1 and str2, and then find the largest common divisor. This would involve generating all substrings of str1 and str2 which is time-consuming and unnecessary.\nSolution Observing the problem, we see a similarity with the Euclidean algorithm for calculating the GCD of two numbers. In the Euclidean algorithm, the GCD of two numbers a and b (a \u003e b) is the same as the GCD of b and a mod b.\nWe can extend this logic to strings. If a string x is a GCD of str1 and str2, then str1 and str2 can both be written in the form x + x + ... + x. Therefore, str1 - str2 (which is similar to a mod b) should also be expressible in the form x + x + ... + x.\nThis observation allows us to use a similar approach to the Euclidean algorithm to solve this problem.\nWhy finding Greatest common divisor?\nIn case smallest string consist multiple same parts.\nExample: str1 = “ABABAB”, str2 = “ABAB”.\nlen(str1) = 6, len(str2) = 4. We can’t use whole str2 but common minimum length -\u003e 2.\nSteps Here are the high-level steps of the algorithm:\nIf str1 + str2 is not equal to str2 + str1, return an empty string. Otherwise, find the GCD of the lengths of str1 and str2. Return the prefix substring of str1 with length equal to the GCD. Solution Here is a Python solution that implements the above algorithm:\nclass Solution: def gcdOfStrings(self, str1: str, str2: str) -\u003e str: def gcd(a, b): while b != 0: a, b = b, a % b return a if str1 + str2 != str2 + str1: return '' max_substr_len = gcd(len(str1), len(str2)) return str1[:max_substr_len] In the gcdOfStrings method, we first check if str1 + str2 is equal to str2 + str1. If they are not equal, no common divisor string exists, so we return an empty string. If they are equal, we find the GCD of the lengths of str1 and str2 and return the prefix substring of str1 with length equal to the GCD.\nThe gcd method is a standard implementation of the Euclidean algorithm to find the GCD of two numbers.\n","description":"Finding the greatest common divisor of two strings","title":"1071. Greatest Common Divisor of Strings","uri":"/en/tracks/algorithms-101/leetcode/easy/1071/"},{"content":"LeetCode problem 1078\nclass Solution: def findOcurrences(self, text: str, first: str, second: str) -\u003e List[str]: words = text.split() res = [] for i in range(len(words) - 2): a, b, c = words[i : i + 3] if a == first and b == second: res.append(c) return res ","description":"1078. Occurrences After Bigram","title":"1078. Occurrences After Bigram","uri":"/en/tracks/algorithms-101/leetcode/easy/1078/"},{"content":"LeetCode problem 1085\nclass Solution: def sumOfDigits(self, nums: List[int]) -\u003e int: x = min(nums) s = 0 while x: s += x % 10 x //= 10 return s \u0026 1 ^ 1 ","description":"1085. Sum of Digits in the Minimum Number","title":"1085. Sum of Digits in the Minimum Number","uri":"/en/tracks/algorithms-101/leetcode/easy/1085/"},{"content":"LeetCode problem 1086\nclass Solution: def highFive(self, items: List[List[int]]) -\u003e List[List[int]]: d = defaultdict(list) m = 0 for i, x in items: d[i].append(x) m = max(m, i) res = [] for i in range(1, m + 1): if xs := d[i]: avg = sum(nlargest(5, xs)) // 5 res.append([i, avg]) return res ","description":"1086. High Five","title":"1086. High Five","uri":"/en/tracks/algorithms-101/leetcode/easy/1086/"},{"content":"LeetCode problem 1089\nclass Solution: def duplicateZeros(self, arr: List[int]) -\u003e None: \"\"\" Do not return anything, modify arr in-place instead. \"\"\" n = len(arr) i, k = -1, 0 while k \u003c n: i += 1 k += 1 if arr[i] else 2 j = n - 1 if k == n + 1: arr[j] = 0 i, j = i - 1, j - 1 while ~j: if arr[i] == 0: arr[j] = arr[j - 1] = arr[i] j -= 1 else: arr[j] = arr[i] i, j = i - 1, j - 1 ","description":"1089. Duplicate Zeros","title":"1089. Duplicate Zeros","uri":"/en/tracks/algorithms-101/leetcode/easy/1089/"},{"content":"LeetCode problem 1099\nclass Solution: def twoSumLessThanK(self, nums: List[int], k: int) -\u003e int: nums.sort() i, j = 0, len(nums) - 1 res = -1 while i \u003c j: if (s := nums[i] + nums[j]) \u003c k: res = max(res, s) i += 1 else: j -= 1 return res ","description":"1099. Two Sum Less Than K","title":"1099. Two Sum Less Than K","uri":"/en/tracks/algorithms-101/leetcode/easy/1099/"},{"content":"LeetCode problem 11\nProblem Statement The problem involves an array of integers height, where each element represents the height of a line. These lines, along with the x-axis, form a series of containers. Your goal is to find the two lines that form the container with the greatest area.\nNaive Solution The naive solution is to consider all pairs of lines and calculate the area of water each pair can contain. You would keep track of the maximum area encountered. This solution would take O(n^2) time, which is not efficient.\nHints \u0026 Tips The height of the water in any container is limited by the shorter of the two lines forming the container. Moreover, farther the lines, more will be the width of the container and thus, more will be the water it can contain.\nApproach We can achieve a more efficient solution by using the two-pointer technique.\nStart with two pointers, one at the start and one at the end of the array. The initial container therefore includes the entire array, and has a certain amount of water. Then, moving the pointers inward, you measure the container at each step, always choosing the pointer at the shorter line to move. This is based on the rationale that moving the pointer at the taller line would not affect the container’s height but reduce its width.\nSteps Initialize left and right pointers at the start and end of the array. Calculate the initial area and set it as the maximum area. While the left pointer is less than the right pointer: If the height at the left pointer is less than or equal to the height at the right pointer, increment the left pointer. Otherwise, decrement the right pointer. Calculate the area each time the pointers are moved, and update the maximum area if the current area is greater. Why it is important to find the minimum height of pointer?:\nThe area of the container is determined by the shorter line and the distance between the two lines. Therefore, if we move the pointer at the taller line inward, we might get a taller height but the width between the two lines, and therefore the possible area, is guaranteed to decrease.\nSo the overall area is most likely going to decrease or stay the same. Because of this, we decide to move the pointer at the shorter line, in the hopes that we will find a taller line that will increase the area.\nFor example, consider an array [1,8,6,2,5,4,8,3,7]. When the left pointer is at the first position (height 1) and the right pointer is at the second last position (height 3), if we move the right pointer, we may come across a taller line (7) but since the left line (height 1) is still shorter, the possible area is still going to be less due to reduced width.\nHowever, if we move the left pointer, we may come across a taller line (8) and this could increase the possible area.\nSo, the condition if height[left] \u003c= height[right] is there to always move the pointer at the shorter line.\nSolution def maxArea(height): left = 0 right = len(height) - 1 max_area = 0 while left \u003c right: min_height = min(height[left], height[right]) area = min_height * (right - left) max_area = max(max_area, area) if height[left] \u003c= height[right]: left += 1 else: right -= 1 return max_area ","description":"Finding the container that can hold the most water based on given heights.","title":"11. Container With Most Water","uri":"/en/tracks/algorithms-101/leetcode/medium/11/"},{"content":"LeetCode problem 1103\nclass Solution: def distributeCandies(self, candies: int, num_people: int) -\u003e List[int]: res = [0] * num_people i = 0 while candies: res[i % num_people] += min(candies, i + 1) candies -= min(candies, i + 1) i += 1 return res ","description":"1103. Distribute Candies to People","title":"1103. Distribute Candies to People","uri":"/en/tracks/algorithms-101/leetcode/easy/1103/"},{"content":"LeetCode problem 1108\nclass Solution: def defangIPaddr(self, address: str) -\u003e str: return address.replace('.', '[.]') ","description":"1108. Defanging an IP Address","title":"1108. Defanging an IP Address","uri":"/en/tracks/algorithms-101/leetcode/easy/1108/"},{"content":"LeetCode problem 1114\nfrom threading import Semaphore class Foo: def __init__(self): self.a = Semaphore(1) self.b = Semaphore(0) self.c = Semaphore(0) def first(self, printFirst: 'Callable[[], None]') -\u003e None: self.a.acquire() # printFirst() outputs \"first\". Do not change or remove this line. printFirst() self.b.release() def second(self, printSecond: 'Callable[[], None]') -\u003e None: self.b.acquire() # printSecond() outputs \"second\". Do not change or remove this line. printSecond() self.c.release() def third(self, printThird: 'Callable[[], None]') -\u003e None: self.c.acquire() # printThird() outputs \"third\". Do not change or remove this line. printThird() self.a.release() ","description":"1114. Print in Order","title":"1114. Print in Order","uri":"/en/tracks/algorithms-101/leetcode/easy/1114/"},{"content":"LeetCode problem 1118\nclass Solution: def numberOfDays(self, year: int, month: int) -\u003e int: leap = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) days = [0, 31, 29 if leap else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] return days[month] ","description":"1118. Number of Days in a Month","title":"1118. Number of Days in a Month","uri":"/en/tracks/algorithms-101/leetcode/easy/1118/"},{"content":"LeetCode problem 1119\nclass Solution: def removeVowels(self, s: str) -\u003e str: return \"\".join(c for c in s if c not in \"aeiou\") ","description":"1119. Remove Vowels from a String","title":"1119. Remove Vowels from a String","uri":"/en/tracks/algorithms-101/leetcode/easy/1119/"},{"content":"LeetCode problem 1122\nclass Solution: def relativeSortArray(self, arr1: List[int], arr2: List[int]) -\u003e List[int]: pos = {x: i for i, x in enumerate(arr2)} return sorted(arr1, key=lambda x: pos.get(x, 1000 + x)) ","description":"1122. Relative Sort Array","title":"1122. Relative Sort Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1122/"},{"content":"LeetCode problem 1128\nclass Solution: def numEquivDominoPairs(self, dominoes: List[List[int]]) -\u003e int: cnt = Counter() res = 0 for a, b in dominoes: x = a * 10 + b if a \u003c b else b * 10 + a res += cnt[x] cnt[x] += 1 return res ","description":"1128. Number of Equivalent Domino Pairs","title":"1128. Number of Equivalent Domino Pairs","uri":"/en/tracks/algorithms-101/leetcode/easy/1128/"},{"content":"LeetCode problem 1133\nclass Solution: def largestUniqueNumber(self, nums: List[int]) -\u003e int: cnt = Counter(nums) return max((x for x, v in cnt.items() if v == 1), default=-1) ","description":"1133. Largest Unique Number","title":"1133. Largest Unique Number","uri":"/en/tracks/algorithms-101/leetcode/easy/1133/"},{"content":"LeetCode problem 1134\nclass Solution: def isArmstrong(self, n: int) -\u003e bool: k = len(str(n)) s, x = 0, n while x: s += (x % 10) ** k x //= 10 return s == n ","description":"1134. Armstrong Number","title":"1134. Armstrong Number","uri":"/en/tracks/algorithms-101/leetcode/easy/1134/"},{"content":"LeetCode problem 1137\nimport numpy as np class Solution: def tribonacci(self, n: int) -\u003e int: if n == 0: return 0 if n \u003c 3: return 1 factor = np.mat([(1, 1, 0), (1, 0, 1), (1, 0, 0)], np.dtype(\"O\")) res = np.mat([(1, 1, 0)], np.dtype(\"O\")) n -= 3 while n: if n \u0026 1: res *= factor factor *= factor n \u003e\u003e= 1 return res.sum() ","description":"1137. N-th Tribonacci Number","title":"1137. N-th Tribonacci Number","uri":"/en/tracks/algorithms-101/leetcode/easy/1137/"},{"content":"LeetCode problem 1138\nclass Solution: def alphabetBoardPath(self, target: str) -\u003e str: i = j = 0 res = [] for c in target: v = ord(c) - ord(\"a\") x = v // 5 y = v % 5 while j \u003e y: j -= 1 res.append(\"L\") while i \u003e x: i -= 1 res.append(\"U\") while j \u003c y: j += 1 res.append(\"R\") while i \u003c x: i += 1 res.append(\"D\") res.append(\"!\") return \"\".join(res) ","description":"1138. Alphabet Board Path","title":"1138. Alphabet Board Path","uri":"/en/tracks/algorithms-101/leetcode/medium/1138/"},{"content":"LeetCode problem 1150\nclass Solution: def isMajorityElement(self, nums: List[int], target: int) -\u003e bool: left = bisect_left(nums, target) right = left + len(nums) // 2 return right \u003c len(nums) and nums[right] == target ","description":"1150. Check If a Number Is Majority Element in a Sorted Array","title":"1150. Check If a Number Is Majority Element in a Sorted Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1150/"},{"content":"LeetCode problem 1152\nclass Solution: def mostVisitedPattern( self, username: List[str], timestamp: List[int], website: List[str]) -\u003e List[str]: d = defaultdict(list) for user, _, site in sorted(zip(username, timestamp, website), key=lambda x: x[1]): d[user].append(site) cnt = Counter() for sites in d.values(): m = len(sites) s = set() if m \u003e 2: for i in range(m - 2): for j in range(i + 1, m - 1): for k in range(j + 1, m): s.add((sites[i], sites[j], sites[k])) for t in s: cnt[t] += 1 return sorted(cnt.items(), key=lambda x: (-x[1], x[0]))[0][0] ","description":"1152. Analyze User Website Visit Pattern","title":"1152. Analyze User Website Visit Pattern","uri":"/en/tracks/algorithms-101/leetcode/medium/1152/"},{"content":"LeetCode problem 1154\nclass Solution: def dayOfYear(self, date: str) -\u003e int: y, m, d = (int(s) for s in date.split('-')) v = 29 if y % 400 == 0 or (y % 4 == 0 and y % 100) else 28 days = [31, v, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] return sum(days[: m - 1]) + d ","description":"1154. Day of the Year","title":"1154. Day of the Year","uri":"/en/tracks/algorithms-101/leetcode/easy/1154/"},{"content":"LeetCode problem\nfrom collections import deque class Solution: def connect(self, root: 'Optional[Node]') -\u003e 'Optional[Node]': if not root: return root queue = deque([root]) while queue: level_size = len(queue) for i in range(level_size): node = queue.popleft() if i \u003c level_size - 1: node.next = queue[0] if node.left: queue.append(node.left) if node.right: queue.append(node.right) return root LeetCode Editorial:\nEditorial ","description":"116. Populating Next Right Pointers in Each Node","title":"116. Populating Next Right Pointers in Each Node","uri":"/en/tracks/algorithms-101/leetcode/medium/116/"},{"content":"LeetCode problem 1160\nclass Solution: def countCharacters(self, words: List[str], chars: str) -\u003e int: cnt = Counter(chars) res = 0 for w in words: wc = Counter(w) if all(cnt[c] \u003e= v for c, v in wc.items()): res += len(w) return res ","description":"1160. Find Words That Can Be Formed by Characters","title":"1160. Find Words That Can Be Formed by Characters","uri":"/en/tracks/algorithms-101/leetcode/easy/1160/"},{"content":"LeetCode problem 1162\nclass Solution: def maxDistance(self, grid: List[List[int]]) -\u003e int: n = len(grid) q = deque((i, j) for i in range(n) for j in range(n) if grid[i][j]) res = -1 if len(q) in (0, n * n): return res dirs = (-1, 0, 1, 0, -1) while q: for _ in range(len(q)): i, j = q.popleft() for a, b in pairwise(dirs): x, y = i + a, j + b if 0 \u003c= x \u003c n and 0 \u003c= y \u003c n and grid[x][y] == 0: grid[x][y] = 1 q.append((x, y)) res += 1 return res ","description":"1162. As Far from Land as Possible","title":"1162. As Far from Land as Possible","uri":"/en/tracks/algorithms-101/leetcode/medium/1162/"},{"content":"LeetCode problem 1165\nclass Solution: def calculateTime(self, keyboard: str, word: str) -\u003e int: pos = {c: i for i, c in enumerate(keyboard)} res = i = 0 for c in word: res += abs(pos[c] - i) i = pos[c] return res ","description":"1165. Single-Row Keyboard","title":"1165. Single-Row Keyboard","uri":"/en/tracks/algorithms-101/leetcode/easy/1165/"},{"content":"LeetCode problem 1171\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeZeroSumSublists(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: dummy = ListNode(next=head) last = {} s = 0 cur = dummy while cur: s += cur.val last[s] = cur cur = cur.next s = 0 cur = dummy while cur: s += cur.val cur.next = last[s].next cur = cur.next return dummy.next ","description":"1171. Remove Zero Sum Consecutive Nodes from Linked List","title":"1171. Remove Zero Sum Consecutive Nodes from Linked List","uri":"/en/tracks/algorithms-101/leetcode/medium/1171/"},{"content":"LeetCode problem 1175\nclass Solution: def numPrimeArrangements(self, n: int) -\u003e int: def count(n): cnt = 0 primes = [True] * (n + 1) for i in range(2, n + 1): if primes[i]: cnt += 1 for j in range(i + i, n + 1, i): primes[j] = False return cnt cnt = count(n) res = factorial(cnt) * factorial(n - cnt) return res % (10**9 + 7) ","description":"1175. Prime Arrangements","title":"1175. Prime Arrangements","uri":"/en/tracks/algorithms-101/leetcode/easy/1175/"},{"content":"LeetCode problem 1176\nclass Solution: def dietPlanPerformance( self, calories: List[int], k: int, lower: int, upper: int ) -\u003e int: def check(s): if s \u003c lower: return -1 if s \u003e upper: return 1 return 0 s, n = sum(calories[:k]), len(calories) res = check(s) for i in range(k, n): s += calories[i] - calories[i - k] res += check(s) return res ","description":"1176. Diet Plan Performance","title":"1176. Diet Plan Performance","uri":"/en/tracks/algorithms-101/leetcode/easy/1176/"},{"content":"LeetCode задача 118\nЗадача Дано целое число numRows. Верните первые numRows строк Треугольника Паскаля.\nВ Треугольнике Паскаля каждое число является суммой двух чисел, находящихся непосредственно над ним.\nПодсказки Для построения каждой следующей строки можно использовать последнюю строку в текущей итерации. Например, если есть строка [1, 2, 1], то следующая строка начнется и закончится с 1, а числа внутри будут получены путем сложения пар чисел: 1+2 и 2+1.\nПодход Для того чтобы построить Треугольник Паскаля, начнем с первой строки, состоящей только из числа 1. Для каждой следующей строки мы добавляем новое число, равное сумме двух чисел из предыдущей строки, которые стоят непосредственно над ним. Индексы этих двух чисел - это индекс текущего(искомого) числа в новом массиве и предыдущий индекс от него.\nЭто повторяем до тех пор, пока не достигнем нужного количества строк.\nАлгоритм / Абстрактный алгоритм Инициализируем список с первой строкой: [[1]]. Для каждой новой строки: Начинаем строку с числа 1. Для каждого числа в предыдущей строке (кроме последнего) добавляем к новой строке сумму этого числа и следующего за ним. Заканчиваем строку числом 1. Решение class Solution: def generate(self, numRows: int): triangle = [[1]] #1 for i in range(1, numRows): #2 prev_row = triangle[-1] # Последняя строка в текущем треугольнике new_row = [1] # Новая строка начнется с 1 for j in range(len(prev_row) - 1): # Добавляем к новой строке сумму пар чисел из предыдущей строки new_row.append(prev_row[j] + prev_row[j + 1]) new_row.append(1) # Заканчиваем строку числом 1 triangle.append(new_row) # Добавляем новую строку к треугольнику return triangle ","description":"LeetCode 118. Построение первых строк Треугольника Паскаля. Разбор задачи.","title":"118. Pascal's Triangle","uri":"/en/tracks/algorithms-101/leetcode/easy/118/"},{"content":"LeetCode problem 1180\nclass Solution: def countLetters(self, s: str) -\u003e int: res = 0 i, n = 0, len(s) while i \u003c n: j = i cnt = 0 while j \u003c n and s[j] == s[i]: j += 1 cnt += 1 res += cnt i = j return res ","description":"1180. Count Substrings with Only One Distinct Letter","title":"1180. Count Substrings with Only One Distinct Letter","uri":"/en/tracks/algorithms-101/leetcode/easy/1180/"},{"content":"LeetCode problem 1184\nclass Solution: def distanceBetweenBusStops( self, distance: List[int], start: int, destination: int ) -\u003e int: a, n = 0, len(distance) while start != destination: a += distance[start] start = (start + 1) % n return min(a, sum(distance) - a) ","description":"1184. Distance Between Bus Stops","title":"1184. Distance Between Bus Stops","uri":"/en/tracks/algorithms-101/leetcode/easy/1184/"},{"content":"LeetCode problem 1185\nclass Solution: def dayOfTheWeek(self, d: int, m: int, y: int) -\u003e str: if m \u003c 3: m += 12 y -= 1 c = y // 100 y = y % 100 w = (c // 4 - 2 * c + y + y // 4 + 13 * (m + 1) // 5 + d - 1) % 7 return [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", ][w] ","description":"1185. Day of the Week","title":"1185. Day of the Week","uri":"/en/tracks/algorithms-101/leetcode/easy/1185/"},{"content":"LeetCode problem 1189\nclass Solution: def maxNumberOfBalloons(self, text: str) -\u003e int: cnt = Counter(text) cnt['o'] \u003e\u003e= 1 cnt['l'] \u003e\u003e= 1 return min(cnt[c] for c in 'balon') ","description":"1189. Maximum Number of Balloons","title":"1189. Maximum Number of Balloons","uri":"/en/tracks/algorithms-101/leetcode/easy/1189/"},{"content":"LeetCode problem 1196\nclass Solution: def maxNumberOfApples(self, weight: List[int]) -\u003e int: weight.sort() s = 0 for i, x in enumerate(weight): s += x if s \u003e 5000: return i return len(weight) ","description":"1196. How Many Apples Can You Put into the Basket","title":"1196. How Many Apples Can You Put into the Basket","uri":"/en/tracks/algorithms-101/leetcode/easy/1196/"},{"content":"LeetCode problem 1200\nclass Solution: def minimumAbsDifference(self, arr: List[int]) -\u003e List[List[int]]: arr.sort() mi = min(b - a for a, b in pairwise(arr)) return [[a, b] for a, b in pairwise(arr) if b - a == mi] ","description":"1200. Minimum Absolute Difference","title":"1200. Minimum Absolute Difference","uri":"/en/tracks/algorithms-101/leetcode/easy/1200/"},{"content":"LeetCode problem\nProblem Statement Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.\nNaive Solution A naive approach would be to create a dictionary to store the count of each integer, then iterate over the dictionary and compare each count with the counts of other integers. This approach requires O(n^2) time complexity, where n is the length of the array. This is not efficient for large input sizes.\nHints \u0026 Tips To solve this problem efficiently, we can use Python’s built-in Counter class from the collections module. A Counter is a dictionary subclass for counting hashable objects. It’s a collection where elements are stored as dictionary keys, and their counts are stored as dictionary values.\nApproach Create a Counter object from the input array. Convert the Counter object to a dictionary. Convert the dictionary values to a set. Compare the size of the set with the size of the dictionary. If they are equal, return true. Otherwise, return false. Steps Import the Counter class from the collections module. Create a Counter object from the input array arr. Convert the Counter object to a dictionary dict_counts. Convert the dictionary values to a set unique_counts. Compare the size of the set with the size of the dictionary. If they are equal, return true. Otherwise, return false. Solution from collections import Counter def uniqueOccurrences(arr): # Create a Counter object from the input array dict_counts = dict(Counter(arr)) # {1: 3, 2: 2, 3: 1} # Convert the dictionary values to a set unique_counts = set(dict_counts.values()) # Compare the size of the set with the size of the dictionary return len(unique_counts) == len(dict_counts) This function uses the Counter class to count the occurrences of each integer in the input array. It then converts the Counter object to a dictionary and the dictionary values to a set. Finally, it compares the size of the set with the size of the dictionary.\nIf they are equal, it returns true. Otherwise, it returns false.\n","description":"1207. Unique Number of Occurrences","title":"1207. Unique Number of Occurrences","uri":"/en/tracks/algorithms-101/leetcode/easy/1207/"},{"content":"LeetCode problem 1213\nclass Solution: def arraysIntersection( self, arr1: List[int], arr2: List[int], arr3: List[int] ) -\u003e List[int]: res = [] for x in arr1: i = bisect_left(arr2, x) j = bisect_left(arr3, x) if i \u003c len(arr2) and j \u003c len(arr3) and arr2[i] == x and arr3[j] == x: res.append(x) return res ","description":"1213. Intersection of Three Sorted Arrays","title":"1213. Intersection of Three Sorted Arrays","uri":"/en/tracks/algorithms-101/leetcode/easy/1213/"},{"content":"LeetCode problem 1217\nclass Solution: def minCostToMoveChips(self, position: List[int]) -\u003e int: a = sum(p % 2 for p in position) b = len(position) - a return min(a, b) ","description":"1217. Minimum Cost to Move Chips to The Same Position","title":"1217. Minimum Cost to Move Chips to The Same Position","uri":"/en/tracks/algorithms-101/leetcode/easy/1217/"},{"content":"LeetCode problem\nTo solve this problem, we can use a greedy approach.\nThe idea is to keep adding the profit whenever the price on the next day is higher than the price on the current day.\nThis way, we will maximize profit.\nclass Solution: def maxProfit(self, prices: List[int]) -\u003e int: profit = 0 for i in range(1, len(prices)): if prices[i] \u003e prices[i - 1]: profit += prices[i] - prices[i - 1] return profit LeetCode Editorial:\nEditorial ","description":"122. Best Time to Buy and Sell Stock II","title":"122. Best Time to Buy and Sell Stock II","uri":"/en/tracks/algorithms-101/leetcode/medium/122/"},{"content":"LeetCode problem 1221\nclass Solution: def balancedStringSplit(self, s: str) -\u003e int: res = l = 0 for c in s: if c == 'L': l += 1 else: l -= 1 if l == 0: res += 1 return res ","description":"1221. Split a String in Balanced Strings","title":"1221. Split a String in Balanced Strings","uri":"/en/tracks/algorithms-101/leetcode/easy/1221/"},{"content":"LeetCode problem 1228\nclass Solution: def missingNumber(self, arr: List[int]) -\u003e int: n = len(arr) d = (arr[-1] - arr[0]) // n for i in range(1, n): if arr[i] != arr[i - 1] + d: return arr[i - 1] + d return arr[0] ","description":"1228. Missing Number In Arithmetic Progression","title":"1228. Missing Number In Arithmetic Progression","uri":"/en/tracks/algorithms-101/leetcode/easy/1228/"},{"content":"LeetCode problem 1232\nclass Solution: def checkStraightLine(self, coordinates: List[List[int]]) -\u003e bool: x1, y1 = coordinates[0] x2, y2 = coordinates[1] for x, y in coordinates[2:]: if (x - x1) * (y2 - y1) != (y - y1) * (x2 - x1): return False return True ","description":"1232. Check If It Is a Straight Line","title":"1232. Check If It Is a Straight Line","uri":"/en/tracks/algorithms-101/leetcode/easy/1232/"},{"content":"LeetCode problem 1243\nclass Solution: def transformArray(self, arr: List[int]) -\u003e List[int]: f = True while f: f = False t = arr[:] for i in range(1, len(t) - 1): if t[i] \u003e t[i - 1] and t[i] \u003e t[i + 1]: arr[i] -= 1 f = True if t[i] \u003c t[i - 1] and t[i] \u003c t[i + 1]: arr[i] += 1 f = True return arr ","description":"1243. Array Transformation","title":"1243. Array Transformation","uri":"/en/tracks/algorithms-101/leetcode/easy/1243/"},{"content":"LeetCode problem 1249\nApproach The problem can be solved in two passes using a stack for the first pass and a simple iteration for the second:\nFirst Pass (Identify Invalid Parentheses): Iterate through the string, and for every character: If it’s ‘(’, push its index onto the stack. If it’s ‘)’ and the stack is not empty (there is a matching ‘(’), pop from the stack. Otherwise, mark this ‘)’ as invalid. After the iteration, any indices remaining in the stack represent unmatched ‘(’ that should be removed. Second Pass (Build the Result String): Iterate through the string again, building the result string by including characters that are not marked as invalid. class Solution: def minRemoveToMakeValid(self, s: str) -\u003e str: stack = [] # Stack to keep track of the indices of '(' remove_indices = set() # Set to keep track of indices to remove for i, char in enumerate(s): # First pass to identify invalid parentheses if char == '(': stack.append(i) elif char == ')': if stack: stack.pop() else: remove_indices.add(i) # Add indices of remaining '(' to remove remove_indices = remove_indices.union(set(stack)) # Second pass to build the result string result = [s[i] for i in range(len(s)) if i not in remove_indices] return ''.join(result) ","description":"1249. Minimum Remove to Make Valid Parentheses","title":"1249. Minimum Remove to Make Valid Parentheses","uri":"/en/tracks/algorithms-101/leetcode/medium/1249/"},{"content":"LeetCode problem 1252\nclass Solution: def oddCells(self, m: int, n: int, indices: List[List[int]]) -\u003e int: row = [0] * m col = [0] * n for r, c in indices: row[r] += 1 col[c] += 1 cnt1 = sum(v % 2 for v in row) cnt2 = sum(v % 2 for v in col) return cnt1 * (n - cnt2) + cnt2 * (m - cnt1) ","description":"1252. Cells with Odd Values in a Matrix","title":"1252. Cells with Odd Values in a Matrix","uri":"/en/tracks/algorithms-101/leetcode/easy/1252/"},{"content":"LeetCode problem 1266\nclass Solution: def minTimeToVisitAllPoints(self, points: List[List[int]]) -\u003e int: return sum( max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1])) for p1, p2 in pairwise(points) ) ","description":"1266. Minimum Time Visiting All Points","title":"1266. Minimum Time Visiting All Points","uri":"/en/tracks/algorithms-101/leetcode/easy/1266/"},{"content":"LeetCode problem 1271\nclass Solution: def toHexspeak(self, num: str) -\u003e str: s = set('ABCDEFIO') t = hex(int(num))[2:].upper().replace('0', 'O').replace('1', 'I') return t if all(c in s for c in t) else 'ERROR' ","description":"1271. Hexspeak","title":"1271. Hexspeak","uri":"/en/tracks/algorithms-101/leetcode/easy/1271/"},{"content":"LeetCode problem 1275\nclass Solution: def tictactoe(self, moves: List[List[int]]) -\u003e str: n = len(moves) cnt = [0] * 8 for k in range(n - 1, -1, -2): i, j = moves[k] cnt[i] += 1 cnt[j + 3] += 1 if i == j: cnt[6] += 1 if i + j == 2: cnt[7] += 1 if any(v == 3 for v in cnt): return \"B\" if k \u0026 1 else \"A\" return \"Draw\" if n == 9 else \"Pending\" ","description":"1275. Find Winner on a Tic Tac Toe Game","title":"1275. Find Winner on a Tic Tac Toe Game","uri":"/en/tracks/algorithms-101/leetcode/easy/1275/"},{"content":"LeetCode problem 1279\nfrom threading import Lock class TrafficLight: def __init__(self): self.lock = Lock() self.road = 1 def carArrived( self, carId: int, # ID of the car # ID of the road the car travels on. Can be 1 (road A) or 2 (road B) roadId: int, direction: int, # Direction of the car # Use turnGreen() to turn light to green on current road turnGreen: 'Callable[[], None]', # Use crossCar() to make car cross the intersection crossCar: 'Callable[[], None]', ) -\u003e None: self.lock.acquire() if self.road != roadId: self.road = roadId turnGreen() crossCar() self.lock.release() ","description":"1279. Traffic Light Controlled Intersection","title":"1279. Traffic Light Controlled Intersection","uri":"/en/tracks/algorithms-101/leetcode/easy/1279/"},{"content":"LeetCode problem\nSave all numbers in set to make it possible to get number at O(1). For each element look for the current+1 element if exists. class Solution: def longestConsecutive(self, nums: List[int]) -\u003e int: res = 0 nset = set(nums) for x in nset: if x - 1 not in nset: # prevent double calculations _max = 1 cur = x while cur + 1 in nset: _max += 1 cur += 1 res = max(_max, res) return res ","description":"128. Longest Consecutive Sequence","title":"128. Longest Consecutive Sequence","uri":"/en/tracks/algorithms-101/leetcode/medium/128/"},{"content":"LeetCode problem 1281\nclass Solution: def subtractProductAndSum(self, n: int) -\u003e int: nums = list(map(int, str(n))) return prod(nums) - sum(nums) ","description":"1281. Subtract the Product and Sum of Digits of an Integer","title":"1281. Subtract the Product and Sum of Digits of an Integer","uri":"/en/tracks/algorithms-101/leetcode/easy/1281/"},{"content":"LeetCode задача 1282\nЗадача Есть n человек, которые разделены на неизвестное количество групп. Каждому человеку присвоен уникальный ID от 0 до n - 1.\nДан массив целых чисел groupSizes, где groupSizes[i] — это размер группы, в которой находится человек i. Задача заключается в том, чтобы вернуть список групп таким образом, чтобы каждый человек i был в группе размером groupSizes[i].\nПодход Основная идея решения заключается в использовании словаря для хранения временных групп, пока их размер не достигнет необходимого. Как только размер временной группы достигнет необходимого, добавьте ее в результат и начните новую группу с этим размером.\nАлгоритм Инициализируем словарь для временного хранения групп по их размеру и список для итогового результата. Итерируемся по groupSizes, добавляя каждого человека в соответствующую группу в словаре. Когда группа достигает своего размера, добавьте ее в результат и очистите соответствующий список в словаре. Решение from typing import List class Solution: def groupThePeople(self, groupSizes: List[int]) -\u003e List[List[int]]: groups = {} # временное хранение групп result = [] # итоговый список групп for i, size in enumerate(groupSizes): if size not in groups: # Если размер группы еще не существует в словаре, groups[size] = [] # инициализируем его пустым списком groups[size].append(i) if len(groups[size]) == size: # Если группа достигла своего размера, result.append(groups[size]) # добавляем ее в результат и очищаем список groups[size] = [] return result ","description":"LeetCode 1282. Группировка людей по размерам их групп. Разбор задачи.","title":"1282. Group the People Given the Group Size They Belong To","uri":"/en/tracks/algorithms-101/leetcode/medium/1282/"},{"content":"LeetCode problem 129\nTraverse the tree and check for leaf nodes specifically that are left children. Consider using a depth-first search (DFS) approach.\nThe strategy is to recursively traverse the tree, and at each node, check if it has a left child that is a leaf. If it is, we add its value to the sum. We continue traversing until all nodes are visited.\nApproach Define a helper function dfs(node) that will traverse the tree: Check if the current node is None; if yes, return 0. Check if the left child of the node is a leaf (i.e., has no left or right child). If it is, add its value to the sum. Recursively call the helper for the left and right children of the current node. Return the sum of values from the left and right child calls plus the leaf node value if applicable. Call this dfs function starting from the root of the tree. class Solution: def sumNumbers(self, root: Optional[TreeNode]) -\u003e int: def dfs(node): if not node: return 0 res = 0 if node.left and not node.left.left and not node.left.right: res += node.left.val res += dfs(node.left) res += dfs(node.right) return res return dfs(root) # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def sumNumbers(self, root: Optional[TreeNode]) -\u003e int: def dfs(root, sum_so_far): if root is None: return 0 res = 0 sum_so_far = sum_so_far * 10 + root.val if root.left is None and root.right is None: return sum_so_far res += dfs(root.left, sum_so_far) res += dfs(root.right, sum_so_far) return res res = dfs(root, 0) return res ","description":"129. Sum Root to Leaf Numbers","title":"129. Sum Root to Leaf Numbers","uri":"/en/tracks/algorithms-101/leetcode/medium/129/"},{"content":"LeetCode problem 1290\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def getDecimalValue(self, head: ListNode) -\u003e int: res = 0 while head: res = res \u003c\u003c 1 | head.val head = head.next return res ","description":"1290. Convert Binary Number in a Linked List to Integer","title":"1290. Convert Binary Number in a Linked List to Integer","uri":"/en/tracks/algorithms-101/leetcode/easy/1290/"},{"content":"LeetCode problem 1295\nclass Solution: def findNumbers(self, nums: List[int]) -\u003e int: return sum(len(str(v)) % 2 == 0 for v in nums) ","description":"1295. Find Numbers with Even Number of Digits","title":"1295. Find Numbers with Even Number of Digits","uri":"/en/tracks/algorithms-101/leetcode/easy/1295/"},{"content":"LeetCode problem 1299\nclass Solution: def replaceElements(self, arr: List[int]) -\u003e List[int]: m = -1 for i in range(len(arr) - 1, -1, -1): t = arr[i] arr[i] = m m = max(m, t) return arr ","description":"1299. Replace Elements with Greatest Element on Right Side","title":"1299. Replace Elements with Greatest Element on Right Side","uri":"/en/tracks/algorithms-101/leetcode/easy/1299/"},{"content":"LeetCode problem\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.\nExample 1:\nInput: s = \"III\" Output: 3 Explanation: III = 3. Example 2:\nInput: s = \"MCMXCIV\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. First accepted class Solution: def romanToInt(self, s: str) -\u003e int: dict = {'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000} n_sum = 0 prev = 0 for c in reversed(s): n = dict[c] n = -n if n in (1,10,100) and prev in (n*5, n*10) else n n_sum += n prev = abs(n) return n_sum ","description":"LeetCode 13. Roman to Integer - Solution","title":"13. Roman to Integer","uri":"/en/tracks/algorithms-101/leetcode/easy/13/"},{"content":"LeetCode problem\nNaive Solution:\nA naive solution would be to iterate through each cell in the grid, and for each O, check if it is surrounded by X’s in all four directions (up, down, left, and right). If so, flip it to X. However, this method has a high time complexity and does not take advantage of any properties of the problem.\nApproach: The more efficient solution is to perform a Depth-First Search (DFS) starting from the border O’s.\nDFS is a way to explore a graph or tree by visiting as deep as possible in a single path before backtracking.\nLogic:\nIn this problem, we will mark the border O’s and all their adjacent O’s as not to be flipped to X. Will temporary change these cells with O!. This means that if (later) cell is marked as O! then we will change it back to O. All other cells should be X. Loop through borders. If O is in cell then check its neighbors (dfs). Border cell mark to O! Then, we can iterate through the entire grid, flipping any O’s that are not marked as not to be flipped. class Solution: def dfs(self, board, row, col): # If the current cell is out of bounds or not an 'O', return and stop DFS if ( row \u003c 0 or col \u003c 0 or row \u003e= len(board) or col \u003e= len(board[0]) or board[row][col] != \"O\" # X or O! ): return # Mark the current cell as 'O!' (Don't flip) board[row][col] = \"O!\" # Define the possible directions to move (up, down, left, right) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Explore each direction recursively by calling the DFS function for dr, dc in directions: self.dfs(board, row + dr, col + dc) def solve(self, board): m = len(board) n = len(board[0]) # Iterate through the border cells # rows for row in range(m): for col in [0, n - 1]: # left border coll, right border coll # If a border cell contains 'O', perform DFS on that cell if board[row][col] == \"O\": self.dfs(board, row, col) # cells for col in range(n): for row in [0, m - 1]: # upper border row, bottom border row if board[row][col] == \"O\": self.dfs(board, row, col) # Iterate through the entire grid for row in range(m): for col in range(n): if board[row][col] == \"O!\": board[row][col] = \"O\" else: board[row][col] = \"X\" return board ","description":"130. Surrounded Regions","title":"130. Surrounded Regions","uri":"/en/tracks/algorithms-101/leetcode/medium/130/"},{"content":"LeetCode problem 1304\nclass Solution: def sumZero(self, n: int) -\u003e List[int]: res = list(range(1, n)) res.append(-sum(res)) return res ","description":"1304. Find N Unique Integers Sum up to Zero","title":"1304. Find N Unique Integers Sum up to Zero","uri":"/en/tracks/algorithms-101/leetcode/easy/1304/"},{"content":"LeetCode problem 1309\nclass Solution: def freqAlphabets(self, s: str) -\u003e str: def get(s): return chr(ord('a') + int(s) - 1) i, n = 0, len(s) res = [] while i \u003c n: if i + 2 \u003c n and s[i + 2] == '#': res.append(get(s[i : i + 2])) i += 3 else: res.append(get(s[i])) i += 1 return ''.join(res) ","description":"1309. Decrypt String from Alphabet to Integer Mapping","title":"1309. Decrypt String from Alphabet to Integer Mapping","uri":"/en/tracks/algorithms-101/leetcode/easy/1309/"},{"content":"LeetCode problem\nNaive Solution:\nA naive solution would be to generate all possible partitions of the given string and then check if every substring in each partition is a palindrome.\nHowever, this approach would be inefficient, as there would be an exponential number of partitions to check.\nApproach:\nUsing Backtracking.\nLogic:\nDefine a helper function, is_palindrome, to check if a given substring is a palindrome. Define the backtrack function to find all palindrome partitions recursively. This function will take the current position in the string and the current partition as input arguments. current_position: An integer representing the position in the string that we are currently examining. We start at position 0 (the first character) and move towards the end of the string current_partition: A list of strings representing a partition of the string with palindromes up to the current position. We start with an empty list and build it up as we find valid palindrome substrings. In the backtrack function, if the current position is at the end of the string, add the current partition to the result list, which stores all valid palindrome partitions found so far. Iterate through the string from the current position to the end. For each character, extract the substring from the current position to the current character and check if this substring is a palindrome using the is_palindrome function. If the substring is a palindrome, add it to the current partition and call the backtrack function recursively with the next position. After the backtrack function call, remove the last substring from the current partition. This is the backtracking step, which allows the function to explore other possible palindrome substrings starting from the current position. Call the backtrack function with the initial values (current_position = 0 and current_partition = []) and return the result list. The backtrack function works by iterating through the string from the current position to the end, checking if the substring from the current position to the current character is a palindrome.\nIf it finds a palindrome, it adds this substring to the current_partition and calls itself recursively with the next position.\nThis process continues until we reach the end of the string, at which point we have found a valid partition, and we add the current_partition to the result list.\nAfter the recursive call, the function backtracks by removing the last substring from the current_partition. This step allows the function to explore other possible palindrome substrings starting from the current position.\nIn summary, the backtrack function is a recursive helper function that helps us explore all possible palindrome partitions by iterating through the string, checking for palindromes, and calling itself recursively with updated input arguments.\nclass Solution: def partition(self, s): def is_palindrome(substr): return substr == substr[::-1] result = [] def backtrack(start, current_partition): if start == len(s): result.append(current_partition[:]) return for end in range(start + 1, len(s) + 1): substr = s[start:end] if is_palindrome(substr): current_partition.append(substr) backtrack(end, current_partition) current_partition.pop() backtrack(0, []) return result Your browser does not support the video tag. Problem 131: Palindrome Partitioning ","description":"131. Palindrome Partitioning","title":"131. Palindrome Partitioning","uri":"/en/tracks/algorithms-101/leetcode/medium/131/"},{"content":"LeetCode problem 1313\nclass Solution: def decompressRLElist(self, nums: List[int]) -\u003e List[int]: res = [] for i in range(1, len(nums), 2): res.extend([nums[i]] * nums[i - 1]) return res ","description":"1313. Decompress Run-Length Encoded List","title":"1313. Decompress Run-Length Encoded List","uri":"/en/tracks/algorithms-101/leetcode/easy/1313/"},{"content":"LeetCode problem 1317\nclass Solution: def getNoZeroIntegers(self, n: int) -\u003e List[int]: def f(x): while x: if x % 10 == 0: return False x //= 10 return True for a in range(1, n): b = n - a if f(a) and f(b): return [a, b] ","description":"1317. Convert Integer to the Sum of Two No-Zero Integers","title":"1317. Convert Integer to the Sum of Two No-Zero Integers","uri":"/en/tracks/algorithms-101/leetcode/easy/1317/"},{"content":"LeetCode problem 1331\nclass Solution: def arrayRankTransform(self, arr: List[int]) -\u003e List[int]: t = sorted(set(arr)) return [bisect_right(t, x) for x in arr] ","description":"1331. Rank Transform of an Array","title":"1331. Rank Transform of an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1331/"},{"content":"LeetCode problem 1332\nclass Solution: def removePalindromeSub(self, s: str) -\u003e int: return 1 if s[::-1] == s else 2 ","description":"1332. Remove Palindromic Subsequences","title":"1332. Remove Palindromic Subsequences","uri":"/en/tracks/algorithms-101/leetcode/easy/1332/"},{"content":"LeetCode problem 1337\nclass Solution: def kWeakestRows(self, mat: List[List[int]], k: int) -\u003e List[int]: m, n = len(mat), len(mat[0]) res = [n - bisect_right(row[::-1], 0) for row in mat] idx = list(range(m)) idx.sort(key=lambda i: res[i]) return idx[:k] ","description":"1337. The K Weakest Rows in a Matrix","title":"1337. The K Weakest Rows in a Matrix","uri":"/en/tracks/algorithms-101/leetcode/easy/1337/"},{"content":"LeetCode problem\nNaive Solution:\nA naive solution would be to try starting from each gas station and check if you can complete the circuit. For each gas station, calculate the remaining gas in the tank after traveling to the next station.\nIf the gas is not enough to travel to the next station, stop and try starting from the next gas station.\nApproach:\nIn this problem, we can use a greedy algorithm\nWe can keep track of the total gas and total cost while iterating through the gas stations.\nIf the total gas is greater than or equal to the total cost, it is guaranteed that there exists a solution.\nSolution:\nclass Solution: def canCompleteCircuit(self, gas, cost) -\u003e int: total_gas = 0 total_cost = 0 star_idx = 0 current_gas = 0 for i in range(len(gas)): total_gas += gas[i] total_cost += cost[i] current_gas += gas[i] - cost[i] if current_gas \u003c 0: star_idx = i + 1 current_gas = 0 return star_idx if total_gas \u003e= total_cost else -1 Your browser does not support the video tag. LeetCode Problem 134 Video Solution ","description":"LeetCode 131. Gas Station","title":"134. Gas Station","uri":"/en/tracks/algorithms-101/leetcode/medium/134/"},{"content":"LeetCode problem 1342\nclass Solution: def numberOfSteps(self, num: int) -\u003e int: if num == 0: return 0 return 1 + ( self.numberOfSteps(num // 2) if num % 2 == 0 else self.numberOfSteps(num - 1) ) ","description":"1342. Number of Steps to Reduce a Number to Zero","title":"1342. Number of Steps to Reduce a Number to Zero","uri":"/en/tracks/algorithms-101/leetcode/easy/1342/"},{"content":"LeetCode problem 1346\nclass Solution: def checkIfExist(self, arr: List[int]) -\u003e bool: if arr.count(0) \u003e 1: return True arr.sort() n = len(arr) for v in arr: idx = bisect_left(arr, v * 2) if v != 0 and idx != n and arr[idx] == v * 2: return True return False ","description":"1346. Check If N and Its Double Exist","title":"1346. Check If N and Its Double Exist","uri":"/en/tracks/algorithms-101/leetcode/easy/1346/"},{"content":"LeetCode problem 1351\nclass Solution: def countNegatives(self, grid: List[List[int]]) -\u003e int: return sum(bisect_left(row[::-1], 0) for row in grid) ","description":"1351. Count Negative Numbers in a Sorted Matrix","title":"1351. Count Negative Numbers in a Sorted Matrix","uri":"/en/tracks/algorithms-101/leetcode/easy/1351/"},{"content":"LeetCode problem 1359\nProblem Statement You’re tasked with finding all valid sequences of pickup and delivery events for n orders such that for every order, the delivery always comes after its respective pickup. Because the answer can be immense, you’re to return the result modulo (10^9 + 7).\nNaive Solution A straightforward approach might be to generate all potential permutations of pickup and delivery actions and then exclude the unsuitable ones. However, this method would be exceedingly inefficient and would not scale for larger n values.\nHints \u0026 Tips Pattern observation can greatly simplify the problem. Breaking down the problem for smaller n values can reveal these patterns.\nApproach By breaking down the problem and observing patterns for initial n values, a pattern emerges, providing insight into solving for any n.\nObservations For n=1, there’s only 1 sequence: (P1, D1). For n=2, by adding (P2,D2) to the sequence (P1,D1), the number of possible sequences becomes 3+2+1 = 6. For n=3, the number of possible sequences becomes 6 x (5+4+3+2+1) = 90. A pattern emerges where the result for n can be calculated from the result for n-1. This pattern can be exploited to create a formula for any n.\nSolution def countOrders(n: int) -\u003e int: MOD = 10**9 + 7 res = 1 for x in range(1, n + 1): prev_order_combinations = res order_combinations = x * (x * 2 - 1) res = prev_order_combinations * order_combinations % MOD return res ","description":"Detailed explanation for solving the LeetCode 1359. Count All Valid Pickup and Delivery Options problem.","title":"1359. Count All Valid Pickup and Delivery Options","uri":"/en/tracks/algorithms-101/leetcode/hard/1359/"},{"content":"LeetCode problem 136\nclass Solution: def singleNumber(self, nums: List[int]) -\u003e int: d = {} for i in nums: if i in d: del d[i] else: d[i]=1 return d.popitem()[0] Consider using a bit manipulation technique, specifically XOR, to solve this problem efficiently.\nThe concept of XOR (exclusive OR) operation can be used cleverly here. XOR of a number with itself is 0, and the XOR of a number with 0 is the number itself. Also, XOR operation is commutative and associative, which means the order of operations does not change the result.\nApproach Using Bit Manipulation:\nInitialization: Start with a variable, say single, initialized to 0. Iteration: Traverse through each number in the array. Apply XOR operation between single and the current number, and update single with the result. Result: After completing the iteration, single will hold the unique number because all pairs of duplicate numbers will cancel each other out due to the XOR operation, leaving the unique number. def singleNumber(nums): single = 0 for num in nums: single ^= num return single class Solution: def singleNumber(self, nums: List[int]) -\u003e int: return reduce(xor, nums) ","description":"136. Single Number","title":"136. Single Number","uri":"/en/tracks/algorithms-101/leetcode/easy/136/"},{"content":"LeetCode problem 1360\nclass Solution: def daysBetweenDates(self, date1: str, date2: str) -\u003e int: def isLeapYear(year: int) -\u003e bool: return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) def daysInMonth(year: int, month: int) -\u003e int: days = [ 31, 28 + int(isLeapYear(year)), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, ] return days[month - 1] def calcDays(date: str) -\u003e int: year, month, day = map(int, date.split(\"-\")) days = 0 for y in range(1971, year): days += 365 + int(isLeapYear(y)) for m in range(1, month): days += daysInMonth(year, m) days += day return days return abs(calcDays(date1) - calcDays(date2)) ","description":"1360. Number of Days Between Two Dates","title":"1360. Number of Days Between Two Dates","uri":"/en/tracks/algorithms-101/leetcode/easy/1360/"},{"content":"LeetCode problem 1365\nclass Solution: def smallerNumbersThanCurrent(self, nums: List[int]) -\u003e List[int]: cnt = [0] * 102 for x in nums: cnt[x + 1] += 1 s = list(accumulate(cnt)) return [s[x] for x in nums] ","description":"1365. How Many Numbers Are Smaller Than the Current Number","title":"1365. How Many Numbers Are Smaller Than the Current Number","uri":"/en/tracks/algorithms-101/leetcode/easy/1365/"},{"content":"LeetCode problem 1370\nclass Solution: def sortString(self, s: str) -\u003e str: cnt = Counter(s) cs = ascii_lowercase + ascii_lowercase[::-1] res = [] while len(res) \u003c len(s): for c in cs: if cnt[c]: res.append(c) cnt[c] -= 1 return \"\".join(res) ","description":"1370. Increasing Decreasing String","title":"1370. Increasing Decreasing String","uri":"/en/tracks/algorithms-101/leetcode/easy/1370/"},{"content":"LeetCode problem 1372\nProblem Statement Given the root of a binary tree, the task is to find the longest ZigZag path contained in that tree. A ZigZag path is defined by a sequence starting at any node and switching between left and right directions at each subsequent step.\nNaive Solution A simplistic approach would be to kick off from every node and emulate the ZigZag movement until it’s no longer feasible, all the while updating the longest path encountered. This method can be rather inefficient as it leads to a lot of recalculations.\nHints \u0026 Tips A Depth First Search (DFS) can be an efficient way to tackle this problem. The current path length and direction can be passed as arguments to the DFS function, negating the need for recalculations.\nApproach Imagine walking through the tree. Every time you take a step, you must decide whether to go left or right. But, the twist here is that you have to alternate your direction at every step. The challenge? Find the longest path you can take without breaking this rule.\nTo systematically explore all possible paths, we use Depth First Search (DFS), a tree traversal strategy. Instead of starting from scratch at every node, we remember our previous direction (left or right) and continue in the opposite direction, effectively extending our ZigZag path. If a move in the current direction isn’t possible, that path ends there, but the search continues. By doing so, we can explore all potential ZigZag paths efficiently.\nSteps Initialize DFS from the root, considering both left and right as potential starting directions. At each node, based on your previous direction, try extending the ZigZag by moving in the opposite direction, thus increasing the length. If you hit a dead end (no further movement possible in the current direction), check if this path length is your longest so far. Regardless of whether the current path continues, keep exploring the tree in both directions. Solution class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Solution: def longestZigZag(self, root: TreeNode) -\u003e int: self.max_len = 0 def dfs(node, direction, length): if not node: return self.max_len = max(self.max_len, length) # Update the maximum length if direction == \"left\": # If the last direction was left, we try to move right dfs(node.right, \"right\", length + 1) dfs(node.left, \"left\", 1) else: dfs(node.left, \"left\", length + 1) dfs(node.right, \"right\", 1) dfs(root, \"left\", 0) dfs(root, \"right\", 0) return self.max_len ","description":"An in-depth exploration of the Longest ZigZag Path in a Binary Tree problem.","title":"1372. Longest ZigZag Path in a Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1372/"},{"content":"LeetCode problem 1374\nclass Solution: def generateTheString(self, n: int) -\u003e str: return 'a' * n if n \u0026 1 else 'a' * (n - 1) + 'b' ","description":"1374. Generate a String With Characters That Have Odd Counts","title":"1374. Generate a String With Characters That Have Odd Counts","uri":"/en/tracks/algorithms-101/leetcode/easy/1374/"},{"content":"LeetCode problem 1379\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def getTargetCopy( self, original: TreeNode, cloned: TreeNode, target: TreeNode ) -\u003e TreeNode: def dfs(root1: TreeNode, root2: TreeNode) -\u003e TreeNode: if root1 is None: return None if root1 == target: return root2 return dfs(root1.left, root2.left) or dfs(root1.right, root2.right) return dfs(original, cloned) ","description":"1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree","title":"1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree","uri":"/en/tracks/algorithms-101/leetcode/easy/1379/"},{"content":"LeetCode problem\nThe problem asks to create a deep copy of a given linked list with a random pointer in each node. A deep copy means that the new linked list will have completely new nodes, and none of its pointers should point to the nodes in the original list. Both the next and random pointers of the new nodes should point to the new nodes in the copied list in the same order as the original list.\nNaive Solution:\nA naive solution would be to first create a copy of the original linked list without the random pointers.\nThen, for each node in the copied list, search for the node in the original list that its random pointer is pointing to, and update the random pointer in the copied list accordingly.\nThis solution would take O(n^2) time complexity, as we need to search for the random node for each node in the copied list.\nLogic:\nInitialize a hashmap to store the mapping of original nodes to new nodes Iterate through the original list to create new nodes and add their mappings to the hashmap Iterate through the original list again to update the next and random pointers of the new nodes using the hashmap Return the head of the copied linked list Solution:\nclass Solution: def copyRandomList(self, head: 'Optional[Node]') -\u003e 'Optional[Node]': if not head: return None nodes = {} cur = head new_head = Node(cur.val) new_cur = new_head nodes[cur] = new_cur while cur: # create mapping old-new linked nodes node = Node(cur.val) nodes[cur] = node cur = cur.next cur = head while cur: if cur.next: nodes[cur].next = nodes[cur.next] if cur.random: nodes[cur].random = nodes[cur.random] cur = cur.next return nodes[head] Your browser does not support the video tag. LeetCode Problem 138 Video Solution ","description":"LeetCode 138. Copy List with Random Pointer | Python solution and explanation","title":"138. Copy List with Random Pointer","uri":"/en/tracks/algorithms-101/leetcode/medium/138/"},{"content":"LeetCode problem 1380\nclass Solution: def luckyNumbers(self, matrix: List[List[int]]) -\u003e List[int]: rows = {min(row) for row in matrix} cols = {max(col) for col in zip(*matrix)} return list(rows \u0026 cols) ","description":"1380. Lucky Numbers in a Matrix","title":"1380. Lucky Numbers in a Matrix","uri":"/en/tracks/algorithms-101/leetcode/easy/1380/"},{"content":"LeetCode problem 1385\nclass Solution: def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -\u003e int: def check(a: int) -\u003e bool: i = bisect_left(arr2, a - d) return i == len(arr2) or arr2[i] \u003e a + d arr2.sort() return sum(check(a) for a in arr1) ","description":"1385. Find the Distance Value Between Two Arrays","title":"1385. Find the Distance Value Between Two Arrays","uri":"/en/tracks/algorithms-101/leetcode/easy/1385/"},{"content":"LeetCode problem 1389\nclass Solution: def createTargetArray(self, nums: List[int], index: List[int]) -\u003e List[int]: target = [] for x, i in zip(nums, index): target.insert(i, x) return target ","description":"1389. Create Target Array in the Given Order","title":"1389. Create Target Array in the Given Order","uri":"/en/tracks/algorithms-101/leetcode/easy/1389/"},{"content":"LeetCode problem\nApproach:\nDynamic Programming.\nLogic:\nUsing DP:\nIterate through each character of string s. Generate all possible substrings ending at the current index. Check if the substring is in wordDict: If it is, check if the index before the substring’s first index is marked as True (this indicates that the part of the string before the current substring can be segmented into words in wordDict). If it is, then mark the current index as True. Solution:\nclass Solution: def wordBreak(self, s, wordDict): n = len(s) dp = [False] * n for end in range(1, n + 1): # 1. n+1 to include last char for start in range(end): # 2. Generate all substrings ending at i substring = s[start:end] # 3.1 check if previous part before substring met condition prev_substr_end_index = start - 1 # if true then everything before passed condition if prev_substr_end_index == -1 or dp[prev_substr_end_index]: # 3.1 if substring in wordDict: # 3. dp[end - 1] = True break # on current step(end index) we know that meet condition return dp[-1] Optimized solution:\nclass Solution: def wordBreak(self, s, wordDict): n = len(s) dp = [False] * (n + 1) # use n+1 list dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in wordDict: dp[i] = True break return dp[-1] Your browser does not support the video tag. LeetCode Problem 139 ","description":"LeetCode 139. Word Break | Python solution and explanation","title":"139. Word Break","uri":"/en/tracks/algorithms-101/leetcode/medium/139/"},{"content":"LeetCode problem 1394\nclass Solution: def findLucky(self, arr: List[int]) -\u003e int: cnt = Counter(arr) res = -1 for x, v in cnt.items(): if x == v and res \u003c x: res = x return res ","description":"1394. Find Lucky Integer in an Array","title":"1394. Find Lucky Integer in an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1394/"},{"content":"LeetCode problem 1399\nclass Solution: def countLargestGroup(self, n: int) -\u003e int: cnt = Counter() res = mx = 0 for i in range(1, n + 1): s = 0 while i: s += i % 10 i //= 10 cnt[s] += 1 if mx \u003c cnt[s]: mx = cnt[s] res = 1 elif mx == cnt[s]: res += 1 return res ","description":"1399. Count Largest Group","title":"1399. Count Largest Group","uri":"/en/tracks/algorithms-101/leetcode/easy/1399/"},{"content":"LeetCode problem\nWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\nExample 1:\nInput: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2:\nInput: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Explanation: There is no common prefix among the input strings. First accepted Idea:\nclass Solution: def longestCommonPrefix(self, strs: List[str]) -\u003e str: strs.sort() l = strs[0] r = strs[-1] if l == r: return l res = \"\" for i in range(0, len(l)): if l[i] == r[i]: res += l[i] else: return res return res ","description":"LeetCode 14. Longest Common Prefix","title":"14. Longest Common Prefix","uri":"/en/tracks/algorithms-101/leetcode/easy/14/"},{"content":"LeetCode problem 1403\nclass Solution: def minSubsequence(self, nums: List[int]) -\u003e List[int]: res = [] s, t = sum(nums), 0 for x in sorted(nums, reverse=True): t += x res.append(x) if t \u003e s - t: break return res ","description":"1403. Minimum Subsequence in Non-Increasing Order","title":"1403. Minimum Subsequence in Non-Increasing Order","uri":"/en/tracks/algorithms-101/leetcode/easy/1403/"},{"content":"LeetCode problem 1408\nclass Solution: def stringMatching(self, words: List[str]) -\u003e List[str]: res = [] for i, s in enumerate(words): if any(i != j and s in t for j, t in enumerate(words)): res.append(s) return res ","description":"1408. String Matching in an Array","title":"1408. String Matching in an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1408/"},{"content":"LeetCode problem 141\nProblem Statement The problem asks us to determine if a given linked list contains a cycle. A cycle in a linked list occurs when a node’s next pointer points back to a previous node in the list, causing an infinite loop.\nHints \u0026 Tips In this problem, you can take advantage of the Floyd’s “Tortoise and Hare” cycle detection algorithm. This algorithm allows you to detect a cycle in O(1) space and O(n) time complexity, where n is the number of nodes.\nApproach Use two pointers, slow and fast. Initially, point them to the head of the linked list. Move the slow pointer one step at a time, and the fast pointer two steps at a time. If there’s a cycle, the fast pointer will eventually catch up to the slow pointer. If not, the fast pointer will reach the end of the list (None). Step 1: Initialize slow = head and fast = head. Step 2: Move slow one step and fast two steps in a loop. Step 3: If fast and slow meet at any point, return True. If fast reaches the end, return False. Solution | Pointers Here’s the Python code for this algorithm, commented for clarity:\nclass ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head: ListNode) -\u003e bool: # Initialize slow and fast pointers to head slow = head fast = head while fast and fast.next: slow = slow.next # Move slow one step fast = fast.next.next # Move fast two steps if slow == fast: return True return False Solution | Visited class Solution: def hasCycle(self, head: Optional[ListNode]) -\u003e bool: visited = set() cur = head while cur: if cur.next in visited: return True cur = cur.next visited.add(cur) return False ","description":"This article offers a deep dive into solving the 141. Linked List Cycle problem on LeetCode.","title":"141. Linked List Cycle","uri":"/en/tracks/algorithms-101/leetcode/easy/141/"},{"content":"LeetCode problem 1413\nclass Solution: def minStartValue(self, nums: List[int]) -\u003e int: s = list(accumulate(nums)) return 1 if min(s) \u003e= 0 else abs(min(s)) + 1 ","description":"1413. Minimum Value to Get Positive Step by Step Sum","title":"1413. Minimum Value to Get Positive Step by Step Sum","uri":"/en/tracks/algorithms-101/leetcode/easy/1413/"},{"content":"LeetCode problem 1417\nclass Solution: def reformat(self, s: str) -\u003e str: a = [c for c in s if c.islower()] b = [c for c in s if c.isdigit()] if abs(len(a) - len(b)) \u003e 1: return '' if len(a) \u003c len(b): a, b = b, a res = [] for x, y in zip(a, b): res.append(x + y) if len(a) \u003e len(b): res.append(a[-1]) return ''.join(res) ","description":"1417. Reformat The String","title":"1417. Reformat The String","uri":"/en/tracks/algorithms-101/leetcode/easy/1417/"},{"content":"LeetCode Problem 1420\nProblem Statement In this problem, we have three integers, n, m, and k. We need to construct an array arr having the following properties:\nIt consists of exactly n integers. Each integer in the array is between 1 and m inclusive. After executing a certain algorithm on arr, we get a value known as search_cost. Our goal is to ensure search_cost is equal to k. The main challenge is determining how many ways we can construct such an array arr.\nNaive Solution A naive approach might involve generating all possible array combinations, then determining which ones fulfill our criteria. This method, however, would be inefficient due to its exponential time complexity. Given the constraints, this naive method won’t be feasible.\nHints \u0026 Tips Utilize dynamic programming to avoid recalculating overlapping subproblems. Keeping track of the maximum value encountered so far can help narrow down the possible outcomes. Approach / Idea To tackle this problem efficiently, we use dynamic programming. The main idea is to maintain a three-dimensional dp array, which keeps track of:\nCurrent length of the array we’re constructing (i). The maximum value used so far (max_so_far). Remaining comparisons (remain). With this DP table, we can progressively compute how many ways we can construct an array of length i while meeting our conditions.\nSteps / High-Level Algorithm Initialize the DP Array: Create a three-dimensional dp array filled with zeros.\nBase Case: When the array length equals n, the possible values for max_so_far are already decided, hence set dp[n][max_so_far][0] to 1.\nFill the DP Table:\nIterate backwards, starting from the end towards the beginning. For each i, determine the number of ways we can construct an array of that length based on max_so_far and remain. Note: This is where the majority of the dynamic programming logic comes into play.\nCalculate the Result: Once the DP table is complete, dp[0][0][k] contains the number of ways we can construct the array.\nSolution Here’s the python code:\nclass Solution: def numOfArrays(self, n: int, m: int, k: int) -\u003e int: dp = [[[0] * (k + 1) for _ in range(m + 1)] for __ in range(n + 1)] MOD = 10 ** 9 + 7 for num in range(len(dp[0])): dp[n][num][0] = 1 for i in range(n - 1, -1, -1): for max_so_far in range(m, -1, -1): for remain in range(k + 1): res = (max_so_far * dp[i + 1][max_so_far][remain]) % MOD if remain \u003e 0: for num in range(max_so_far + 1, m + 1): res = (res + dp[i + 1][num][remain - 1]) % MOD dp[i][max_so_far][remain] = res return dp[0][0][k] ","description":"Detailed analysis and explanation of the 1420. Build Array Where You Can Find The Maximum Exactly K Comparisons problem from LeetCode.","title":"1420. Build Array Where You Can Find The Maximum Exactly K Comparisons","uri":"/en/tracks/algorithms-101/leetcode/hard/1420/"},{"content":"LeetCode problem 1422\nclass Solution: def maxScore(self, s: str) -\u003e int: res = t = (s[0] == '0') + s[1:].count('1') for i in range(1, len(s) - 1): t += 1 if s[i] == '0' else -1 res = max(res, t) return res ","description":"1422. Maximum Score After Splitting a String","title":"1422. Maximum Score After Splitting a String","uri":"/en/tracks/algorithms-101/leetcode/easy/1422/"},{"content":"LeetCode problem 1426\nclass Solution: def countElements(self, arr: List[int]) -\u003e int: cnt = Counter(arr) return sum(v for x, v in cnt.items() if cnt[x + 1]) ","description":"1426. Counting Elements","title":"1426. Counting Elements","uri":"/en/tracks/algorithms-101/leetcode/easy/1426/"},{"content":"LeetCode problem 1427\nclass Solution: def stringShift(self, s: str, shift: List[List[int]]) -\u003e str: x = sum((b if a else -b) for a, b in shift) x %= len(s) return s[-x:] + s[:-x] ","description":"1427. Perform String Shifts","title":"1427. Perform String Shifts","uri":"/en/tracks/algorithms-101/leetcode/easy/1427/"},{"content":"LeetCode problem 1431. Kids With the Greatest Number of Candies\nProblem Statement Imagine you’re in a classroom with a bunch of kids, and each kid has a certain number of candies. You, being super generous, have some extra candies to give away. Now, you’re wondering, if you give all these extra candies to one kid at a time, will that kid end up having the most candies in the class? And you want to check this for every kid in the class.\nHint To figure this out, first, find out who currently has the most candies in the class. Then, add the extra candies to each kid’s current candies and see if that total is at least as much as the most-candies kid.\nApproach Let’s make it more relatable:\nFind the Kid with Most Candies Now: Imagine you’re counting how many candies each kid has. The kid with the most candies sets the record for everyone to beat.\nGive Extra Candies to Each Kid: Now, you give your extra candies to each kid, one by one, and see if their new total beats or matches the record.\nCreate a List of True or False: For each kid, if their total candies with the extra ones are as many or more than the record, write down True; otherwise, write down False.\nSolution def kidsWithCandies(candies, extra_candies): max_candies = max(candies) result = [] for candy in candies: result.append(candy + extra_candies \u003e= max_candies) return result In the kidsWithCandies method, we first find the maximum number of candies any kid has. We then use list comprehension to create the result list.\nThis problem shows how a problem that seems to require nested loops can be solved efficiently with a single pass over the array by making use of Python’s built-in functions and list comprehension. It’s a good practice problem for beginners to understand the concepts of array manipulation and using built-in functions.\n","description":"Finding kids with the potential to have the greatest number of candies","title":"1431. Kids With the Greatest Number of Candies","uri":"/en/tracks/algorithms-101/leetcode/easy/1431/"},{"content":"LeetCode problem 1436\nclass Solution: def destCity(self, paths: List[List[str]]) -\u003e str: s = {a for a, _ in paths} return next(b for _, b in paths if b not in s) ","description":"1436. Destination City","title":"1436. Destination City","uri":"/en/tracks/algorithms-101/leetcode/easy/1436/"},{"content":"LeetCode problem 1446\nclass Solution: def maxPower(self, s: str) -\u003e int: res = t = 1 for a, b in pairwise(s): if a == b: t += 1 res = max(res, t) else: t = 1 return res ","description":"1446. Consecutive Characters","title":"1446. Consecutive Characters","uri":"/en/tracks/algorithms-101/leetcode/easy/1446/"},{"content":"LeetCode задача 1448\nЗадача Дано бинарное дерево. Задача подсчитать количество “хороших” узлов. Узел считается “хорошим”, если на пути от корня дерева до этого узла (включительно) не встречается узлов с большим значением.\nПодсказки “Хороший” узел в дереве — это узел, для которого все узлы на пути от корня до этого узла имеют значение не больше, чем значение этого узла.\nИспользовать метод обхода в глубину (DFS) для решения этой задачи.\nПодход Идея решения задачи заключается в рекурсивном обходе дерева с сохранением максимального значения на пути от корня к текущему узлу. На каждом этапе, когда мы доходим до нового узла, мы сравниваем его значение с максимальным значением на пути. Если значение узла не меньше максимального, значит, это “хороший” узел.\nЭтот метод обеспечивает простой и понятный способ решения задачи, хотя и может быть не самым оптимальным по времени и памяти.\nОбход в глубину (DFS): Используйте рекурсивный метод для обхода дерева. Текущий максимум: На каждом шаге рекурсии передавайте текущее максимальное значение на пути от корня. Сравнение узлов: Сравните значение текущего узла с текущим максимумом. Если значение узла больше или равно, увеличьте счетчик “хороших” узлов. Алгоритм Рекурсивно обходить дерево, начиная с корня.\nВ процессе обхода обновлять максимальное значение на пути и считать “хорошие” узлы.\nИнициализируйте счетчик “хороших” узлов как 0.\nЗапустите рекурсивный DFS, начиная с корня дерева и передавая значение корня как текущий максимум.\nВ рекурсивной функции сравните значение текущего узла с переданным максимумом.\nОбновите текущий максимум, если значение текущего узла больше.\nПовторите шаги 2-4 для всех дочерних узлов.\nРешение class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def goodNodes(root: TreeNode) -\u003e int: def dfs(node, cur_max): if not node: return 0 count = 0 if node.val \u003e= cur_max: count += 1 cur_max = node.val count += dfs(node.left, cur_max) count += dfs(node.right, cur_max) return count return dfs(root, root.val) ","description":"LeetCode 1448. Задача о подсчете \"хороших\" узлов в бинарном дереве. Разбор задачи.","title":"1448. Count Good Nodes in Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1448/"},{"content":"LeetCode problem 1450\nclass Solution: def busyStudent( self, startTime: List[int], endTime: List[int], queryTime: int ) -\u003e int: c = [0] * 1010 for a, b in zip(startTime, endTime): c[a] += 1 c[b + 1] -= 1 return sum(c[: queryTime + 1]) ","description":"1450. Number of Students Doing Homework at a Given Time","title":"1450. Number of Students Doing Homework at a Given Time","uri":"/en/tracks/algorithms-101/leetcode/easy/1450/"},{"content":"LeetCode problem 1451\nclass Solution: def arrangeWords(self, text: str) -\u003e str: words = text.split() words[0] = words[0].lower() words.sort(key=len) words[0] = words[0].title() return \" \".join(words) ","description":"1451. Rearrange Words in a Sentence","title":"1451. Rearrange Words in a Sentence","uri":"/en/tracks/algorithms-101/leetcode/medium/1451/"},{"content":"LeetCode problem 1452\nclass Solution: def peopleIndexes(self, favoriteCompanies: List[List[str]]) -\u003e List[int]: d = {} idx = 0 t = [] for v in favoriteCompanies: for c in v: if c not in d: d[c] = idx idx += 1 t.append({d[c] for c in v}) res = [] for i, nums1 in enumerate(t): ok = True for j, nums2 in enumerate(t): if i == j: continue if not (nums1 - nums2): ok = False break if ok: res.append(i) return res ","description":"1452. People Whose List of Favorite Companies Is Not a Subset of Another List","title":"1452. People Whose List of Favorite Companies Is Not a Subset of Another List","uri":"/en/tracks/algorithms-101/leetcode/medium/1452/"},{"content":"LeetCode problem 1455\nclass Solution: def isPrefixOfWord(self, sentence: str, searchWord: str) -\u003e int: for i, s in enumerate(sentence.split(), 1): if s.startswith(searchWord): return i return -1 ","description":"1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence","title":"1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence","uri":"/en/tracks/algorithms-101/leetcode/easy/1455/"},{"content":"LeetCode Problem 1456\nProblem Statement Given a string s and an integer k, the task is to return the maximum number of vowel letters in any substring of s with length k.\nVowel letters in English are ‘a’, ’e’, ‘i’, ‘o’, and ‘u’.\nNaive Solution The most straightforward solution to this problem is to take every possible substring of length k and count the number of vowels in each of them. This can be done using nested loops. The outer loop runs through each character in the string while the inner loop counts the vowels for each substring of length k. The maximum count is then returned.\nHowever, this naive solution would be computationally expensive, with a time complexity of $O(n*k)$ where n is the length of the string s.\nHints \u0026 Tips The problem can be efficiently solved using a technique called the sliding window approach.\nApproach: Sliding Window The idea is to use a window of size k and slide it across the string s. Instead of counting the number of vowels in the entire window every time, we adjust the count by adding the new character and removing the leftmost character as the window slides.\nThis way, the number of operations is reduced to just two for every slide, making it a more efficient solution.\nSteps Initialize a counter for the number of vowels and a max_vowels variable to keep track of the maximum number of vowels seen. Traverse through the first k characters of the string, increasing the counter for each vowel seen. Set max_vowels to the value of the counter. Start sliding the window from the kth character. For every new character: If it’s a vowel, increase the counter. Check the leftmost character of the previous window (i.e., s[i - k]). If it’s a vowel, decrease the counter. Update max_vowels if the counter is greater than its current value. Solution def maxVowels(s, k): vowels = set(['a', 'e', 'i', 'o', 'u']) count = sum(1 for char in s[:k] if char in vowels) max_vowels = count for i in range(k, len(s)): # Add the new character to the count if it's a vowel count += s[i] in vowels # Remove the leftmost character of the previous window from the count if it's a vowel count -= s[i - k] in vowels max_vowels = max(max_vowels, count) return max_vowels ","description":"A comprehensive guide to understanding and solving the LeetCode problem of finding the maximum number of vowels in a substring of a given length.","title":"1456. Maximum Number of Vowels in a Substring of Given Length","uri":"/en/tracks/algorithms-101/leetcode/medium/1456/"},{"content":"LeetCode problem 1457\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def pseudoPalindromicPaths(self, root: Optional[TreeNode]) -\u003e int: def dfs(root: Optional[TreeNode], mask: int): if root is None: return 0 mask ^= 1 \u003c\u003c root.val if root.left is None and root.right is None: return int((mask \u0026 (mask - 1)) == 0) return dfs(root.left, mask) + dfs(root.right, mask) return dfs(root, 0) ","description":"1457. Pseudo-Palindromic Paths in a Binary Tree","title":"1457. Pseudo-Palindromic Paths in a Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1457/"},{"content":"LeetCode problem\nThe operations we need to support are get and put which should both be done in O(1) time.\nget(key) should return the value if the key exists in the cache, otherwise return -1. put(key, value) should update the value of the key if the key exists; otherwise, this method should insert the key-value pair into the cache. If the cache is full, this method should also evict the least recently used key-value pair. Approach Use Doubly Linked List or Python OrderedDict\nLogic For each operation (get/put) - check if key already exists - if yes, move item to end (the way to mark this key as recent used).\nInitialization The LRUCache class is initialized with a given capacity, and an empty OrderedDict is created. This data structure maintains the keys in order of their usage.\nGet Operation - When the get method is called with a key, the function first checks if the key exists in the cache (which is an O(1) operation).\nIf it does exist, the function makes use of the move_to_end method provided by the OrderedDict to move this key to the end of the order of keys (marking it as the most recently used) and returns the corresponding value.\nIf the key is not found in the cache, the function returns -1.\nPut Operation: - When the put method is called with a key and value, the function first checks if the key is already in the cache. If it is, the function moves the key to the end of the order (making it the most recently used) and updates its value.\nIf the key isn’t already in the cache, the function checks if the cache is at its capacity. If it is, the function uses the popitem method with last=False to remove the least recently used item (which is at the start of the order).\nThe key-value pair is then added to the cache, and since this is a new addition, it is considered the most recently used item and gets added to the end.\nSolution from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -\u003e int: if key in self.cache: self.cache.move_to_end(key) # move to the least recently used return self.cache[key] return -1 def put(self, key: int, value: int) -\u003e None: if key in self.cache: # check if key already exists - if yes, move item to end and update the value self.cache.move_to_end(key) elif len(self.cache) == self.capacity: # if cache is full, remove least recent item self.cache.popitem(last=False) self.cache[key] = value Solution 2 Using Doubly Linked List\nclass Node: def __init__(self, key, value): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity): self.capacity = capacity self.dictionary = dict() self.head = Node(0, 0) # dummy node self.tail = Node(0, 0) # dummy node self.head.next = self.tail self.tail.prev = self.head def get(self, key): if key in self.dictionary: node = self.dictionary[key] self._remove(node) self._add(node) return node.value return -1 def put(self, key, value): if key in self.dictionary: self._remove(self.dictionary[key]) node = Node(key, value) self._add(node) self.dictionary[key] = node if len(self.dictionary) \u003e self.capacity: node = self.head.next self._remove(node) del self.dictionary[node.key] def _remove(self, node): prev = node.prev next = node.next prev.next = next next.prev = prev def _add(self, node): prev = self.tail.prev prev.next = node self.tail.prev = node node.prev = prev node.next = self.tail ","description":"LeetCode 146. LRU Cache | Python solution and explanation","title":"146. LRU Cache","uri":"/en/tracks/algorithms-101/leetcode/medium/146/"},{"content":"LeetCode problem 1460\nclass Solution: def canBeEqual(self, target: List[int], arr: List[int]) -\u003e bool: cnt = [0] * 1001 for a, b in zip(target, arr): cnt[a] += 1 cnt[b] -= 1 return all(v == 0 for v in cnt) ","description":"1460. Make Two Arrays Equal by Reversing Subarrays","title":"1460. Make Two Arrays Equal by Reversing Subarrays","uri":"/en/tracks/algorithms-101/leetcode/easy/1460/"},{"content":"LeetCode problem 1461\nclass Solution: def hasAllCodes(self, s: str, k: int) -\u003e bool: if len(s) - k + 1 \u003c (1 \u003c\u003c k): return False vis = [False] * (1 \u003c\u003c k) num = int(s[:k], 2) vis[num] = True for i in range(k, len(s)): a = (ord(s[i - k]) - ord('0')) \u003c\u003c (k - 1) b = ord(s[i]) - ord('0') num = ((num - a) \u003c\u003c 1) + b vis[num] = True return all(v for v in vis) ","description":"1461. Check If a String Contains All Binary Codes of Size K","title":"1461. Check If a String Contains All Binary Codes of Size K","uri":"/en/tracks/algorithms-101/leetcode/medium/1461/"},{"content":"LeetCode problem 1462\nclass Solution: def checkIfPrerequisite( self, n: int, prerequisites: List[List[int]], queries: List[List[int]] ) -\u003e List[bool]: f = [[False] * n for _ in range(n)] g = [[] for _ in range(n)] indeg = [0] * n for a, b in prerequisites: g[a].append(b) indeg[b] += 1 q = deque(i for i, x in enumerate(indeg) if x == 0) while q: i = q.popleft() for j in g[i]: f[i][j] = True for h in range(n): f[h][j] = f[h][j] or f[h][i] indeg[j] -= 1 if indeg[j] == 0: q.append(j) return [f[a][b] for a, b in queries] ","description":"1462. Course Schedule IV","title":"1462. Course Schedule IV","uri":"/en/tracks/algorithms-101/leetcode/medium/1462/"},{"content":"LeetCode problem 1464\nclass Solution: def maxProduct(self, nums: List[int]) -\u003e int: a = b = 0 for v in nums: if v \u003e a: a, b = v, a elif v \u003e b: b = v return (a - 1) * (b - 1) ","description":"1464. Maximum Product of Two Elements in an Array","title":"1464. Maximum Product of Two Elements in an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1464/"},{"content":"LeetCode problem 1465\nclass Solution: def maxArea( self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int] ) -\u003e int: horizontalCuts.extend([0, h]) verticalCuts.extend([0, w]) horizontalCuts.sort() verticalCuts.sort() x = max(b - a for a, b in pairwise(horizontalCuts)) y = max(b - a for a, b in pairwise(verticalCuts)) return (x * y) % (10**9 + 7) ","description":"1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts","title":"1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts","uri":"/en/tracks/algorithms-101/leetcode/medium/1465/"},{"content":"LeetCode problem 1466\nclass Solution: def minReorder(self, n: int, connections: List[List[int]]) -\u003e int: def dfs(a: int, fa: int) -\u003e int: return sum(c + dfs(b, a) for b, c in g[a] if b != fa) g = [[] for _ in range(n)] for a, b in connections: g[a].append((b, 1)) g[b].append((a, 0)) return dfs(0, -1) ","description":"1466. Reorder Routes to Make All Paths Lead to the City Zero","title":"1466. Reorder Routes to Make All Paths Lead to the City Zero","uri":"/en/tracks/algorithms-101/leetcode/medium/1466/"},{"content":"LeetCode problem 1469\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def getLonelyNodes(self, root: Optional[TreeNode]) -\u003e List[int]: def dfs(root): if root is None or (root.left is None and root.right is None): return if root.left is None: res.append(root.right.val) if root.right is None: res.append(root.left.val) dfs(root.left) dfs(root.right) res = [] dfs(root) return res ","description":"1469. Find All The Lonely Nodes","title":"1469. Find All The Lonely Nodes","uri":"/en/tracks/algorithms-101/leetcode/easy/1469/"},{"content":"LeetCode problem 1470\nclass Solution: def shuffle(self, nums: List[int], n: int) -\u003e List[int]: nums[::2], nums[1::2] = nums[:n], nums[n:] return nums ","description":"1470. Shuffle the Array","title":"1470. Shuffle the Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1470/"},{"content":"LeetCode problem 1471\nclass Solution: def getStrongest(self, arr: List[int], k: int) -\u003e List[int]: arr.sort() m = arr[(len(arr) - 1) \u003e\u003e 1] arr.sort(key=lambda x: (-abs(x - m), -x)) return arr[:k] ","description":"1471. The k Strongest Values in an Array","title":"1471. The k Strongest Values in an Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1471/"},{"content":"LeetCode problem 1472\nclass BrowserHistory: def __init__(self, homepage: str): self.stk1 = [] self.stk2 = [] self.visit(homepage) def visit(self, url: str) -\u003e None: self.stk1.append(url) self.stk2.clear() def back(self, steps: int) -\u003e str: while steps and len(self.stk1) \u003e 1: self.stk2.append(self.stk1.pop()) steps -= 1 return self.stk1[-1] def forward(self, steps: int) -\u003e str: while steps and self.stk2: self.stk1.append(self.stk2.pop()) steps -= 1 return self.stk1[-1] # Your BrowserHistory object will be instantiated and called as such: # obj = BrowserHistory(homepage) # obj.visit(url) # param_2 = obj.back(steps) # param_3 = obj.forward(steps) ","description":"1472. Design Browser History","title":"1472. Design Browser History","uri":"/en/tracks/algorithms-101/leetcode/medium/1472/"},{"content":"LeetCode problem 1474\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def deleteNodes(self, head: ListNode, m: int, n: int) -\u003e ListNode: pre = head while pre: for _ in range(m - 1): if pre: pre = pre.next if pre is None: return head cur = pre for _ in range(n): if cur: cur = cur.next pre.next = None if cur is None else cur.next pre = pre.next return head ","description":"1474. Delete N Nodes After M Nodes of a Linked List","title":"1474. Delete N Nodes After M Nodes of a Linked List","uri":"/en/tracks/algorithms-101/leetcode/easy/1474/"},{"content":"LeetCode problem 1475\nclass Solution: def finalPrices(self, prices: List[int]) -\u003e List[int]: stk = [] res = prices[:] for i in range(len(prices) - 1, -1, -1): while stk and prices[stk[-1]] \u003e prices[i]: stk.pop() if stk: res[i] -= prices[stk[-1]] stk.append(i) return res ","description":"1475. Final Prices With a Special Discount in a Shop","title":"1475. Final Prices With a Special Discount in a Shop","uri":"/en/tracks/algorithms-101/leetcode/easy/1475/"},{"content":"LeetCode problem 1476\nclass SubrectangleQueries: def __init__(self, rectangle: List[List[int]]): self.g = rectangle self.ops = [] def updateSubrectangle( self, row1: int, col1: int, row2: int, col2: int, newValue: int ) -\u003e None: self.ops.append((row1, col1, row2, col2, newValue)) def getValue(self, row: int, col: int) -\u003e int: for r1, c1, r2, c2, v in self.ops[::-1]: if r1 \u003c= row \u003c= r2 and c1 \u003c= col \u003c= c2: return v return self.g[row][col] # Your SubrectangleQueries object will be instantiated and called as such: # obj = SubrectangleQueries(rectangle) # obj.updateSubrectangle(row1,col1,row2,col2,newValue) # param_2 = obj.getValue(row,col) ","description":"1476. Subrectangle Queries","title":"1476. Subrectangle Queries","uri":"/en/tracks/algorithms-101/leetcode/medium/1476/"},{"content":"LeetCode problem 1477\nclass Solution: def minSumOfLengths(self, arr: List[int], target: int) -\u003e int: d = {0: 0} s, n = 0, len(arr) f = [inf] * (n + 1) res = inf for i, v in enumerate(arr, 1): s += v f[i] = f[i - 1] if s - target in d: j = d[s - target] f[i] = min(f[i], i - j) res = min(res, f[j] + i - j) d[s] = i return -1 if res \u003e n else res ","description":"1477. Find Two Non-overlapping Sub-arrays Each With Target Sum","title":"1477. Find Two Non-overlapping Sub-arrays Each With Target Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1477/"},{"content":"LeetCode problem\nNaive Solution Traverse the linked list, adding each node’s value to a Python list sort that list create a new linked list from the sorted values return the head of this new list. This solution would have a time complexity of O(n log n) due to the sort operation and a space complexity of O(n) because of the extra list we’re creating.\nclass Solution: def sortList(self, head): values = [] node = head while node: values.append(node.val) node = node.next values.sort() # Create a new linked list from the sorted values node = head for val in values: node.val = val node = node.next return head Solution Using the Merge Sort algorithm.\nDivide and Conquer: Merge sort uses the divide and conquer strategy, where we continuously split the linked list in half until we have multiple sublists of length 1. A list of length 1 is technically always sorted. Merge Sublists: Once we have the sorted sublists, we start merging them together in a manner that the resultant list is also sorted. The trick to making this solution O(1) space complexity is to modify the existing nodes’ next pointers to generate the sorted list, rather than creating new nodes.\nclass Solution: def sortList(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: if not head or not head.next: return head slow = head fast = head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None # separate left and right halves of linked list left = self.sortList(head) right = self.sortList(mid) def merge(left, right): if not left or not right: return left or right if left.val \u003e right.val: # sort left, right = right, left left.next = merge(left.next, right) return left res = merge(left, right) return res ","description":"This article provides a Python solution with an in-depth explanation for the LeetCode problem 148. Sort List.","title":"148. Sort List","uri":"/en/tracks/algorithms-101/leetcode/medium/148/"},{"content":"LeetCode problem 1481\nclass Solution: def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -\u003e int: cnt = Counter(arr) for i, v in enumerate(sorted(cnt.values())): k -= v if k \u003c 0: return len(cnt) - i return 0 ","description":"1481. Least Number of Unique Integers after K Removals","title":"1481. Least Number of Unique Integers after K Removals","uri":"/en/tracks/algorithms-101/leetcode/medium/1481/"},{"content":"LeetCode problem 1482\nclass Solution: def minDays(self, bloomDay: List[int], m: int, k: int) -\u003e int: if m * k \u003e len(bloomDay): return -1 def check(day: int) -\u003e bool: cnt = cur = 0 for bd in bloomDay: cur = cur + 1 if bd \u003c= day else 0 if cur == k: cnt += 1 cur = 0 return cnt \u003e= m left, right = min(bloomDay), max(bloomDay) while left \u003c right: mid = (left + right) \u003e\u003e 1 if check(mid): right = mid else: left = mid + 1 return left ","description":"1482. Minimum Number of Days to Make m Bouquets","title":"1482. Minimum Number of Days to Make m Bouquets","uri":"/en/tracks/algorithms-101/leetcode/medium/1482/"},{"content":"LeetCode problem 1485\n# Definition for Node. # class Node: # def __init__(self, val=0, left=None, right=None, random=None): # self.val = val # self.left = left # self.right = right # self.random = random class Solution: def copyRandomBinaryTree(self, root: 'Optional[Node]') -\u003e 'Optional[NodeCopy]': def dfs(root): if root is None: return None if root in mp: return mp[root] copy = NodeCopy(root.val) mp[root] = copy copy.left = dfs(root.left) copy.right = dfs(root.right) copy.random = dfs(root.random) return copy mp = {} return dfs(root) ","description":"1485. Clone Binary Tree With Random Pointer","title":"1485. Clone Binary Tree With Random Pointer","uri":"/en/tracks/algorithms-101/leetcode/medium/1485/"},{"content":"LeetCode problem 1486\nclass Solution: def xorOperation(self, n: int, start: int) -\u003e int: return reduce(xor, ((start + 2 * i) for i in range(n))) ","description":"1486. XOR Operation in an Array","title":"1486. XOR Operation in an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1486/"},{"content":"LeetCode problem 1487\nclass Solution: def getFolderNames(self, names: List[str]) -\u003e List[str]: d = defaultdict(int) for i, name in enumerate(names): if name in d: k = d[name] while f'{name}({k})' in d: k += 1 d[name] = k + 1 names[i] = f'{name}({k})' d[names[i]] = 1 return names ","description":"1487. Making File Names Unique","title":"1487. Making File Names Unique","uri":"/en/tracks/algorithms-101/leetcode/medium/1487/"},{"content":"LeetCode problem 1488\nfrom sortedcontainers import SortedList class Solution: def avoidFlood(self, rains: List[int]) -\u003e List[int]: n = len(rains) res = [-1] * n sunny = SortedList() rainy = {} for i, v in enumerate(rains): if v: if v in rainy: idx = sunny.bisect_right(rainy[v]) if idx == len(sunny): return [] res[sunny[idx]] = v sunny.discard(sunny[idx]) rainy[v] = i else: sunny.add(i) res[i] = 1 return res ","description":"1488. Avoid Flood in The City","title":"1488. Avoid Flood in The City","uri":"/en/tracks/algorithms-101/leetcode/medium/1488/"},{"content":"LeetCode problem 1490\n\"\"\" # Definition for a Node. class Node: def __init__(self, val=None, children=None): self.val = val self.children = children if children is not None else [] \"\"\" class Solution: def cloneTree(self, root: 'Node') -\u003e 'Node': if root is None: return None children = [self.cloneTree(child) for child in root.children] return Node(root.val, children) ","description":"1490. Clone N-ary Tree","title":"1490. Clone N-ary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1490/"},{"content":"LeetCode problem 1491\nclass Solution: def average(self, salary: List[int]) -\u003e float: s = sum(salary) - min(salary) - max(salary) return s / (len(salary) - 2) ","description":"1491. Average Salary Excluding the Minimum and Maximum Salary","title":"1491. Average Salary Excluding the Minimum and Maximum Salary","uri":"/en/tracks/algorithms-101/leetcode/easy/1491/"},{"content":"LeetCode problem 1492\nclass Solution: def kthFactor(self, n: int, k: int) -\u003e int: i = 1 while i * i \u003c n: if n % i == 0: k -= 1 if k == 0: return i i += 1 if i * i != n: i -= 1 while i: if (n % (n // i)) == 0: k -= 1 if k == 0: return n // i i -= 1 return -1 ","description":"1492. The kth Factor of n","title":"1492. The kth Factor of n","uri":"/en/tracks/algorithms-101/leetcode/medium/1492/"},{"content":"LeetCode Problem 1493\nProblem Statement Given a binary array nums, you should delete one element from it. The goal is to return the size of the longest subarray containing only 1’s after this deletion. If no such subarray exists, return 0.\nNaive Solution A straightforward approach is to manually try deleting each element in the array and checking the length of the longest sequence of 1’s. This would involve nested loops: an outer loop for deleting an element and an inner loop to check sequences of 1’s. This method, however, can be inefficient for larger arrays.\nHints \u0026 Tips Consider that we are allowed to have a subarray with a single zero. It might make things simpler! The sliding window approach will be handy here.\nApproach: Sliding Window with a Twist We can use the sliding window technique again for this problem. However, we need to adapt it slightly. This time, our window can contain at most one zero. Thus, while expanding the window, we should be mindful of the zeros.\nSteps Initialize two pointers, left and right, to represent the window’s boundaries. Also, initialize a counter zeroCount to track zeros in the current window. Expand the right boundary of the window by moving the right pointer. If the current number is 0, increment the zeroCount. If zeroCount becomes 2, move the left pointer to the right until a zero is excluded, and decrement the zeroCount. Track the maximum length of the window found. Solution def longestSubarray(nums): left = 0 zeroCount = 0 maxLength = 0 for right in range(len(nums)): if nums[right] == 0: zeroCount += 1 while zeroCount \u003e 1: if nums[left] == 0: zeroCount -= 1 left += 1 # Subtract 1 because we need to delete one element. maxLength = max(maxLength, right - left) return maxLength ","description":"Understand the problem of finding the longest subarray of 1's after deleting a single element.","title":"1493. Longest Subarray of 1's After Deleting One Element","uri":"/en/tracks/algorithms-101/leetcode/medium/1493/"},{"content":"LeetCode problem 1496\nclass Solution: def isPathCrossing(self, path: str) -\u003e bool: i = j = 0 vis = {(0, 0)} for c in path: match c: case 'N': i -= 1 case 'S': i += 1 case 'E': j += 1 case 'W': j -= 1 if (i, j) in vis: return True vis.add((i, j)) return False ","description":"1496. Path Crossing","title":"1496. Path Crossing","uri":"/en/tracks/algorithms-101/leetcode/easy/1496/"},{"content":"LeetCode problem 1497\nclass Solution: def canArrange(self, arr: List[int], k: int) -\u003e bool: cnt = Counter(x % k for x in arr) return cnt[0] % 2 == 0 and all(cnt[i] == cnt[k - i] for i in range(1, k)) ","description":"1497. Check If Array Pairs Are Divisible by k","title":"1497. Check If Array Pairs Are Divisible by k","uri":"/en/tracks/algorithms-101/leetcode/medium/1497/"},{"content":"LeetCode problem 1498\nclass Solution: def numSubseq(self, nums: List[int], target: int) -\u003e int: mod = 10**9 + 7 nums.sort() n = len(nums) f = [1] + [0] * n for i in range(1, n + 1): f[i] = f[i - 1] * 2 % mod res = 0 for i, x in enumerate(nums): if x * 2 \u003e target: break j = bisect_right(nums, target - x, i + 1) - 1 res = (res + f[j - i]) % mod return res ","description":"1498. Number of Subsequences That Satisfy the Given Sum Condition","title":"1498. Number of Subsequences That Satisfy the Given Sum Condition","uri":"/en/tracks/algorithms-101/leetcode/medium/1498/"},{"content":"LeetCode problem\nGiven an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\nExample 1:\nInput: nums = [-1,0,1,2,-1,-4] Output: [[-1,-1,2],[-1,0,1]] Explanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter. Example 2:\nInput: nums = [0,1,1] Output: [] Explanation: The only possible triplet does not sum up to 0. First accepted Idea:\nclass Solution: def threeSum(self, nums: List[int]) -\u003e List[List[int]]: nums.sort() x = 0 # index ll = len(nums) res = [] while x \u003c ll - 2: if x == 0 or nums[x] != nums[x-1]: y = x + 1 z = ll - 1 while y \u003c z: s = nums[x] + nums[y] + nums[z] if s == 0: res.append([nums[x], nums[y], nums[z]]) while y \u003c z and nums[y] == nums[y+1]: y += 1 while z \u003e y and nums[z] == nums[z-1]: z -= 1 y += 1 z -= 1 elif s \u003e 0: z -= 1 else: y += 1 x += 1 return res ","description":"LeetCode 15. 3Sum","title":"15. 3Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/15/"},{"content":"LeetCode problem 1500\nclass FileSharing: def __init__(self, m: int): self.cur = 0 self.chunks = m self.reused = [] self.user_chunks = defaultdict(set) def join(self, ownedChunks: List[int]) -\u003e int: if self.reused: userID = heappop(self.reused) else: self.cur += 1 userID = self.cur self.user_chunks[userID] = set(ownedChunks) return userID def leave(self, userID: int) -\u003e None: heappush(self.reused, userID) self.user_chunks.pop(userID) def request(self, userID: int, chunkID: int) -\u003e List[int]: if chunkID \u003c 1 or chunkID \u003e self.chunks: return [] res = [] for k, v in self.user_chunks.items(): if chunkID in v: res.append(k) if res: self.user_chunks[userID].add(chunkID) return sorted(res) # Your FileSharing object will be instantiated and called as such: # obj = FileSharing(m) # param_1 = obj.join(ownedChunks) # obj.leave(userID) # param_3 = obj.request(userID,chunkID) ","description":"1500. Design a File Sharing System","title":"1500. Design a File Sharing System","uri":"/en/tracks/algorithms-101/leetcode/medium/1500/"},{"content":"LeetCode problem 1502\nclass Solution: def canMakeArithmeticProgression(self, arr: List[int]) -\u003e bool: a = min(arr) b = max(arr) n = len(arr) if (b - a) % (n - 1): return False d = (b - a) // (n - 1) s = set(arr) return all(a + d * i in s for i in range(n)) ","description":"1502. Can Make Arithmetic Progression From Sequence","title":"1502. Can Make Arithmetic Progression From Sequence","uri":"/en/tracks/algorithms-101/leetcode/easy/1502/"},{"content":"LeetCode problem 1503\nclass Solution: def getLastMoment(self, n: int, left: List[int], right: List[int]) -\u003e int: res = 0 for x in left: res = max(res, x) for x in right: res = max(res, n - x) return res ","description":"1503. Last Moment Before All Ants Fall Out of a Plank","title":"1503. Last Moment Before All Ants Fall Out of a Plank","uri":"/en/tracks/algorithms-101/leetcode/medium/1503/"},{"content":"LeetCode problem 1504\nclass Solution: def numSubmat(self, mat: List[List[int]]) -\u003e int: m, n = len(mat), len(mat[0]) g = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): if mat[i][j]: g[i][j] = 1 if j == 0 else 1 + g[i][j - 1] res = 0 for i in range(m): for j in range(n): col = inf for k in range(i, -1, -1): col = min(col, g[k][j]) res += col return res ","description":"1504. Count Submatrices With All Ones","title":"1504. Count Submatrices With All Ones","uri":"/en/tracks/algorithms-101/leetcode/medium/1504/"},{"content":"LeetCode problem 1506\n\"\"\" # Definition for a Node. class Node: def __init__(self, val=None, children=None): self.val = val self.children = children if children is not None else [] \"\"\" class Solution: def findRoot(self, tree: List['Node']) -\u003e 'Node': x = 0 for node in tree: x ^= node.val for child in node.children: x ^= child.val return next(node for node in tree if node.val == x) ","description":"1506. Find Root of N-Ary Tree","title":"1506. Find Root of N-Ary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1506/"},{"content":"LeetCode problem 1507\nclass Solution: def reformatDate(self, date: str) -\u003e str: s = date.split() s.reverse() months = \" JanFebMarAprMayJunJulAugSepOctNovDec\" s[1] = str(months.index(s[1]) // 3 + 1).zfill(2) s[2] = s[2][:-2].zfill(2) return \"-\".join(s) ","description":"1507. Reformat Date","title":"1507. Reformat Date","uri":"/en/tracks/algorithms-101/leetcode/easy/1507/"},{"content":"LeetCode problem 1508\nclass Solution: def rangeSum(self, nums: List[int], n: int, left: int, right: int) -\u003e int: arr = [] for i in range(n): s = 0 for j in range(i, n): s += nums[j] arr.append(s) arr.sort() mod = 10**9 + 7 return sum(arr[left - 1 : right]) % mod ","description":"1508. Range Sum of Sorted Subarray Sums","title":"1508. Range Sum of Sorted Subarray Sums","uri":"/en/tracks/algorithms-101/leetcode/medium/1508/"},{"content":"LeetCode problem 1509\nclass Solution: def minDifference(self, nums: List[int]) -\u003e int: n = len(nums) if n \u003c 5: return 0 nums.sort() res = inf for l in range(4): r = 3 - l res = min(res, nums[n - 1 - r] - nums[l]) return res ","description":"1509. Minimum Difference Between Largest and Smallest Value in Three Moves","title":"1509. Minimum Difference Between Largest and Smallest Value in Three Moves","uri":"/en/tracks/algorithms-101/leetcode/medium/1509/"},{"content":"LeetCode problem\nProblem Statement The problem is about reversing the order of words in a given string s. Each word in s is defined as a sequence of non-space characters and the words are separated by at least one space. You are expected to return a string with the words in reversed order and separated by a single space. It is important to note that s may contain leading or trailing spaces or multiple spaces between two words, but the returned string should not contain any extra spaces.\nNaive Solution A naive solution could be to split the input string into individual words and then reverse the order of these words. However, this would require extra space to store the words and does not take care of multiple, leading, or trailing spaces.\nHints \u0026 Tips Python’s built-in string methods split and join can be very helpful in this problem. The split method can be used to split the string into individual words, and it also takes care of multiple spaces. The join method can be used to concatenate the words in reverse order.\nApproach An efficient approach would be to:\nSplit the string into individual words using the split method. This will take care of multiple spaces. Reverse the order of words using slicing. Join the words in reversed order using the join method. Steps Use the split method to split s into individual words. This will return a list of words. Reverse the order of words in the list using slicing. Use the join method to concatenate the words in reversed order and return the result. Python Solution class Solution: def reverseWords(self, s: str) -\u003e str: words = s.split() words.reverse() return ' '.join(words) Or even shorter:\nclass Solution: def reverseWords(self, s: str) -\u003e str: return ' '.join(s.split()[::-1]) ","description":"151. Reverse Words in a String","title":"151. Reverse Words in a String","uri":"/en/tracks/algorithms-101/leetcode/medium/151/"},{"content":"LeetCode problem 1512\nclass Solution: def numIdenticalPairs(self, nums: List[int]) -\u003e int: cnt = Counter(nums) return sum(v * (v - 1) for v in cnt.values()) \u003e\u003e 1 ","description":"1512. Number of Good Pairs","title":"1512. Number of Good Pairs","uri":"/en/tracks/algorithms-101/leetcode/easy/1512/"},{"content":"LeetCode problem 1514\nclass Solution: def maxProbability( self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int, ) -\u003e float: g = defaultdict(list) for (a, b), s in zip(edges, succProb): g[a].append((b, s)) g[b].append((a, s)) d = [0] * n vis = [False] * n d[start] = 1 q = deque([start]) vis[start] = True while q: i = q.popleft() vis[i] = False for j, s in g[i]: if d[j] \u003c d[i] * s: d[j] = d[i] * s if not vis[j]: q.append(j) vis[j] = True return d[end] ","description":"1514. Path with Maximum Probability","title":"1514. Path with Maximum Probability","uri":"/en/tracks/algorithms-101/leetcode/medium/1514/"},{"content":"LeetCode problem 1518\nclass Solution: def numWaterBottles(self, numBottles: int, numExchange: int) -\u003e int: res = numBottles while numBottles \u003e= numExchange: numBottles -= numExchange - 1 res += 1 return res ","description":"1518. Water Bottles","title":"1518. Water Bottles","uri":"/en/tracks/algorithms-101/leetcode/easy/1518/"},{"content":"LeetCode problem 1519\nclass Solution: def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -\u003e List[int]: def dfs(i, fa): res[i] -= cnt[labels[i]] cnt[labels[i]] += 1 for j in g[i]: if j != fa: dfs(j, i) res[i] += cnt[labels[i]] g = defaultdict(list) for a, b in edges: g[a].append(b) g[b].append(a) cnt = Counter() res = [0] * n dfs(0, -1) return res ","description":"1519. Number of Nodes in the Sub-Tree With the Same Label","title":"1519. Number of Nodes in the Sub-Tree With the Same Label","uri":"/en/tracks/algorithms-101/leetcode/medium/1519/"},{"content":"LeetCode problem\nProblem Statement In this problem, we’re given an integer array nums, and our task is to find the maximum product of a contiguous subarray. A subarray is a contiguous part of an array. The interesting part of this problem is that the array can contain both positive and negative numbers, so the maximum product can be obtained by a subarray ending at any index of the array.\nNaive Solution A naive approach to this problem would be to calculate the product of all possible subarrays and return the maximum one. However, this would have a time complexity of O(n²), as there are n*(n+1)/2 subarrays of an array, where n is the length of the array.\nThis would be inefficient and time-consuming for large inputs.\nDynamic Programming We can solve this problem efficiently using Dynamic Programming.\nThe idea is to keep track of the maximum and minimum product ending at each position (as the array can contain negative numbers, and a negative number can become maximum when multiplied by another negative number).\nWe initialize two variables, max_prod and min_prod, to nums[0]. Then for each number in the array (from the second number to the end), we calculate max_prod and min_prod using the formulas:\nmax_prod = max(nums[i], max_prod * nums[i], min_prod * nums[i]) min_prod = min(nums[i], max_prod * nums[i], min_prod * nums[i]) We also keep track of res, which stores the maximum product of a subarray as a result.\nIf max_prod is greater than res, we update res.\nFinally, res will hold the maximum product of a subarray.\nSteps Initialize max_prod, min_prod, and res to nums[0]. For each number in the array (from the second number to the end): Update max_prod and min_prod. Update res if max_prod is greater. Return res. Python Solution Here is a Python solution following the described approach:\ndef maxProduct(nums): if not nums: return 0 max_prod = min_prod = res = nums[0] for num in nums[1:]: new_max = max(num, max_prod * num, min_prod * num) min_prod = min(num, max_prod * num, min_prod * num) max_prod = new_max res = max(res, max_prod) return res ","description":"Understanding the 152. Maximum Product Subarray problem from LeetCode","title":"152. Maximum Product Subarray","uri":"/en/tracks/algorithms-101/leetcode/medium/152/"},{"content":"LeetCode problem 1522\n\"\"\" # Definition for a Node. class Node: def __init__(self, val=None, children=None): self.val = val self.children = children if children is not None else [] \"\"\" class Solution: def diameter(self, root: 'Node') -\u003e int: \"\"\" :type root: 'Node' :rtype: int \"\"\" def build(root): nonlocal d if root is None: return for child in root.children: d[root].add(child) d[child].add(root) build(child) def dfs(u, t): nonlocal res, vis, d, next if u in vis: return vis.add(u) for v in d[u]: dfs(v, t + 1) if res \u003c t: res = t next = u d = defaultdict(set) vis = set() build(root) res = 0 next = None dfs(root, 0) vis.clear() dfs(next, 0) return res ","description":"1522. Diameter of N-Ary Tree","title":"1522. Diameter of N-Ary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1522/"},{"content":"LeetCode problem 1523\nclass Solution: def countOdds(self, low: int, high: int) -\u003e int: return ((high + 1) \u003e\u003e 1) - (low \u003e\u003e 1) ","description":"1523. Count Odd Numbers in an Interval Range","title":"1523. Count Odd Numbers in an Interval Range","uri":"/en/tracks/algorithms-101/leetcode/easy/1523/"},{"content":"LeetCode problem 1524\nclass Solution: def numOfSubarrays(self, arr: List[int]) -\u003e int: mod = 10**9 + 7 cnt = [1, 0] res = s = 0 for x in arr: s += x res = (res + cnt[s \u0026 1 ^ 1]) % mod cnt[s \u0026 1] += 1 return res ","description":"1524. Number of Sub-arrays With Odd Sum","title":"1524. Number of Sub-arrays With Odd Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1524/"},{"content":"LeetCode problem 1525\nclass Solution: def numSplits(self, s: str) -\u003e int: cnt = Counter(s) vis = set() res = 0 for c in s: vis.add(c) cnt[c] -= 1 if cnt[c] == 0: cnt.pop(c) res += len(vis) == len(cnt) return res ","description":"1525. Number of Good Ways to Split a String","title":"1525. Number of Good Ways to Split a String","uri":"/en/tracks/algorithms-101/leetcode/medium/1525/"},{"content":"LeetCode problem 1528\nclass Solution: def restoreString(self, s: str, indices: List[int]) -\u003e str: res = [0] * len(s) for i, c in enumerate(s): res[indices[i]] = c return ''.join(res) ","description":"1528. Shuffle String","title":"1528. Shuffle String","uri":"/en/tracks/algorithms-101/leetcode/easy/1528/"},{"content":"LeetCode problem 1529\nclass Solution: def minFlips(self, target: str) -\u003e int: res = 0 for v in target: if (res \u0026 1) ^ int(v): res += 1 return res ","description":"1529. Minimum Suffix Flips","title":"1529. Minimum Suffix Flips","uri":"/en/tracks/algorithms-101/leetcode/medium/1529/"},{"content":"LeetCode problem 1530\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def countPairs(self, root: TreeNode, distance: int) -\u003e int: def dfs(root, cnt, i): if root is None or i \u003e= distance: return if root.left is None and root.right is None: cnt[i] += 1 return dfs(root.left, cnt, i + 1) dfs(root.right, cnt, i + 1) if root is None: return 0 res = self.countPairs(root.left, distance) + self.countPairs( root.right, distance ) cnt1 = Counter() cnt2 = Counter() dfs(root.left, cnt1, 1) dfs(root.right, cnt2, 1) for k1, v1 in cnt1.items(): for k2, v2 in cnt2.items(): if k1 + k2 \u003c= distance: res += v1 * v2 return res ","description":"1530. Number of Good Leaf Nodes Pairs","title":"1530. Number of Good Leaf Nodes Pairs","uri":"/en/tracks/algorithms-101/leetcode/medium/1530/"},{"content":"LeetCode problem 1533\n# \"\"\" # This is ArrayReader's API interface. # You should not implement it, or speculate about its implementation # \"\"\" # class ArrayReader(object): # # Compares the sum of arr[l..r] with the sum of arr[x..y] # # return 1 if sum(arr[l..r]) \u003e sum(arr[x..y]) # # return 0 if sum(arr[l..r]) == sum(arr[x..y]) # # return -1 if sum(arr[l..r]) \u003c sum(arr[x..y]) # def compareSub(self, l: int, r: int, x: int, y: int) -\u003e int: # # # Returns the length of the array # def length(self) -\u003e int: # class Solution: def getIndex(self, reader: 'ArrayReader') -\u003e int: left, right = 0, reader.length() - 1 while left \u003c right: t1, t2, t3 = ( left, left + (right - left) // 3, left + ((right - left) // 3) * 2 + 1, ) cmp = reader.compareSub(t1, t2, t2 + 1, t3) if cmp == 0: left = t3 + 1 elif cmp == 1: right = t2 else: left, right = t2 + 1, t3 return left ","description":"1533. Find the Index of the Large Integer","title":"1533. Find the Index of the Large Integer","uri":"/en/tracks/algorithms-101/leetcode/medium/1533/"},{"content":"LeetCode problem 1534\nclass Solution: def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -\u003e int: res, n = 0, len(arr) for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): res += ( abs(arr[i] - arr[j]) \u003c= a and abs(arr[j] - arr[k]) \u003c= b and abs(arr[i] - arr[k]) \u003c= c ) return res ","description":"1534. Count Good Triplets","title":"1534. Count Good Triplets","uri":"/en/tracks/algorithms-101/leetcode/easy/1534/"},{"content":"LeetCode problem 1535\nclass Solution: def getWinner(self, arr: List[int], k: int) -\u003e int: mx = arr[0] cnt = 0 for x in arr[1:]: if mx \u003c x: mx = x cnt = 1 else: cnt += 1 if cnt == k: break return mx ","description":"1535. Find the Winner of an Array Game","title":"1535. Find the Winner of an Array Game","uri":"/en/tracks/algorithms-101/leetcode/medium/1535/"},{"content":"LeetCode problem 1536\nclass Solution: def minSwaps(self, grid: List[List[int]]) -\u003e int: n = len(grid) pos = [-1] * n for i in range(n): for j in range(n - 1, -1, -1): if grid[i][j] == 1: pos[i] = j break res = 0 for i in range(n): k = -1 for j in range(i, n): if pos[j] \u003c= i: res += j - i k = j break if k == -1: return -1 while k \u003e i: pos[k], pos[k - 1] = pos[k - 1], pos[k] k -= 1 return res ","description":"1536. Minimum Swaps to Arrange a Binary Grid","title":"1536. Minimum Swaps to Arrange a Binary Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/1536/"},{"content":"LeetCode problem 1538\n# \"\"\" # This is the ArrayReader's API interface. # You should not implement it, or speculate about its implementation # \"\"\" # class ArrayReader(object): # # Compares 4 different elements in the array # # return 4 if the values of the 4 elements are the same (0 or 1). # # return 2 if three elements have a value equal to 0 and one element has value equal to 1 or vice versa. # # return 0 : if two element have a value equal to 0 and two elements have a value equal to 1. # def query(self, a: int, b: int, c: int, d: int) -\u003e int: # # # Returns the length of the array # def length(self) -\u003e int: # class Solution: def guessMajority(self, reader: \"ArrayReader\") -\u003e int: n = reader.length() x = reader.query(0, 1, 2, 3) a, b = 1, 0 k = 0 for i in range(4, n): if reader.query(0, 1, 2, i) == x: a += 1 else: b += 1 k = i y = reader.query(0, 1, 2, 4) if reader.query(1, 2, 3, 4) == y: a += 1 else: b += 1 k = 0 if reader.query(0, 2, 3, 4) == y: a += 1 else: b += 1 k = 1 if reader.query(0, 1, 3, 4) == y: a += 1 else: b += 1 k = 2 if a == b: return -1 return 3 if a \u003e b else k ","description":"1538. Guess the Majority in a Hidden Array","title":"1538. Guess the Majority in a Hidden Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1538/"},{"content":"LeetCode problem 1539\nclass Solution: def findKthPositive(self, arr: List[int], k: int) -\u003e int: if arr[0] \u003e k: return k left, right = 0, len(arr) while left \u003c right: mid = (left + right) \u003e\u003e 1 if arr[mid] - mid - 1 \u003e= k: right = mid else: left = mid + 1 return arr[left - 1] + k - (arr[left - 1] - (left - 1) - 1) ","description":"1539. Kth Missing Positive Number","title":"1539. Kth Missing Positive Number","uri":"/en/tracks/algorithms-101/leetcode/easy/1539/"},{"content":"LeetCode problem 1540\nclass Solution: def canConvertString(self, s: str, t: str, k: int) -\u003e bool: if len(s) != len(t): return False cnt = [0] * 26 for a, b in zip(s, t): x = (ord(b) - ord(a) + 26) % 26 cnt[x] += 1 for i in range(1, 26): if i + 26 * (cnt[i] - 1) \u003e k: return False return True ","description":"1540. Can Convert String in K Moves","title":"1540. Can Convert String in K Moves","uri":"/en/tracks/algorithms-101/leetcode/medium/1540/"},{"content":"LeetCode problem 1541\nclass Solution: def minInsertions(self, s: str) -\u003e int: res = x = 0 i, n = 0, len(s) while i \u003c n: if s[i] == '(': # 待匹配的左括号加 1 x += 1 else: if i \u003c n - 1 and s[i + 1] == ')': # 有连续两个右括号，i 往后移动 i += 1 else: # 只有一个右括号，插入一个 res += 1 if x == 0: # 无待匹配的左括号，插入一个 res += 1 else: # 待匹配的左括号减 1 x -= 1 i += 1 # 遍历结束，仍有待匹配的左括号，说明右括号不足，插入 x \u003c\u003c 1 个 res += x \u003c\u003c 1 return res ","description":"1541. Minimum Insertions to Balance a Parentheses String","title":"1541. Minimum Insertions to Balance a Parentheses String","uri":"/en/tracks/algorithms-101/leetcode/medium/1541/"},{"content":"LeetCode problem 1544\nclass Solution: def makeGood(self, s: str) -\u003e str: stk = [] for c in s: if not stk or abs(ord(stk[-1]) - ord(c)) != 32: stk.append(c) else: stk.pop() return \"\".join(stk) ","description":"1544. Make The String Great","title":"1544. Make The String Great","uri":"/en/tracks/algorithms-101/leetcode/easy/1544/"},{"content":"LeetCode problem 1545\nclass Solution: def findKthBit(self, n: int, k: int) -\u003e str: def dfs(n: int, k: int) -\u003e int: if k == 1: return 0 if (k \u0026 (k - 1)) == 0: return 1 m = 1 \u003c\u003c n if k * 2 \u003c m - 1: return dfs(n - 1, k) return dfs(n - 1, m - k) ^ 1 return str(dfs(n, k)) ","description":"1545. Find Kth Bit in Nth Binary String","title":"1545. Find Kth Bit in Nth Binary String","uri":"/en/tracks/algorithms-101/leetcode/medium/1545/"},{"content":"LeetCode problem 1546\nclass Solution: def maxNonOverlapping(self, nums: List[int], target: int) -\u003e int: res = 0 i, n = 0, len(nums) while i \u003c n: s = 0 vis = {0} while i \u003c n: s += nums[i] if s - target in vis: res += 1 break i += 1 vis.add(s) i += 1 return res ","description":"1546. Maximum Number of Non-Overlapping Subarrays With Sum Equals Target","title":"1546. Maximum Number of Non-Overlapping Subarrays With Sum Equals Target","uri":"/en/tracks/algorithms-101/leetcode/medium/1546/"},{"content":"LeetCode problem 1550\nclass Solution: def threeConsecutiveOdds(self, arr: List[int]) -\u003e bool: for i in range(len(arr) - 2): if arr[i] % 2 + arr[i + 1] % 2 + arr[i + 2] % 2 == 3: return True return False ","description":"1550. Three Consecutive Odds","title":"1550. Three Consecutive Odds","uri":"/en/tracks/algorithms-101/leetcode/easy/1550/"},{"content":"LeetCode problem 1551\nclass Solution: def minOperations(self, n: int) -\u003e int: return sum(n - (i \u003c\u003c 1 | 1) for i in range(n \u003e\u003e 1)) ","description":"1551. Minimum Operations to Make Array Equal","title":"1551. Minimum Operations to Make Array Equal","uri":"/en/tracks/algorithms-101/leetcode/medium/1551/"},{"content":"LeetCode problem 1552\nclass Solution: def maxDistance(self, position: List[int], m: int) -\u003e int: def check(f): prev = position[0] cnt = 1 for curr in position[1:]: if curr - prev \u003e= f: prev = curr cnt += 1 return cnt \u003e= m position.sort() left, right = 1, position[-1] while left \u003c right: mid = (left + right + 1) \u003e\u003e 1 if check(mid): left = mid else: right = mid - 1 return left ","description":"1552. Magnetic Force Between Two Balls","title":"1552. Magnetic Force Between Two Balls","uri":"/en/tracks/algorithms-101/leetcode/medium/1552/"},{"content":"LeetCode problem 1554\nclass Solution: def differByOne(self, dict: List[str]) -\u003e bool: s = set() for word in dict: for i in range(len(word)): t = word[:i] + \"*\" + word[i + 1 :] if t in s: return True s.add(t) return False ","description":"1554. Strings Differ by One Character","title":"1554. Strings Differ by One Character","uri":"/en/tracks/algorithms-101/leetcode/medium/1554/"},{"content":"LeetCode problem 1556\nclass Solution: def thousandSeparator(self, n: int) -\u003e str: cnt = 0 res = [] while 1: n, v = divmod(n, 10) res.append(str(v)) cnt += 1 if n == 0: break if cnt == 3: res.append('.') cnt = 0 return ''.join(res[::-1]) ","description":"1556. Thousand Separator","title":"1556. Thousand Separator","uri":"/en/tracks/algorithms-101/leetcode/easy/1556/"},{"content":"LeetCode problem 1557\nclass Solution: def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -\u003e List[int]: cnt = Counter(t for _, t in edges) return [i for i in range(n) if cnt[i] == 0] ","description":"1557. Minimum Number of Vertices to Reach All Nodes","title":"1557. Minimum Number of Vertices to Reach All Nodes","uri":"/en/tracks/algorithms-101/leetcode/medium/1557/"},{"content":"LeetCode problem 1558\nclass Solution: def minOperations(self, nums: List[int]) -\u003e int: return sum(v.bit_count() for v in nums) + max(0, max(nums).bit_length() - 1) ","description":"1558. Minimum Numbers of Function Calls to Make Target Array","title":"1558. Minimum Numbers of Function Calls to Make Target Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1558/"},{"content":"LeetCode problem 1560\nclass Solution: def mostVisited(self, n: int, rounds: List[int]) -\u003e List[int]: if rounds[0] \u003c= rounds[-1]: return list(range(rounds[0], rounds[-1] + 1)) return list(range(1, rounds[-1] + 1)) + list(range(rounds[0], n + 1)) ","description":"1560. Most Visited Sector in  a Circular Track","title":"1560. Most Visited Sector in  a Circular Track","uri":"/en/tracks/algorithms-101/leetcode/easy/1560/"},{"content":"LeetCode problem 1561\nclass Solution: def maxCoins(self, piles: List[int]) -\u003e int: piles.sort() return sum(piles[-2 : len(piles) // 3 - 1 : -2]) ","description":"1561. Maximum Number of Coins You Can Get","title":"1561. Maximum Number of Coins You Can Get","uri":"/en/tracks/algorithms-101/leetcode/medium/1561/"},{"content":"LeetCode problem 1562\nclass Solution: def findLatestStep(self, arr: List[int], m: int) -\u003e int: n = len(arr) if m == n: return n cnt = [0] * (n + 2) res = -1 for i, v in enumerate(arr): v -= 1 l, r = cnt[v - 1], cnt[v + 1] if l == m or r == m: res = i cnt[v - l] = cnt[v + r] = l + r + 1 return res ","description":"1562. Find Latest Group of Size M","title":"1562. Find Latest Group of Size M","uri":"/en/tracks/algorithms-101/leetcode/medium/1562/"},{"content":"LeetCode problem 1564\nclass Solution: def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -\u003e int: n = len(warehouse) left = [warehouse[0]] * n for i in range(1, n): left[i] = min(left[i - 1], warehouse[i]) boxes.sort() i, j = 0, n - 1 while i \u003c len(boxes): while j \u003e= 0 and left[j] \u003c boxes[i]: j -= 1 if j \u003c 0: break i, j = i + 1, j - 1 return i ","description":"1564. Put Boxes Into the Warehouse I","title":"1564. Put Boxes Into the Warehouse I","uri":"/en/tracks/algorithms-101/leetcode/medium/1564/"},{"content":"LeetCode problem 1566\nclass Solution: def containsPattern(self, arr: List[int], m: int, k: int) -\u003e bool: n = len(arr) for i in range(n - m * k + 1): j = 0 while j \u003c m * k: if arr[i + j] != arr[i + (j % m)]: break j += 1 if j == m * k: return True return False ","description":"1566. Detect Pattern of Length M Repeated K or More Times","title":"1566. Detect Pattern of Length M Repeated K or More Times","uri":"/en/tracks/algorithms-101/leetcode/easy/1566/"},{"content":"LeetCode problem 1567\nclass Solution: def getMaxLen(self, nums: List[int]) -\u003e int: f1 = 1 if nums[0] \u003e 0 else 0 f2 = 1 if nums[0] \u003c 0 else 0 res = f1 for num in nums[1:]: pf1, pf2 = f1, f2 if num \u003e 0: f1 += 1 if f2 \u003e 0: f2 += 1 else: f2 = 0 elif num \u003c 0: pf1, pf2 = f1, f2 f2 = pf1 + 1 if pf2 \u003e 0: f1 = pf2 + 1 else: f1 = 0 else: f1 = 0 f2 = 0 res = max(res, f1) return res ","description":"1567. Maximum Length of Subarray With Positive Product","title":"1567. Maximum Length of Subarray With Positive Product","uri":"/en/tracks/algorithms-101/leetcode/medium/1567/"},{"content":"LeetCode problem 1570\nclass SparseVector: def __init__(self, nums: List[int]): self.d = {i: v for i, v in enumerate(nums) if v} # Return the dotProduct of two sparse vectors def dotProduct(self, vec: \"SparseVector\") -\u003e int: a, b = self.d, vec.d if len(b) \u003c len(a): a, b = b, a return sum(v * b.get(i, 0) for i, v in a.items()) # Your SparseVector object will be instantiated and called as such: # v1 = SparseVector(nums1) # v2 = SparseVector(nums2) # res = v1.dotProduct(v2) ","description":"1570. Dot Product of Two Sparse Vectors","title":"1570. Dot Product of Two Sparse Vectors","uri":"/en/tracks/algorithms-101/leetcode/medium/1570/"},{"content":"LeetCode problem 1572\nclass Solution: def diagonalSum(self, mat: List[List[int]]) -\u003e int: res = 0 n = len(mat) for i, row in enumerate(mat): j = n - i - 1 res += row[i] + (0 if j == i else row[j]) return res ","description":"1572. Matrix Diagonal Sum","title":"1572. Matrix Diagonal Sum","uri":"/en/tracks/algorithms-101/leetcode/easy/1572/"},{"content":"LeetCode problem 1573\nclass Solution: def numWays(self, s: str) -\u003e int: def find(x): t = 0 for i, c in enumerate(s): t += int(c == '1') if t == x: return i cnt, m = divmod(sum(c == '1' for c in s), 3) if m: return 0 n = len(s) mod = 10**9 + 7 if cnt == 0: return ((n - 1) * (n - 2) // 2) % mod i1, i2 = find(cnt), find(cnt + 1) j1, j2 = find(cnt * 2), find(cnt * 2 + 1) return (i2 - i1) * (j2 - j1) % (10**9 + 7) ","description":"1573. Number of Ways to Split a String","title":"1573. Number of Ways to Split a String","uri":"/en/tracks/algorithms-101/leetcode/medium/1573/"},{"content":"LeetCode problem 1574\nclass Solution: def findLengthOfShortestSubarray(self, arr: List[int]) -\u003e int: n = len(arr) i, j = 0, n - 1 while i + 1 \u003c n and arr[i] \u003c= arr[i + 1]: i += 1 while j - 1 \u003e= 0 and arr[j - 1] \u003c= arr[j]: j -= 1 if i \u003e= j: return 0 res = min(n - i - 1, j) r = j for l in range(i + 1): while r \u003c n and arr[r] \u003c arr[l]: r += 1 res = min(res, r - l - 1) return res ","description":"1574. Shortest Subarray to be Removed to Make Array Sorted","title":"1574. Shortest Subarray to be Removed to Make Array Sorted","uri":"/en/tracks/algorithms-101/leetcode/medium/1574/"},{"content":"LeetCode problem 1576\nclass Solution: def modifyString(self, s: str) -\u003e str: s = list(s) n = len(s) for i in range(n): if s[i] == \"?\": for c in \"abc\": if (i and s[i - 1] == c) or (i + 1 \u003c n and s[i + 1] == c): continue s[i] = c break return \"\".join(s) ","description":"1576. Replace All 's to Avoid Consecutive Repeating Characters","title":"1576. Replace All 's to Avoid Consecutive Repeating Characters","uri":"/en/tracks/algorithms-101/leetcode/easy/1576/"},{"content":"LeetCode problem 1577\nclass Solution: def numTriplets(self, nums1: List[int], nums2: List[int]) -\u003e int: cnt1 = Counter(nums1) cnt2 = Counter(nums2) res = 0 for a, x in cnt1.items(): for b, y in cnt2.items(): if a * a % b == 0: c = a * a // b if b == c: res += x * y * (y - 1) else: res += x * y * cnt2[c] if b * b % a == 0: c = b * b // a if a == c: res += x * (x - 1) * y else: res += x * y * cnt1[c] return res \u003e\u003e 1 ","description":"1577. Number of Ways Where Square of Number Is Equal to Product of Two Numbers","title":"1577. Number of Ways Where Square of Number Is Equal to Product of Two Numbers","uri":"/en/tracks/algorithms-101/leetcode/medium/1577/"},{"content":"LeetCode problem 1578\nclass Solution: def minCost(self, colors: str, neededTime: List[int]) -\u003e int: res = i = 0 n = len(colors) while i \u003c n: j = i s = mx = 0 while j \u003c n and colors[j] == colors[i]: s += neededTime[j] if mx \u003c neededTime[j]: mx = neededTime[j] j += 1 if j - i \u003e 1: res += s - mx i = j return res ","description":"1578. Minimum Time to Make Rope Colorful","title":"1578. Minimum Time to Make Rope Colorful","uri":"/en/tracks/algorithms-101/leetcode/medium/1578/"},{"content":"LeetCode problem 1580\nclass Solution: def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -\u003e int: n = len(warehouse) left = [0] * n right = [0] * n left[0] = right[-1] = inf for i in range(1, n): left[i] = min(left[i - 1], warehouse[i - 1]) for i in range(n - 2, -1, -1): right[i] = min(right[i + 1], warehouse[i + 1]) for i in range(n): warehouse[i] = min(warehouse[i], max(left[i], right[i])) boxes.sort() warehouse.sort() res = i = 0 for x in boxes: while i \u003c n and warehouse[i] \u003c x: i += 1 if i == n: break res, i = res + 1, i + 1 return res ","description":"1580. Put Boxes Into the Warehouse II","title":"1580. Put Boxes Into the Warehouse II","uri":"/en/tracks/algorithms-101/leetcode/medium/1580/"},{"content":"LeetCode problem 1582\nclass Solution: def numSpecial(self, mat: List[List[int]]) -\u003e int: m, n = len(mat), len(mat[0]) r = [0] * m c = [0] * n for i, row in enumerate(mat): for j, v in enumerate(row): r[i] += v c[j] += v res = 0 for i in range(m): for j in range(n): if mat[i][j] == 1 and r[i] == 1 and c[j] == 1: res += 1 return res ","description":"1582. Special Positions in a Binary Matrix","title":"1582. Special Positions in a Binary Matrix","uri":"/en/tracks/algorithms-101/leetcode/easy/1582/"},{"content":"LeetCode problem 1583\nclass Solution: def unhappyFriends( self, n: int, preferences: List[List[int]], pairs: List[List[int]] ) -\u003e int: d = [{p: i for i, p in enumerate(v)} for v in preferences] p = {} for x, y in pairs: p[x] = y p[y] = x res = 0 for x in range(n): y = p[x] res += any(d[u][x] \u003c d[u][p[u]] for u in preferences[x][: d[x][y]]) return res ","description":"1583. Count Unhappy Friends","title":"1583. Count Unhappy Friends","uri":"/en/tracks/algorithms-101/leetcode/medium/1583/"},{"content":"LeetCode problem 1584\nclass Solution: def minCostConnectPoints(self, points: List[List[int]]) -\u003e int: def find(x: int) -\u003e int: if p[x] != x: p[x] = find(p[x]) return p[x] n = len(points) g = [] for i, (x1, y1) in enumerate(points): for j in range(i + 1, n): x2, y2 = points[j] t = abs(x1 - x2) + abs(y1 - y2) g.append((t, i, j)) p = list(range(n)) res = 0 for cost, i, j in sorted(g): pa, pb = find(i), find(j) if pa == pb: continue p[pa] = pb res += cost n -= 1 if n == 1: break return res ","description":"1584. Min Cost to Connect All Points","title":"1584. Min Cost to Connect All Points","uri":"/en/tracks/algorithms-101/leetcode/medium/1584/"},{"content":"LeetCode problem 1585\nclass Solution: def isTransformable(self, s: str, t: str) -\u003e bool: pos = defaultdict(deque) for i, c in enumerate(s): pos[int(c)].append(i) for c in t: x = int(c) if not pos[x] or any(pos[i] and pos[i][0] \u003c pos[x][0] for i in range(x)): return False pos[x].popleft() return True ","description":"1585. Check If String Is Transformable With Substring Sort Operations","title":"1585. Check If String Is Transformable With Substring Sort Operations","uri":"/en/tracks/algorithms-101/leetcode/hard/1585/"},{"content":"LeetCode problem 1586\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class BSTIterator: def __init__(self, root: Optional[TreeNode]): self.nums = [] def dfs(root): if root is None: return dfs(root.left) self.nums.append(root.val) dfs(root.right) dfs(root) self.i = -1 def hasNext(self) -\u003e bool: return self.i \u003c len(self.nums) - 1 def next(self) -\u003e int: self.i += 1 return self.nums[self.i] def hasPrev(self) -\u003e bool: return self.i \u003e 0 def prev(self) -\u003e int: self.i -= 1 return self.nums[self.i] # Your BSTIterator object will be instantiated and called as such: # obj = BSTIterator(root) # param_1 = obj.hasNext() # param_2 = obj.next() # param_3 = obj.hasPrev() # param_4 = obj.prev() ","description":"1586. Binary Search Tree Iterator II","title":"1586. Binary Search Tree Iterator II","uri":"/en/tracks/algorithms-101/leetcode/medium/1586/"},{"content":"LeetCode problem 1588\nclass Solution: def sumOddLengthSubarrays(self, arr: List[int]) -\u003e int: res, n = 0, len(arr) for i in range(n): s = 0 for j in range(i, n): s += arr[j] if (j - i + 1) \u0026 1: res += s return res ","description":"1588. Sum of All Odd Length Subarrays","title":"1588. Sum of All Odd Length Subarrays","uri":"/en/tracks/algorithms-101/leetcode/easy/1588/"},{"content":"LeetCode problem 1589\nclass Solution: def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -\u003e int: n = len(nums) d = [0] * n for l, r in requests: d[l] += 1 if r + 1 \u003c n: d[r + 1] -= 1 for i in range(1, n): d[i] += d[i - 1] nums.sort() d.sort() mod = 10**9 + 7 return sum(a * b for a, b in zip(nums, d)) % mod ","description":"1589. Maximum Sum Obtained of Any Permutation","title":"1589. Maximum Sum Obtained of Any Permutation","uri":"/en/tracks/algorithms-101/leetcode/medium/1589/"},{"content":"LeetCode problem 1590\nclass Solution: def minSubarray(self, nums: List[int], p: int) -\u003e int: k = sum(nums) % p if k == 0: return 0 last = {0: -1} cur = 0 res = len(nums) for i, x in enumerate(nums): cur = (cur + x) % p target = (cur - k + p) % p if target in last: res = min(res, i - last[target]) last[cur] = i return -1 if res == len(nums) else res ","description":"1590. Make Sum Divisible by P","title":"1590. Make Sum Divisible by P","uri":"/en/tracks/algorithms-101/leetcode/medium/1590/"},{"content":"LeetCode problem 1592\nclass Solution: def reorderSpaces(self, text: str) -\u003e str: cnt = text.count(' ') words = text.split() m = len(words) - 1 if m == 0: return words[0] + ' ' * cnt return (' ' * (cnt // m)).join(words) + ' ' * (cnt % m) ","description":"1592. Rearrange Spaces Between Words","title":"1592. Rearrange Spaces Between Words","uri":"/en/tracks/algorithms-101/leetcode/easy/1592/"},{"content":"LeetCode problem 1593\nclass Solution: def maxUniqueSplit(self, s: str) -\u003e int: def dfs(i, t): if i \u003e= len(s): nonlocal res res = max(res, t) return for j in range(i + 1, len(s) + 1): if s[i:j] not in vis: vis.add(s[i:j]) dfs(j, t + 1) vis.remove(s[i:j]) vis = set() res = 1 dfs(0, 0) return res ","description":"1593. Split a String Into the Max Number of Unique Substrings","title":"1593. Split a String Into the Max Number of Unique Substrings","uri":"/en/tracks/algorithms-101/leetcode/medium/1593/"},{"content":"LeetCode problem 1594\nclass Solution: def maxProductPath(self, grid: List[List[int]]) -\u003e int: m, n = len(grid), len(grid[0]) mod = 10**9 + 7 dp = [[[grid[0][0]] * 2 for _ in range(n)] for _ in range(m)] for i in range(1, m): dp[i][0] = [dp[i - 1][0][0] * grid[i][0]] * 2 for j in range(1, n): dp[0][j] = [dp[0][j - 1][0] * grid[0][j]] * 2 for i in range(1, m): for j in range(1, n): v = grid[i][j] if v \u003e= 0: dp[i][j][0] = min(dp[i - 1][j][0], dp[i][j - 1][0]) * v dp[i][j][1] = max(dp[i - 1][j][1], dp[i][j - 1][1]) * v else: dp[i][j][0] = max(dp[i - 1][j][1], dp[i][j - 1][1]) * v dp[i][j][1] = min(dp[i - 1][j][0], dp[i][j - 1][0]) * v res = dp[-1][-1][1] return -1 if res \u003c 0 else res % mod ","description":"1594. Maximum Non Negative Product in a Matrix","title":"1594. Maximum Non Negative Product in a Matrix","uri":"/en/tracks/algorithms-101/leetcode/medium/1594/"},{"content":"LeetCode problem 1595\nclass Solution: def connectTwoGroups(self, cost: List[List[int]]) -\u003e int: m, n = len(cost), len(cost[0]) f = [inf] * (1 \u003c\u003c n) f[0] = 0 g = f[:] for i in range(1, m + 1): for j in range(1 \u003c\u003c n): g[j] = inf for k in range(n): if (j \u003e\u003e k \u0026 1) == 0: continue c = cost[i - 1][k] x = min(g[j ^ (1 \u003c\u003c k)], f[j], f[j ^ (1 \u003c\u003c k)]) + c g[j] = min(g[j], x) f = g[:] return f[-1] ","description":"1595. Minimum Cost to Connect Two Groups of Points","title":"1595. Minimum Cost to Connect Two Groups of Points","uri":"/en/tracks/algorithms-101/leetcode/hard/1595/"},{"content":"LeetCode problem 1598\nclass Solution: def minOperations(self, logs: List[str]) -\u003e int: res = 0 for v in logs: if v == \"../\": res = max(0, res - 1) elif v[0] != \".\": res += 1 return res ","description":"1598. Crawler Log Folder","title":"1598. Crawler Log Folder","uri":"/en/tracks/algorithms-101/leetcode/easy/1598/"},{"content":"LeetCode problem 1599\nclass Solution: def minOperationsMaxProfit( self, customers: List[int], boardingCost: int, runningCost: int ) -\u003e int: res = -1 mx = t = 0 wait = 0 i = 0 while wait or i \u003c len(customers): wait += customers[i] if i \u003c len(customers) else 0 up = wait if wait \u003c 4 else 4 wait -= up t += up * boardingCost - runningCost i += 1 if t \u003e mx: mx = t res = i return res ","description":"1599. Maximum Profit of Operating a Centennial Wheel","title":"1599. Maximum Profit of Operating a Centennial Wheel","uri":"/en/tracks/algorithms-101/leetcode/medium/1599/"},{"content":"LeetCode problem\nSolution 1 Using hashmap.\n# Definition for singly-linked list. class ListNode: def __init__(self, x): self.val = x self.next = None class Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode): nodes = set() cur = headA while cur: nodes.add(cur) cur = cur.next cur = headB while cur: if cur in nodes: return cur cur = cur.next return None Solution 2 Initialize two pointers, one for each head. Move each pointer to the next node in its list. If a pointer reaches the end of its list, move it to the start of the other list. Repeat steps 2 and 3 until the two pointers meet, or until both pointers have switched lists and reached the end (meaning there is no intersection). The key insight is that by switching lists when a pointer reaches the end, each pointer traverses the same total number of nodes. This means they must meet at the intersection if one exists.\nclass Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode): pointerA, pointerB = headA, headB # Continue until the pointers meet while pointerA != pointerB: # Move each pointer to the next node, # or to the start of the other list if it reached the end pointerA = pointerA.next if pointerA else headB pointerB = pointerB.next if pointerB else headA # Return the intersecting node, or None if there is no intersection return pointerA It may seem like the loop could run forever because it continues until the two pointers meet and each pointer is always moved forward (to the next node or to the start of the other list).\nIf the two linked lists intersect, then from the point of intersection, they share the same nodes until the end. The two pointers will meet at the intersection point because when each pointer has traversed its own list once and then the other list, they have both traversed exactly the same number of nodes in total (the length of list A plus the length of list B). So, they must meet at the intersection point if one exists.\nIf the linked lists do not intersect, the pointers will both reach the end of the other list after traversing both lists. They’ll be both set to None, and the loop condition pointerA != pointerB will fail, terminating the loop.\nSo, regardless of whether the linked lists intersect, the loop will eventually terminate. This is why the solution has a time complexity of O(m + n), where m and n are the lengths of the two linked lists.\n","description":"Finding the intersection of two singly linked lists.","title":"160. Intersection of Two Linked Lists","uri":"/en/tracks/algorithms-101/leetcode/easy/160/"},{"content":"LeetCode problem 1600\nclass ThroneInheritance: def __init__(self, kingName: str): self.g = defaultdict(list) self.dead = set() self.king = kingName def birth(self, parentName: str, childName: str) -\u003e None: self.g[parentName].append(childName) def death(self, name: str) -\u003e None: self.dead.add(name) def getInheritanceOrder(self) -\u003e List[str]: def dfs(x): if x not in self.dead: res.append(x) for y in self.g[x]: dfs(y) res = [] dfs(self.king) return res # Your ThroneInheritance object will be instantiated and called as such: # obj = ThroneInheritance(kingName) # obj.birth(parentName,childName) # obj.death(name) # param_3 = obj.getInheritanceOrder() ","description":"1600. Throne Inheritance","title":"1600. Throne Inheritance","uri":"/en/tracks/algorithms-101/leetcode/medium/1600/"},{"content":"LeetCode problem 1601\nclass Solution: def maximumRequests(self, n: int, requests: List[List[int]]) -\u003e int: def check(mask: int) -\u003e bool: cnt = [0] * n for i, (f, t) in enumerate(requests): if mask \u003e\u003e i \u0026 1: cnt[f] -= 1 cnt[t] += 1 return all(v == 0 for v in cnt) res = 0 for mask in range(1 \u003c\u003c len(requests)): cnt = mask.bit_count() if res \u003c cnt and check(mask): res = cnt return res ","description":"1601. Maximum Number of Achievable Transfer Requests","title":"1601. Maximum Number of Achievable Transfer Requests","uri":"/en/tracks/algorithms-101/leetcode/hard/1601/"},{"content":"LeetCode problem 1602\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def findNearestRightNode(self, root: TreeNode, u: TreeNode) -\u003e Optional[TreeNode]: def dfs(root, i): nonlocal d, res if root is None or res: return if d == i: res = root return if root == u: d = i return dfs(root.left, i + 1) dfs(root.right, i + 1) d = 0 res = None dfs(root, 1) return res ","description":"1602. Find Nearest Right Node in Binary Tree","title":"1602. Find Nearest Right Node in Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1602/"},{"content":"LeetCode problem 1603\nclass ParkingSystem: def __init__(self, big: int, medium: int, small: int): self.cnt = [0, big, medium, small] def addCar(self, carType: int) -\u003e bool: if self.cnt[carType] == 0: return False self.cnt[carType] -= 1 return True # Your ParkingSystem object will be instantiated and called as such: # obj = ParkingSystem(big, medium, small) # param_1 = obj.addCar(carType) ","description":"1603. Design Parking System","title":"1603. Design Parking System","uri":"/en/tracks/algorithms-101/leetcode/easy/1603/"},{"content":"LeetCode problem 1604\nclass Solution: def alertNames(self, keyName: List[str], keyTime: List[str]) -\u003e List[str]: d = defaultdict(list) for name, t in zip(keyName, keyTime): t = int(t[:2]) * 60 + int(t[3:]) d[name].append(t) res = [] for name, ts in d.items(): if (n := len(ts)) \u003e 2: ts.sort() for i in range(n - 2): if ts[i + 2] - ts[i] \u003c= 60: res.append(name) break res.sort() return res ","description":"1604. Alert Using Same Key-Card Three or More Times in a One Hour Period","title":"1604. Alert Using Same Key-Card Three or More Times in a One Hour Period","uri":"/en/tracks/algorithms-101/leetcode/medium/1604/"},{"content":"LeetCode problem 1605\nclass Solution: def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -\u003e List[List[int]]: m, n = len(rowSum), len(colSum) res = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): x = min(rowSum[i], colSum[j]) res[i][j] = x rowSum[i] -= x colSum[j] -= x return res ","description":"1605. Find Valid Matrix Given Row and Column Sums","title":"1605. Find Valid Matrix Given Row and Column Sums","uri":"/en/tracks/algorithms-101/leetcode/medium/1605/"},{"content":"LeetCode problem 1606\nfrom sortedcontainers import SortedList class Solution: def busiestServers(self, k: int, arrival: List[int], load: List[int]) -\u003e List[int]: free = SortedList(range(k)) busy = [] cnt = [0] * k for i, (start, t) in enumerate(zip(arrival, load)): while busy and busy[0][0] \u003c= start: free.add(busy[0][1]) heappop(busy) if not free: continue j = free.bisect_left(i % k) if j == len(free): j = 0 server = free[j] cnt[server] += 1 heappush(busy, (start + t, server)) free.remove(server) mx = max(cnt) return [i for i, v in enumerate(cnt) if v == mx] ","description":"1606. Find Servers That Handled Most Number of Requests","title":"1606. Find Servers That Handled Most Number of Requests","uri":"/en/tracks/algorithms-101/leetcode/hard/1606/"},{"content":"LeetCode problem 1608\nclass Solution: def specialArray(self, nums: List[int]) -\u003e int: nums.sort() n = len(nums) for x in range(1, n + 1): cnt = n - bisect_left(nums, x) if cnt == x: return x return -1 ","description":"1608. Special Array With X Elements Greater Than or Equal X","title":"1608. Special Array With X Elements Greater Than or Equal X","uri":"/en/tracks/algorithms-101/leetcode/easy/1608/"},{"content":"LeetCode problem 1609\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isEvenOddTree(self, root: Optional[TreeNode]) -\u003e bool: def dfs(root, i): if root is None: return True even = i % 2 == 0 prev = d.get(i, 0 if even else inf) if even and (root.val % 2 == 0 or prev \u003e= root.val): return False if not even and (root.val % 2 == 1 or prev \u003c= root.val): return False d[i] = root.val return dfs(root.left, i + 1) and dfs(root.right, i + 1) d = {} return dfs(root, 0) ","description":"1609. Even Odd Tree","title":"1609. Even Odd Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1609/"},{"content":"LeetCode problem 1610\nclass Solution: def visiblePoints( self, points: List[List[int]], angle: int, location: List[int] ) -\u003e int: v = [] x, y = location same = 0 for xi, yi in points: if xi == x and yi == y: same += 1 else: v.append(atan2(yi - y, xi - x)) v.sort() n = len(v) v += [deg + 2 * pi for deg in v] t = angle * pi / 180 mx = max((bisect_right(v, v[i] + t) - i for i in range(n)), default=0) return mx + same ","description":"1610. Maximum Number of Visible Points","title":"1610. Maximum Number of Visible Points","uri":"/en/tracks/algorithms-101/leetcode/hard/1610/"},{"content":"LeetCode problem 1611\nclass Solution: def minimumOneBitOperations(self, n: int) -\u003e int: if n == 0: return 0 return n ^ self.minimumOneBitOperations(n \u003e\u003e 1) ","description":"1611. Minimum One Bit Operations to Make Integers Zero","title":"1611. Minimum One Bit Operations to Make Integers Zero","uri":"/en/tracks/algorithms-101/leetcode/hard/1611/"},{"content":"LeetCode problem 1612\n# Definition for a binary tree node. # class Node(object): # def __init__(self, val=\" \", left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def checkEquivalence(self, root1: 'Node', root2: 'Node') -\u003e bool: def dfs(root): cnt = [0] * 26 if root is None: return cnt if root.val in '+-': l, r = dfs(root.left), dfs(root.right) k = 1 if root.val == '+' else -1 for i in range(26): cnt[i] += l[i] + r[i] * k else: cnt[ord(root.val) - ord('a')] += 1 return cnt return dfs(root1) == dfs(root2) ","description":"1612. Check If Two Expression Trees are Equivalent","title":"1612. Check If Two Expression Trees are Equivalent","uri":"/en/tracks/algorithms-101/leetcode/medium/1612/"},{"content":"LeetCode problem 1614\nclass Solution: def maxDepth(self, s: str) -\u003e int: stack = [] res = 0 for c in s: if c == '(': stack.append(1) res = max(res, len(stack)) elif c == ')': stack.pop() return res ","description":"1614. Maximum Nesting Depth of the Parentheses","title":"1614. Maximum Nesting Depth of the Parentheses","uri":"/en/tracks/algorithms-101/leetcode/easy/1614/"},{"content":"LeetCode problem 1615\nclass Solution: def maximalNetworkRank(self, n: int, roads: List[List[int]]) -\u003e int: g = [[0] * n for _ in range(n)] cnt = [0] * n for a, b in roads: g[a][b] = g[b][a] = 1 cnt[a] += 1 cnt[b] += 1 return max(cnt[a] + cnt[b] - g[a][b] for a in range(n) for b in range(a + 1, n)) ","description":"1615. Maximal Network Rank","title":"1615. Maximal Network Rank","uri":"/en/tracks/algorithms-101/leetcode/medium/1615/"},{"content":"LeetCode problem 1616\nclass Solution: def checkPalindromeFormation(self, a: str, b: str) -\u003e bool: def check1(a: str, b: str) -\u003e bool: i, j = 0, len(b) - 1 while i \u003c j and a[i] == b[j]: i, j = i + 1, j - 1 return i \u003e= j or check2(a, i, j) or check2(b, i, j) def check2(a: str, i: int, j: int) -\u003e bool: return a[i : j + 1] == a[i : j + 1][::-1] return check1(a, b) or check1(b, a) ","description":"1616. Split Two Strings to Make Palindrome","title":"1616. Split Two Strings to Make Palindrome","uri":"/en/tracks/algorithms-101/leetcode/medium/1616/"},{"content":"LeetCode problem 1617\nclass Solution: def countSubgraphsForEachDiameter( self, n: int, edges: List[List[int]] ) -\u003e List[int]: def bfs(u: int) -\u003e int: d = -1 q = deque([u]) nonlocal msk, nxt msk ^= 1 \u003c\u003c u while q: d += 1 for _ in range(len(q)): nxt = u = q.popleft() for v in g[u]: if msk \u003e\u003e v \u0026 1: msk ^= 1 \u003c\u003c v q.append(v) return d g = defaultdict(list) for u, v in edges: u, v = u - 1, v - 1 g[u].append(v) g[v].append(u) res = [0] * (n - 1) nxt = 0 for mask in range(1, 1 \u003c\u003c n): if mask \u0026 (mask - 1) == 0: continue msk = mask cur = msk.bit_length() - 1 bfs(cur) if msk == 0: msk = mask mx = bfs(nxt) res[mx - 1] += 1 return res ","description":"1617. Count Subtrees With Max Distance Between Cities","title":"1617. Count Subtrees With Max Distance Between Cities","uri":"/en/tracks/algorithms-101/leetcode/hard/1617/"},{"content":"LeetCode problem 1618\n# \"\"\" # This is FontInfo's API interface. # You should not implement it, or speculate about its implementation # \"\"\" # class FontInfo(object): # Return the width of char ch when fontSize is used. # def getWidth(self, fontSize, ch): # \"\"\" # :type fontSize: int # :type ch: char # :rtype int # \"\"\" # # def getHeight(self, fontSize): # \"\"\" # :type fontSize: int # :rtype int # \"\"\" class Solution: def maxFont( self, text: str, w: int, h: int, fonts: List[int], fontInfo: 'FontInfo' ) -\u003e int: def check(size): if fontInfo.getHeight(size) \u003e h: return False return sum(fontInfo.getWidth(size, c) for c in text) \u003c= w left, right = 0, len(fonts) - 1 res = -1 while left \u003c right: mid = (left + right + 1) \u003e\u003e 1 if check(fonts[mid]): left = mid else: right = mid - 1 return fonts[left] if check(fonts[left]) else -1 ","description":"1618. Maximum Font to Fit a Sentence in a Screen","title":"1618. Maximum Font to Fit a Sentence in a Screen","uri":"/en/tracks/algorithms-101/leetcode/medium/1618/"},{"content":"LeetCode problem 1619\nclass Solution: def trimMean(self, arr: List[int]) -\u003e float: n = len(arr) start, end = int(n * 0.05), int(n * 0.95) arr.sort() t = arr[start:end] return round(sum(t) / len(t), 5) ","description":"1619. Mean of Array After Removing Some Elements","title":"1619. Mean of Array After Removing Some Elements","uri":"/en/tracks/algorithms-101/leetcode/easy/1619/"},{"content":"LeetCode problem 1620\nclass Solution: def bestCoordinate(self, towers: List[List[int]], radius: int) -\u003e List[int]: mx = 0 res = [0, 0] for i in range(51): for j in range(51): t = 0 for x, y, q in towers: d = ((x - i) ** 2 + (y - j) ** 2) ** 0.5 if d \u003c= radius: t += floor(q / (1 + d)) if t \u003e mx: mx = t res = [i, j] return res ","description":"1620. Coordinate With Maximum Network Quality","title":"1620. Coordinate With Maximum Network Quality","uri":"/en/tracks/algorithms-101/leetcode/medium/1620/"},{"content":"LeetCode problem 1621\nclass Solution: def numberOfSets(self, n: int, k: int) -\u003e int: mod = 10**9 + 7 f = [[0] * (k + 1) for _ in range(n + 1)] g = [[0] * (k + 1) for _ in range(n + 1)] f[1][0] = 1 for i in range(2, n + 1): for j in range(k + 1): f[i][j] = (f[i - 1][j] + g[i - 1][j]) % mod g[i][j] = g[i - 1][j] if j: g[i][j] += f[i - 1][j - 1] g[i][j] %= mod g[i][j] += g[i - 1][j - 1] g[i][j] %= mod return (f[-1][-1] + g[-1][-1]) % mod ","description":"1621. Number of Sets of K Non-Overlapping Line Segments","title":"1621. Number of Sets of K Non-Overlapping Line Segments","uri":"/en/tracks/algorithms-101/leetcode/medium/1621/"},{"content":"LeetCode problem 1622\nMOD = int(1e9 + 7) class Node: def __init__(self, l, r): self.left = None self.right = None self.l = l self.r = r self.mid = (l + r) \u003e\u003e 1 self.v = 0 self.add = 0 self.mul = 1 class SegmentTree: def __init__(self): self.root = Node(1, int(1e5 + 1)) def modifyAdd(self, l, r, inc, node=None): if l \u003e r: return if node is None: node = self.root if node.l \u003e= l and node.r \u003c= r: node.v = (node.v + (node.r - node.l + 1) * inc) % MOD node.add += inc return self.pushdown(node) if l \u003c= node.mid: self.modifyAdd(l, r, inc, node.left) if r \u003e node.mid: self.modifyAdd(l, r, inc, node.right) self.pushup(node) def modifyMul(self, l, r, m, node=None): if l \u003e r: return if node is None: node = self.root if node.l \u003e= l and node.r \u003c= r: node.v = (node.v * m) % MOD node.add = (node.add * m) % MOD node.mul = (node.mul * m) % MOD return self.pushdown(node) if l \u003c= node.mid: self.modifyMul(l, r, m, node.left) if r \u003e node.mid: self.modifyMul(l, r, m, node.right) self.pushup(node) def query(self, l, r, node=None): if l \u003e r: return 0 if node is None: node = self.root if node.l \u003e= l and node.r \u003c= r: return node.v self.pushdown(node) v = 0 if l \u003c= node.mid: v = (v + self.query(l, r, node.left)) % MOD if r \u003e node.mid: v = (v + self.query(l, r, node.right)) % MOD return v def pushup(self, node): node.v = (node.left.v + node.right.v) % MOD def pushdown(self, node): if node.left is None: node.left = Node(node.l, node.mid) if node.right is None: node.right = Node(node.mid + 1, node.r) left, right = node.left, node.right if node.add != 0 or node.mul != 1: left.v = (left.v * node.mul + (left.r - left.l + 1) * node.add) % MOD right.v = (right.v * node.mul + (right.r - right.l + 1) * node.add) % MOD left.add = (left.add * node.mul + node.add) % MOD right.add = (right.add * node.mul + node.add) % MOD left.mul = (left.mul * node.mul) % MOD right.mul = (right.mul * node.mul) % MOD node.add = 0 node.mul = 1 class Fancy: def __init__(self): self.n = 0 self.tree = SegmentTree() def append(self, val: int) -\u003e None: self.n += 1 self.tree.modifyAdd(self.n, self.n, val) def addAll(self, inc: int) -\u003e None: self.tree.modifyAdd(1, self.n, inc) def multAll(self, m: int) -\u003e None: self.tree.modifyMul(1, self.n, m) def getIndex(self, idx: int) -\u003e int: return -1 if idx \u003e= self.n else self.tree.query(idx + 1, idx + 1) # Your Fancy object will be instantiated and called as such: # obj = Fancy() # obj.append(val) # obj.addAll(inc) # obj.multAll(m) # param_4 = obj.getIndex(idx) ","description":"1622. Fancy Sequence","title":"1622. Fancy Sequence","uri":"/en/tracks/algorithms-101/leetcode/hard/1622/"},{"content":"LeetCode problem 1624\nclass Solution: def maxLengthBetweenEqualCharacters(self, s: str) -\u003e int: d = {} res = -1 for i, c in enumerate(s): if c in d: res = max(res, i - d[c] - 1) else: d[c] = i return res ","description":"1624. Largest Substring Between Two Equal Characters","title":"1624. Largest Substring Between Two Equal Characters","uri":"/en/tracks/algorithms-101/leetcode/easy/1624/"},{"content":"LeetCode problem 1625\nclass Solution: def findLexSmallestString(self, s: str, a: int, b: int) -\u003e str: res = s n = len(s) s = list(s) for _ in range(n): s = s[-b:] + s[:-b] for j in range(10): for k in range(1, n, 2): s[k] = str((int(s[k]) + a) % 10) if b \u0026 1: for p in range(10): for k in range(0, n, 2): s[k] = str((int(s[k]) + a) % 10) t = ''.join(s) if res \u003e t: res = t else: t = ''.join(s) if res \u003e t: res = t return res ","description":"1625. Lexicographically Smallest String After Applying Operations","title":"1625. Lexicographically Smallest String After Applying Operations","uri":"/en/tracks/algorithms-101/leetcode/medium/1625/"},{"content":"LeetCode problem 1626\nclass BinaryIndexedTree: def __init__(self, n): self.n = n self.c = [0] * (n + 1) def update(self, x, val): while x \u003c= self.n: self.c[x] = max(self.c[x], val) x += x \u0026 -x def query(self, x): s = 0 while x: s = max(s, self.c[x]) x -= x \u0026 -x return s class Solution: def bestTeamScore(self, scores: List[int], ages: List[int]) -\u003e int: m = max(ages) tree = BinaryIndexedTree(m) for score, age in sorted(zip(scores, ages)): tree.update(age, score + tree.query(age)) return tree.query(m) ","description":"1626. Best Team With No Conflicts","title":"1626. Best Team With No Conflicts","uri":"/en/tracks/algorithms-101/leetcode/medium/1626/"},{"content":"LeetCode problem 1627\nclass UnionFind: def __init__(self, n): self.p = list(range(n)) self.size = [1] * n def find(self, x): if self.p[x] != x: self.p[x] = self.find(self.p[x]) return self.p[x] def union(self, a, b): pa, pb = self.find(a), self.find(b) if pa == pb: return False if self.size[pa] \u003e self.size[pb]: self.p[pb] = pa self.size[pa] += self.size[pb] else: self.p[pa] = pb self.size[pb] += self.size[pa] return True class Solution: def areConnected( self, n: int, threshold: int, queries: List[List[int]] ) -\u003e List[bool]: uf = UnionFind(n + 1) for a in range(threshold + 1, n + 1): for b in range(a + a, n + 1, a): uf.union(a, b) return [uf.find(a) == uf.find(b) for a, b in queries] ","description":"1627. Graph Connectivity With Threshold","title":"1627. Graph Connectivity With Threshold","uri":"/en/tracks/algorithms-101/leetcode/hard/1627/"},{"content":"LeetCode problem 1628\nimport abc from abc import ABC, abstractmethod \"\"\" This is the interface for the expression tree Node. You should not remove it, and you can define some classes to implement it. \"\"\" class Node(ABC): @abstractmethod # define your fields here def evaluate(self) -\u003e int: pass class MyNode(Node): def __init__(self, val): self.val = val self.left = None self.right = None def evaluate(self) -\u003e int: x = self.val if x.isdigit(): return int(x) left, right = self.left.evaluate(), self.right.evaluate() if x == '+': return left + right if x == '-': return left - right if x == '*': return left * right if x == '/': return left // right \"\"\" This is the TreeBuilder class. You can treat it as the driver code that takes the postinfix input and returns the expression tree represnting it as a Node. \"\"\" class TreeBuilder(object): def buildTree(self, postfix: List[str]) -\u003e 'Node': stk = [] for s in postfix: node = MyNode(s) if not s.isdigit(): node.right = stk.pop() node.left = stk.pop() stk.append(node) return stk[-1] \"\"\" Your TreeBuilder object will be instantiated and called as such: obj = TreeBuilder(); expTree = obj.buildTree(postfix); res = expTree.evaluate(); \"\"\" ","description":"1628. Design an Expression Tree With Evaluate Function","title":"1628. Design an Expression Tree With Evaluate Function","uri":"/en/tracks/algorithms-101/leetcode/medium/1628/"},{"content":"LeetCode problem 1629\nclass Solution: def slowestKey(self, releaseTimes: List[int], keysPressed: str) -\u003e str: res = keysPressed[0] mx = releaseTimes[0] for i in range(1, len(keysPressed)): d = releaseTimes[i] - releaseTimes[i - 1] if d \u003e mx or (d == mx and ord(keysPressed[i]) \u003e ord(res)): mx = d res = keysPressed[i] return res ","description":"1629. Slowest Key","title":"1629. Slowest Key","uri":"/en/tracks/algorithms-101/leetcode/easy/1629/"},{"content":"LeetCode problem 1630\nclass Solution: def checkArithmeticSubarrays( self, nums: List[int], l: List[int], r: List[int] ) -\u003e List[bool]: def check(nums, l, r): n = r - l + 1 s = set(nums[l : l + n]) a1, an = min(nums[l : l + n]), max(nums[l : l + n]) d, mod = divmod(an - a1, n - 1) return mod == 0 and all((a1 + (i - 1) * d) in s for i in range(1, n)) return [check(nums, left, right) for left, right in zip(l, r)] ","description":"1630. Arithmetic Subarrays","title":"1630. Arithmetic Subarrays","uri":"/en/tracks/algorithms-101/leetcode/medium/1630/"},{"content":"LeetCode problem 1631\nclass Solution: def minimumEffortPath(self, heights: List[List[int]]) -\u003e int: m, n = len(heights), len(heights[0]) dist = [[inf] * n for _ in range(m)] dist[0][0] = 0 dirs = (-1, 0, 1, 0, -1) q = [(0, 0, 0)] while q: t, i, j = heappop(q) for a, b in pairwise(dirs): x, y = i + a, j + b if ( 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and (d := max(t, abs(heights[i][j] - heights[x][y]))) \u003c dist[x][y] ): dist[x][y] = d heappush(q, (d, x, y)) return int(dist[-1][-1]) ","description":"1631. Path With Minimum Effort","title":"1631. Path With Minimum Effort","uri":"/en/tracks/algorithms-101/leetcode/medium/1631/"},{"content":"LeetCode problem 1632\nclass UnionFind: def __init__(self, n): self.p = list(range(n)) self.size = [1] * n def find(self, x): if self.p[x] != x: self.p[x] = self.find(self.p[x]) return self.p[x] def union(self, a, b): pa, pb = self.find(a), self.find(b) if pa != pb: if self.size[pa] \u003e self.size[pb]: self.p[pb] = pa self.size[pa] += self.size[pb] else: self.p[pa] = pb self.size[pb] += self.size[pa] def reset(self, x): self.p[x] = x self.size[x] = 1 class Solution: def matrixRankTransform(self, matrix: List[List[int]]) -\u003e List[List[int]]: m, n = len(matrix), len(matrix[0]) d = defaultdict(list) for i, row in enumerate(matrix): for j, v in enumerate(row): d[v].append((i, j)) row_max = [0] * m col_max = [0] * n res = [[0] * n for _ in range(m)] uf = UnionFind(m + n) for v in sorted(d): rank = defaultdict(int) for i, j in d[v]: uf.union(i, j + m) for i, j in d[v]: rank[uf.find(i)] = max(rank[uf.find(i)], row_max[i], col_max[j]) for i, j in d[v]: res[i][j] = row_max[i] = col_max[j] = 1 + rank[uf.find(i)] for i, j in d[v]: uf.reset(i) uf.reset(j + m) return res ","description":"1632. Rank Transform of a Matrix","title":"1632. Rank Transform of a Matrix","uri":"/en/tracks/algorithms-101/leetcode/hard/1632/"},{"content":"LeetCode problem 1634\n# Definition for polynomial singly-linked list. # class PolyNode: # def __init__(self, x=0, y=0, next=None): # self.coefficient = x # self.power = y # self.next = next class Solution: def addPoly(self, poly1: \"PolyNode\", poly2: \"PolyNode\") -\u003e \"PolyNode\": dummy = curr = PolyNode() while poly1 and poly2: if poly1.power \u003e poly2.power: curr.next = poly1 poly1 = poly1.next curr = curr.next elif poly1.power \u003c poly2.power: curr.next = poly2 poly2 = poly2.next curr = curr.next else: if c := poly1.coefficient + poly2.coefficient: curr.next = PolyNode(c, poly1.power) curr = curr.next poly1 = poly1.next poly2 = poly2.next curr.next = poly1 or poly2 return dummy.next ","description":"1634. Add Two Polynomials Represented as Linked Lists","title":"1634. Add Two Polynomials Represented as Linked Lists","uri":"/en/tracks/algorithms-101/leetcode/medium/1634/"},{"content":"LeetCode problem 1636\nclass Solution: def frequencySort(self, nums: List[int]) -\u003e List[int]: cnt = Counter(nums) return sorted(nums, key=lambda x: (cnt[x], -x)) ","description":"1636. Sort Array by Increasing Frequency","title":"1636. Sort Array by Increasing Frequency","uri":"/en/tracks/algorithms-101/leetcode/easy/1636/"},{"content":"LeetCode problem 1637\nclass Solution: def maxWidthOfVerticalArea(self, points: List[List[int]]) -\u003e int: nums = [x for x, _ in points] n = len(nums) mi, mx = min(nums), max(nums) bucket_size = max(1, (mx - mi) // (n - 1)) bucket_count = (mx - mi) // bucket_size + 1 buckets = [[inf, -inf] for _ in range(bucket_count)] for x in nums: i = (x - mi) // bucket_size buckets[i][0] = min(buckets[i][0], x) buckets[i][1] = max(buckets[i][1], x) res = 0 prev = inf for curmin, curmax in buckets: if curmin \u003e curmax: continue res = max(res, curmin - prev) prev = curmax return res ","description":"1637. Widest Vertical Area Between Two Points Containing No Points","title":"1637. Widest Vertical Area Between Two Points Containing No Points","uri":"/en/tracks/algorithms-101/leetcode/easy/1637/"},{"content":"LeetCode problem 1638\nclass Solution: def countSubstrings(self, s: str, t: str) -\u003e int: res = 0 m, n = len(s), len(t) f = [[0] * (n + 1) for _ in range(m + 1)] g = [[0] * (n + 1) for _ in range(m + 1)] for i, a in enumerate(s, 1): for j, b in enumerate(t, 1): if a == b: f[i][j] = f[i - 1][j - 1] + 1 for i in range(m - 1, -1, -1): for j in range(n - 1, -1, -1): if s[i] == t[j]: g[i][j] = g[i + 1][j + 1] + 1 else: res += (f[i][j] + 1) * (g[i + 1][j + 1] + 1) return res ","description":"1638. Count Substrings That Differ by One Character","title":"1638. Count Substrings That Differ by One Character","uri":"/en/tracks/algorithms-101/leetcode/medium/1638/"},{"content":"LeetCode problem 1639\nclass Solution: def numWays(self, words: List[str], target: str) -\u003e int: m, n = len(target), len(words[0]) cnt = [[0] * 26 for _ in range(n)] for w in words: for j, c in enumerate(w): cnt[j][ord(c) - ord('a')] += 1 mod = 10**9 + 7 f = [[0] * (n + 1) for _ in range(m + 1)] f[0] = [1] * (n + 1) for i in range(1, m + 1): for j in range(1, n + 1): f[i][j] = ( f[i][j - 1] + f[i - 1][j - 1] * cnt[j - 1][ord(target[i - 1]) - ord('a')] ) f[i][j] %= mod return f[m][n] ","description":"1639. Number of Ways to Form a Target String Given a Dictionary","title":"1639. Number of Ways to Form a Target String Given a Dictionary","uri":"/en/tracks/algorithms-101/leetcode/hard/1639/"},{"content":"LeetCode problem 1640\nclass Solution: def canFormArray(self, arr: List[int], pieces: List[List[int]]) -\u003e bool: d = {p[0]: p for p in pieces} i, n = 0, len(arr) while i \u003c n: if arr[i] not in d: return False p = d[arr[i]] if arr[i : i + len(p)] != p: return False i += len(p) return True ","description":"1640. Check Array Formation Through Concatenation","title":"1640. Check Array Formation Through Concatenation","uri":"/en/tracks/algorithms-101/leetcode/easy/1640/"},{"content":"LeetCode problem 1641\nclass Solution: def countVowelStrings(self, n: int) -\u003e int: f = [1] * 5 for _ in range(n - 1): s = 0 for j in range(5): s += f[j] f[j] = s return sum(f) ","description":"1641. Count Sorted Vowel Strings","title":"1641. Count Sorted Vowel Strings","uri":"/en/tracks/algorithms-101/leetcode/medium/1641/"},{"content":"LeetCode problem 1642\nclass Solution: def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -\u003e int: h = [] for i, a in enumerate(heights[:-1]): b = heights[i + 1] d = b - a if d \u003e 0: heappush(h, d) if len(h) \u003e ladders: bricks -= heappop(h) if bricks \u003c 0: return i return len(heights) - 1 ","description":"1642. Furthest Building You Can Reach","title":"1642. Furthest Building You Can Reach","uri":"/en/tracks/algorithms-101/leetcode/medium/1642/"},{"content":"LeetCode problem 1643\nclass Solution: def kthSmallestPath(self, destination: List[int], k: int) -\u003e str: v, h = destination res = [] for _ in range(h + v): if h == 0: res.append(\"V\") else: x = comb(h + v - 1, h - 1) if k \u003e x: res.append(\"V\") v -= 1 k -= x else: res.append(\"H\") h -= 1 return \"\".join(res) ","description":"1643. Kth Smallest Instructions","title":"1643. Kth Smallest Instructions","uri":"/en/tracks/algorithms-101/leetcode/hard/1643/"},{"content":"LeetCode problem 1644\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def lowestCommonAncestor( self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode' ) -\u003e 'TreeNode': def dfs(root, p, q): if root is None: return False l = dfs(root.left, p, q) r = dfs(root.right, p, q) nonlocal res if l and r: res = root if (l or r) and (root.val == p.val or root.val == q.val): res = root return l or r or root.val == p.val or root.val == q.val res = None dfs(root, p, q) return res ","description":"1644. Lowest Common Ancestor of a Binary Tree II","title":"1644. Lowest Common Ancestor of a Binary Tree II","uri":"/en/tracks/algorithms-101/leetcode/medium/1644/"},{"content":"LeetCode problem 1646\nclass Solution: def getMaximumGenerated(self, n: int) -\u003e int: if n \u003c 2: return n nums = [0] * (n + 1) nums[1] = 1 for i in range(2, n + 1): nums[i] = nums[i \u003e\u003e 1] if i % 2 == 0 else nums[i \u003e\u003e 1] + nums[(i \u003e\u003e 1) + 1] return max(nums) ","description":"1646. Get Maximum in Generated Array","title":"1646. Get Maximum in Generated Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1646/"},{"content":"LeetCode задача 1647\nЗадача Строка s называется хорошей, если в ней нет двух разных символов с одинаковой частотой.\nДана строка s, верните минимальное количество символов, которое необходимо удалить, чтобы сделать s хорошим.\nПодход Основная идея решения заключается в подсчете частот символов в строке и определении количества удалений, необходимых для того, чтобы все частоты были уникальными.\nЕсли проверять встречалась ли частота текущего символа ранее, то\nАлгоритм / Абстрактный алгоритм Считаем частоты всех символов в строке. Сортируем частоты в порядке убывания. Для каждой частоты, начиная с самой большой, если она не уникальна (т.е. есть другая такая же частота), уменьшаем ее на 1 и увеличиваем счетчик удалений. Продолжаем, пока все частоты не станут уникальными. Решение from collections import Counter class Solution: def minDeletions(self, s: str) -\u003e int: freq = Counter(s) # Подсчет частот символов freqs = sorted(freq.values(), reverse=True) # Сортировка частот в порядке убывания deletions = 0 seen = set() for f in freqs: while f in seen: f -= 1 deletions += 1 if f \u003e 0: seen.add(f) return deletions ","description":"LeetCode 1647. Минимальное количество удалений, чтобы сделать частоты символов уникальными. Разбор задачи.","title":"1647. Minimum Deletions to Make Character Frequencies Unique","uri":"/en/tracks/algorithms-101/leetcode/medium/1647/"},{"content":"LeetCode problem 1648\nclass Solution: def maxProfit(self, inventory: List[int], orders: int) -\u003e int: inventory.sort(reverse=True) mod = 10**9 + 7 res = i = 0 n = len(inventory) while orders \u003e 0: while i \u003c n and inventory[i] \u003e= inventory[0]: i += 1 nxt = 0 if i \u003c n: nxt = inventory[i] cnt = i x = inventory[0] - nxt tot = cnt * x if tot \u003e orders: decr = orders // cnt a1, an = inventory[0] - decr + 1, inventory[0] res += (a1 + an) * decr // 2 * cnt res += (inventory[0] - decr) * (orders % cnt) else: a1, an = nxt + 1, inventory[0] res += (a1 + an) * x // 2 * cnt inventory[0] = nxt orders -= tot res %= mod return res ","description":"1648. Sell Diminishing-Valued Colored Balls","title":"1648. Sell Diminishing-Valued Colored Balls","uri":"/en/tracks/algorithms-101/leetcode/medium/1648/"},{"content":"LeetCode problem 1649\nclass Node: def __init__(self): self.l = 0 self.r = 0 self.v = 0 class SegmentTree: def __init__(self, n): self.tr = [Node() for _ in range(4 * n)] self.build(1, 1, n) def build(self, u, l, r): self.tr[u].l = l self.tr[u].r = r if l == r: return mid = (l + r) \u003e\u003e 1 self.build(u \u003c\u003c 1, l, mid) self.build(u \u003c\u003c 1 | 1, mid + 1, r) def modify(self, u, x, v): if self.tr[u].l == x and self.tr[u].r == x: self.tr[u].v += v return mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 if x \u003c= mid: self.modify(u \u003c\u003c 1, x, v) else: self.modify(u \u003c\u003c 1 | 1, x, v) self.pushup(u) def pushup(self, u): self.tr[u].v = self.tr[u \u003c\u003c 1].v + self.tr[u \u003c\u003c 1 | 1].v def query(self, u, l, r): if self.tr[u].l \u003e= l and self.tr[u].r \u003c= r: return self.tr[u].v mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 v = 0 if l \u003c= mid: v = self.query(u \u003c\u003c 1, l, r) if r \u003e mid: v += self.query(u \u003c\u003c 1 | 1, l, r) return v class Solution: def createSortedArray(self, instructions: List[int]) -\u003e int: n = max(instructions) tree = SegmentTree(n) res = 0 for num in instructions: a = tree.query(1, 1, num - 1) b = tree.query(1, 1, n) - tree.query(1, 1, num) res += min(a, b) tree.modify(1, num, 1) return res % int((1e9 + 7)) ","description":"1649. Create Sorted Array through Instructions","title":"1649. Create Sorted Array through Instructions","uri":"/en/tracks/algorithms-101/leetcode/hard/1649/"},{"content":"LeetCode problem 1650\n\"\"\" # Definition for a Node. class Node: def __init__(self, val): self.val = val self.left = None self.right = None self.parent = None \"\"\" class Solution: def lowestCommonAncestor(self, p: 'Node', q: 'Node') -\u003e 'Node': a, b = p, q while a != b: a = a.parent if a.parent else q b = b.parent if b.parent else p return a ","description":"1650. Lowest Common Ancestor of a Binary Tree III","title":"1650. Lowest Common Ancestor of a Binary Tree III","uri":"/en/tracks/algorithms-101/leetcode/medium/1650/"},{"content":"LeetCode problem 1652\nclass Solution: def decrypt(self, code: List[int], k: int) -\u003e List[int]: n = len(code) res = [0] * n if k == 0: return res s = list(accumulate(code + code, initial=0)) for i in range(n): if k \u003e 0: res[i] = s[i + k + 1] - s[i + 1] else: res[i] = s[i + n] - s[i + k + n] return res ","description":"1652. Defuse the Bomb","title":"1652. Defuse the Bomb","uri":"/en/tracks/algorithms-101/leetcode/easy/1652/"},{"content":"LeetCode problem 1653\nclass Solution: def minimumDeletions(self, s: str) -\u003e int: lb, ra = 0, s.count('a') res = len(s) for c in s: ra -= c == 'a' res = min(res, lb + ra) lb += c == 'b' return res ","description":"1653. Minimum Deletions to Make String Balanced","title":"1653. Minimum Deletions to Make String Balanced","uri":"/en/tracks/algorithms-101/leetcode/medium/1653/"},{"content":"LeetCode problem 1654\nclass Solution: def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -\u003e int: s = set(forbidden) q = deque([(0, 1)]) vis = {(0, 1)} res = 0 while q: for _ in range(len(q)): i, k = q.popleft() if i == x: return res nxt = [(i + a, 1)] if k \u0026 1: nxt.append((i - b, 0)) for j, k in nxt: if 0 \u003c= j \u003c 6000 and j not in s and (j, k) not in vis: q.append((j, k)) vis.add((j, k)) res += 1 return -1 ","description":"1654. Minimum Jumps to Reach Home","title":"1654. Minimum Jumps to Reach Home","uri":"/en/tracks/algorithms-101/leetcode/medium/1654/"},{"content":"LeetCode problem 1655\nclass Solution: def canDistribute(self, nums: List[int], quantity: List[int]) -\u003e bool: m = len(quantity) s = [0] * (1 \u003c\u003c m) for i in range(1, 1 \u003c\u003c m): for j in range(m): if i \u003e\u003e j \u0026 1: s[i] = s[i ^ (1 \u003c\u003c j)] + quantity[j] break cnt = Counter(nums) arr = list(cnt.values()) n = len(arr) f = [[False] * (1 \u003c\u003c m) for _ in range(n)] for i in range(n): f[i][0] = True for i, x in enumerate(arr): for j in range(1, 1 \u003c\u003c m): if i and f[i - 1][j]: f[i][j] = True continue k = j while k: ok1 = j == k if i == 0 else f[i - 1][j ^ k] ok2 = s[k] \u003c= x if ok1 and ok2: f[i][j] = True break k = (k - 1) \u0026 j return f[-1][-1] ","description":"1655. Distribute Repeating Integers","title":"1655. Distribute Repeating Integers","uri":"/en/tracks/algorithms-101/leetcode/hard/1655/"},{"content":"LeetCode problem 1656\nclass OrderedStream: def __init__(self, n: int): self.data = [None] * n self.ptr = 0 def insert(self, idKey: int, value: str) -\u003e List[str]: self.data[idKey - 1] = value res = [] while self.ptr \u003c len(self.data) and self.data[self.ptr]: res.append(self.data[self.ptr]) self.ptr += 1 return res # Your OrderedStream object will be instantiated and called as such: # obj = OrderedStream(n) # param_1 = obj.insert(idKey,value) ","description":"1656. Design an Ordered Stream","title":"1656. Design an Ordered Stream","uri":"/en/tracks/algorithms-101/leetcode/easy/1656/"},{"content":"LeetCode problem\nProblem Statement Two strings are considered close if you can attain one from the other using two operations:\nSwap any two existing characters. Transform every occurrence of one existing character into another existing character, and do the same with the other character. The challenge is to determine whether two given strings are close or not.\nNaive Solution A naive approach might involve trying every possible combination of operations on the two strings until they match or until you’ve exhausted all possibilities. This approach is inefficient and not feasible for longer strings.\nHints \u0026 Tips A more efficient way to solve this problem is by understanding the core logic behind the operations. We can make use of frequency counts.\nApproach Check for Unique Characters: Both strings should have the same unique characters for them to be close. Frequency Counts Matter: The counts of characters in both strings should have the same frequency distribution. Steps Calculate the frequency of each character in both strings. Check if the sets of unique characters in both strings are the same. Check if the sorted list of frequency counts of characters in both strings are the same. Solution from collections import Counter def closeStrings(word1, word2): # Calculate character frequency for both words counter1 = Counter(word1) counter2 = Counter(word2) # Check if unique characters are the same in both words if set(counter1.keys()) != set(counter2.keys()): return False # Check if the frequency distribution is the same for both words if sorted(counter1.values()) != sorted(counter2.values()): return False return True ","description":"Determine if Two Strings Are Close","title":"1657. Determine if Two Strings Are Close","uri":"/en/tracks/algorithms-101/leetcode/medium/1657/"},{"content":"LeetCode problem 1658\nProblem Statement You have an integer array nums and another integer x. In a single operation, you can either remove the leftmost or the rightmost element from the array nums and decrement x by the value of the removed element. The question is: What is the minimum number of operations required to reduce x to exactly zero? If it’s not feasible, the answer should be -1.\nNaive Solution The naive approach would be to explore every possible combination of removing elements from the start or the end, recursively. While this approach can find the solution, it’s extremely inefficient and would result in a time complexity beyond O(2^n).\nApproach The problem can be turned around: Instead of trying to determine which numbers to remove from the ends, think of it as finding the longest subarray inside nums such that the sum of its elements is equal to the total sum of nums minus x. Let’s call this approach in mathematics “from the reverse”.\nWhy does this work? Well, if we find the maximum-length subarray with a sum equal to total - x, then the numbers we need to remove from the array will be the numbers outside this subarray!\nThis transformed problem can be tackled using a two-pointer or sliding window approach.\nSteps Calculate the total sum of nums. Set a target sum which is total - x. Using a sliding window approach, find the maximum length of the subarray whose sum equals the target. The result will be the total length of nums minus the length of this subarray. If no such subarray exists, return -1. Solution def minOperations(nums, x): total = sum(nums) target = total - x n = len(nums) curr_sum = 0 # sum of current subarray max_len = -1 # maximum length of the subarray that sums up to the target left = 0 # Starting pointer of sliding window for right in range(n): # Starting pointer of sliding window curr_sum += nums[right] while curr_sum \u003e target and left \u003c n: # If current sum goes beyond target curr_sum -= nums[left] # shrink the window from the left left += 1 if curr_sum == target: max_len = max(max_len, right - left + 1) if max_len == -1: return -1 return n - max_len Your browser does not support the video tag. LeetCode 1658 Solution ","description":"An exploration of reducing x to zero using minimum operations.","title":"1658. Minimum Operations to Reduce X to Zero","uri":"/en/tracks/algorithms-101/leetcode/medium/1658/"},{"content":"LeetCode problem 1659\nclass Solution: def getMaxGridHappiness( self, m: int, n: int, introvertsCount: int, extrovertsCount: int ) -\u003e int: @cache def dfs(pos: int, pre: int, ic: int, ec: int) -\u003e int: if pos == m * n or (ic == 0 and ec == 0): return 0 res = 0 up = pre // p left = 0 if pos % n == 0 else pre % 3 for i in range(3): if (i == 1 and ic == 0) or (i == 2 and ec == 0): continue cur = pre % p * 3 + i a = h[up][i] + h[left][i] b = dfs(pos + 1, cur, ic - (i == 1), ec - (i == 2)) c = 0 if i == 1: c = 120 elif i == 2: c = 40 res = max(res, a + b + c) return res p = pow(3, n - 1) h = [[0, 0, 0], [0, -60, -10], [0, -10, 40]] return dfs(0, 0, introvertsCount, extrovertsCount) ","description":"1659. Maximize Grid Happiness","title":"1659. Maximize Grid Happiness","uri":"/en/tracks/algorithms-101/leetcode/hard/1659/"},{"content":"LeetCode problem 166\nProblem Statement Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses.\nThis problem is about converting a fraction to its decimal representation in string format. The tricky part is dealing with repeating decimals. If a decimal repeats, we should enclose the repeating part in parentheses.\nFor example, if we have a fraction 1/3, the decimal representation would be 0.3333…. In this problem, we need to represent it as “0.(3)”.\nNaive Solution A naive solution could involve simple division - you divide the numerator by the denominator and convert it to a string. However, this wouldn’t account for recurring decimals, and it would only be correct for fractions that result in a finite decimal.\nApproach A better approach to solve this problem involves using the long division method and a hash map to keep track of remainders. If the same remainder appears again, it means we have found a repeating sequence.\nIn long division, we divide the numerator by the denominator, find the remainder, and then add a zero to the remainder and repeat the process.\nWhile doing this, if we encounter the same remainder that we have seen before, it means the sequence will start to repeat from here.\nSteps First, handle the simple case where numerator is divisible by denominator. If the division isn’t exact, proceed with the long division method. Keep dividing the numerator by the denominator and track the remainder. Store the remainder and its corresponding index in the decimal part of the result in a dictionary. If the remainder repeats, stop the division and enclose the repeating part in parentheses. Solution class Solution: def fractionToDecimal(self, numerator: int, denominator: int) -\u003e str: if numerator % denominator == 0: return str(numerator // denominator) integer = str(abs(numerator) // abs(denominator)) remainder = abs(numerator) % abs(denominator) decimal = [] remainder_dict = {} while remainder != 0: if remainder in remainder_dict: decimal.insert(remainder_dict[remainder], \"(\") decimal.append(\")\") break # future index of starting repeating part , i.e. 1.12(345) remainder_dict[remainder] = len(decimal) remainder *= 10 decimal.append(str(remainder // abs(denominator))) remainder %= abs(denominator) res = integer + \".\" + \"\".join(decimal) if (numerator \u003c 0) ^ (denominator \u003c 0): # Check if the result should be negative res = \"-\" + res return res When doing the division, we are always considering the absolute value of the numerator and denominator. The remainder and the index at which it appears are stored in a dictionary. Whenever a remainder repeats, it means we have found a repeating sequence and the division process is stopped. The repeating part is then enclosed in parentheses.\nAlso, note the line if (numerator \u003c 0) ^ (denominator \u003c 0):. This is checking if the result should be negative. If either, but not both, of the numerator and denominator are negative, the result should also be negative. Here ^ is the bitwise XOR operator in Python, which returns True if exactly one of the conditions is True.\nAfter doing all this, if the numerator was negative, we add a negative sign to the front of our result. Otherwise, the result is returned as is.\nYour browser does not support the video tag. LeetCode 166 Solution ","description":"An in-depth explanation and Python solution for LeetCode problem 166: Fraction to Recurring Decimal","title":"166. Fraction to Recurring Decimal","uri":"/en/tracks/algorithms-101/leetcode/medium/166/"},{"content":"LeetCode problem 1660\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def correctBinaryTree(self, root: TreeNode) -\u003e TreeNode: def dfs(root): if root is None or root.right in vis: return None vis.add(root) root.right = dfs(root.right) root.left = dfs(root.left) return root vis = set() return dfs(root) ","description":"1660. Correct a Binary Tree","title":"1660. Correct a Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1660/"},{"content":"LeetCode problem 1662\nclass Solution: def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -\u003e bool: i = j = x = y = 0 while i \u003c len(word1) and j \u003c len(word2): if word1[i][x] != word2[j][y]: return False x, y = x + 1, y + 1 if x == len(word1[i]): x, i = 0, i + 1 if y == len(word2[j]): y, j = 0, j + 1 return i == len(word1) and j == len(word2) ","description":"1662. Check If Two String Arrays are Equivalent","title":"1662. Check If Two String Arrays are Equivalent","uri":"/en/tracks/algorithms-101/leetcode/easy/1662/"},{"content":"LeetCode problem 1663\nclass Solution: def getSmallestString(self, n: int, k: int) -\u003e str: res = ['a'] * n i, d = n - 1, k - n while d \u003e 25: res[i] = 'z' d -= 25 i -= 1 res[i] = chr(ord(res[i]) + d) return ''.join(res) ","description":"1663. Smallest String With A Given Numeric Value","title":"1663. Smallest String With A Given Numeric Value","uri":"/en/tracks/algorithms-101/leetcode/medium/1663/"},{"content":"LeetCode problem 1664\nclass Solution: def waysToMakeFair(self, nums: List[int]) -\u003e int: s1, s2 = sum(nums[::2]), sum(nums[1::2]) res = t1 = t2 = 0 for i, v in enumerate(nums): res += i % 2 == 0 and t2 + s1 - t1 - v == t1 + s2 - t2 res += i % 2 == 1 and t2 + s1 - t1 == t1 + s2 - t2 - v t1 += v if i % 2 == 0 else 0 t2 += v if i % 2 == 1 else 0 return res ","description":"1664. Ways to Make a Fair Array","title":"1664. Ways to Make a Fair Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1664/"},{"content":"LeetCode problem 1665\nclass Solution: def minimumEffort(self, tasks: List[List[int]]) -\u003e int: res = cur = 0 for a, m in sorted(tasks, key=lambda x: x[0] - x[1]): if cur \u003c m: res += m - cur cur = m cur -= a return res ","description":"1665. Minimum Initial Energy to Finish Tasks","title":"1665. Minimum Initial Energy to Finish Tasks","uri":"/en/tracks/algorithms-101/leetcode/hard/1665/"},{"content":"LeetCode problem 1666\n\"\"\" # Definition for a Node. class Node: def __init__(self, val): self.val = val self.left = None self.right = None self.parent = None \"\"\" class Solution: def flipBinaryTree(self, root: \"Node\", leaf: \"Node\") -\u003e \"Node\": cur = leaf p = cur.parent while cur != root: gp = p.parent if cur.left: cur.right = cur.left cur.left = p p.parent = cur if p.left == cur: p.left = None elif p.right == cur: p.right = None cur = p p = gp leaf.parent = None return leaf ","description":"1666. Change the Root of a Binary Tree","title":"1666. Change the Root of a Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1666/"},{"content":"LeetCode problem 1668\nclass Solution: def maxRepeating(self, sequence: str, word: str) -\u003e int: for k in range(len(sequence) // len(word), -1, -1): if word * k in sequence: return k ","description":"1668. Maximum Repeating Substring","title":"1668. Maximum Repeating Substring","uri":"/en/tracks/algorithms-101/leetcode/easy/1668/"},{"content":"LeetCode problem 1669\nTraverse list1 to find the nodes right before a and right after b, and then connect these with list2.\nIdea The key is to properly link the end of the first part of list1 (before a) with the head of list2, and then connect the tail of list2 with the remaining part of list1 (after b). Use two pointers to navigate and find the exact positions for detachment and attachment.\nApproach Traverse to a-1: Start from the head of list1 and move a-1 steps forward. This node will be the connecting point to the head of list2. Traverse to b+1: From the a-1 position, move b-a+2 steps forward to reach the node after b. This node will be where we connect the tail of list2. Detach and Attach: Detach list1 at a-1 and attach list2’s head. Then, find the tail of list2 and attach the remaining part of list1. # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def mergeInBetween(self, list1: ListNode, a: int, b: int, list2: ListNode) -\u003e ListNode: dummy = ListNode(0) dummy.next = list1 prev = dummy for _ in range(a): # Traverse to a-1 prev = prev.next tail = prev for _ in range(b - a + 2): # Traverse to b+1 tail = tail.next prev.next = list2 # Attach list2 to a-1 while prev.next: # Find the tail of list2 and attach the rest of list1 prev = prev.next prev.next = tail return dummy.next ","description":"1669. Merge In Between Linked Lists","title":"1669. Merge In Between Linked Lists","uri":"/en/tracks/algorithms-101/leetcode/medium/1669/"},{"content":"LeetCode problem 1670\nclass FrontMiddleBackQueue: def __init__(self): self.q1 = deque() self.q2 = deque() def pushFront(self, val: int) -\u003e None: self.q1.appendleft(val) self.rebalance() def pushMiddle(self, val: int) -\u003e None: self.q1.append(val) self.rebalance() def pushBack(self, val: int) -\u003e None: self.q2.append(val) self.rebalance() def popFront(self) -\u003e int: if not self.q1 and not self.q2: return -1 if self.q1: val = self.q1.popleft() else: val = self.q2.popleft() self.rebalance() return val def popMiddle(self) -\u003e int: if not self.q1 and not self.q2: return -1 if len(self.q1) == len(self.q2): val = self.q1.pop() else: val = self.q2.popleft() self.rebalance() return val def popBack(self) -\u003e int: if not self.q2: return -1 val = self.q2.pop() self.rebalance() return val def rebalance(self): if len(self.q1) \u003e len(self.q2): self.q2.appendleft(self.q1.pop()) if len(self.q2) \u003e len(self.q1) + 1: self.q1.append(self.q2.popleft()) # Your FrontMiddleBackQueue object will be instantiated and called as such: # obj = FrontMiddleBackQueue() # obj.pushFront(val) # obj.pushMiddle(val) # obj.pushBack(val) # param_4 = obj.popFront() # param_5 = obj.popMiddle() # param_6 = obj.popBack() ","description":"1670. Design Front Middle Back Queue","title":"1670. Design Front Middle Back Queue","uri":"/en/tracks/algorithms-101/leetcode/medium/1670/"},{"content":"LeetCode problem 1671\nclass Solution: def minimumMountainRemovals(self, nums: List[int]) -\u003e int: n = len(nums) left = [1] * n right = [1] * n for i in range(1, n): for j in range(i): if nums[i] \u003e nums[j]: left[i] = max(left[i], left[j] + 1) for i in range(n - 2, -1, -1): for j in range(i + 1, n): if nums[i] \u003e nums[j]: right[i] = max(right[i], right[j] + 1) return n - max(a + b - 1 for a, b in zip(left, right) if a \u003e 1 and b \u003e 1) ","description":"1671. Minimum Number of Removals to Make Mountain Array","title":"1671. Minimum Number of Removals to Make Mountain Array","uri":"/en/tracks/algorithms-101/leetcode/hard/1671/"},{"content":"LeetCode problem 1672\nclass Solution: def maximumWealth(self, accounts: List[List[int]]) -\u003e int: return max(sum(v) for v in accounts) ","description":"1672. Richest Customer Wealth","title":"1672. Richest Customer Wealth","uri":"/en/tracks/algorithms-101/leetcode/easy/1672/"},{"content":"LeetCode problem 1673\nclass Solution: def mostCompetitive(self, nums: List[int], k: int) -\u003e List[int]: stk = [] n = len(nums) for i, v in enumerate(nums): while stk and stk[-1] \u003e v and len(stk) + n - i \u003e k: stk.pop() if len(stk) \u003c k: stk.append(v) return stk ","description":"1673. Find the Most Competitive Subsequence","title":"1673. Find the Most Competitive Subsequence","uri":"/en/tracks/algorithms-101/leetcode/medium/1673/"},{"content":"LeetCode problem 1674\nclass Solution: def minMoves(self, nums: List[int], limit: int) -\u003e int: d = [0] * (limit * 2 + 2) n = len(nums) for i in range(n \u003e\u003e 1): a, b = min(nums[i], nums[n - i - 1]), max(nums[i], nums[n - i - 1]) d[2] += 2 d[limit * 2 + 1] -= 2 d[a + 1] -= 1 d[b + limit + 1] += 1 d[a + b] -= 1 d[a + b + 1] += 1 res, s = n, 0 for v in d[2 : limit * 2 + 1]: s += v if res \u003e s: res = s return res ","description":"1674. Minimum Moves to Make Array Complementary","title":"1674. Minimum Moves to Make Array Complementary","uri":"/en/tracks/algorithms-101/leetcode/medium/1674/"},{"content":"LeetCode problem 1675\nclass Solution: def minimumDeviation(self, nums: List[int]) -\u003e int: h = [] mi = inf for v in nums: if v \u0026 1: v \u003c\u003c= 1 h.append(-v) mi = min(mi, v) heapify(h) res = -h[0] - mi while h[0] % 2 == 0: x = heappop(h) // 2 heappush(h, x) mi = min(mi, -x) res = min(res, -h[0] - mi) return res ","description":"1675. Minimize Deviation in Array","title":"1675. Minimize Deviation in Array","uri":"/en/tracks/algorithms-101/leetcode/hard/1675/"},{"content":"LeetCode problem 1676\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def lowestCommonAncestor( self, root: 'TreeNode', nodes: 'List[TreeNode]' ) -\u003e 'TreeNode': def dfs(root): if root is None or root.val in s: return root left, right = dfs(root.left), dfs(root.right) if left and right: return root return left or right s = {node.val for node in nodes} return dfs(root) ","description":"1676. Lowest Common Ancestor of a Binary Tree IV","title":"1676. Lowest Common Ancestor of a Binary Tree IV","uri":"/en/tracks/algorithms-101/leetcode/medium/1676/"},{"content":"LeetCode problem 1678\nclass Solution: def interpret(self, command: str) -\u003e str: res = [] for i, c in enumerate(command): if c == 'G': res.append(c) elif c == '(': res.append('o' if command[i + 1] == ')' else 'al') return ''.join(res) ","description":"1678. Goal Parser Interpretation","title":"1678. Goal Parser Interpretation","uri":"/en/tracks/algorithms-101/leetcode/easy/1678/"},{"content":"LeetCode задача 1679\nЗадача Вам дан массив чисел nums и целое число k. Задача — найти максимальное количество пар в массиве, сумма элементов которых равна k.\nПодсказки Используйте технику двух указателей(pointers) после сортировки массива для оптимизации поиска пар.\nПодход Центральная идея решения задачи заключается в использовании техники двух указателей для быстрого нахождения пар чисел с заданной суммой k. Прежде чем применить эту технику, массив сортируется в возрастающем порядке. Затем создаются два указателя: один, указывающий на начало массива, и второй — на конец. Двигая эти указатели в зависимости от суммы элементов, на которые они указывают, мы можем найти все пары с суммой k.\nАлгоритм Отсортируйте массив в возрастающем порядке. Инициализируйте два указателя: p1 на начало массива и p2 на конец. Пока p1 меньше p2: Если nums[p1] + nums[p2] равно k, увеличьте счетчик на 1, и сдвиньте оба указателя. Если сумма меньше k, сдвиньте p1 вправо. Если сумма больше k, сдвиньте p2 влево. Решение def maxOperations(nums, k) -\u003e int: c = 0 p1 = 0 p2 = len(nums) - 1 nums.sort() while p1 \u003c p2: s = nums[p1] + nums[p2] if s == k: c += 1 p1 += 1 p2 -= 1 elif s \u003c k: p1 += 1 else: p2 -= 1 return c ","description":"LeetCode 1679. Найти максимальное количество пар чисел, сумма которых равна K. Разбор задачи с использованием техники двух указателей.","title":"1679. Max Number of K-Sum Pairs","uri":"/en/tracks/algorithms-101/leetcode/medium/1679/"},{"content":"LeetCode problem 1680\nclass Solution: def concatenatedBinary(self, n: int) -\u003e int: mod = 10**9 + 7 res = shift = 0 for i in range(1, n + 1): if (i \u0026 (i - 1)) == 0: shift += 1 res = (res \u003c\u003c shift | i) % mod return res ","description":"1680. Concatenation of Consecutive Binary Numbers","title":"1680. Concatenation of Consecutive Binary Numbers","uri":"/en/tracks/algorithms-101/leetcode/medium/1680/"},{"content":"LeetCode problem 1681\nclass Solution: def minimumIncompatibility(self, nums: List[int], k: int) -\u003e int: @cache def dfs(mask): if mask == (1 \u003c\u003c n) - 1: return 0 d = {v: i for i, v in enumerate(nums) if (mask \u003e\u003e i \u0026 1) == 0} res = inf if len(d) \u003c m: return res for vs in combinations(d.keys(), m): nxt = mask for v in vs: nxt |= 1 \u003c\u003c d[v] res = min(res, max(vs) - min(vs) + dfs(nxt)) return res n = len(nums) m = n // k res = dfs(0) dfs.cache_clear() return res if res \u003c inf else -1 ","description":"1681. Minimum Incompatibility","title":"1681. Minimum Incompatibility","uri":"/en/tracks/algorithms-101/leetcode/hard/1681/"},{"content":"LeetCode problem 1682\nclass Solution: def longestPalindromeSubseq(self, s: str) -\u003e int: @cache def dfs(i, j, x): if i \u003e= j: return 0 if s[i] == s[j] and s[i] != x: return dfs(i + 1, j - 1, s[i]) + 2 return max(dfs(i + 1, j, x), dfs(i, j - 1, x)) res = dfs(0, len(s) - 1, '') dfs.cache_clear() return res ","description":"1682. Longest Palindromic Subsequence II","title":"1682. Longest Palindromic Subsequence II","uri":"/en/tracks/algorithms-101/leetcode/medium/1682/"},{"content":"LeetCode problem 1684\nclass Solution: def countConsistentStrings(self, allowed: str, words: List[str]) -\u003e int: def f(w): return reduce(or_, (1 \u003c\u003c (ord(c) - ord('a')) for c in w)) mask = f(allowed) return sum((mask | f(w)) == mask for w in words) ","description":"1684. Count the Number of Consistent Strings","title":"1684. Count the Number of Consistent Strings","uri":"/en/tracks/algorithms-101/leetcode/easy/1684/"},{"content":"LeetCode problem 1685\nclass Solution: def getSumAbsoluteDifferences(self, nums: List[int]) -\u003e List[int]: res = [] s, t = sum(nums), 0 for i, x in enumerate(nums): v = x * i - t + s - t - x * (len(nums) - i) res.append(v) t += x return res ","description":"1685. Sum of Absolute Differences in a Sorted Array","title":"1685. Sum of Absolute Differences in a Sorted Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1685/"},{"content":"LeetCode problem 1686\nclass Solution: def stoneGameVI(self, aliceValues: List[int], bobValues: List[int]) -\u003e int: vals = [(a + b, i) for i, (a, b) in enumerate(zip(aliceValues, bobValues))] vals.sort(reverse=True) a = sum(aliceValues[i] for _, i in vals[::2]) b = sum(bobValues[i] for _, i in vals[1::2]) if a \u003e b: return 1 if a \u003c b: return -1 return 0 ","description":"1686. Stone Game VI","title":"1686. Stone Game VI","uri":"/en/tracks/algorithms-101/leetcode/medium/1686/"},{"content":"LeetCode problem 1687\nclass Solution: def boxDelivering( self, boxes: List[List[int]], portsCount: int, maxBoxes: int, maxWeight: int ) -\u003e int: n = len(boxes) ws = list(accumulate((box[1] for box in boxes), initial=0)) c = [int(a != b) for a, b in pairwise(box[0] for box in boxes)] cs = list(accumulate(c, initial=0)) f = [0] * (n + 1) q = deque([0]) for i in range(1, n + 1): while q and (i - q[0] \u003e maxBoxes or ws[i] - ws[q[0]] \u003e maxWeight): q.popleft() if q: f[i] = cs[i - 1] + f[q[0]] - cs[q[0]] + 2 if i \u003c n: while q and f[q[-1]] - cs[q[-1]] \u003e= f[i] - cs[i]: q.pop() q.append(i) return f[n] ","description":"1687. Delivering Boxes from Storage to Ports","title":"1687. Delivering Boxes from Storage to Ports","uri":"/en/tracks/algorithms-101/leetcode/hard/1687/"},{"content":"LeetCode problem 1688\nclass Solution: def numberOfMatches(self, n: int) -\u003e int: return n - 1 ","description":"1688. Count of Matches in Tournament","title":"1688. Count of Matches in Tournament","uri":"/en/tracks/algorithms-101/leetcode/easy/1688/"},{"content":"LeetCode problem 1689\nclass Solution: def minPartitions(self, n: str) -\u003e int: return int(max(n)) ","description":"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers","title":"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers","uri":"/en/tracks/algorithms-101/leetcode/medium/1689/"},{"content":"LeetCode problem 1690\nclass Solution: def stoneGameVII(self, stones: List[int]) -\u003e int: s = list(accumulate(stones, initial=0)) n = len(stones) f = [[0] * n for _ in range(n)] for i in range(n - 2, -1, -1): for j in range(i + 1, n): a = s[j + 1] - s[i + 1] - f[i + 1][j] b = s[j] - s[i] - f[i][j - 1] f[i][j] = max(a, b) return f[0][-1] ","description":"1690. Stone Game VII","title":"1690. Stone Game VII","uri":"/en/tracks/algorithms-101/leetcode/medium/1690/"},{"content":"LeetCode problem 1691\nclass Solution: def maxHeight(self, cuboids: List[List[int]]) -\u003e int: for c in cuboids: c.sort() cuboids.sort() n = len(cuboids) f = [0] * n for i in range(n): for j in range(i): if cuboids[j][1] \u003c= cuboids[i][1] and cuboids[j][2] \u003c= cuboids[i][2]: f[i] = max(f[i], f[j]) f[i] += cuboids[i][2] return max(f) ","description":"1691. Maximum Height by Stacking Cuboids","title":"1691. Maximum Height by Stacking Cuboids","uri":"/en/tracks/algorithms-101/leetcode/hard/1691/"},{"content":"LeetCode problem 1692\nclass Solution: def waysToDistribute(self, n: int, k: int) -\u003e int: mod = 10**9 + 7 f = [[0] * (k + 1) for _ in range(n + 1)] f[0][0] = 1 for i in range(1, n + 1): for j in range(1, k + 1): f[i][j] = (f[i - 1][j] * j + f[i - 1][j - 1]) % mod return f[n][k] ","description":"1692. Count Ways to Distribute Candies","title":"1692. Count Ways to Distribute Candies","uri":"/en/tracks/algorithms-101/leetcode/hard/1692/"},{"content":"LeetCode problem 1694\nclass Solution: def reformatNumber(self, number: str) -\u003e str: number = number.replace(\"-\", \"\").replace(\" \", \"\") n = len(number) res = [number[i * 3 : i * 3 + 3] for i in range(n // 3)] if n % 3 == 1: res[-1] = res[-1][:2] res.append(number[-2:]) elif n % 3 == 2: res.append(number[-2:]) return \"-\".join(res) ","description":"1694. Reformat Phone Number","title":"1694. Reformat Phone Number","uri":"/en/tracks/algorithms-101/leetcode/easy/1694/"},{"content":"LeetCode problem 1695\nclass Solution: def maximumUniqueSubarray(self, nums: List[int]) -\u003e int: d = defaultdict(int) s = list(accumulate(nums, initial=0)) res = j = 0 for i, v in enumerate(nums, 1): j = max(j, d[v]) res = max(res, s[i] - s[j]) d[v] = i return res ","description":"1695. Maximum Erasure Value","title":"1695. Maximum Erasure Value","uri":"/en/tracks/algorithms-101/leetcode/medium/1695/"},{"content":"LeetCode problem 1696\nclass Solution: def maxResult(self, nums: List[int], k: int) -\u003e int: n = len(nums) f = [0] * n q = deque([0]) for i in range(n): if i - q[0] \u003e k: q.popleft() f[i] = nums[i] + f[q[0]] while q and f[q[-1]] \u003c= f[i]: q.pop() q.append(i) return f[-1] ","description":"1696. Jump Game VI","title":"1696. Jump Game VI","uri":"/en/tracks/algorithms-101/leetcode/medium/1696/"},{"content":"LeetCode problem 1697\nclass Solution: def distanceLimitedPathsExist( self, n: int, edgeList: List[List[int]], queries: List[List[int]] ) -\u003e List[bool]: def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] p = list(range(n)) edgeList.sort(key=lambda x: x[2]) j = 0 res = [False] * len(queries) for i, (a, b, limit) in sorted(enumerate(queries), key=lambda x: x[1][2]): while j \u003c len(edgeList) and edgeList[j][2] \u003c limit: u, v, _ = edgeList[j] p[find(u)] = find(v) j += 1 res[i] = find(a) == find(b) return res ","description":"1697. Checking Existence of Edge Length Limited Paths","title":"1697. Checking Existence of Edge Length Limited Paths","uri":"/en/tracks/algorithms-101/leetcode/hard/1697/"},{"content":"LeetCode problem 1698\nclass Solution: def countDistinct(self, s: str) -\u003e int: base = 131 n = len(s) p = [0] * (n + 10) h = [0] * (n + 10) p[0] = 1 for i, c in enumerate(s): p[i + 1] = p[i] * base h[i + 1] = h[i] * base + ord(c) ss = set() for i in range(1, n + 1): for j in range(i, n + 1): t = h[j] - h[i - 1] * p[j - i + 1] ss.add(t) return len(ss) ","description":"1698. Number of Distinct Substrings in a String","title":"1698. Number of Distinct Substrings in a String","uri":"/en/tracks/algorithms-101/leetcode/medium/1698/"},{"content":"LeetCode problem\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\nExample 1:\nInput: digits = \"23\" Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"] Example 2:\nInput: digits = \"\" Output: [] First accepted class Solution: def letterCombinations(self, digits: str) -\u003e List[str]: if not digits: return [] letters = ['', '', 'abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz'] result = [''] for d in digits: d = int(d) tmp = [] for letter in letters[d]: for word in result: word += letter tmp.append(word) result = tmp return result ","description":"LeetCode 17. Letter Combinations of a Phone Number","title":"17. Letter Combinations of a Phone Number","uri":"/en/tracks/algorithms-101/leetcode/medium/17/"},{"content":"LeetCode problem 1700\nclass Solution: def countStudents(self, students: List[int], sandwiches: List[int]) -\u003e int: cnt = Counter(students) for v in sandwiches: if cnt[v] == 0: return cnt[v ^ 1] cnt[v] -= 1 return 0 ","description":"1700. Number of Students Unable to Eat Lunch","title":"1700. Number of Students Unable to Eat Lunch","uri":"/en/tracks/algorithms-101/leetcode/easy/1700/"},{"content":"LeetCode problem 1701\nclass Solution: def averageWaitingTime(self, customers: List[List[int]]) -\u003e float: tot = t = 0 for a, b in customers: t = max(t, a) + b tot += t - a return tot / len(customers) ","description":"1701. Average Waiting Time","title":"1701. Average Waiting Time","uri":"/en/tracks/algorithms-101/leetcode/medium/1701/"},{"content":"LeetCode problem 1702\nclass Solution: def maximumBinaryString(self, binary: str) -\u003e str: k = binary.find('0') if k == -1: return binary k += binary[k + 1 :].count('0') return '1' * k + '0' + '1' * (len(binary) - k - 1) ","description":"1702. Maximum Binary String After Change","title":"1702. Maximum Binary String After Change","uri":"/en/tracks/algorithms-101/leetcode/medium/1702/"},{"content":"LeetCode problem 1703\nclass Solution: def minMoves(self, nums: List[int], k: int) -\u003e int: arr = [i for i, x in enumerate(nums) if x] s = list(accumulate(arr, initial=0)) res = inf x = (k + 1) // 2 y = k - x for i in range(x - 1, len(arr) - y): j = arr[i] ls = s[i + 1] - s[i + 1 - x] rs = s[i + 1 + y] - s[i + 1] a = (j + j - x + 1) * x // 2 - ls b = rs - (j + 1 + j + y) * y // 2 res = min(res, a + b) return res ","description":"1703. Minimum Adjacent Swaps for K Consecutive Ones","title":"1703. Minimum Adjacent Swaps for K Consecutive Ones","uri":"/en/tracks/algorithms-101/leetcode/hard/1703/"},{"content":"LeetCode problem 1704\nclass Solution: def halvesAreAlike(self, s: str) -\u003e bool: vowels = set('aeiouAEIOU') a, b = s[: len(s) \u003e\u003e 1], s[len(s) \u003e\u003e 1 :] return sum(c in vowels for c in a) == sum(c in vowels for c in b) ","description":"1704. Determine if String Halves Are Alike","title":"1704. Determine if String Halves Are Alike","uri":"/en/tracks/algorithms-101/leetcode/easy/1704/"},{"content":"LeetCode problem 1705\nclass Solution: def eatenApples(self, apples: List[int], days: List[int]) -\u003e int: n = len(days) i = res = 0 q = [] while i \u003c n or q: if i \u003c n and apples[i]: heappush(q, (i + days[i] - 1, apples[i])) while q and q[0][0] \u003c i: heappop(q) if q: t, v = heappop(q) v -= 1 res += 1 if v and t \u003e i: heappush(q, (t, v)) i += 1 return res ","description":"1705. Maximum Number of Eaten Apples","title":"1705. Maximum Number of Eaten Apples","uri":"/en/tracks/algorithms-101/leetcode/medium/1705/"},{"content":"LeetCode problem 1706\nclass Solution: def findBall(self, grid: List[List[int]]) -\u003e List[int]: def dfs(i: int, j: int) -\u003e int: if i == m: return j if j == 0 and grid[i][j] == -1: return -1 if j == n - 1 and grid[i][j] == 1: return -1 if grid[i][j] == 1 and grid[i][j + 1] == -1: return -1 if grid[i][j] == -1 and grid[i][j - 1] == 1: return -1 return dfs(i + 1, j + 1) if grid[i][j] == 1 else dfs(i + 1, j - 1) m, n = len(grid), len(grid[0]) return [dfs(0, j) for j in range(n)] ","description":"1706. Where Will the Ball Fall","title":"1706. Where Will the Ball Fall","uri":"/en/tracks/algorithms-101/leetcode/medium/1706/"},{"content":"LeetCode problem 1707\nclass Trie: __slots__ = [\"children\"] def __init__(self): self.children = [None] * 2 def insert(self, x: int): node = self for i in range(30, -1, -1): v = x \u003e\u003e i \u0026 1 if node.children[v] is None: node.children[v] = Trie() node = node.children[v] def search(self, x: int) -\u003e int: node = self res = 0 for i in range(30, -1, -1): v = x \u003e\u003e i \u0026 1 if node.children[v ^ 1]: res |= 1 \u003c\u003c i node = node.children[v ^ 1] elif node.children[v]: node = node.children[v] else: return -1 return res class Solution: def maximizeXor(self, nums: List[int], queries: List[List[int]]) -\u003e List[int]: trie = Trie() nums.sort() j, n = 0, len(queries) res = [-1] * n for i, (x, m) in sorted(zip(range(n), queries), key=lambda x: x[1][1]): while j \u003c len(nums) and nums[j] \u003c= m: trie.insert(nums[j]) j += 1 res[i] = trie.search(x) return res ","description":"1707. Maximum XOR With an Element From Array","title":"1707. Maximum XOR With an Element From Array","uri":"/en/tracks/algorithms-101/leetcode/hard/1707/"},{"content":"LeetCode problem 1708\nclass Solution: def largestSubarray(self, nums: List[int], k: int) -\u003e List[int]: i = nums.index(max(nums[: len(nums) - k + 1])) return nums[i : i + k] ","description":"1708. Largest Subarray Length K","title":"1708. Largest Subarray Length K","uri":"/en/tracks/algorithms-101/leetcode/easy/1708/"},{"content":"LeetCode problem\nThe column titles in an Excel sheet are designed similar to a base-26 number system. The columns start from ‘A’ (which is 1) to ‘Z’ (which is 26), then after ‘Z’, the column titles go to ‘AA’ (which is 27), ‘AB’ (28), and so on.\nThis problem is essentially asking us to convert a base-26 number (represented by uppercase English letters) to a decimal number.\nThat means that for each “new” index in columnTitle we already pass alphabet. Example:\nIf columnTitle length is 1 =\u003e result in range of (1-26) If columnTitle length is 2 (‘AB’) =\u003e first index passed alphabet (26), next B equals 2 in alphabet. Hence 1 * 26 + index(B) Solution 1 import string class Solution: def titleToNumber(self, columnTitle: str) -\u003e int: alphabet = list(string.ascii_uppercase) s = 0 for letter in columnTitle: letter_idx = alphabet.index(letter) + 1 s = s*26 + letter_idx return s Optimized Solution Using ord function that returns index of letter.\n\u003e\u003e\u003e ord('A') 65 Because here index is 65, will create a number to convert it to the correct one: result_number - ord('A) + 1\nExample:\nidxA = ord('A') - ord('A') + 1 idxB = ord('B') - ord('A') + 1 class Solution: def titleToNumber(self, columnTitle: str) -\u003e int: s = 0 correct_sum = - ord('A') + 1 for letter in columnTitle: s = s * 26 + ord(letter) + correct_sum return s ","description":"171. Excel Sheet Column Number","title":"171. Excel Sheet Column Number","uri":"/en/tracks/algorithms-101/leetcode/easy/171/"},{"content":"LeetCode problem 1710\nclass Solution: def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -\u003e int: cnt = [0] * 1001 for a, b in boxTypes: cnt[b] += a res = 0 for b in range(1000, 0, -1): a = cnt[b] if a: res += b * min(truckSize, a) truckSize -= a if truckSize \u003c= 0: break return res ","description":"1710. Maximum Units on a Truck","title":"1710. Maximum Units on a Truck","uri":"/en/tracks/algorithms-101/leetcode/easy/1710/"},{"content":"LeetCode problem 1711\nclass Solution: def countPairs(self, deliciousness: List[int]) -\u003e int: mod = 10**9 + 7 cnt = Counter(deliciousness) res = 0 for i in range(22): s = 1 \u003c\u003c i for a, m in cnt.items(): if (b := s - a) in cnt: res += m * (m - 1) if a == b else m * cnt[b] return (res \u003e\u003e 1) % mod ","description":"1711. Count Good Meals","title":"1711. Count Good Meals","uri":"/en/tracks/algorithms-101/leetcode/medium/1711/"},{"content":"LeetCode problem 1712\nclass Solution: def waysToSplit(self, nums: List[int]) -\u003e int: mod = 10**9 + 7 s = list(accumulate(nums)) res, n = 0, len(nums) for i in range(n - 2): j = bisect_left(s, s[i] \u003c\u003c 1, i + 1, n - 1) k = bisect_right(s, (s[-1] + s[i]) \u003e\u003e 1, j, n - 1) res += k - j return res % mod ","description":"1712. Ways to Split Array Into Three Subarrays","title":"1712. Ways to Split Array Into Three Subarrays","uri":"/en/tracks/algorithms-101/leetcode/medium/1712/"},{"content":"LeetCode problem 1713\nclass BinaryIndexedTree: def __init__(self, n): self.n = n self.c = [0] * (n + 1) @staticmethod def lowbit(x): return x \u0026 -x def update(self, x, val): while x \u003c= self.n: self.c[x] = max(self.c[x], val) x += BinaryIndexedTree.lowbit(x) def query(self, x): s = 0 while x: s = max(s, self.c[x]) x -= BinaryIndexedTree.lowbit(x) return s class Solution: def minOperations(self, target: List[int], arr: List[int]) -\u003e int: d = {v: i for i, v in enumerate(target)} nums = [d[v] for v in arr if v in d] return len(target) - self.lengthOfLIS(nums) def lengthOfLIS(self, nums): s = sorted(set(nums)) m = {v: i for i, v in enumerate(s, 1)} tree = BinaryIndexedTree(len(m)) res = 0 for v in nums: x = m[v] t = tree.query(x - 1) + 1 res = max(res, t) tree.update(x, t) return res ","description":"1713. Minimum Operations to Make a Subsequence","title":"1713. Minimum Operations to Make a Subsequence","uri":"/en/tracks/algorithms-101/leetcode/hard/1713/"},{"content":"LeetCode problem 1714\nclass Solution: def solve(self, nums: List[int], queries: List[List[int]]) -\u003e List[int]: mod = 10**9 + 7 n = len(nums) m = int(sqrt(n)) suf = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(n - 1, -1, -1): suf[i][j] = suf[i][min(n, j + i)] + nums[j] res = [] for x, y in queries: if y \u003c= m: res.append(suf[y][x] % mod) else: res.append(sum(nums[x::y]) % mod) return res ","description":"1714. Sum Of Special Evenly-Spaced Elements In Array","title":"1714. Sum Of Special Evenly-Spaced Elements In Array","uri":"/en/tracks/algorithms-101/leetcode/hard/1714/"},{"content":"LeetCode problem 1716\nclass Solution: def totalMoney(self, n: int) -\u003e int: a, b = divmod(n, 7) return (28 + 28 + 7 * (a - 1)) * a // 2 + (a * 2 + b + 1) * b // 2 ","description":"1716. Calculate Money in Leetcode Bank","title":"1716. Calculate Money in Leetcode Bank","uri":"/en/tracks/algorithms-101/leetcode/easy/1716/"},{"content":"LeetCode problem 1717\nclass Solution: def maximumGain(self, s: str, x: int, y: int) -\u003e int: if x \u003c y: return self.maximumGain(s[::-1], y, x) res = 0 stk1, stk2 = [], [] for c in s: if c != 'b': stk1.append(c) else: if stk1 and stk1[-1] == 'a': stk1.pop() res += x else: stk1.append(c) while stk1: c = stk1.pop() if c != 'b': stk2.append(c) else: if stk2 and stk2[-1] == 'a': stk2.pop() res += y else: stk2.append(c) return res ","description":"1717. Maximum Score From Removing Substrings","title":"1717. Maximum Score From Removing Substrings","uri":"/en/tracks/algorithms-101/leetcode/medium/1717/"},{"content":"LeetCode problem 1718\nclass Solution: def constructDistancedSequence(self, n: int) -\u003e List[int]: def dfs(u): if u == n * 2: return True if path[u]: return dfs(u + 1) for i in range(n, 1, -1): if cnt[i] and u + i \u003c n * 2 and path[u + i] == 0: cnt[i] = 0 path[u] = path[u + i] = i if dfs(u + 1): return True path[u] = path[u + i] = 0 cnt[i] = 2 if cnt[1]: cnt[1], path[u] = 0, 1 if dfs(u + 1): return True path[u], cnt[1] = 0, 1 return False path = [0] * (n * 2) cnt = [2] * (n * 2) cnt[1] = 1 dfs(1) return path[1:] ","description":"1718. Construct the Lexicographically Largest Valid Sequence","title":"1718. Construct the Lexicographically Largest Valid Sequence","uri":"/en/tracks/algorithms-101/leetcode/medium/1718/"},{"content":"LeetCode problem 1719\nclass Solution: def checkWays(self, pairs: List[List[int]]) -\u003e int: g = [[False] * 510 for _ in range(510)] v = defaultdict(list) for x, y in pairs: g[x][y] = g[y][x] = True v[x].append(y) v[y].append(x) nodes = [] for i in range(510): if v[i]: nodes.append(i) g[i][i] = True nodes.sort(key=lambda x: len(v[x])) equal = False root = 0 for i, x in enumerate(nodes): j = i + 1 while j \u003c len(nodes) and not g[x][nodes[j]]: j += 1 if j \u003c len(nodes): y = nodes[j] if len(v[x]) == len(v[y]): equal = True for z in v[x]: if not g[y][z]: return 0 else: root += 1 if root \u003e 1: return 0 return 2 if equal else 1 ","description":"1719. Number Of Ways To Reconstruct A Tree","title":"1719. Number Of Ways To Reconstruct A Tree","uri":"/en/tracks/algorithms-101/leetcode/hard/1719/"},{"content":"LeetCode problem 1720\nclass Solution: def decode(self, encoded: List[int], first: int) -\u003e List[int]: res = [first] for e in encoded: res.append(res[-1] ^ e) return res ","description":"1720. Decode XORed Array","title":"1720. Decode XORed Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1720/"},{"content":"LeetCode problem 1721\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def swapNodes(self, head: Optional[ListNode], k: int) -\u003e Optional[ListNode]: fast = slow = head for _ in range(k - 1): fast = fast.next p = fast while fast.next: fast, slow = fast.next, slow.next q = slow p.val, q.val = q.val, p.val return head ","description":"1721. Swapping Nodes in a Linked List","title":"1721. Swapping Nodes in a Linked List","uri":"/en/tracks/algorithms-101/leetcode/medium/1721/"},{"content":"LeetCode problem 1722\nclass Solution: def minimumHammingDistance( self, source: List[int], target: List[int], allowedSwaps: List[List[int]] ) -\u003e int: def find(x: int) -\u003e int: if p[x] != x: p[x] = find(p[x]) return p[x] n = len(source) p = list(range(n)) for a, b in allowedSwaps: p[find(a)] = find(b) cnt = defaultdict(Counter) for i, x in enumerate(source): j = find(i) cnt[j][x] += 1 res = 0 for i, x in enumerate(target): j = find(i) cnt[j][x] -= 1 res += cnt[j][x] \u003c 0 return res ","description":"1722. Minimize Hamming Distance After Swap Operations","title":"1722. Minimize Hamming Distance After Swap Operations","uri":"/en/tracks/algorithms-101/leetcode/medium/1722/"},{"content":"LeetCode problem 1723\nclass Solution: def minimumTimeRequired(self, jobs: List[int], k: int) -\u003e int: def dfs(i): nonlocal res if i == len(jobs): res = min(res, max(cnt)) return for j in range(k): if cnt[j] + jobs[i] \u003e= res: continue cnt[j] += jobs[i] dfs(i + 1) cnt[j] -= jobs[i] if cnt[j] == 0: break cnt = [0] * k jobs.sort(reverse=True) res = inf dfs(0) return res ","description":"1723. Find Minimum Time to Finish All Jobs","title":"1723. Find Minimum Time to Finish All Jobs","uri":"/en/tracks/algorithms-101/leetcode/hard/1723/"},{"content":"LeetCode problem 1724\nclass PersistentUnionFind: def __init__(self, n): self.rank = [0] * n self.p = list(range(n)) self.version = [inf] * n def find(self, x, t=inf): if self.p[x] == x or self.version[x] \u003e= t: return x return self.find(self.p[x], t) def union(self, a, b, t): pa, pb = self.find(a), self.find(b) if pa == pb: return False if self.rank[pa] \u003e self.rank[pb]: self.version[pb] = t self.p[pb] = pa else: self.version[pa] = t self.p[pa] = pb if self.rank[pa] == self.rank[pb]: self.rank[pb] += 1 return True class DistanceLimitedPathsExist: def __init__(self, n: int, edgeList: List[List[int]]): self.puf = PersistentUnionFind(n) edgeList.sort(key=lambda x: x[2]) for u, v, dis in edgeList: self.puf.union(u, v, dis) def query(self, p: int, q: int, limit: int) -\u003e bool: return self.puf.find(p, limit) == self.puf.find(q, limit) ","description":"1724. Checking Existence of Edge Length Limited Paths II","title":"1724. Checking Existence of Edge Length Limited Paths II","uri":"/en/tracks/algorithms-101/leetcode/hard/1724/"},{"content":"LeetCode problem 1725\nclass Solution: def countGoodRectangles(self, rectangles: List[List[int]]) -\u003e int: res = mx = 0 for l, w in rectangles: x = min(l, w) if mx \u003c x: res = 1 mx = x elif mx == x: res += 1 return res ","description":"1725. Number Of Rectangles That Can Form The Largest Square","title":"1725. Number Of Rectangles That Can Form The Largest Square","uri":"/en/tracks/algorithms-101/leetcode/easy/1725/"},{"content":"LeetCode problem 1726\nclass Solution: def tupleSameProduct(self, nums: List[int]) -\u003e int: cnt = defaultdict(int) for i in range(1, len(nums)): for j in range(i): x = nums[i] * nums[j] cnt[x] += 1 return sum(v * (v - 1) // 2 for v in cnt.values()) \u003c\u003c 3 ","description":"1726. Tuple with Same Product","title":"1726. Tuple with Same Product","uri":"/en/tracks/algorithms-101/leetcode/medium/1726/"},{"content":"LeetCode problem 1727\nclass Solution: def largestSubmatrix(self, matrix: List[List[int]]) -\u003e int: for i in range(1, len(matrix)): for j in range(len(matrix[0])): if matrix[i][j]: matrix[i][j] = matrix[i - 1][j] + 1 res = 0 for row in matrix: row.sort(reverse=True) for j, v in enumerate(row, 1): res = max(res, j * v) return res ","description":"1727. Largest Submatrix With Rearrangements","title":"1727. Largest Submatrix With Rearrangements","uri":"/en/tracks/algorithms-101/leetcode/medium/1727/"},{"content":"LeetCode problem 1728\nclass Solution: def canMouseWin(self, grid: List[str], catJump: int, mouseJump: int) -\u003e bool: dirs = [0, 1, 0, -1, 0] m = len(grid) n = len(grid[0]) nFloors = 0 cat = 0 # cat's position mouse = 0 # mouse's position def hash(i: int, j: int) -\u003e int: return i * n + j for i in range(m): for j in range(n): if grid[i][j] != \"#\": nFloors += 1 if grid[i][j] == \"C\": cat = hash(i, j) elif grid[i][j] == \"M\": mouse = hash(i, j) # dp(i, j, k) := True if mouse can win w// # Cat on (i // 8, i % 8), mouse on (j // 8, j % 8), and turns = k @functools.lru_cache(None) def dp(cat: int, mouse: int, turn: int) -\u003e bool: # We already search whole touchable grid if turn == nFloors * 2: return False if turn % 2 == 0: # mouse's turn i = mouse // n j = mouse % n for k in range(4): for jump in range(mouseJump + 1): x = i + dirs[k] * jump y = j + dirs[k + 1] * jump if x \u003c 0 or x == m or y \u003c 0 or y == n: break if grid[x][y] == \"#\": break if grid[x][y] == \"F\": # Mouse eats the food, so mouse win return True if dp(cat, hash(x, y), turn + 1): return True # Mouse can't win, so mouse lose return False else: # cat's turn i = cat // n j = cat % n for k in range(4): for jump in range(catJump + 1): x = i + dirs[k] * jump y = j + dirs[k + 1] * jump if x \u003c 0 or x == m or y \u003c 0 or y == n: break if grid[x][y] == \"#\": break if grid[x][y] == \"F\": # Cat eats the food, so mouse lose return False nextCat = hash(x, y) if nextCat == mouse: # Cat catches mouse, so mouse lose return False if not dp(nextCat, mouse, turn + 1): return False # Cat can't win, so mouse win return True return dp(cat, mouse, 0) ","description":"1728. Cat and Mouse II","title":"1728. Cat and Mouse II","uri":"/en/tracks/algorithms-101/leetcode/hard/1728/"},{"content":"LeetCode problem 1730\nclass Solution: def getFood(self, grid: List[List[str]]) -\u003e int: m, n = len(grid), len(grid[0]) i, j = next((i, j) for i in range(m) for j in range(n) if grid[i][j] == '*') q = deque([(i, j)]) dirs = (-1, 0, 1, 0, -1) res = 0 while q: res += 1 for _ in range(len(q)): i, j = q.popleft() for a, b in pairwise(dirs): x, y = i + a, j + b if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n: if grid[x][y] == '#': return res if grid[x][y] == 'O': grid[x][y] = 'X' q.append((x, y)) return -1 ","description":"1730. Shortest Path to Get Food","title":"1730. Shortest Path to Get Food","uri":"/en/tracks/algorithms-101/leetcode/medium/1730/"},{"content":"LeetCode problem\nProblem Statement In this problem, we are given a biker who is going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal to 0.\nWe are also given an integer array gain of length n where gain[i] represents the net gain in altitude between points i and i + 1 for all 0 \u003c= i \u003c n. The net gain could be negative, indicating a decrease in altitude, or positive, indicating an increase in altitude.\nOur task is to find and return the highest altitude that the biker can reach at any point during the road trip.\nHere’s an example to illustrate the problem:\nLet’s say we have the gain array [-5, 1, 5, 0, -7].\nAt point 0, the altitude is 0 (as mentioned in the problem statement). At point 1, the altitude is 0 - 5 = -5 (net gain is -5). At point 2, the altitude is -5 + 1 = -4 (net gain is 1). At point 3, the altitude is -4 + 5 = 1 (net gain is 5). At point 4, the altitude is 1 + 0 = 1 (net gain is 0). At point 5, the altitude is 1 - 7 = -6 (net gain is -7). The highest altitude is 1 (at points 3 and 4). Therefore, the answer is 1.\nNaive Solution A naive solution would be to iterate through the gain array and keep a running sum of the altitudes. Then, you can simply return the maximum altitude from the running sum.\nHowever, this approach is inefficient as it requires O(n) time complexity and O(n) space complexity to store the running sum.\nHints \u0026 Tips Instead of storing the running sum in an array, we can use a single variable to keep track of the highest altitude. This way, we reduce the space complexity to O(1).\nApproach We will iterate through the gain array and update the current altitude by adding the net gain at each point. We will also keep track of the highest altitude encountered so far.\nPrefix Sum approach\nSteps Initialize two variables: current_altitude and max_altitude, both set to 0. Loop through the gain array. For each gain[i], update the current_altitude by adding gain[i]. Update max_altitude to be the maximum between max_altitude and current_altitude. Return max_altitude after the loop. Solution Here’s the Python code for this approach:\ndef largestAltitude(gain): current_altitude = 0 max_altitude = 0 for i in gain: current_altitude += i max_altitude = max(max_altitude, current_altitude) return max_altitude ","description":"1732. Find the Highest Altitude","title":"1732. Find the Highest Altitude","uri":"/en/tracks/algorithms-101/leetcode/easy/1732/"},{"content":"LeetCode problem 1733\nclass Solution: def minimumTeachings( self, n: int, languages: List[List[int]], friendships: List[List[int]] ) -\u003e int: def check(u, v): for x in languages[u - 1]: for y in languages[v - 1]: if x == y: return True return False s = set() for u, v in friendships: if not check(u, v): s.add(u) s.add(v) cnt = Counter() for u in s: for l in languages[u - 1]: cnt[l] += 1 return len(s) - max(cnt.values(), default=0) ","description":"1733. Minimum Number of People to Teach","title":"1733. Minimum Number of People to Teach","uri":"/en/tracks/algorithms-101/leetcode/medium/1733/"},{"content":"LeetCode problem 1734\nclass Solution: def decode(self, encoded: List[int]) -\u003e List[int]: n = len(encoded) + 1 a = b = 0 for i in range(0, n - 1, 2): a ^= encoded[i] for i in range(1, n + 1): b ^= i perm = [0] * n perm[-1] = a ^ b for i in range(n - 2, -1, -1): perm[i] = encoded[i] ^ perm[i + 1] return perm ","description":"1734. Decode XORed Permutation","title":"1734. Decode XORed Permutation","uri":"/en/tracks/algorithms-101/leetcode/medium/1734/"},{"content":"LeetCode problem 1735\nN = 10020 MOD = 10**9 + 7 f = [1] * N g = [1] * N p = defaultdict(list) for i in range(1, N): f[i] = f[i - 1] * i % MOD g[i] = pow(f[i], MOD - 2, MOD) x = i j = 2 while j \u003c= x // j: if x % j == 0: cnt = 0 while x % j == 0: cnt += 1 x //= j p[i].append(cnt) j += 1 if x \u003e 1: p[i].append(1) def comb(n, k): return f[n] * g[k] * g[n - k] % MOD class Solution: def waysToFillArray(self, queries: List[List[int]]) -\u003e List[int]: res = [] for n, k in queries: t = 1 for x in p[k]: t = t * comb(x + n - 1, n - 1) % MOD res.append(t) return res ","description":"1735. Count Ways to Make Array With Product","title":"1735. Count Ways to Make Array With Product","uri":"/en/tracks/algorithms-101/leetcode/hard/1735/"},{"content":"LeetCode problem 1736\nclass Solution: def maximumTime(self, time: str) -\u003e str: t = list(time) if t[0] == '?': t[0] = '1' if '4' \u003c= t[1] \u003c= '9' else '2' if t[1] == '?': t[1] = '3' if t[0] == '2' else '9' if t[3] == '?': t[3] = '5' if t[4] == '?': t[4] = '9' return ''.join(t) ","description":"1736. Latest Time by Replacing Hidden Digits","title":"1736. Latest Time by Replacing Hidden Digits","uri":"/en/tracks/algorithms-101/leetcode/easy/1736/"},{"content":"LeetCode problem 1737\nclass Solution: def minCharacters(self, a: str, b: str) -\u003e int: def f(cnt1, cnt2): for i in range(1, 26): t = sum(cnt1[i:]) + sum(cnt2[:i]) nonlocal res res = min(res, t) m, n = len(a), len(b) cnt1 = [0] * 26 cnt2 = [0] * 26 for c in a: cnt1[ord(c) - ord('a')] += 1 for c in b: cnt2[ord(c) - ord('a')] += 1 res = m + n for c1, c2 in zip(cnt1, cnt2): res = min(res, m + n - c1 - c2) f(cnt1, cnt2) f(cnt2, cnt1) return res ","description":"1737. Change Minimum Characters to Satisfy One of Three Conditions","title":"1737. Change Minimum Characters to Satisfy One of Three Conditions","uri":"/en/tracks/algorithms-101/leetcode/medium/1737/"},{"content":"LeetCode problem 1738\nclass Solution: def kthLargestValue(self, matrix: List[List[int]], k: int) -\u003e int: m, n = len(matrix), len(matrix[0]) s = [[0] * (n + 1) for _ in range(m + 1)] res = [] for i in range(m): for j in range(n): s[i + 1][j + 1] = s[i + 1][j] ^ s[i][j + 1] ^ s[i][j] ^ matrix[i][j] res.append(s[i + 1][j + 1]) return nlargest(k, res)[-1] ","description":"1738. Find Kth Largest XOR Coordinate Value","title":"1738. Find Kth Largest XOR Coordinate Value","uri":"/en/tracks/algorithms-101/leetcode/medium/1738/"},{"content":"LeetCode problem 1739\nclass Solution: def minimumBoxes(self, n: int) -\u003e int: s, k = 0, 1 while s + k * (k + 1) // 2 \u003c= n: s += k * (k + 1) // 2 k += 1 k -= 1 res = k * (k + 1) // 2 k = 1 while s \u003c n: res += 1 s += k k += 1 return res ","description":"1739. Building Boxes","title":"1739. Building Boxes","uri":"/en/tracks/algorithms-101/leetcode/hard/1739/"},{"content":"LeetCode problem 1740\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def findDistance(self, root: Optional[TreeNode], p: int, q: int) -\u003e int: def lca(root, p, q): if root is None or root.val in [p, q]: return root left = lca(root.left, p, q) right = lca(root.right, p, q) if left is None: return right if right is None: return left return root def dfs(root, v): if root is None: return -1 if root.val == v: return 0 left, right = dfs(root.left, v), dfs(root.right, v) if left == right == -1: return -1 return 1 + max(left, right) g = lca(root, p, q) return dfs(g, p) + dfs(g, q) ","description":"1740. Find Distance in a Binary Tree","title":"1740. Find Distance in a Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1740/"},{"content":"LeetCode problem 1742\nclass Solution: def countBalls(self, lowLimit: int, highLimit: int) -\u003e int: cnt = [0] * 50 for x in range(lowLimit, highLimit + 1): y = 0 while x: y += x % 10 x //= 10 cnt[y] += 1 return max(cnt) ","description":"1742. Maximum Number of Balls in a Box","title":"1742. Maximum Number of Balls in a Box","uri":"/en/tracks/algorithms-101/leetcode/easy/1742/"},{"content":"LeetCode problem 1743\nclass Solution: def restoreArray(self, adjacentPairs: List[List[int]]) -\u003e List[int]: def dfs(i, fa): res.append(i) for j in g[i]: if j != fa: dfs(j, i) g = defaultdict(list) for a, b in adjacentPairs: g[a].append(b) g[b].append(a) i = next(i for i, v in g.items() if len(v) == 1) res = [] dfs(i, 1e6) return res ","description":"1743. Restore the Array From Adjacent Pairs","title":"1743. Restore the Array From Adjacent Pairs","uri":"/en/tracks/algorithms-101/leetcode/medium/1743/"},{"content":"LeetCode problem 1744\nclass Solution: def canEat(self, candiesCount: List[int], queries: List[List[int]]) -\u003e List[bool]: s = list(accumulate(candiesCount, initial=0)) res = [] for t, day, mx in queries: least, most = day, (day + 1) * mx res.append(least \u003c s[t + 1] and most \u003e s[t]) return res ","description":"1744. Can You Eat Your Favorite Candy on Your Favorite Day","title":"1744. Can You Eat Your Favorite Candy on Your Favorite Day","uri":"/en/tracks/algorithms-101/leetcode/medium/1744/"},{"content":"LeetCode problem 1745\nclass Solution: def checkPartitioning(self, s: str) -\u003e bool: n = len(s) g = [[True] * n for _ in range(n)] for i in range(n - 1, -1, -1): for j in range(i + 1, n): g[i][j] = s[i] == s[j] and (i + 1 == j or g[i + 1][j - 1]) for i in range(n - 2): for j in range(i + 1, n - 1): if g[0][i] and g[i + 1][j] and g[j + 1][-1]: return True return False ","description":"1745. Palindrome Partitioning IV","title":"1745. Palindrome Partitioning IV","uri":"/en/tracks/algorithms-101/leetcode/hard/1745/"},{"content":"LeetCode problem 1746\nclass Solution: def maxSumAfterOperation(self, nums: List[int]) -\u003e int: f = g = 0 res = -inf for x in nums: ff = max(f, 0) + x gg = max(max(f, 0) + x * x, g + x) f, g = ff, gg res = max(res, f, g) return res ","description":"1746. Maximum Subarray Sum After One Operation","title":"1746. Maximum Subarray Sum After One Operation","uri":"/en/tracks/algorithms-101/leetcode/medium/1746/"},{"content":"LeetCode problem 1748\nclass Solution: def sumOfUnique(self, nums: List[int]) -\u003e int: cnt = Counter(nums) return sum(x for x, v in cnt.items() if v == 1) ","description":"1748. Sum of Unique Elements","title":"1748. Sum of Unique Elements","uri":"/en/tracks/algorithms-101/leetcode/easy/1748/"},{"content":"LeetCode problem 1749\nclass Solution: def maxAbsoluteSum(self, nums: List[int]) -\u003e int: f = g = 0 res = 0 for x in nums: f = max(f, 0) + x g = min(g, 0) + x res = max(res, f, abs(g)) return res ","description":"1749. Maximum Absolute Sum of Any Subarray","title":"1749. Maximum Absolute Sum of Any Subarray","uri":"/en/tracks/algorithms-101/leetcode/medium/1749/"},{"content":"LeetCode problem 1750\nclass Solution: def minimumLength(self, s: str) -\u003e int: p1 = 0 p2 = len(s) - 1 while p1 \u003c p2 and s[p1] == s[p2]: c = s[p1] while p1 \u003c= p2 and s[p1] == c: p1 += 1 while p1 \u003c= p2 and s[p2] == c: p2 -= 1 return p2 - p1 + 1 ","description":"1750. Minimum Length of String After Deleting Similar Ends","title":"1750. Minimum Length of String After Deleting Similar Ends","uri":"/en/tracks/algorithms-101/leetcode/medium/1750/"},{"content":"LeetCode problem 1751\nclass Solution: def maxValue(self, events: List[List[int]], k: int) -\u003e int: events.sort(key=lambda x: x[1]) n = len(events) f = [[0] * (k + 1) for _ in range(n + 1)] for i, (st, _, val) in enumerate(events, 1): p = bisect_left(events, st, hi=i - 1, key=lambda x: x[1]) for j in range(1, k + 1): f[i][j] = max(f[i - 1][j], f[p][j - 1] + val) return f[n][k] ","description":"1751. Maximum Number of Events That Can Be Attended II","title":"1751. Maximum Number of Events That Can Be Attended II","uri":"/en/tracks/algorithms-101/leetcode/hard/1751/"},{"content":"LeetCode problem 1752\nclass Solution: def check(self, nums: List[int]) -\u003e bool: return sum(nums[i - 1] \u003e v for i, v in enumerate(nums)) \u003c= 1 ","description":"1752. Check if Array Is Sorted and Rotated","title":"1752. Check if Array Is Sorted and Rotated","uri":"/en/tracks/algorithms-101/leetcode/easy/1752/"},{"content":"LeetCode problem 1753\nclass Solution: def maximumScore(self, a: int, b: int, c: int) -\u003e int: a, b, c = sorted([a, b, c]) if a + b \u003c c: return a + b return (a + b + c) \u003e\u003e 1 ","description":"1753. Maximum Score From Removing Stones","title":"1753. Maximum Score From Removing Stones","uri":"/en/tracks/algorithms-101/leetcode/medium/1753/"},{"content":"LeetCode problem 1754\nclass Solution: def largestMerge(self, word1: str, word2: str) -\u003e str: i = j = 0 res = [] while i \u003c len(word1) and j \u003c len(word2): if word1[i:] \u003e word2[j:]: res.append(word1[i]) i += 1 else: res.append(word2[j]) j += 1 res.append(word1[i:]) res.append(word2[j:]) return \"\".join(res) ","description":"1754. Largest Merge Of Two Strings","title":"1754. Largest Merge Of Two Strings","uri":"/en/tracks/algorithms-101/leetcode/medium/1754/"},{"content":"LeetCode problem 1755\nclass Solution: def minAbsDifference(self, nums: List[int], goal: int) -\u003e int: def dfs(arr, res, i, s): if i == len(arr): res.add(s) return dfs(arr, res, i + 1, s) dfs(arr, res, i + 1, s + arr[i]) n = len(nums) left, right = set(), set() dfs(nums[: n \u003e\u003e 1], left, 0, 0) dfs(nums[n \u003e\u003e 1 :], right, 0, 0) right = sorted(right) res = inf for l in left: x = goal - l i = bisect_left(right, x) if i \u003c len(right): res = min(res, abs(x - right[i])) if i: res = min(res, abs(x - right[i - 1])) return res ","description":"1755. Closest Subsequence Sum","title":"1755. Closest Subsequence Sum","uri":"/en/tracks/algorithms-101/leetcode/hard/1755/"},{"content":"LeetCode problem 1756\nclass BinaryIndexedTree: def __init__(self, n: int): self.n = n self.c = [0] * (n + 1) def update(self, x: int, v: int): while x \u003c= self.n: self.c[x] += v x += x \u0026 -x def query(self, x: int) -\u003e int: s = 0 while x: s += self.c[x] x -= x \u0026 -x return s class MRUQueue: def __init__(self, n: int): self.q = list(range(n + 1)) self.tree = BinaryIndexedTree(n + 2010) def fetch(self, k: int) -\u003e int: l, r = 1, len(self.q) while l \u003c r: mid = (l + r) \u003e\u003e 1 if mid - self.tree.query(mid) \u003e= k: r = mid else: l = mid + 1 x = self.q[l] self.q.append(x) self.tree.update(l, 1) return x # Your MRUQueue object will be instantiated and called as such: # obj = MRUQueue(n) # param_1 = obj.fetch(k) ","description":"1756. Design Most Recently Used Queue","title":"1756. Design Most Recently Used Queue","uri":"/en/tracks/algorithms-101/leetcode/medium/1756/"},{"content":"LeetCode problem 1757\nimport pandas as pd def find_products(products: pd.DataFrame) -\u003e pd.DataFrame: rs = products[(products[\"low_fats\"] == \"Y\") \u0026 (products[\"recyclable\"] == \"Y\")] rs = rs[[\"product_id\"]] return rs ","description":"1757. Recyclable and Low Fat Products","title":"1757. Recyclable and Low Fat Products","uri":"/en/tracks/algorithms-101/leetcode/easy/1757/"},{"content":"LeetCode problem 1758\nclass Solution: def minOperations(self, s: str) -\u003e int: cnt = sum(c != '01'[i \u0026 1] for i, c in enumerate(s)) return min(cnt, len(s) - cnt) ","description":"1758. Minimum Changes To Make Alternating Binary String","title":"1758. Minimum Changes To Make Alternating Binary String","uri":"/en/tracks/algorithms-101/leetcode/easy/1758/"},{"content":"LeetCode problem 1759\nclass Solution: def countHomogenous(self, s: str) -\u003e int: mod = 10**9 + 7 res = cnt = 1 for a, b in pairwise(s): cnt = cnt + 1 if a == b else 1 res = (res + cnt) % mod return res ","description":"1759. Count Number of Homogenous Substrings","title":"1759. Count Number of Homogenous Substrings","uri":"/en/tracks/algorithms-101/leetcode/medium/1759/"},{"content":"LeetCode problem 1760\nclass Solution: def minimumSize(self, nums: List[int], maxOperations: int) -\u003e int: def check(mx: int) -\u003e bool: return sum((x - 1) // mx for x in nums) \u003c= maxOperations return bisect_left(range(1, max(nums)), True, key=check) + 1 ","description":"1760. Minimum Limit of Balls in a Bag","title":"1760. Minimum Limit of Balls in a Bag","uri":"/en/tracks/algorithms-101/leetcode/medium/1760/"},{"content":"LeetCode problem 1761\nclass Solution: def minTrioDegree(self, n: int, edges: List[List[int]]) -\u003e int: g = [[False] * n for _ in range(n)] deg = [0] * n for u, v in edges: u, v = u - 1, v - 1 g[u][v] = g[v][u] = True deg[u] += 1 deg[v] += 1 res = inf for i in range(n): for j in range(i + 1, n): if g[i][j]: for k in range(j + 1, n): if g[i][k] and g[j][k]: res = min(res, deg[i] + deg[j] + deg[k] - 6) return -1 if res == inf else res ","description":"1761. Minimum Degree of a Connected Trio in a Graph","title":"1761. Minimum Degree of a Connected Trio in a Graph","uri":"/en/tracks/algorithms-101/leetcode/hard/1761/"},{"content":"LeetCode problem 1762\nclass Solution: def findBuildings(self, heights: List[int]) -\u003e List[int]: res = [] mx = 0 for i in range(len(heights) - 1, -1, -1): if heights[i] \u003e mx: res.append(i) mx = heights[i] return res[::-1] ","description":"1762. Buildings With an Ocean View","title":"1762. Buildings With an Ocean View","uri":"/en/tracks/algorithms-101/leetcode/medium/1762/"},{"content":"LeetCode problem 1763\nclass Solution: def longestNiceSubstring(self, s: str) -\u003e str: n = len(s) res = '' for i in range(n): lower = upper = 0 for j in range(i, n): if s[j].islower(): lower |= 1 \u003c\u003c (ord(s[j]) - ord('a')) else: upper |= 1 \u003c\u003c (ord(s[j]) - ord('A')) if lower == upper and len(res) \u003c j - i + 1: res = s[i : j + 1] return res ","description":"1763. Longest Nice Substring","title":"1763. Longest Nice Substring","uri":"/en/tracks/algorithms-101/leetcode/easy/1763/"},{"content":"LeetCode problem 1764\nclass Solution: def canChoose(self, groups: List[List[int]], nums: List[int]) -\u003e bool: n, m = len(groups), len(nums) i = j = 0 while i \u003c n and j \u003c m: g = groups[i] if g == nums[j : j + len(g)]: j += len(g) i += 1 else: j += 1 return i == n ","description":"1764. Form Array by Concatenating Subarrays of Another Array","title":"1764. Form Array by Concatenating Subarrays of Another Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1764/"},{"content":"LeetCode problem 1765\nclass Solution: def highestPeak(self, isWater: List[List[int]]) -\u003e List[List[int]]: m, n = len(isWater), len(isWater[0]) res = [[-1] * n for _ in range(m)] q = deque() for i, row in enumerate(isWater): for j, v in enumerate(row): if v: q.append((i, j)) res[i][j] = 0 while q: for _ in range(len(q)): i, j = q.popleft() for a, b in pairwise((-1, 0, 1, 0, -1)): x, y = i + a, j + b if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and res[x][y] == -1: res[x][y] = res[i][j] + 1 q.append((x, y)) return res ","description":"1765. Map of Highest Peak","title":"1765. Map of Highest Peak","uri":"/en/tracks/algorithms-101/leetcode/medium/1765/"},{"content":"LeetCode problem 1766\nclass Solution: def getCoprimes(self, nums: List[int], edges: List[List[int]]) -\u003e List[int]: def dfs(i, fa, depth): t = k = -1 for v in f[nums[i]]: stk = stks[v] if stk and stk[-1][1] \u003e k: t, k = stk[-1] res[i] = t for j in g[i]: if j != fa: stks[nums[i]].append((i, depth)) dfs(j, i, depth + 1) stks[nums[i]].pop() g = defaultdict(list) for u, v in edges: g[u].append(v) g[v].append(u) f = defaultdict(list) for i in range(1, 51): for j in range(1, 51): if gcd(i, j) == 1: f[i].append(j) stks = defaultdict(list) res = [-1] * len(nums) dfs(0, -1, 0) return res ","description":"1766. Tree of Coprimes","title":"1766. Tree of Coprimes","uri":"/en/tracks/algorithms-101/leetcode/hard/1766/"},{"content":"LeetCode problem\nProblem Statement The task is to merge two strings alternately, i.e., take one character from the first string, then one from the second, then again from the first, and so on. If one string finishes before the other, the remaining characters from the longer string are appended at the end.\nNaive Solution A naive approach could involve maintaining two pointers, one for each string, and incrementally appending characters from each string to the result. Once we reach the end of one string, we append the rest of the other string to the result. However, this approach involves checking for the end of strings in each step which can be optimized.\nEfficient Solution A more pythonic and efficient approach would be to use the built-in zip function. The zip function pairs the elements of two lists (or strings, in this case) until the shorter one ends. This allows us to alternately merge the two strings efficiently. After that, we append the remaining part of the longer string, if any.\nSteps Here are the high-level steps of the algorithm:\nUse the zip function to merge the two strings until one of them ends. Append the remaining part of the longer string to the result. Solution Here is a Python solution that implements the above algorithm:\ndef mergeAlternately(word1, word2): i=0 j=0 res = '' while i\u003clen(word1) and j\u003clen(word2): res += word1[i] res += word2[j] i+=1 j+=1 for _i, word in [[i,word1], [j,word2]]: while _i\u003clen(word): res += word[_i] _i+=1 return res class Solution: def mergeAlternately(self, word1: str, word2: str) -\u003e str: res = [c1 + c2 for c1, c2 in zip(word1, word2)] return \"\".join(res) + word1[len(res):] + word2[len(res):] In the mergeAlternately method, we use list comprehension and the zip function to merge the strings until one of them ends. We then append the remaining part of the longer string to the result. The join method is used to convert the list of characters into a string.\n","description":"Merging strings alternately","title":"1768. Merge Strings Alternately","uri":"/en/tracks/algorithms-101/leetcode/easy/1768/"},{"content":"LeetCode problem 1769\nclass Solution: def minOperations(self, boxes: str) -\u003e List[int]: n = len(boxes) res = [0] * n cnt = 0 for i in range(1, n): if boxes[i - 1] == '1': cnt += 1 res[i] = res[i - 1] + cnt cnt = s = 0 for i in range(n - 2, -1, -1): if boxes[i + 1] == '1': cnt += 1 s += cnt res[i] += s return res ","description":"1769. Minimum Number of Operations to Move All Balls to Each Box","title":"1769. Minimum Number of Operations to Move All Balls to Each Box","uri":"/en/tracks/algorithms-101/leetcode/medium/1769/"},{"content":"LeetCode problem 1770\nclass Solution: def maximumScore(self, nums: List[int], multipliers: List[int]) -\u003e int: n, m = len(nums), len(multipliers) f = [[-inf] * (m + 1) for _ in range(m + 1)] f[0][0] = 0 res = -inf for i in range(m + 1): for j in range(m - i + 1): k = i + j - 1 if i \u003e 0: f[i][j] = max(f[i][j], f[i - 1][j] + multipliers[k] * nums[i - 1]) if j \u003e 0: f[i][j] = max(f[i][j], f[i][j - 1] + multipliers[k] * nums[n - j]) if i + j == m: res = max(res, f[i][j]) return res ","description":"1770. Maximum Score from Performing Multiplication Operations","title":"1770. Maximum Score from Performing Multiplication Operations","uri":"/en/tracks/algorithms-101/leetcode/hard/1770/"},{"content":"LeetCode problem 1771\nclass Solution: def longestPalindrome(self, word1: str, word2: str) -\u003e int: s = word1 + word2 n = len(s) f = [[0] * n for _ in range(n)] for i in range(n): f[i][i] = 1 res = 0 for i in range(n - 2, -1, -1): for j in range(i + 1, n): if s[i] == s[j]: f[i][j] = f[i + 1][j - 1] + 2 if i \u003c len(word1) \u003c= j: res = max(res, f[i][j]) else: f[i][j] = max(f[i + 1][j], f[i][j - 1]) return res ","description":"1771. Maximize Palindrome Length From Subsequences","title":"1771. Maximize Palindrome Length From Subsequences","uri":"/en/tracks/algorithms-101/leetcode/hard/1771/"},{"content":"LeetCode problem 1772\nclass Solution: def sortFeatures(self, features: List[str], responses: List[str]) -\u003e List[str]: cnt = Counter() for s in responses: for w in set(s.split()): cnt[w] += 1 return sorted(features, key=lambda w: -cnt[w]) ","description":"1772. Sort Features by Popularity","title":"1772. Sort Features by Popularity","uri":"/en/tracks/algorithms-101/leetcode/medium/1772/"},{"content":"1772A - A+B? (implementation, 800)\nSolution def solve(): a, b = input().split('+') res = int(a) + int(b) print(res) for _ in range(int(input())): solve() ","description":"Codeforces 1772A - A+B? (implementation, 800)","title":"1772A - A+B? - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1772a/"},{"content":"LeetCode problem 1773\nclass Solution: def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -\u003e int: i = 0 if ruleKey[0] == 't' else (1 if ruleKey[0] == 'c' else 2) return sum(v[i] == ruleValue for v in items) ","description":"1773. Count Items Matching a Rule","title":"1773. Count Items Matching a Rule","uri":"/en/tracks/algorithms-101/leetcode/easy/1773/"},{"content":"1773F - Football (constructive algorithms, 800)\nLogic Solution def solve(): n = int(input()) # number of matches a = int(input()) # goals scored b = int(input()) # goals conceded if n == 1: if a == b: print(1) else: print(0) print(f\"{a}:{b}\") return matches = [[0, 0] for _ in range(n + 1)] draw = 0 match = 1 while match \u003c= n and a \u003e 0: a -= 1 matches[match] = [1, 0] match += 1 if a \u003e 0: matches[1] = [matches[1][0] + a, 0] if b \u003e 0: if match == n + 1: matches[1][0] += 1 matches[n][0] -= 1 matches[n][1] = b else: while match \u003c= n and b \u003e 0: b -= 1 matches[match][1] += 1 match += 1 if b \u003e 0: matches[n][1] += b for i in range(1, n + 1): if matches[i][0] == matches[i][1]: draw += 1 print(draw) for i in range(1, n + 1): print(f\"{matches[i][0]}:{matches[i][1]}\") solve() Codeforces Editorial PDF\n","description":"Codeforces 1773F - Football (constructive algorithms, 800)","title":"1773F - Football - 800","uri":"/en/tracks/algorithms-101/codeforces/02-combinatorics-and-geometry/1773f/"},{"content":"LeetCode problem 1774\nclass Solution: def closestCost( self, baseCosts: List[int], toppingCosts: List[int], target: int ) -\u003e int: def dfs(i, t): if i \u003e= len(toppingCosts): arr.append(t) return dfs(i + 1, t) dfs(i + 1, t + toppingCosts[i]) arr = [] dfs(0, 0) arr.sort() d = res = inf # 选择一种冰激淋基料 for x in baseCosts: # 枚举子集和 for y in arr: # 二分查找 i = bisect_left(arr, target - x - y) for j in (i, i - 1): if 0 \u003c= j \u003c len(arr): t = abs(x + y + arr[j] - target) if d \u003e t or (d == t and res \u003e x + y + arr[j]): d = t res = x + y + arr[j] return res ","description":"1774. Closest Dessert Cost","title":"1774. Closest Dessert Cost","uri":"/en/tracks/algorithms-101/leetcode/medium/1774/"},{"content":"LeetCode problem 1775\nclass Solution: def minOperations(self, nums1: List[int], nums2: List[int]) -\u003e int: s1, s2 = sum(nums1), sum(nums2) if s1 == s2: return 0 if s1 \u003e s2: return self.minOperations(nums2, nums1) cnt = Counter([6 - v for v in nums1] + [v - 1 for v in nums2]) d = s2 - s1 res = 0 for i in range(5, 0, -1): while cnt[i] and d \u003e 0: d -= i cnt[i] -= 1 res += 1 return res if d \u003c= 0 else -1 ","description":"1775. Equal Sum Arrays With Minimum Number of Operations","title":"1775. Equal Sum Arrays With Minimum Number of Operations","uri":"/en/tracks/algorithms-101/leetcode/medium/1775/"},{"content":"LeetCode problem 1776\nclass Solution: def getCollisionTimes(self, cars: List[List[int]]) -\u003e List[float]: stk = [] n = len(cars) res = [-1] * n for i in range(n - 1, -1, -1): while stk: j = stk[-1] if cars[i][1] \u003e cars[j][1]: t = (cars[j][0] - cars[i][0]) / (cars[i][1] - cars[j][1]) if res[j] == -1 or t \u003c= res[j]: res[i] = t break stk.pop() stk.append(i) return res ","description":"1776. Car Fleet II","title":"1776. Car Fleet II","uri":"/en/tracks/algorithms-101/leetcode/hard/1776/"},{"content":"1777A - Everybody Likes Good Arrays! (greedy, math, 800)\nStatement You have an array of numbers, and you want to make it “good.” A good array is one where every pair of adjacent numbers has different parity (one is even, and the other is odd). You can do this by performing operations on pairs of adjacent numbers with the same parity (both even or both odd), and replacing them with their product. Logic Loop through the array Check the parity of the current element and the previous element If the parity is the same, perform the operation and increment the operation counter Repeat steps 2 and 3 until the end of the array Return the operation counter Solution def solve(n, ar): res = 0 i = 0 while i \u003c len(ar) - 1: if ar[i] % 2 == ar[i + 1] % 2: ar[i] = ar[i] * ar[i + 1] del ar[i + 1] res += 1 else: i += 1 return res Optimized Solution Check how many times the parity changes in the given array. The number of operations needed is the difference between the original length of the array and the count of parity changes. def solve(): n = int(input()) ar = list(map(int, input().split())) # Count the number of times the parity changes in the array last_parity = None parity_count = 0 for x in ar: if x % 2 != last_parity: parity_count += 1 last_parity = x % 2 # The result is the difference between the original length and the count of parity changes res = n - parity_count print(res) for _ in range(int(input())): solve() ","description":"Codeforces 1777A - Everybody Likes Good Arrays! (greedy, math, 800)","title":"1777A - Everybody Likes Good Arrays! - 800","uri":"/en/tracks/algorithms-101/codeforces/02-combinatorics-and-geometry/1777a/"},{"content":"1777B - Emordnilap (combinatorics, greedy, math, 900)\nStatement In this problem, we need to find the “beauty” of all permutations of a certain length n. The beauty of a permutation is defined as the number of inversions in an array that is created by combining the permutation and its reverse.\nLogic The key insight is that every permutation of length n has the same beauty.\nThis is because the structure of the array created by concatenating a permutation with its reverse ensures that there will always be the same number of inversions, regardless of the order of the numbers in the original permutation.\nTherefore, we can calculate the beauty of a single permutation and then multiply by the number of possible permutations (which is n!) to get the total sum of the beauties.\nSolution def solve(): n = int(input()) MOD = 10**9 + 7 # Calculate the total number of inversion pairs in the array inversion_pairs = n * (n - 1) # Find the factorial of n fact = 1 for i in range(1, n+1): fact = fact * i % MOD # requirement: size n modulo 1000000007(109+7) # The sum of the beauty of all permutations can be found by multiplying # the number of inversion pairs by the factorial of n res = (fact * inversion_pairs) % MOD print(res) for _ in range(int(input())): solve() ","description":"Codeforces 1777B - Emordnilap (combinatorics, greedy, math, 900)","title":"1777B - Emordnilap - 900","uri":"/en/tracks/algorithms-101/codeforces/02-combinatorics-and-geometry/1777b/"},{"content":"LeetCode problem 1778\n# \"\"\" # This is GridMaster's API interface. # You should not implement it, or speculate about its implementation # \"\"\" # class GridMaster(object): # def canMove(self, direction: str) -\u003e bool: # # # def move(self, direction: str) -\u003e bool: # # # def isTarget(self) -\u003e None: # # class Solution(object): def findShortestPath(self, master: \"GridMaster\") -\u003e int: def dfs(i: int, j: int): if master.isTarget(): nonlocal target target = (i, j) return for k, c in enumerate(s): x, y = i + dirs[k], j + dirs[k + 1] if master.canMove(c) and (x, y) not in vis: vis.add((x, y)) master.move(c) dfs(x, y) master.move(s[(k + 2) % 4]) s = \"URDL\" dirs = (-1, 0, 1, 0, -1) target = None vis = set() dfs(0, 0) if target is None: return -1 vis.discard((0, 0)) q = deque([(0, 0)]) res = -1 while q: res += 1 for _ in range(len(q)): i, j = q.popleft() if (i, j) == target: return res for a, b in pairwise(dirs): x, y = i + a, j + b if (x, y) in vis: vis.remove((x, y)) q.append((x, y)) return -1 ","description":"1778. Shortest Path in a Hidden Grid","title":"1778. Shortest Path in a Hidden Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/1778/"},{"content":"1778A - Flip Flop Sum (greedy, implementation, 800)\nThere are three possible conditions:\n-1 -1 - all negative. In this case sum -2 becomes sum 2. Plus 4. -1 1 - different, no sum change. 1 1 - all positive. 2 becomes -2. Diff is -4. Solution def solve(): n = int(input()) ar = list(map(int, input().split())) s = 0 # sum # three conditions: all 1, all -1, at least one -1 has_diff = False has2_positive = 0 has2_negative = 0 s += ar[0] for idx in range(1, n): if ar[idx] == ar[idx-1]: if ar[idx] == -1: has2_negative = 4 # -2 -\u003e +2, diff 4 else: has2_positive = -4 # +2 =\u003e +1, diff 1 else: has_diff = True s += ar[idx] if has2_negative: s += has2_negative elif has_diff: ... elif has2_positive: s += has2_positive print(s) for _ in range(int(input())): solve() Optimized solution:\ndef solve(): n = int(input()) ar = list(map(int, input().split())) res = sum(ar) for i in range(n-1): if ar[i] == ar[i+1] == -1: print(res + 4) return if res == n: res -= 4 print(res) for _ in range(int(input())): solve() ","description":"Codeforces 1778A - Flip Flop Sum (greedy, implementation, 800)","title":"1778A - Flip Flop Sum - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1778a/"},{"content":"LeetCode problem 1779\nclass Solution: def nearestValidPoint(self, x: int, y: int, points: List[List[int]]) -\u003e int: res, mi = -1, inf for i, (a, b) in enumerate(points): if a == x or b == y: d = abs(a - x) + abs(b - y) if mi \u003e d: res, mi = i, d return res ","description":"1779. Find Nearest Point That Has the Same X or Y Coordinate","title":"1779. Find Nearest Point That Has the Same X or Y Coordinate","uri":"/en/tracks/algorithms-101/leetcode/easy/1779/"},{"content":"LeetCode problem 1780\nclass Solution: def checkPowersOfThree(self, n: int) -\u003e bool: while n: if n % 3 \u003e 1: return False n //= 3 return True ","description":"1780. Check if Number is a Sum of Powers of Three","title":"1780. Check if Number is a Sum of Powers of Three","uri":"/en/tracks/algorithms-101/leetcode/medium/1780/"},{"content":"LeetCode problem 1781\nclass Solution: def beautySum(self, s: str) -\u003e int: res, n = 0, len(s) for i in range(n): cnt = Counter() freq = Counter() mi = mx = 1 for j in range(i, n): freq[cnt[s[j]]] -= 1 cnt[s[j]] += 1 freq[cnt[s[j]]] += 1 if cnt[s[j]] == 1: mi = 1 if freq[mi] == 0: mi += 1 if cnt[s[j]] \u003e mx: mx = cnt[s[j]] res += mx - mi return res ","description":"1781. Sum of Beauty of All Substrings","title":"1781. Sum of Beauty of All Substrings","uri":"/en/tracks/algorithms-101/leetcode/medium/1781/"},{"content":"LeetCode problem 1782\nclass Solution: def countPairs( self, n: int, edges: List[List[int]], queries: List[int] ) -\u003e List[int]: cnt = [0] * n g = defaultdict(int) for a, b in edges: a, b = a - 1, b - 1 a, b = min(a, b), max(a, b) cnt[a] += 1 cnt[b] += 1 g[(a, b)] += 1 s = sorted(cnt) res = [0] * len(queries) for i, t in enumerate(queries): for j, x in enumerate(s): k = bisect_right(s, t - x, lo=j + 1) res[i] += n - k for (a, b), v in g.items(): if cnt[a] + cnt[b] \u003e t and cnt[a] + cnt[b] - v \u003c= t: res[i] -= 1 return res ","description":"1782. Count Pairs Of Nodes","title":"1782. Count Pairs Of Nodes","uri":"/en/tracks/algorithms-101/leetcode/hard/1782/"},{"content":"LeetCode problem 1784\nclass Solution: def checkOnesSegment(self, s: str) -\u003e bool: return '01' not in s ","description":"1784. Check if Binary String Has at Most One Segment of Ones","title":"1784. Check if Binary String Has at Most One Segment of Ones","uri":"/en/tracks/algorithms-101/leetcode/easy/1784/"},{"content":"LeetCode problem 1785\nclass Solution: def minElements(self, nums: List[int], limit: int, goal: int) -\u003e int: d = abs(sum(nums) - goal) return (d + limit - 1) // limit ","description":"1785. Minimum Elements to Add to Form a Given Sum","title":"1785. Minimum Elements to Add to Form a Given Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1785/"},{"content":"LeetCode problem 1786\nclass Solution: def countRestrictedPaths(self, n: int, edges: List[List[int]]) -\u003e int: g = defaultdict(list) for u, v, w in edges: g[u].append((v, w)) g[v].append((u, w)) dist = [inf] * (n + 1) dist[n] = 0 q = [(0, n)] mod = 10**9 + 7 while q: _, u = heappop(q) for v, w in g[u]: if dist[v] \u003e dist[u] + w: dist[v] = dist[u] + w heappush(q, (dist[v], v)) arr = list(range(1, n + 1)) arr.sort(key=lambda i: dist[i]) f = [0] * (n + 1) f[n] = 1 for i in arr: for j, _ in g[i]: if dist[i] \u003e dist[j]: f[i] = (f[i] + f[j]) % mod return f[1] ","description":"1786. Number of Restricted Paths From First to Last Node","title":"1786. Number of Restricted Paths From First to Last Node","uri":"/en/tracks/algorithms-101/leetcode/medium/1786/"},{"content":"LeetCode problem 1787\nclass Solution: def minChanges(self, nums: List[int], k: int) -\u003e int: n = 1 \u003c\u003c 10 cnt = [Counter() for _ in range(k)] size = [0] * k for i, v in enumerate(nums): cnt[i % k][v] += 1 size[i % k] += 1 f = [inf] * n f[0] = 0 for i in range(k): g = [min(f) + size[i]] * n for j in range(n): for v, c in cnt[i].items(): g[j] = min(g[j], f[j ^ v] + size[i] - c) f = g return f[0] ","description":"1787. Make the XOR of All Segments Equal to Zero","title":"1787. Make the XOR of All Segments Equal to Zero","uri":"/en/tracks/algorithms-101/leetcode/hard/1787/"},{"content":"1787A - Exponential Equation (constructive algorithms, math, 800)\nLogic The equation is a mix of multiplication and exponential operations. Given the nature of exponential operations, $𝑥^𝑦$ and $𝑦^𝑥$ can grow very large very quickly as x and y increase.\nWe can try to simplify the equation.\nIf we can somehow set one of the variables x or y to 1, the equation simplifies.\nThis is because any number (except zero) raised to the power of 1 is the number itself, and any number raised to the power of 0 is 1.\nSo, if we set x = 1, the equation simplifies to 1^y * y + y^1 * 1 = n, which further simplifies to y + y = n, or 2y = n. This is a simple linear equation, and we can see that for any even n greater than 2, it has a solution in integers. The solution is x = 1 and y = n/2.\nFor n = 2, we can set both x and y to 1, and the equation holds. It can be a base case. For odd n greater than 2, and for n = 1, there’s no solution in integers. Solution def solve(): n = int(input()) if n == 2: print(1, 1) elif n % 2 == 0: print(1, n//2) else: print(-1) for _ in range(int(input())): solve() ","description":"Codeforces 1787A - Exponential Equation (constructive algorithms, math, 800)","title":"1787A - Exponential Equation - 800","uri":"/en/tracks/algorithms-101/codeforces/02-combinatorics-and-geometry/1787a/"},{"content":"LeetCode problem 1788\nclass Solution: def maximumBeauty(self, flowers: List[int]) -\u003e int: s = [0] * (len(flowers) + 1) d = {} res = -inf for i, v in enumerate(flowers): if v in d: res = max(res, s[i] - s[d[v] + 1] + v * 2) else: d[v] = i s[i + 1] = s[i] + max(v, 0) return res ","description":"1788. Maximize the Beauty of the Garden","title":"1788. Maximize the Beauty of the Garden","uri":"/en/tracks/algorithms-101/leetcode/hard/1788/"},{"content":"1788A - One and Two (brute force, implementation, math, 800)\nThis problem is about finding a specific index 𝑘 in a given sequence of integers $𝑎_1,𝑎_2,…,𝑎_𝑛$, where each element is either 1 or 2. The goal is to determine whether there exists an integer 𝑘 such that the product of all elements from $𝑎_1$ to $𝑎_𝑘$ is equal to the product of all elements from $𝑎_𝑘+1$ to $𝑎_𝑛$.\nBecause of product of 1 doesn’t change the result we can focus on 2. Product in left side and in the right side can be equal only if count of 2 is even or equal 0.\nWe can count number of 2. The result will be the index of the middle 2 in array. Solution def solve(ar): twos = ar.count(2) if twos % 2 != 0: return -1 passed_twos = 0 need_twos = twos // 2 for i, x in enumerate(ar): if x == 2: passed_twos += 1 if passed_twos == need_twos: return i+1 t = int(input()) for _ in range(t): n = int(input()) ar = list(map(int, input().split())) print(solve(ar)) ","description":"Codeforces 1788A - One and Two (brute force, implementation, math, 800)","title":"1788A - One and Two - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1788a/"},{"content":"LeetCode problem 1790\nclass Solution: def areAlmostEqual(self, s1: str, s2: str) -\u003e bool: cnt = 0 c1 = c2 = None for a, b in zip(s1, s2): if a != b: cnt += 1 if cnt \u003e 2 or (cnt == 2 and (a != c2 or b != c1)): return False c1, c2 = a, b return cnt != 1 ","description":"1790. Check if One String Swap Can Make Strings Equal","title":"1790. Check if One String Swap Can Make Strings Equal","uri":"/en/tracks/algorithms-101/leetcode/easy/1790/"},{"content":"LeetCode problem 1791\nclass Solution: def findCenter(self, edges: List[List[int]]) -\u003e int: return edges[0][0] if edges[0][0] in edges[1] else edges[0][1] ","description":"1791. Find Center of Star Graph","title":"1791. Find Center of Star Graph","uri":"/en/tracks/algorithms-101/leetcode/easy/1791/"},{"content":"LeetCode problem 1792\nclass Solution: def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -\u003e float: h = [(a / b - (a + 1) / (b + 1), a, b) for a, b in classes] heapify(h) for _ in range(extraStudents): _, a, b = heappop(h) a, b = a + 1, b + 1 heappush(h, (a / b - (a + 1) / (b + 1), a, b)) return sum(v[1] / v[2] for v in h) / len(classes) ","description":"1792. Maximum Average Pass Ratio","title":"1792. Maximum Average Pass Ratio","uri":"/en/tracks/algorithms-101/leetcode/medium/1792/"},{"content":"LeetCode problem 1793\nclass Solution: def maximumScore(self, nums: List[int], k: int) -\u003e int: n = len(nums) left = [-1] * n right = [n] * n stk = [] for i, v in enumerate(nums): while stk and nums[stk[-1]] \u003e= v: stk.pop() if stk: left[i] = stk[-1] stk.append(i) stk = [] for i in range(n - 1, -1, -1): v = nums[i] while stk and nums[stk[-1]] \u003e v: stk.pop() if stk: right[i] = stk[-1] stk.append(i) res = 0 for i, v in enumerate(nums): if left[i] + 1 \u003c= k \u003c= right[i] - 1: res = max(res, v * (right[i] - left[i] - 1)) return res ","description":"1793. Maximum Score of a Good Subarray","title":"1793. Maximum Score of a Good Subarray","uri":"/en/tracks/algorithms-101/leetcode/hard/1793/"},{"content":"LeetCode problem 1794\nclass Solution: def countQuadruples(self, firstString: str, secondString: str) -\u003e int: last = {c: i for i, c in enumerate(secondString)} res, mi = 0, inf for i, c in enumerate(firstString): if c in last: t = i - last[c] if mi \u003e t: mi = t res = 1 elif mi == t: res += 1 return res ","description":"1794. Count Pairs of Equal Substrings With Minimum Difference","title":"1794. Count Pairs of Equal Substrings With Minimum Difference","uri":"/en/tracks/algorithms-101/leetcode/medium/1794/"},{"content":"LeetCode problem 1796\nclass Solution: def secondHighest(self, s: str) -\u003e int: mask = reduce(or_, (1 \u003c\u003c int(c) for c in s if c.isdigit()), 0) cnt = 0 for i in range(9, -1, -1): if (mask \u003e\u003e i) \u0026 1: cnt += 1 if cnt == 2: return i return -1 ","description":"1796. Second Largest Digit in a String","title":"1796. Second Largest Digit in a String","uri":"/en/tracks/algorithms-101/leetcode/easy/1796/"},{"content":"Asterisk-Minor Template (implementation, strings, 1000)\nIf the first characters of both strings are the same, create a template that consists of the common character followed by an asterisk (e.g., a*). If the last characters of both strings are the same, create a template that consists of an asterisk followed by the common character (e.g., *b). If neither the first nor the last characters are the same, iterate through string a and check for any 2-character substring that also appears in string b. If a match is found, create a template that consists of an asterisk, the 2-character substring, and another asterisk (e.g., ab). If no template is found, print NO. Solution def solve(): a = input() b = input() if a[0] == b[0]: print('YES') print(f'{a[0]}*') elif a[-1] == b[-1]: print('YES') print(f'*{a[-1]}') else: for i in range(len(a)-1): if a[i:i+2] in b: print('YES') print(f'*{a[i:i+2]}*') return print('NO') for _ in range(int(input())): solve() ","description":"Codeforces Asterisk-Minor Template (implementation, strings, 1000)","title":"1796B - One and Two - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1796b/"},{"content":"LeetCode problem 1797\nclass AuthenticationManager: def __init__(self, timeToLive: int): self.t = timeToLive self.d = defaultdict(int) def generate(self, tokenId: str, currentTime: int) -\u003e None: self.d[tokenId] = currentTime + self.t def renew(self, tokenId: str, currentTime: int) -\u003e None: if self.d[tokenId] \u003c= currentTime: return self.d[tokenId] = currentTime + self.t def countUnexpiredTokens(self, currentTime: int) -\u003e int: return sum(exp \u003e currentTime for exp in self.d.values()) # Your AuthenticationManager object will be instantiated and called as such: # obj = AuthenticationManager(timeToLive) # obj.generate(tokenId,currentTime) # obj.renew(tokenId,currentTime) # param_3 = obj.countUnexpiredTokens(currentTime) ","description":"1797. Design Authentication Manager","title":"1797. Design Authentication Manager","uri":"/en/tracks/algorithms-101/leetcode/medium/1797/"},{"content":"LeetCode problem 1798\nclass Solution: def getMaximumConsecutive(self, coins: List[int]) -\u003e int: res = 1 for v in sorted(coins): if v \u003e res: break res += v return res ","description":"1798. Maximum Number of Consecutive Values You Can Make","title":"1798. Maximum Number of Consecutive Values You Can Make","uri":"/en/tracks/algorithms-101/leetcode/medium/1798/"},{"content":"1798A - Showstopper (greedy, implementation, sortings, 800)\nUpdate a and b in a such way so in a always put the largest and in b smallest.\nSolution def solve(a,b,n): a_max = a[0] for i in range(n): max_v = max(a[i], b[i]) min_v = min(a[i], b[i]) a[i] = max_v b[i] = min_v a_max = max(a_max, max_v) if a[-1] \u003e= a_max and b[-1] \u003e= max(b): return 'Yes' return 'No' t = int(input()) for _ in range(t): n = int(input()) a = list(map(int, input().split())) b = list(map(int, input().split())) print(solve(a, b, n)) ","description":"Codeforces 1798A - Showstopper (greedy, implementation, sortings, 800)","title":"1798A - Showstopper - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1798a/"},{"content":"LeetCode problem 1799\nclass Solution: def maxScore(self, nums: List[int]) -\u003e int: m = len(nums) f = [0] * (1 \u003c\u003c m) g = [[0] * m for _ in range(m)] for i in range(m): for j in range(i + 1, m): g[i][j] = gcd(nums[i], nums[j]) for k in range(1 \u003c\u003c m): if (cnt := k.bit_count()) % 2 == 0: for i in range(m): if k \u003e\u003e i \u0026 1: for j in range(i + 1, m): if k \u003e\u003e j \u0026 1: f[k] = max( f[k], f[k ^ (1 \u003c\u003c i) ^ (1 \u003c\u003c j)] + cnt // 2 * g[i][j], ) return f[-1] ","description":"1799. Maximize Score After N Operations","title":"1799. Maximize Score After N Operations","uri":"/en/tracks/algorithms-101/leetcode/hard/1799/"},{"content":"1799A - Recent Actions (data structures, greedy, implementation, math, 800)\nExplanation On Codeforces, the “Recent Actions” field shows the last n posts with recent actions. Initially, there are posts numbered 1 to n in the field, in order from top to bottom. There are also infinitely many posts not in the field, numbered with integers n+1, n+2, and so on.\nWhen a recent action happens in post p:\nIf it is in the “Recent Actions” field, it moves from its position to the top position. Otherwise, it is added to the top position, and the post in the bottom position is removed from the “Recent Actions” field. You know that the next m recent actions (Note, that recent actions only happen with posts with numbers ≥+1.) will happen in the posts p1, p2, ..., pm (n+1 ≤ pi ≤ n+m) at moments of time 1, 2, ..., m. Note that recent actions only happen with posts with numbers ≥ n+1.\nFor each post i (1 ≤ i ≤ n), find the first time it will be removed from the “Recent Actions” field or say that it won’t be removed.\nExample Analyze example #7:\nInput:\n3 5 4 5 5 5 4 Consider there is only one test case with n = 3 and m = 5.\nThe recent actions are p1 = 4, p2 = 5, p3 = 5, p4 = 5, p5 = 4.\nInitial state of the “Recent Actions” field: [1, 2, 3].\nAt moment 1 (post 4):\nPost 4 is not in the “Recent Actions” field. So, it is added to the top position, and the post at the bottom (post 3) is removed. “Recent Actions” field becomes [4, 1, 2]. At moment 2 (post 5):\nPost 5 is not in the “Recent Actions” field. So, it is added to the top position, and the post at the bottom (post 2) is removed. “Recent Actions” field becomes [5, 4, 1]. At moment 3 (post 5):\nPost 5 is already in the “Recent Actions” field. So, it moves to the top position. “Recent Actions” field remains [5, 4, 1]. At moment 4 (post 5):\nPost 5 is already in the “Recent Actions” field. So, it moves to the top position. “Recent Actions” field remains [5, 4, 1]. At moment 5 (post 4):\nPost 4 is already in the “Recent Actions” field. So, it moves to the top position. “Recent Actions” field becomes [4, 5, 1]. In this example, post 1 is never removed, post 2 is removed at moment 2, and post 3 is removed at moment 1. m As initial “Recent Actions” was [1,2,3], the output for this input would be: -1 2 1\nLogic Initialize an array tracked_data of size n with all elements set to -1. This array will be a result array. Set -1 for all elements setting initially that no one element will be removed. Initialize an array recent_posts to keep track on current “recent actions”. Iterate through posts that got from output. If post is already in recent_posts, it means no need to remove anything, move this “found” post to index 0 and shift other elements in recent_posts. If post is not in recent_posts, then add it to index 0 of recent_posts and remove “last” post from recent_posts. if “last” post in recent_posts is \u003c=n that means that it is to be removed. In tracked_data set current moment when it is removed. Print tracked_data Solution This solution works but slow:\ndef solve(): n, m = list(map(int, inp().split())) posts = list(map(int, inp().split())) tracked_data = [-1] * n recent_posts = list(range(1, n+1)) for moment, post in enumerate(posts, 1): if post in recent_posts: idx = recent_posts.index(post) recent_posts = [post] + recent_posts[0:idx] + recent_posts[idx+1:] else: last = recent_posts[-1] # set at what moment removed if last \u003c= n: tracked_data[last-1] = moment if post \u003c= n: tracked_data[post-1] = -1 recent_posts = [post] + recent_posts[0:-1] print(*tracked_data) for _ in range(int(inp())): solve() As a result no need to keep recent_posts always uptodate. We need to follow for the posts that are in range\u003c=n.\nAll what we need is:\nto keep last post index to know what post is going to be removed. No need to rearrange array for this. keep data on “already used” posts. Optimized solution def solve(): n, m = list(map(int, input().split())) posts = list(map(int, input().split())) tracked_data = [-1] * n last = n-1 used_posts = set() for moment, post in enumerate(posts, 1): if post not in used_posts: if last \u003e= 0: tracked_data[last] = moment last -= 1 used_posts.add(post) print(*tracked_data) for _ in range(int(input())): solve() ","description":"Codeforces 1799A - Recent Actions (data structures, greedy, implementation, math, 800)","title":"1799A - Recent Actions - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1799a/"},{"content":"LeetCode problem 1800\nclass Solution: def maxAscendingSum(self, nums: List[int]) -\u003e int: res = t = 0 for i, v in enumerate(nums): if i == 0 or v \u003e nums[i - 1]: t += v res = max(res, t) else: t = v return res ","description":"1800. Maximum Ascending Subarray Sum","title":"1800. Maximum Ascending Subarray Sum","uri":"/en/tracks/algorithms-101/leetcode/easy/1800/"},{"content":"LeetCode problem 1801\nclass Solution: def getNumberOfBacklogOrders(self, orders: List[List[int]]) -\u003e int: buy, sell = [], [] for p, a, t in orders: if t == 0: while a and sell and sell[0][0] \u003c= p: x, y = heappop(sell) if a \u003e= y: a -= y else: heappush(sell, (x, y - a)) a = 0 if a: heappush(buy, (-p, a)) else: while a and buy and -buy[0][0] \u003e= p: x, y = heappop(buy) if a \u003e= y: a -= y else: heappush(buy, (x, y - a)) a = 0 if a: heappush(sell, (p, a)) mod = 10**9 + 7 return sum(v[1] for v in buy + sell) % mod ","description":"1801. Number of Orders in the Backlog","title":"1801. Number of Orders in the Backlog","uri":"/en/tracks/algorithms-101/leetcode/medium/1801/"},{"content":"LeetCode problem 1802\nclass Solution: def maxValue(self, n: int, index: int, maxSum: int) -\u003e int: def sum(x, cnt): return ( (x + x - cnt + 1) * cnt // 2 if x \u003e= cnt else (x + 1) * x // 2 + cnt - x ) left, right = 1, maxSum while left \u003c right: mid = (left + right + 1) \u003e\u003e 1 if sum(mid - 1, index) + sum(mid, n - index) \u003c= maxSum: left = mid else: right = mid - 1 return left ","description":"1802. Maximum Value at a Given Index in a Bounded Array","title":"1802. Maximum Value at a Given Index in a Bounded Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1802/"},{"content":"LeetCode problem 1803\nclass Trie: def __init__(self): self.children = [None] * 2 self.cnt = 0 def insert(self, x): node = self for i in range(15, -1, -1): v = x \u003e\u003e i \u0026 1 if node.children[v] is None: node.children[v] = Trie() node = node.children[v] node.cnt += 1 def search(self, x, limit): node = self res = 0 for i in range(15, -1, -1): if node is None: return res v = x \u003e\u003e i \u0026 1 if limit \u003e\u003e i \u0026 1: if node.children[v]: res += node.children[v].cnt node = node.children[v ^ 1] else: node = node.children[v] return res class Solution: def countPairs(self, nums: List[int], low: int, high: int) -\u003e int: res = 0 tree = Trie() for x in nums: res += tree.search(x, high + 1) - tree.search(x, low) tree.insert(x) return res ","description":"1803. Count Pairs With XOR in a Range","title":"1803. Count Pairs With XOR in a Range","uri":"/en/tracks/algorithms-101/leetcode/hard/1803/"},{"content":"LeetCode problem 1804\nclass Trie: def __init__(self): self.children = [None] * 26 self.v = self.pv = 0 def insert(self, word: str) -\u003e None: node = self for c in word: idx = ord(c) - ord('a') if node.children[idx] is None: node.children[idx] = Trie() node = node.children[idx] node.pv += 1 node.v += 1 def countWordsEqualTo(self, word: str) -\u003e int: node = self.search(word) return 0 if node is None else node.v def countWordsStartingWith(self, prefix: str) -\u003e int: node = self.search(prefix) return 0 if node is None else node.pv def erase(self, word: str) -\u003e None: node = self for c in word: idx = ord(c) - ord('a') node = node.children[idx] node.pv -= 1 node.v -= 1 def search(self, word): node = self for c in word: idx = ord(c) - ord('a') if node.children[idx] is None: return None node = node.children[idx] return node # Your Trie object will be instantiated and called as such: # obj = Trie() # obj.insert(word) # param_2 = obj.countWordsEqualTo(word) # param_3 = obj.countWordsStartingWith(prefix) # obj.erase(word) ","description":"1804. Implement Trie II (Prefix Tree)","title":"1804. Implement Trie II (Prefix Tree)","uri":"/en/tracks/algorithms-101/leetcode/medium/1804/"},{"content":"LeetCode problem 1805\nclass Solution: def numDifferentIntegers(self, word: str) -\u003e int: s = set() i, n = 0, len(word) while i \u003c n: if word[i].isdigit(): while i \u003c n and word[i] == '0': i += 1 j = i while j \u003c n and word[j].isdigit(): j += 1 s.add(word[i:j]) i = j i += 1 return len(s) ","description":"1805. Number of Different Integers in a String","title":"1805. Number of Different Integers in a String","uri":"/en/tracks/algorithms-101/leetcode/easy/1805/"},{"content":"LeetCode problem 1806\nclass Solution: def reinitializePermutation(self, n: int) -\u003e int: res, i = 0, 1 while 1: res += 1 if i \u003c n \u003e\u003e 1: i \u003c\u003c= 1 else: i = (i - (n \u003e\u003e 1)) \u003c\u003c 1 | 1 if i == 1: return res ","description":"1806. Minimum Number of Operations to Reinitialize a Permutation","title":"1806. Minimum Number of Operations to Reinitialize a Permutation","uri":"/en/tracks/algorithms-101/leetcode/medium/1806/"},{"content":"LeetCode problem 1807\nclass Solution: def evaluate(self, s: str, knowledge: List[List[str]]) -\u003e str: d = {a: b for a, b in knowledge} i, n = 0, len(s) res = [] while i \u003c n: if s[i] == '(': j = s.find(')', i + 1) res.append(d.get(s[i + 1 : j], '?')) i = j else: res.append(s[i]) i += 1 return ''.join(res) ","description":"1807. Evaluate the Bracket Pairs of a String","title":"1807. Evaluate the Bracket Pairs of a String","uri":"/en/tracks/algorithms-101/leetcode/medium/1807/"},{"content":"1807A - Plus or Minus (implementation, 800)\nSolution t = int(input()) for _ in range(t): a, b, c = map(int, input().split()) print('+' if a + b == c else '-') ","description":"Codeforces 1807A - Plus or Minus (implementation, 800)","title":"1807A - Plus or Minus - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1807a/"},{"content":"1807B - Grab the Candies (greedy, 800)\nExplanation Read the number of bags and the list of candies in the bags. Calculate the total number of candies with even and odd amounts separately. Compare the total amount of candies with even and odd amounts. If Mihai has strictly more candies than Bianca, output “YES”. Otherwise, output “NO”. Solution t = int(input()) for _ in range(t): n = int(input()) ar = list(map(int, input().split())) m = 0 b = 0 if n == 1: print('YES' if ar[0] % 2 == 0 else 'NO') else: for x in ar: if x % 2 == 0: m += x else: b += x print('YES' if m \u003e b else 'NO') ","description":"Codeforces 1807B - Grab the Candies (greedy, 800)","title":"1807B - Grab the Candies - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1807b/"},{"content":"1807C - Find and Replace (greedy, implementation, strings, 800)\nSolution t = int(input()) for _ in range(t): n = int(input()) s = input() reserved_binaries = {} binary_values = [] for c in s: val = reserved_binaries.get(c, None) if not binary_values: binary_values.append(1) if val == binary_values[-1]: print('NO') break if not val: val = 1 if binary_values[-1] == 0 else 0 reserved_binaries[c] = val binary_values.append(val) else: print('YES') ","description":"Codeforces 1807C - Find and Replace (greedy, implementation, strings, 800)","title":"1807C - Find and Replace - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1807c/"},{"content":"LeetCode problem 1808\nclass Solution: def maxNiceDivisors(self, primeFactors: int) -\u003e int: mod = 10**9 + 7 if primeFactors \u003c 4: return primeFactors if primeFactors % 3 == 0: return pow(3, primeFactors // 3, mod) % mod if primeFactors % 3 == 1: return 4 * pow(3, primeFactors // 3 - 1, mod) % mod return 2 * pow(3, primeFactors // 3, mod) % mod ","description":"1808. Maximize Number of Nice Divisors","title":"1808. Maximize Number of Nice Divisors","uri":"/en/tracks/algorithms-101/leetcode/hard/1808/"},{"content":"1809A - Garland (implementation, 800)\nExplanation If all the light bulbs have the same color, it is impossible to turn them all on, as you can’t perform the operation on the same color consecutively. In this case, print -1. If there are 3 light bulbs of the same color and one light bulb of a different color, it takes 6 operations to turn them all on: Turn on the different colored light bulb Turn on one of the other colored light bulbs Turn off the different colored light bulb Turn on the second light bulb of the same color Turn on the different colored light bulb Turn on the third light bulb of the same color In all other cases, it takes 4 operations to turn all the light bulbs on, as you can switch the light bulbs on in a sequence without violating the color restriction. Solution def solve(s): if all(c == s[0] for c in s): return -1 elif s.count(s[0]) == 3 or s.count(s[1]) == 3: return 6 else: return 4 t = int(input()) for _ in range(t): s = input() print(solve(s)) ","description":"Codeforces 1809A - Garland (implementation, 800)","title":"1809A - Garland - 800","uri":"/en/tracks/algorithms-101/codeforces/01-implementation-and-greedy/1809a/"},{"content":"LeetCode problem 1810\n# \"\"\" # This is GridMaster's API interface. # You should not implement it, or speculate about its implementation # \"\"\" # class GridMaster(object): # def canMove(self, direction: str) -\u003e bool: # # # def move(self, direction: str) -\u003e int: # # # def isTarget(self) -\u003e None: # # class Solution(object): def findShortestPath(self, master: 'GridMaster') -\u003e int: def dfs(i, j): nonlocal target if master.isTarget(): target = (i, j) for dir, (a, b, ndir) in dirs.items(): x, y = i + a, j + b if 0 \u003c= x \u003c N and 0 \u003c= y \u003c N and master.canMove(dir) and g[x][y] == -1: g[x][y] = master.move(dir) dfs(x, y) master.move(ndir) target = (-1, -1) N = 200 INF = 0x3F3F3F3F g = [[-1] * N for _ in range(N)] dirs = { 'U': (-1, 0, 'D'), 'D': (1, 0, 'U'), 'L': (0, -1, 'R'), 'R': (0, 1, 'L'), } dfs(100, 100) if target == (-1, -1): return -1 q = [(0, 100, 100)] dist = [[INF] * N for _ in range(N)] dist[100][100] = 0 while q: w, i, j = heappop(q) if (i, j) == target: return w for a, b, _ in dirs.values(): x, y = i + a, j + b if ( 0 \u003c= x \u003c N and 0 \u003c= y \u003c N and g[x][y] != -1 and dist[x][y] \u003e w + g[x][y] ): dist[x][y] = w + g[x][y] heappush(q, (dist[x][y], x, y)) return 0 ","description":"1810. Minimum Path Cost in a Hidden Grid","title":"1810. Minimum Path Cost in a Hidden Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/1810/"},{"content":"LeetCode problem 1812\nclass Solution: def squareIsWhite(self, coordinates: str) -\u003e bool: return (ord(coordinates[0]) + ord(coordinates[1])) % 2 == 1 ","description":"1812. Determine Color of a Chessboard Square","title":"1812. Determine Color of a Chessboard Square","uri":"/en/tracks/algorithms-101/leetcode/easy/1812/"},{"content":"LeetCode problem 1813\nclass Solution: def areSentencesSimilar(self, sentence1: str, sentence2: str) -\u003e bool: words1, words2 = sentence1.split(), sentence2.split() m, n = len(words1), len(words2) if m \u003c n: words1, words2 = words2, words1 m, n = n, m i = j = 0 while i \u003c n and words1[i] == words2[i]: i += 1 while j \u003c n and words1[m - 1 - j] == words2[n - 1 - j]: j += 1 return i + j \u003e= n ","description":"1813. Sentence Similarity III","title":"1813. Sentence Similarity III","uri":"/en/tracks/algorithms-101/leetcode/medium/1813/"},{"content":"LeetCode problem 1814\nclass Solution: def countNicePairs(self, nums: List[int]) -\u003e int: def rev(x): y = 0 while x: y = y * 10 + x % 10 x //= 10 return y res = 0 mod = 10**9 + 7 cnt = Counter() for x in nums: y = x - rev(x) res += cnt[y] cnt[y] += 1 return res % mod ","description":"1814. Count Nice Pairs in an Array","title":"1814. Count Nice Pairs in an Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1814/"},{"content":"LeetCode problem 1815\nclass Solution: def maxHappyGroups(self, batchSize: int, groups: List[int]) -\u003e int: @cache def dfs(state, x): if state == mask: return 0 vis = [False] * batchSize res = 0 for i, v in enumerate(g): if state \u003e\u003e i \u0026 1 == 0 and not vis[v]: vis[v] = True y = (x + v) % batchSize res = max(res, dfs(state | 1 \u003c\u003c i, y)) return res + (x == 0) g = [v % batchSize for v in groups if v % batchSize] mask = (1 \u003c\u003c len(g)) - 1 return len(groups) - len(g) + dfs(0, 0) ","description":"1815. Maximum Number of Groups Getting Fresh Donuts","title":"1815. Maximum Number of Groups Getting Fresh Donuts","uri":"/en/tracks/algorithms-101/leetcode/hard/1815/"},{"content":"LeetCode problem 1816\nclass Solution: def truncateSentence(self, s: str, k: int) -\u003e str: for i, c in enumerate(s): k -= c == ' ' if k == 0: return s[:i] return s ","description":"1816. Truncate Sentence","title":"1816. Truncate Sentence","uri":"/en/tracks/algorithms-101/leetcode/easy/1816/"},{"content":"LeetCode problem 1817\nclass Solution: def findingUsersActiveMinutes(self, logs: List[List[int]], k: int) -\u003e List[int]: d = defaultdict(set) for i, t in logs: d[i].add(t) res = [0] * k for ts in d.values(): res[len(ts) - 1] += 1 return res ","description":"1817. Finding the Users Active Minutes","title":"1817. Finding the Users Active Minutes","uri":"/en/tracks/algorithms-101/leetcode/medium/1817/"},{"content":"LeetCode problem 1818\nclass Solution: def minAbsoluteSumDiff(self, nums1: List[int], nums2: List[int]) -\u003e int: mod = 10**9 + 7 nums = sorted(nums1) s = sum(abs(a - b) for a, b in zip(nums1, nums2)) % mod mx = 0 for a, b in zip(nums1, nums2): d1, d2 = abs(a - b), inf i = bisect_left(nums, b) if i \u003c len(nums): d2 = min(d2, abs(nums[i] - b)) if i: d2 = min(d2, abs(nums[i - 1] - b)) mx = max(mx, d1 - d2) return (s - mx + mod) % mod ","description":"1818. Minimum Absolute Sum Difference","title":"1818. Minimum Absolute Sum Difference","uri":"/en/tracks/algorithms-101/leetcode/medium/1818/"},{"content":"LeetCode problem 1819\nclass Solution: def countDifferentSubsequenceGCDs(self, nums: List[int]) -\u003e int: mx = max(nums) vis = set(nums) res = 0 for x in range(1, mx + 1): g = 0 for y in range(x, mx + 1, x): if y in vis: g = gcd(g, y) if g == x: res += 1 break return res ","description":"1819. Number of Different Subsequences GCDs","title":"1819. Number of Different Subsequences GCDs","uri":"/en/tracks/algorithms-101/leetcode/hard/1819/"},{"content":"LeetCode problem 1820\nclass Solution: def maximumInvitations(self, grid: List[List[int]]) -\u003e int: def find(i): for j, v in enumerate(grid[i]): if v and j not in vis: vis.add(j) if match[j] == -1 or find(match[j]): match[j] = i return True return False m, n = len(grid), len(grid[0]) match = [-1] * n res = 0 for i in range(m): vis = set() res += find(i) return res ","description":"1820. Maximum Number of Accepted Invitations","title":"1820. Maximum Number of Accepted Invitations","uri":"/en/tracks/algorithms-101/leetcode/medium/1820/"},{"content":"LeetCode problem 1822\nclass Solution: def arraySign(self, nums: List[int]) -\u003e int: res = 1 for v in nums: if v == 0: return 0 if v \u003c 0: res *= -1 return res ","description":"1822. Sign of the Product of an Array","title":"1822. Sign of the Product of an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1822/"},{"content":"LeetCode problem 1823\nclass Solution: def findTheWinner(self, n: int, k: int) -\u003e int: if n == 1: return 1 res = (k + self.findTheWinner(n - 1, k)) % n return n if res == 0 else res ","description":"1823. Find the Winner of the Circular Game","title":"1823. Find the Winner of the Circular Game","uri":"/en/tracks/algorithms-101/leetcode/medium/1823/"},{"content":"LeetCode problem 1824\nclass Solution: def minSideJumps(self, obstacles: List[int]) -\u003e int: f = [1, 0, 1] for v in obstacles[1:]: for j in range(3): if v == j + 1: f[j] = inf break x = min(f) + 1 for j in range(3): if v != j + 1: f[j] = min(f[j], x) return min(f) ","description":"1824. Minimum Sideway Jumps","title":"1824. Minimum Sideway Jumps","uri":"/en/tracks/algorithms-101/leetcode/medium/1824/"},{"content":"LeetCode problem 1825\nfrom sortedcontainers import SortedList class MKAverage: def __init__(self, m: int, k: int): self.m = m self.k = k self.sl = SortedList() self.q = deque() self.s = 0 def addElement(self, num: int) -\u003e None: self.q.append(num) if len(self.q) == self.m: self.sl = SortedList(self.q) self.s = sum(self.sl[self.k : -self.k]) elif len(self.q) \u003e self.m: i = self.sl.bisect_left(num) if i \u003c self.k: self.s += self.sl[self.k - 1] elif self.k \u003c= i \u003c= self.m - self.k: self.s += num else: self.s += self.sl[self.m - self.k] self.sl.add(num) x = self.q.popleft() i = self.sl.bisect_left(x) if i \u003c self.k: self.s -= self.sl[self.k] elif self.k \u003c= i \u003c= self.m - self.k: self.s -= x else: self.s -= self.sl[self.m - self.k] self.sl.remove(x) def calculateMKAverage(self) -\u003e int: return -1 if len(self.sl) \u003c self.m else self.s // (self.m - self.k * 2) # Your MKAverage object will be instantiated and called as such: # obj = MKAverage(m, k) # obj.addElement(num) # param_2 = obj.calculateMKAverage() ","description":"1825. Finding MK Average","title":"1825. Finding MK Average","uri":"/en/tracks/algorithms-101/leetcode/hard/1825/"},{"content":"LeetCode problem 1826\nclass Solution: def badSensor(self, sensor1: List[int], sensor2: List[int]) -\u003e int: i, n = 0, len(sensor1) while i \u003c n - 1: if sensor1[i] != sensor2[i]: break i += 1 while i \u003c n - 1: if sensor1[i + 1] != sensor2[i]: return 1 if sensor1[i] != sensor2[i + 1]: return 2 i += 1 return -1 ","description":"1826. Faulty Sensor","title":"1826. Faulty Sensor","uri":"/en/tracks/algorithms-101/leetcode/easy/1826/"},{"content":"LeetCode problem 1828\nclass Solution: def countPoints( self, points: List[List[int]], queries: List[List[int]] ) -\u003e List[int]: res = [] for x, y, r in queries: cnt = 0 for i, j in points: dx, dy = i - x, j - y cnt += dx * dx + dy * dy \u003c= r * r res.append(cnt) return res ","description":"1828. Queries on Number of Points Inside a Circle","title":"1828. Queries on Number of Points Inside a Circle","uri":"/en/tracks/algorithms-101/leetcode/medium/1828/"},{"content":"LeetCode problem 1829\nclass Solution: def getMaximumXor(self, nums: List[int], maximumBit: int) -\u003e List[int]: res = [] xs = reduce(xor, nums) mask = (1 \u003c\u003c maximumBit) - 1 for x in nums[::-1]: k = xs ^ mask res.append(k) xs ^= x return res ","description":"1829. Maximum XOR for Each Query","title":"1829. Maximum XOR for Each Query","uri":"/en/tracks/algorithms-101/leetcode/medium/1829/"},{"content":"LeetCode problem 1830\nn = 3010 mod = 10**9 + 7 f = [1] + [0] * n g = [1] + [0] * n for i in range(1, n): f[i] = f[i - 1] * i % mod g[i] = pow(f[i], mod - 2, mod) class Solution: def makeStringSorted(self, s: str) -\u003e int: cnt = Counter(s) res, n = 0, len(s) for i, c in enumerate(s): m = sum(v for a, v in cnt.items() if a \u003c c) t = f[n - i - 1] * m for v in cnt.values(): t = t * g[v] % mod res = (res + t) % mod cnt[c] -= 1 if cnt[c] == 0: cnt.pop(c) return res ","description":"1830. Minimum Number of Operations to Make String Sorted","title":"1830. Minimum Number of Operations to Make String Sorted","uri":"/en/tracks/algorithms-101/leetcode/hard/1830/"},{"content":"LeetCode problem 1833\nclass Solution: def maxIceCream(self, costs: List[int], coins: int) -\u003e int: costs.sort() for i, c in enumerate(costs): if coins \u003c c: return i coins -= c return len(costs) ","description":"1833. Maximum Ice Cream Bars","title":"1833. Maximum Ice Cream Bars","uri":"/en/tracks/algorithms-101/leetcode/medium/1833/"},{"content":"LeetCode problem 1834\nclass Solution: def getOrder(self, tasks: List[List[int]]) -\u003e List[int]: for i, task in enumerate(tasks): task.append(i) tasks.sort() res = [] q = [] n = len(tasks) i = t = 0 while q or i \u003c n: if not q: t = max(t, tasks[i][0]) while i \u003c n and tasks[i][0] \u003c= t: heappush(q, (tasks[i][1], tasks[i][2])) i += 1 pt, j = heappop(q) res.append(j) t += pt return res ","description":"1834. Single-Threaded CPU","title":"1834. Single-Threaded CPU","uri":"/en/tracks/algorithms-101/leetcode/medium/1834/"},{"content":"LeetCode problem 1835\nclass Solution: def getXORSum(self, arr1: List[int], arr2: List[int]) -\u003e int: a = reduce(xor, arr1) b = reduce(xor, arr2) return a \u0026 b ","description":"1835. Find XOR Sum of All Pairs Bitwise AND","title":"1835. Find XOR Sum of All Pairs Bitwise AND","uri":"/en/tracks/algorithms-101/leetcode/hard/1835/"},{"content":"LeetCode problem 1836\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def deleteDuplicatesUnsorted(self, head: ListNode) -\u003e ListNode: cnt = Counter() cur = head while cur: cnt[cur.val] += 1 cur = cur.next dummy = ListNode(0, head) pre, cur = dummy, head while cur: if cnt[cur.val] \u003e 1: pre.next = cur.next else: pre = cur cur = cur.next return dummy.next ","description":"1836. Remove Duplicates From an Unsorted Linked List","title":"1836. Remove Duplicates From an Unsorted Linked List","uri":"/en/tracks/algorithms-101/leetcode/medium/1836/"},{"content":"LeetCode problem 1838\nclass Solution: def maxFrequency(self, nums: List[int], k: int) -\u003e int: def check(cnt): for i in range(n + 1 - cnt): j = i + cnt - 1 if nums[j] * cnt - (s[j + 1] - s[i]) \u003c= k: return True return False nums.sort() s = list(accumulate(nums, initial=0)) n = len(nums) left, right = 1, n while left \u003c right: mid = (left + right + 1) \u003e\u003e 1 if check(mid): left = mid else: right = mid - 1 return left ","description":"1838. Frequency of the Most Frequent Element","title":"1838. Frequency of the Most Frequent Element","uri":"/en/tracks/algorithms-101/leetcode/medium/1838/"},{"content":"LeetCode problem 1839\nclass Solution: def longestBeautifulSubstring(self, word: str) -\u003e int: arr = [] n = len(word) i = 0 while i \u003c n: j = i while j \u003c n and word[j] == word[i]: j += 1 arr.append((word[i], j - i)) i = j res = 0 for i in range(len(arr) - 4): a, b, c, d, e = arr[i : i + 5] if a[0] + b[0] + c[0] + d[0] + e[0] == \"aeiou\": res = max(res, a[1] + b[1] + c[1] + d[1] + e[1]) return res ","description":"1839. Longest Substring Of All Vowels in Order","title":"1839. Longest Substring Of All Vowels in Order","uri":"/en/tracks/algorithms-101/leetcode/medium/1839/"},{"content":"LeetCode problem 1840\nclass Solution: def maxBuilding(self, n: int, restrictions: List[List[int]]) -\u003e int: r = restrictions r.append([1, 0]) r.sort() if r[-1][0] != n: r.append([n, n - 1]) m = len(r) for i in range(1, m): r[i][1] = min(r[i][1], r[i - 1][1] + r[i][0] - r[i - 1][0]) for i in range(m - 2, 0, -1): r[i][1] = min(r[i][1], r[i + 1][1] + r[i + 1][0] - r[i][0]) res = 0 for i in range(m - 1): t = (r[i][1] + r[i + 1][1] + r[i + 1][0] - r[i][0]) // 2 res = max(res, t) return res ","description":"1840. Maximum Building Height","title":"1840. Maximum Building Height","uri":"/en/tracks/algorithms-101/leetcode/hard/1840/"},{"content":"LeetCode problem 1842\nclass Solution: def nextPalindrome(self, num: str) -\u003e str: def next_permutation(nums: List[str]) -\u003e bool: n = len(nums) // 2 i = n - 2 while i \u003e= 0 and nums[i] \u003e= nums[i + 1]: i -= 1 if i \u003c 0: return False j = n - 1 while j \u003e= 0 and nums[j] \u003c= nums[i]: j -= 1 nums[i], nums[j] = nums[j], nums[i] nums[i + 1 : n] = nums[i + 1 : n][::-1] return True nums = list(num) if not next_permutation(nums): return \"\" n = len(nums) for i in range(n // 2): nums[n - i - 1] = nums[i] return \"\".join(nums) ","description":"1842. Next Palindrome Using Same Digits","title":"1842. Next Palindrome Using Same Digits","uri":"/en/tracks/algorithms-101/leetcode/hard/1842/"},{"content":"LeetCode problem 1845\nclass SeatManager: def __init__(self, n: int): self.q = list(range(1, n + 1)) heapify(self.q) def reserve(self) -\u003e int: return heappop(self.q) def unreserve(self, seatNumber: int) -\u003e None: heappush(self.q, seatNumber) # Your SeatManager object will be instantiated and called as such: # obj = SeatManager(n) # param_1 = obj.reserve() # obj.unreserve(seatNumber) ","description":"1845. Seat Reservation Manager","title":"1845. Seat Reservation Manager","uri":"/en/tracks/algorithms-101/leetcode/medium/1845/"},{"content":"LeetCode problem 1846\nclass Solution: def maximumElementAfterDecrementingAndRearranging(self, arr: List[int]) -\u003e int: arr.sort() arr[0] = 1 for i in range(1, len(arr)): d = max(0, arr[i] - arr[i - 1] - 1) arr[i] -= d return max(arr) ","description":"1846. Maximum Element After Decreasing and Rearranging","title":"1846. Maximum Element After Decreasing and Rearranging","uri":"/en/tracks/algorithms-101/leetcode/medium/1846/"},{"content":"LeetCode problem 1847\nfrom sortedcontainers import SortedList class Solution: def closestRoom( self, rooms: List[List[int]], queries: List[List[int]] ) -\u003e List[int]: rooms.sort(key=lambda x: x[1]) k = len(queries) idx = sorted(range(k), key=lambda i: queries[i][1]) res = [-1] * k i, n = 0, len(rooms) sl = SortedList(x[0] for x in rooms) for j in idx: prefer, minSize = queries[j] while i \u003c n and rooms[i][1] \u003c minSize: sl.remove(rooms[i][0]) i += 1 if i == n: break p = sl.bisect_left(prefer) if p \u003c len(sl): res[j] = sl[p] if p and (res[j] == -1 or res[j] - prefer \u003e= prefer - sl[p - 1]): res[j] = sl[p - 1] return res ","description":"1847. Closest Room","title":"1847. Closest Room","uri":"/en/tracks/algorithms-101/leetcode/hard/1847/"},{"content":"LeetCode problem 1849\nclass Solution: def splitString(self, s: str) -\u003e bool: def dfs(i, x, k): if i == len(s): return k \u003e 1 y = 0 for j in range(i, len(s)): y = y * 10 + int(s[j]) if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1): return True return False return dfs(0, -1, 0) ","description":"1849. Splitting a String Into Descending Consecutive Values","title":"1849. Splitting a String Into Descending Consecutive Values","uri":"/en/tracks/algorithms-101/leetcode/medium/1849/"},{"content":"LeetCode problem 1850\nclass Solution: def getMinSwaps(self, num: str, k: int) -\u003e int: def next_permutation(nums: List[str]) -\u003e bool: n = len(nums) i = n - 2 while i \u003e= 0 and nums[i] \u003e= nums[i + 1]: i -= 1 if i \u003c 0: return False j = n - 1 while j \u003e= 0 and nums[j] \u003c= nums[i]: j -= 1 nums[i], nums[j] = nums[j], nums[i] nums[i + 1 : n] = nums[i + 1 : n][::-1] return True s = list(num) for _ in range(k): next_permutation(s) d = [[] for _ in range(10)] idx = [0] * 10 n = len(s) for i, c in enumerate(num): j = ord(c) - ord(\"0\") d[j].append(i) arr = [0] * n for i, c in enumerate(s): j = ord(c) - ord(\"0\") arr[i] = d[j][idx[j]] idx[j] += 1 return sum(arr[j] \u003e arr[i] for i in range(n) for j in range(i)) ","description":"1850. Minimum Adjacent Swaps to Reach the Kth Smallest Number","title":"1850. Minimum Adjacent Swaps to Reach the Kth Smallest Number","uri":"/en/tracks/algorithms-101/leetcode/medium/1850/"},{"content":"LeetCode problem 1851\nclass Solution: def minInterval(self, intervals: List[List[int]], queries: List[int]) -\u003e List[int]: n, m = len(intervals), len(queries) intervals.sort() queries = sorted((x, i) for i, x in enumerate(queries)) res = [-1] * m pq = [] i = 0 for x, j in queries: while i \u003c n and intervals[i][0] \u003c= x: a, b = intervals[i] heappush(pq, (b - a + 1, b)) i += 1 while pq and pq[0][1] \u003c x: heappop(pq) if pq: res[j] = pq[0][0] return res ","description":"1851. Minimum Interval to Include Each Query","title":"1851. Minimum Interval to Include Each Query","uri":"/en/tracks/algorithms-101/leetcode/hard/1851/"},{"content":"LeetCode problem 1852\nclass Solution: def distinctNumbers(self, nums: List[int], k: int) -\u003e List[int]: cnt = Counter(nums[:k]) res = [len(cnt)] for i in range(k, len(nums)): cnt[nums[i]] += 1 cnt[nums[i - k]] -= 1 if cnt[nums[i - k]] == 0: cnt.pop(nums[i - k]) res.append(len(cnt)) return res ","description":"1852. Distinct Numbers in Each Subarray","title":"1852. Distinct Numbers in Each Subarray","uri":"/en/tracks/algorithms-101/leetcode/medium/1852/"},{"content":"LeetCode problem 1855\nclass Solution: def maxDistance(self, nums1: List[int], nums2: List[int]) -\u003e int: m, n = len(nums1), len(nums2) res = i = j = 0 while i \u003c m: while j \u003c n and nums1[i] \u003c= nums2[j]: j += 1 res = max(res, j - i - 1) i += 1 return res ","description":"1855. Maximum Distance Between a Pair of Values","title":"1855. Maximum Distance Between a Pair of Values","uri":"/en/tracks/algorithms-101/leetcode/medium/1855/"},{"content":"LeetCode problem 1856\nclass Solution: def maxSumMinProduct(self, nums: List[int]) -\u003e int: n = len(nums) left = [-1] * n right = [n] * n stk = [] for i, x in enumerate(nums): while stk and nums[stk[-1]] \u003e= x: stk.pop() if stk: left[i] = stk[-1] stk.append(i) stk = [] for i in range(n - 1, -1, -1): while stk and nums[stk[-1]] \u003e nums[i]: stk.pop() if stk: right[i] = stk[-1] stk.append(i) s = list(accumulate(nums, initial=0)) mod = 10**9 + 7 return max((s[right[i]] - s[left[i] + 1]) * x for i, x in enumerate(nums)) % mod ","description":"1856. Maximum Subarray Min-Product","title":"1856. Maximum Subarray Min-Product","uri":"/en/tracks/algorithms-101/leetcode/medium/1856/"},{"content":"LeetCode problem 1857\nclass Solution: def largestPathValue(self, colors: str, edges: List[List[int]]) -\u003e int: n = len(colors) indeg = [0] * n g = defaultdict(list) for a, b in edges: g[a].append(b) indeg[b] += 1 q = deque() dp = [[0] * 26 for _ in range(n)] for i, v in enumerate(indeg): if v == 0: q.append(i) c = ord(colors[i]) - ord('a') dp[i][c] += 1 cnt = 0 res = 1 while q: i = q.popleft() cnt += 1 for j in g[i]: indeg[j] -= 1 if indeg[j] == 0: q.append(j) c = ord(colors[j]) - ord('a') for k in range(26): dp[j][k] = max(dp[j][k], dp[i][k] + (c == k)) res = max(res, dp[j][k]) return -1 if cnt \u003c n else res ","description":"1857. Largest Color Value in a Directed Graph","title":"1857. Largest Color Value in a Directed Graph","uri":"/en/tracks/algorithms-101/leetcode/hard/1857/"},{"content":"LeetCode problem 1858\nclass Trie: __slots__ = [\"children\", \"is_end\"] def __init__(self): self.children: List[Trie | None] = [None] * 26 self.is_end: bool = False def insert(self, w: str) -\u003e None: node = self for c in w: idx = ord(c) - ord(\"a\") if not node.children[idx]: node.children[idx] = Trie() node = node.children[idx] node.is_end = True def search(self, w: str) -\u003e bool: node = self for c in w: idx = ord(c) - ord(\"a\") node = node.children[idx] if not node.is_end: return False return True class Solution: def longestWord(self, words: List[str]) -\u003e str: trie = Trie() for w in words: trie.insert(w) res = \"\" for w in words: if (len(w) \u003e len(res) or len(w) == len(res) and w \u003c res) and trie.search(w): res = w return res ","description":"1858. Longest Word With All Prefixes","title":"1858. Longest Word With All Prefixes","uri":"/en/tracks/algorithms-101/leetcode/medium/1858/"},{"content":"LeetCode problem 1860\nclass Solution: def memLeak(self, memory1: int, memory2: int) -\u003e List[int]: i = 1 while i \u003c= max(memory1, memory2): if memory1 \u003e= memory2: memory1 -= i else: memory2 -= i i += 1 return [i, memory1, memory2] ","description":"1860. Incremental Memory Leak","title":"1860. Incremental Memory Leak","uri":"/en/tracks/algorithms-101/leetcode/medium/1860/"},{"content":"LeetCode problem 1861\nclass Solution: def rotateTheBox(self, box: List[List[str]]) -\u003e List[List[str]]: m, n = len(box), len(box[0]) res = [[None] * m for _ in range(n)] for i in range(m): for j in range(n): res[j][m - i - 1] = box[i][j] for j in range(m): q = deque() for i in range(n - 1, -1, -1): if res[i][j] == '*': q.clear() elif res[i][j] == '.': q.append(i) elif q: res[q.popleft()][j] = '#' res[i][j] = '.' q.append(i) return res ","description":"1861. Rotating the Box","title":"1861. Rotating the Box","uri":"/en/tracks/algorithms-101/leetcode/medium/1861/"},{"content":"LeetCode problem 1862\nclass Solution: def sumOfFlooredPairs(self, nums: List[int]) -\u003e int: mod = 10**9 + 7 cnt = Counter(nums) mx = max(nums) s = [0] * (mx + 1) for i in range(1, mx + 1): s[i] = s[i - 1] + cnt[i] res = 0 for y in range(1, mx + 1): if cnt[y]: d = 1 while d * y \u003c= mx: res += cnt[y] * d * (s[min(mx, d * y + y - 1)] - s[d * y - 1]) res %= mod d += 1 return res ","description":"1862. Sum of Floored Pairs","title":"1862. Sum of Floored Pairs","uri":"/en/tracks/algorithms-101/leetcode/hard/1862/"},{"content":"LeetCode problem 1864\nclass Solution: def minSwaps(self, s: str) -\u003e int: s0n0 = s0n1 = s1n0 = s1n1 = 0 for i in range(len(s)): if (i \u0026 1) == 0: if s[i] != '0': s0n0 += 1 else: s1n1 += 1 else: if s[i] != '0': s1n0 += 1 else: s0n1 += 1 if s0n0 != s0n1 and s1n0 != s1n1: return -1 if s0n0 != s0n1: return s1n0 if s1n0 != s1n1: return s0n0 return min(s0n0, s1n0) ","description":"1864. Minimum Number of Swaps to Make the Binary String Alternating","title":"1864. Minimum Number of Swaps to Make the Binary String Alternating","uri":"/en/tracks/algorithms-101/leetcode/medium/1864/"},{"content":"LeetCode problem 1865\nclass FindSumPairs: def __init__(self, nums1: List[int], nums2: List[int]): self.nums1 = nums1 self.nums2 = nums2 self.cnt = Counter(nums2) def add(self, index: int, val: int) -\u003e None: old = self.nums2[index] self.cnt[old] -= 1 self.cnt[old + val] += 1 self.nums2[index] += val def count(self, tot: int) -\u003e int: return sum(self.cnt[tot - v] for v in self.nums1) # Your FindSumPairs object will be instantiated and called as such: # obj = FindSumPairs(nums1, nums2) # obj.add(index,val) # param_2 = obj.count(tot) ","description":"1865. Finding Pairs With a Certain Sum","title":"1865. Finding Pairs With a Certain Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1865/"},{"content":"LeetCode problem 1866\nclass Solution: def rearrangeSticks(self, n: int, k: int) -\u003e int: mod = 10**9 + 7 f = [1] + [0] * k for i in range(1, n + 1): for j in range(k, 0, -1): f[j] = (f[j] * (i - 1) + f[j - 1]) % mod f[0] = 0 return f[k] ","description":"1866. Number of Ways to Rearrange Sticks With K Sticks Visible","title":"1866. Number of Ways to Rearrange Sticks With K Sticks Visible","uri":"/en/tracks/algorithms-101/leetcode/hard/1866/"},{"content":"LeetCode problem 1868\nclass Solution: def findRLEArray( self, encoded1: List[List[int]], encoded2: List[List[int]] ) -\u003e List[List[int]]: res = [] j = 0 for vi, fi in encoded1: while fi: f = min(fi, encoded2[j][1]) v = vi * encoded2[j][0] if res and res[-1][0] == v: res[-1][1] += f else: res.append([v, f]) fi -= f encoded2[j][1] -= f if encoded2[j][1] == 0: j += 1 return res ","description":"1868. Product of Two Run-Length Encoded Arrays","title":"1868. Product of Two Run-Length Encoded Arrays","uri":"/en/tracks/algorithms-101/leetcode/medium/1868/"},{"content":"LeetCode problem 1870\nclass Solution: def minSpeedOnTime(self, dist: List[int], hour: float) -\u003e int: def check(speed): res = 0 for i, d in enumerate(dist): res += (d / speed) if i == len(dist) - 1 else math.ceil(d / speed) return res \u003c= hour r = 10**7 + 1 res = bisect_left(range(1, r), True, key=check) + 1 return -1 if res == r else res ","description":"1870. Minimum Speed to Arrive on Time","title":"1870. Minimum Speed to Arrive on Time","uri":"/en/tracks/algorithms-101/leetcode/medium/1870/"},{"content":"LeetCode problem 1871\nclass Solution: def canReach(self, s: str, minJump: int, maxJump: int) -\u003e bool: n = len(s) pre = [0] * (n + 1) pre[1] = 1 f = [True] + [False] * (n - 1) for i in range(1, n): if s[i] == \"0\": l, r = max(0, i - maxJump), i - minJump f[i] = l \u003c= r and pre[r + 1] - pre[l] \u003e 0 pre[i + 1] = pre[i] + f[i] return f[-1] ","description":"1871. Jump Game VII","title":"1871. Jump Game VII","uri":"/en/tracks/algorithms-101/leetcode/medium/1871/"},{"content":"LeetCode problem 1872\nclass Solution: def stoneGameVIII(self, stones: List[int]) -\u003e int: s = list(accumulate(stones)) f = s[-1] for i in range(len(s) - 2, 0, -1): f = max(f, s[i] - f) return f ","description":"1872. Stone Game VIII","title":"1872. Stone Game VIII","uri":"/en/tracks/algorithms-101/leetcode/hard/1872/"},{"content":"LeetCode problem 1874\nclass Solution: def minProductSum(self, nums1: List[int], nums2: List[int]) -\u003e int: nums1.sort() nums2.sort() n, res = len(nums1), 0 for i in range(n): res += nums1[i] * nums2[n - i - 1] return res ","description":"1874. Minimize Product Sum of Two Arrays","title":"1874. Minimize Product Sum of Two Arrays","uri":"/en/tracks/algorithms-101/leetcode/medium/1874/"},{"content":"LeetCode problem 1877\nclass Solution: def minPairSum(self, nums: List[int]) -\u003e int: nums.sort() n = len(nums) return max(x + nums[n - i - 1] for i, x in enumerate(nums[: n \u003e\u003e 1])) ","description":"1877. Minimize Maximum Pair Sum in Array","title":"1877. Minimize Maximum Pair Sum in Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1877/"},{"content":"LeetCode problem 1878\nfrom sortedcontainers import SortedSet class Solution: def getBiggestThree(self, grid: List[List[int]]) -\u003e List[int]: m, n = len(grid), len(grid[0]) s1 = [[0] * (n + 2) for _ in range(m + 1)] s2 = [[0] * (n + 2) for _ in range(m + 1)] for i, row in enumerate(grid, 1): for j, x in enumerate(row, 1): s1[i][j] = s1[i - 1][j - 1] + x s2[i][j] = s2[i - 1][j + 1] + x ss = SortedSet() for i, row in enumerate(grid, 1): for j, x in enumerate(row, 1): l = min(i - 1, m - i, j - 1, n - j) ss.add(x) for k in range(1, l + 1): a = s1[i + k][j] - s1[i][j - k] b = s1[i][j + k] - s1[i - k][j] c = s2[i][j - k] - s2[i - k][j] d = s2[i + k][j] - s2[i][j + k] ss.add( a + b + c + d - grid[i + k - 1][j - 1] + grid[i - k - 1][j - 1] ) while len(ss) \u003e 3: ss.remove(ss[0]) return list(ss)[::-1] ","description":"1878. Get Biggest Three Rhombus Sums in a Grid","title":"1878. Get Biggest Three Rhombus Sums in a Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/1878/"},{"content":"LeetCode problem 1879\nclass Solution: def minimumXORSum(self, nums1: List[int], nums2: List[int]) -\u003e int: n = len(nums2) f = [inf] * (1 \u003c\u003c n) f[0] = 0 for i in range(1, 1 \u003c\u003c n): k = i.bit_count() - 1 for j in range(n): if i \u003e\u003e j \u0026 1: f[i] = min(f[i], f[i ^ (1 \u003c\u003c j)] + (nums1[k] ^ nums2[j])) return f[-1] ","description":"1879. Minimum XOR Sum of Two Arrays","title":"1879. Minimum XOR Sum of Two Arrays","uri":"/en/tracks/algorithms-101/leetcode/hard/1879/"},{"content":"LeetCode problem 1881\nclass Solution: def maxValue(self, n: str, x: int) -\u003e str: if n[0] != '-': for i, c in enumerate(n): if int(c) \u003c x: return n[:i] + str(x) + n[i:] return n + str(x) else: for i, c in enumerate(n[1:]): if int(c) \u003e x: return n[: i + 1] + str(x) + n[i + 1 :] return n + str(x) ","description":"1881. Maximum Value after Insertion","title":"1881. Maximum Value after Insertion","uri":"/en/tracks/algorithms-101/leetcode/medium/1881/"},{"content":"LeetCode problem 1882\nclass Solution: def assignTasks(self, servers: List[int], tasks: List[int]) -\u003e List[int]: idle, busy = [], [] for i, weight in enumerate(servers): heappush(idle, (weight, i)) res = [] for start, cost in enumerate(tasks): while busy and busy[0][0] \u003c= start: _, s, i = heappop(busy) heappush(idle, (s, i)) if idle: s, i = heappop(idle) heappush(busy, (start + cost, s, i)) else: t, s, i = heappop(busy) heappush(busy, (t + cost, s, i)) res.append(i) return res ","description":"1882. Process Tasks Using Servers","title":"1882. Process Tasks Using Servers","uri":"/en/tracks/algorithms-101/leetcode/medium/1882/"},{"content":"LeetCode problem 1883\nclass Solution: def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -\u003e int: n = len(dist) f = [[inf] * (n + 1) for _ in range(n + 1)] f[0][0] = 0 for i, x in enumerate(dist, 1): for j in range(i + 1): if j \u003c i: f[i][j] = min(f[i][j], ((f[i - 1][j] + x - 1) // speed + 1) * speed) if j: f[i][j] = min(f[i][j], f[i - 1][j - 1] + x) for j in range(n + 1): if f[n][j] \u003c= hoursBefore * speed: return j return -1 ","description":"1883. Minimum Skips to Arrive at Meeting On Time","title":"1883. Minimum Skips to Arrive at Meeting On Time","uri":"/en/tracks/algorithms-101/leetcode/hard/1883/"},{"content":"LeetCode problem 1885\nclass Solution: def countPairs(self, nums1: List[int], nums2: List[int]) -\u003e int: n = len(nums1) d = [nums1[i] - nums2[i] for i in range(n)] d.sort() return sum(n - bisect_right(d, -v, lo=i + 1) for i, v in enumerate(d)) ","description":"1885. Count Pairs in Two Arrays","title":"1885. Count Pairs in Two Arrays","uri":"/en/tracks/algorithms-101/leetcode/medium/1885/"},{"content":"LeetCode Problem 1887\nProblem Statement The goal of this problem is to make all elements in a given integer array nums equal, through a series of reduction operations. In each operation, we find the largest element in the array, find the next largest element that is strictly smaller than the largest, and reduce the largest element to this next largest value. The task is to return the number of such operations needed to make all array elements equal.\nNaive Solution One might consider a brute-force approach: repeatedly scanning the array to find the largest element and its next largest, then performing the reduction. However, this approach would have a high time complexity, especially with larger arrays.\nHints \u0026 Tips Think about sorting the array to make it easier to find the largest and next largest elements. Consider how the number of reduction operations relates to the positions of the elements in the sorted array. Approach / Idea Imagine you have a stack of books of different thicknesses. Your task is to make all books have the same thickness by repeatedly choosing the thickest book and trimming it down to the next thickest one. The key to doing this efficiently is to first arrange the books in order of thickness, from thickest to thinnest. Once sorted, it’s straightforward to find the thickest book and the next thickest one.\nApplying this analogy to our problem, sorting the nums array in descending order (non-ascending) is akin to arranging the books. The largest number in the array is like the thickest book, and the next largest is like the next thickest book in the stack. By sorting the array, we can easily keep track of when we encounter a new “largest” element (or a new “thickest book”) as we iterate through the array.\nExample Consider the array [5, 1, 3]. After sorting, it becomes [5, 3, 1]. The first largest value is 5, and the next largest is 3. To make 5 equal to 3, we perform one operation. We then make 3 equal to 1 in the next step. Each step or operation can be counted by the position of these numbers in the sorted array.\nThus, we count the number of operations required to reduce each element to the next largest value, which directly correlates to its index in the sorted array.\nThe key to efficiently solving this problem lies in sorting the array. Once sorted, we can easily track the largest element and its next largest. The number of operations required to reduce an element to the next largest is directly related to its position in the sorted array.\nAlgorithm Sort the Array:\nSort nums in non-ascending order. Count Reduction Operations:\nIterate through the sorted array. Whenever the current element is different from the previous one (indicating a new largest element), increase the operation count by its index. Return the Count:\nThe total count is the number of operations needed. Solution Here’s the Python code implementing this approach:\ndef reductionOperations(nums: List[int]) -\u003e int: nums.sort(reverse=True) operations = 0 largest = nums[0] for i, x in enumerate(nums): if x \u003c largest: operations += i largest = x return operations ","description":"Step-by-step explanation and Python solution for LeetCode problem 1887. Reduction Operations to Make the Array Elements Equal.","title":"1887. Reduction Operations to Make the Array Elements Equal","uri":"/en/tracks/algorithms-101/leetcode/medium/1887/"},{"content":"LeetCode problem 1888\nclass Solution: def minFlips(self, s: str) -\u003e int: n = len(s) target = \"01\" cnt = sum(c != target[i \u0026 1] for i, c in enumerate(s)) res = min(cnt, n - cnt) for i in range(n): cnt -= s[i] != target[i \u0026 1] cnt += s[i] != target[(i + n) \u0026 1] res = min(res, cnt, n - cnt) return res ","description":"1888. Minimum Number of Flips to Make the Binary String Alternating","title":"1888. Minimum Number of Flips to Make the Binary String Alternating","uri":"/en/tracks/algorithms-101/leetcode/medium/1888/"},{"content":"LeetCode problem 1889\nclass Solution: def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -\u003e int: mod = 10**9 + 7 res = inf packages.sort() for box in boxes: box.sort() if packages[-1] \u003e box[-1]: continue s = i = 0 for b in box: j = bisect_right(packages, b, lo=i) s += (j - i) * b i = j res = min(res, s) if res == inf: return -1 return (res - sum(packages)) % mod ","description":"1889. Minimum Space Wasted From Packaging","title":"1889. Minimum Space Wasted From Packaging","uri":"/en/tracks/algorithms-101/leetcode/hard/1889/"},{"content":"LeetCode problem\nProblem Statement Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.\nNaive Solution A simple, but inefficient, approach would be to rotate the array k times. In each rotation, we shift every element of the array to the right by one and move the last element to the start of the array. This solution has a time complexity of O(n*k), where n is the number of elements in the array and k is the number of rotations. This is not an optimal solution, especially when we have a large k or a large array.\nApproach An efficient solution can be found by using array reversal. Here’s the plan:\nReverse the entire array. Reverse the first k elements. Reverse the remaining n-k elements. This method allows us to achieve the desired output in O(n) time and O(1) space complexity.\nSteps Let’s break down the steps using an example: nums = [1,2,3,4,5,6,7], k = 3.\nReverse the entire array: nums = [7,6,5,4,3,2,1]. Reverse the first k elements: nums = [5,6,7,4,3,2,1]. Reverse the remaining n-k elements: nums = [5,6,7,1,2,3,4]. As you can see, we get the expected output [5,6,7,1,2,3,4].\nSolution Here is the Python code that implements the aforementioned logic:\nclass Solution: def rotate(self, nums, k): def reverse(start, end): while start \u003c end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1 n = len(nums) k = k % n # in case k \u003e len(nums) reverse(nums, 0, n - 1) # 1 reverse(nums, 0, k - 1) # 2 reverse(nums, k, n - 1) # 3 ","description":"Rotating an array to the right by k steps","title":"189. Rotate Array","uri":"/en/tracks/algorithms-101/leetcode/medium/189/"},{"content":"LeetCode problem 1891\nclass Solution: def maxLength(self, ribbons: List[int], k: int) -\u003e int: left, right = 0, max(ribbons) while left \u003c right: mid = (left + right + 1) \u003e\u003e 1 cnt = sum(x // mid for x in ribbons) if cnt \u003e= k: left = mid else: right = mid - 1 return left ","description":"1891. Cutting Ribbons","title":"1891. Cutting Ribbons","uri":"/en/tracks/algorithms-101/leetcode/medium/1891/"},{"content":"LeetCode problem 1894\nclass Solution: def chalkReplacer(self, chalk: List[int], k: int) -\u003e int: s = sum(chalk) k %= s for i, x in enumerate(chalk): if k \u003c x: return i k -= x ","description":"1894. Find the Student that Will Replace the Chalk","title":"1894. Find the Student that Will Replace the Chalk","uri":"/en/tracks/algorithms-101/leetcode/medium/1894/"},{"content":"LeetCode problem 1895\nclass Solution: def largestMagicSquare(self, grid: List[List[int]]) -\u003e int: m, n = len(grid), len(grid[0]) rowsum = [[0] * (n + 1) for _ in range(m + 1)] colsum = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): rowsum[i][j] = rowsum[i][j - 1] + grid[i - 1][j - 1] colsum[i][j] = colsum[i - 1][j] + grid[i - 1][j - 1] def check(x1, y1, x2, y2): val = rowsum[x1 + 1][y2 + 1] - rowsum[x1 + 1][y1] for i in range(x1 + 1, x2 + 1): if rowsum[i + 1][y2 + 1] - rowsum[i + 1][y1] != val: return False for j in range(y1, y2 + 1): if colsum[x2 + 1][j + 1] - colsum[x1][j + 1] != val: return False s, i, j = 0, x1, y1 while i \u003c= x2: s += grid[i][j] i += 1 j += 1 if s != val: return False s, i, j = 0, x1, y2 while i \u003c= x2: s += grid[i][j] i += 1 j -= 1 if s != val: return False return True for k in range(min(m, n), 1, -1): i = 0 while i + k - 1 \u003c m: j = 0 while j + k - 1 \u003c n: i2, j2 = i + k - 1, j + k - 1 if check(i, j, i2, j2): return k j += 1 i += 1 return 1 ","description":"1895. Largest Magic Square","title":"1895. Largest Magic Square","uri":"/en/tracks/algorithms-101/leetcode/medium/1895/"},{"content":"LeetCode problem 1898\nclass Solution: def maximumRemovals(self, s: str, p: str, removable: List[int]) -\u003e int: def check(k): i = j = 0 ids = set(removable[:k]) while i \u003c m and j \u003c n: if i not in ids and s[i] == p[j]: j += 1 i += 1 return j == n m, n = len(s), len(p) left, right = 0, len(removable) while left \u003c right: mid = (left + right + 1) \u003e\u003e 1 if check(mid): left = mid else: right = mid - 1 return left ","description":"1898. Maximum Number of Removable Characters","title":"1898. Maximum Number of Removable Characters","uri":"/en/tracks/algorithms-101/leetcode/medium/1898/"},{"content":"LeetCode problem 1899\nclass Solution: def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -\u003e bool: x, y, z = target d = e = f = 0 for a, b, c in triplets: if a \u003c= x and b \u003c= y and c \u003c= z: d = max(d, a) e = max(e, b) f = max(f, c) return [d, e, f] == target ","description":"1899. Merge Triplets to Form Target Triplet","title":"1899. Merge Triplets to Form Target Triplet","uri":"/en/tracks/algorithms-101/leetcode/medium/1899/"},{"content":"LeetCode problem 19\nGiven the ‘head’ of a linked list, remove the ’nth’ node from the end of the list and return its head.\nExample 1:\nInput: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Example 2:\nInput: head = [1], n = 1 Output: [] Idea:\nTwo pointers. Second pointer starts from nth position. Run while second pointer exist. # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeNthFromEnd(self, head, n: int): p1 = head p2 = head for _ in range(n): p2 = p2.next # fast if not p2: return head.next # in case: head=[1], n=1 -\u003e return [] while p2.next: p1 = p1.next p2 = p2.next p1.next = p1.next.next return head # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeNthFromEnd(self, head: Optional[ListNode], n: int) -\u003e Optional[ListNode]: if not head.next: return None nodes = {} cur = head i = 0 while cur: nodes[i] = cur cur = cur.next i += 1 if i - n == 0: return head.next cur = nodes[i - n - 1] if cur.next: cur.next = cur.next.next return head ","description":"LeetCode 19. Remove Nth Node From End of List","title":"19. Remove Nth Node From End of List","uri":"/en/tracks/algorithms-101/leetcode/medium/19/"},{"content":"LeetCode problem\nThis task involves understanding how binary representation works. An unsigned integer is a 32-bit value, where each bit represents a power of 2, from 2^0 (the least significant bit) to 2^31 (the most significant bit).\nUnsigned Integers (often called “uints”) are just like integers (whole numbers) but have the property that they don’t have a + or - sign associated with them. Thus they are always non-negative (zero or positive).\nNaive Solution A naive solution to this problem could involve converting the number to a binary string, reversing the string, and then converting it back to an integer. However, this would not be the most efficient solution, especially for large numbers.\nApproach Using bitwise operation.\nA better approach is to manipulate the bits of the number directly. This can be done by initializing an empty result and then repeatedly shifting the result to the left to make room for the next bit, and adding the last bit of the input number.\nSteps Initialize the result to 0. Repeat the following steps 32 times, once for each bit in the input number: Shift the result one bit to the left to make room for the next bit. This can be done with the \u003c\u003c operator. Add the last bit of the input number to the result. This can be done with the \u0026 operator, which performs a bitwise AND operation. Shift the input number one bit to the right to prepare for the next iteration. This can be done with the \u003e\u003e operator. At the end of this process, the result will be the input number with its bits reversed.\nSolution class Solution: def reverseBits(self, n: int) -\u003e int: result = 0 for _ in range(32): result = (result \u003c\u003c 1) + (n \u0026 1) n \u003e\u003e= 1 return result result \u003c\u003c 1 shifts the bits of the result one place to the left, (n \u0026 1) gets the last bit of n, and n \u003e\u003e= 1 shifts the bits of n one place to the right.\nUnderstanding Example:\nOur number: n = 0110 1010\nOur aim is to reverse these bits to get 0101 0110.\nIn the solution, we initialize our result as 0 (0000 0000 in binary). We’re going to build this result bit by bit from the binary representation of n.\nThe key point of this operation is this line of code: result = (result \u003c\u003c 1) + (n \u0026 1). This line does three things:\n(result \u003c\u003c 1): This operation is a left shift operation. It shifts all the bits in result one place to the left. In binary, this is equivalent to multiplying by 2. So if result was 0101 (5 in decimal), after this operation result will be 1010 (10 in decimal). You can see we’ve made room for a new bit on the right. (n \u0026 1): This operation is a bitwise AND operation. The \u0026 operator compares each binary digit of two integers and returns a new integer, with a 1 wherever both numbers had a 1 and a 0 anywhere else. When n is ANDed with 1 (0000 0001), the result will be 1 only if the least significant bit of n is 1. This effectively gives us the last bit of n. (result \u003c\u003c 1) + (n \u0026 1): This line combines the above two steps. It shifts the bits of result one place to the left and adds the last bit of n to result. Let’s work through the first couple of iterations of the loop:\nOn the first iteration, result is 0000 0000. We shift result left (it remains 0000 0000), and add the last bit of n (which is 0). So result remains 0000 0000. We then shift n right to become 0011 0101 (n From 0110 1010 to 0011 0101). On the second iteration, result is 0000 0000. We shift result left (it remains 0000 0000), and add the last bit of n (which is 1). So result becomes 0000 0001. We then shift n right to become 0001 1010. If we repeat this process 8 times (for an 8-bit number), or 32 times (for a 32-bit number like in the problem), result will be the binary number formed by reversing the bits of n.\nOptimization If this function is called many times, way to optimize it is to cache the results for each byte (8 bits) instead of each bit. This would divide the computation time by 8.\n","description":"190. Reverse Bits","title":"190. Reverse Bits","uri":"/en/tracks/algorithms-101/leetcode/easy/190/"},{"content":"LeetCode problem 1900\nclass Solution: def earliestAndLatest( self, n: int, firstPlayer: int, secondPlayer: int ) -\u003e List[int]: # dp[i][j][k] := (earliest, latest) pair w/ firstPlayer is i-th player from # Front, secondPlayer is j-th player from end, and there're k people @functools.lru_cache(None) def dp(l: int, r: int, k: int) -\u003e List[int]: if l == r: return [1, 1] if l \u003e r: return dp(r, l, k) a = math.inf b = -math.inf # Enumerate all possible positions for i in range(1, l + 1): for j in range(l - i + 1, r - i + 1): if not l + r - k // 2 \u003c= i + j \u003c= (k + 1) // 2: continue x, y = dp(i, j, (k + 1) // 2) a = min(a, x + 1) b = max(b, y + 1) return [a, b] return dp(firstPlayer, n - secondPlayer + 1, n) ","description":"1900. The Earliest and Latest Rounds Where Players Compete","title":"1900. The Earliest and Latest Rounds Where Players Compete","uri":"/en/tracks/algorithms-101/leetcode/hard/1900/"},{"content":"LeetCode problem 1901\nclass Solution: def findPeakGrid(self, mat: List[List[int]]) -\u003e List[int]: l, r = 0, len(mat) - 1 while l \u003c r: mid = (l + r) \u003e\u003e 1 j = mat[mid].index(max(mat[mid])) if mat[mid][j] \u003e mat[mid + 1][j]: r = mid else: l = mid + 1 return [l, mat[l].index(max(mat[l]))] ","description":"1901. Find a Peak Element II","title":"1901. Find a Peak Element II","uri":"/en/tracks/algorithms-101/leetcode/medium/1901/"},{"content":"LeetCode problem 1902\nfrom sortedcontainers import SortedDict class Solution: def maxDepthBST(self, order: List[int]) -\u003e int: sd = SortedDict({0: 0, inf: 0, order[0]: 1}) res = 1 for v in order[1:]: lower = sd.bisect_left(v) - 1 higher = lower + 1 depth = 1 + max(sd.values()[lower], sd.values()[higher]) res = max(res, depth) sd[v] = depth return res ","description":"1902. Depth of BST Given Insertion Order","title":"1902. Depth of BST Given Insertion Order","uri":"/en/tracks/algorithms-101/leetcode/medium/1902/"},{"content":"LeetCode problem 1904\nclass Solution: def numberOfRounds(self, loginTime: str, logoutTime: str) -\u003e int: def f(s: str) -\u003e int: return int(s[:2]) * 60 + int(s[3:]) a, b = f(loginTime), f(logoutTime) if a \u003e b: b += 1440 a, b = (a + 14) // 15, b // 15 return max(0, b - a) ","description":"1904. The Number of Full Rounds You Have Played","title":"1904. The Number of Full Rounds You Have Played","uri":"/en/tracks/algorithms-101/leetcode/medium/1904/"},{"content":"LeetCode problem 1905\nclass Solution: def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -\u003e int: def bfs(i: int, j: int) -\u003e int: ok = grid1[i][j] q = deque([(i, j)]) grid2[i][j] = 0 while q: i, j = q.popleft() for a, b in pairwise(dirs): x, y = i + a, j + b if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and grid2[x][y]: q.append((x, y)) ok = ok \u0026 grid1[x][y] grid2[x][y] = 0 return ok m, n = len(grid1), len(grid1[0]) dirs = (-1, 0, 1, 0, -1) return sum(bfs(i, j) for i in range(m) for j in range(n) if grid2[i][j]) ","description":"1905. Count Sub Islands","title":"1905. Count Sub Islands","uri":"/en/tracks/algorithms-101/leetcode/medium/1905/"},{"content":"LeetCode problem 1906\nclass Solution: def minDifference(self, nums: List[int], queries: List[List[int]]) -\u003e List[int]: m, n = len(nums), len(queries) pre_sum = [[0] * 101 for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, 101): t = 1 if nums[i - 1] == j else 0 pre_sum[i][j] = pre_sum[i - 1][j] + t res = [] for i in range(n): left, right = queries[i][0], queries[i][1] + 1 t = inf last = -1 for j in range(1, 101): if pre_sum[right][j] - pre_sum[left][j] \u003e 0: if last != -1: t = min(t, j - last) last = j if t == inf: t = -1 res.append(t) return res ","description":"1906. Minimum Absolute Difference Queries","title":"1906. Minimum Absolute Difference Queries","uri":"/en/tracks/algorithms-101/leetcode/medium/1906/"},{"content":"LeetCode problem 1908\nclass Solution: def nimGame(self, piles: List[int]) -\u003e bool: @cache def dfs(st): lst = list(st) for i, x in enumerate(lst): for j in range(1, x + 1): lst[i] -= j if not dfs(tuple(lst)): return True lst[i] += j return False return dfs(tuple(piles)) ","description":"1908. Game of Nim","title":"1908. Game of Nim","uri":"/en/tracks/algorithms-101/leetcode/medium/1908/"},{"content":"LeetCode problem\nProblem Statement Given an integer value represented in binary format, we need to count the number of ‘1’ bits in its binary representation.\nNaive Solution The naive solution for this problem would be to convert the binary number into a string and then simply iterate over the string and count the number of ‘1’s. However, this solution is not optimal and is not taking advantage of the properties of binary numbers.\nAlgorithm The optimal solution for this problem involves using bitwise operation. Bitwise operations are a type of operation that works on the binary representation of numbers.\nSpecifically, we’ll use the bitwise AND operator (\u0026) and bitwise right shift operator (\u003e\u003e).\nTo count the number of 1 bits in the binary representation of a number, we can AND the number with 1. If the result is 1, that means the least significant bit of the number is 1. We then right shift the number by 1 bit to check the next bit. We continue this process until the number becomes 0.\nHigh Level Solution Logic Initialize a counter variable to 0. While the number is not 0: AND the number with 1. If the result is 1, increment the counter. Right shift the number by 1 bit. Return the counter. Python Code Here’s the Python code for this solution:\nclass Solution: def hammingWeight(self, n: int) -\u003e int: bits = 0 while n: bits += n \u0026 1 n \u003e\u003e= 1 return bits Example Let’s say we have a binary number 00000001011, which is 11 in decimal.\nInitialize a counter variable to 0. So, bits = 0. Start the loop. The number n is 11, which is not 0, so we proceed. We perform the operation n \u0026 1. In binary, 1011 \u0026 0001 equals 0001, which is 1 in decimal. This is because the bitwise AND operation returns 1 only if both bits being compared are 1. So, since our least significant bit is 1, our AND operation returns 1. We increment our counter bits by 1. Now bits = 1. We right shift our number by 1 bit using the operation n \u003e\u003e= 1. This operation moves all the bits of the number one position to the right. Our number 1011 becomes 101 in binary or 5 in decimal. Our updated number n is 5, which is not 0, so we repeat the process. Now, n \u0026 1 is 101 \u0026 001 equals 001, which is 1 in decimal. So, we increment our counter bits by 1. Now bits = 2. We right shift our number by 1 bit. Our number 101 becomes 10 in binary or 2 in decimal. Our updated number n is 2, which is not 0, so we repeat the process. Now, n \u0026 1 is 10 \u0026 01 equals 00, which is 0 in decimal. So, we do not increment our counter bits. We right shift our number by 1 bit. Our number 10 becomes 1 in binary. Our updated number n is 1, which is not 0, so we repeat the process. Now, n \u0026 1 is 1 \u0026 1 equals 1. So, we increment our counter bits by 1. Now bits = 3. We right shift our number by 1 bit. Our number 1 becomes 0 in binary. Our updated number n is 0, which stops the loop. ","description":"Solving and understanding the LeetCode problem 191. Number of 1 Bits using bitwise operations in Python.","title":"191. Number of 1 Bits","uri":"/en/tracks/algorithms-101/leetcode/easy/191/"},{"content":"LeetCode problem 1910\nclass Solution: def removeOccurrences(self, s: str, part: str) -\u003e str: while part in s: s = s.replace(part, '', 1) return s ","description":"1910. Remove All Occurrences of a Substring","title":"1910. Remove All Occurrences of a Substring","uri":"/en/tracks/algorithms-101/leetcode/medium/1910/"},{"content":"LeetCode problem 1911\nclass Solution: def maxAlternatingSum(self, nums: List[int]) -\u003e int: f = g = 0 for x in nums: f, g = max(g - x, f), max(f + x, g) return max(f, g) ","description":"1911. Maximum Alternating Subsequence Sum","title":"1911. Maximum Alternating Subsequence Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1911/"},{"content":"LeetCode problem 1912\nfrom sortedcontainers import SortedList class MovieRentingSystem: def __init__(self, n: int, entries: List[List[int]]): self.unrented = collections.defaultdict(SortedList) # {movie: (price, shop)} self.shopAndMovieToPrice = {} # {(shop, movie): price} self.rented = SortedList() # (price, shop, movie) for shop, movie, price in entries: self.unrented[movie].add((price, shop)) self.shopAndMovieToPrice[(shop, movie)] = price def search(self, movie: int) -\u003e List[int]: return [shop for _, shop in self.unrented[movie][:5]] def rent(self, shop: int, movie: int) -\u003e None: price = self.shopAndMovieToPrice[(shop, movie)] self.unrented[movie].remove((price, shop)) self.rented.add((price, shop, movie)) def drop(self, shop: int, movie: int) -\u003e None: price = self.shopAndMovieToPrice[(shop, movie)] self.unrented[movie].add((price, shop)) self.rented.remove((price, shop, movie)) def report(self) -\u003e List[List[int]]: return [[shop, movie] for _, shop, movie in self.rented[:5]] # Your MovieRentingSystem object will be instantiated and called as such: # obj = MovieRentingSystem(n, entries) # param_1 = obj.search(movie) # obj.rent(shop,movie) # obj.drop(shop,movie) # param_4 = obj.report() ","description":"1912. Design Movie Rental System","title":"1912. Design Movie Rental System","uri":"/en/tracks/algorithms-101/leetcode/hard/1912/"},{"content":"LeetCode problem 1914\nclass Solution: def rotateGrid(self, grid: List[List[int]], k: int) -\u003e List[List[int]]: def rotate(p: int, k: int): nums = [] for j in range(p, n - p - 1): nums.append(grid[p][j]) for i in range(p, m - p - 1): nums.append(grid[i][n - p - 1]) for j in range(n - p - 1, p, -1): nums.append(grid[m - p - 1][j]) for i in range(m - p - 1, p, -1): nums.append(grid[i][p]) k %= len(nums) if k == 0: return nums = nums[k:] + nums[:k] k = 0 for j in range(p, n - p - 1): grid[p][j] = nums[k] k += 1 for i in range(p, m - p - 1): grid[i][n - p - 1] = nums[k] k += 1 for j in range(n - p - 1, p, -1): grid[m - p - 1][j] = nums[k] k += 1 for i in range(m - p - 1, p, -1): grid[i][p] = nums[k] k += 1 m, n = len(grid), len(grid[0]) for p in range(min(m, n) \u003e\u003e 1): rotate(p, k) return grid ","description":"1914. Cyclically Rotating a Grid","title":"1914. Cyclically Rotating a Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/1914/"},{"content":"LeetCode problem 1915\nclass Solution: def wonderfulSubstrings(self, word: str) -\u003e int: cnt = Counter({0: 1}) res = st = 0 for c in word: st ^= 1 \u003c\u003c (ord(c) - ord(\"a\")) res += cnt[st] for i in range(10): res += cnt[st ^ (1 \u003c\u003c i)] cnt[st] += 1 return res ","description":"1915. Number of Wonderful Substrings","title":"1915. Number of Wonderful Substrings","uri":"/en/tracks/algorithms-101/leetcode/medium/1915/"},{"content":"LeetCode problem 1918\nclass Solution: def kthSmallestSubarraySum(self, nums: List[int], k: int) -\u003e int: def f(s): t = j = 0 cnt = 0 for i, x in enumerate(nums): t += x while t \u003e s: t -= nums[j] j += 1 cnt += i - j + 1 return cnt \u003e= k l, r = min(nums), sum(nums) return l + bisect_left(range(l, r + 1), True, key=f) ","description":"1918. Kth Smallest Subarray Sum","title":"1918. Kth Smallest Subarray Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1918/"},{"content":"LeetCode problem 1921\nclass Solution: def eliminateMaximum(self, dist: List[int], speed: List[int]) -\u003e int: times = sorted((d - 1) // s for d, s in zip(dist, speed)) for i, t in enumerate(times): if t \u003c i: return i return len(times) ","description":"1921. Eliminate Maximum Number of Monsters","title":"1921. Eliminate Maximum Number of Monsters","uri":"/en/tracks/algorithms-101/leetcode/medium/1921/"},{"content":"LeetCode problem 1922\nclass Solution: def countGoodNumbers(self, n: int) -\u003e int: mod = 10**9 + 7 def myPow(x, n): res = 1 while n: if (n \u0026 1) == 1: res = res * x % mod x = x * x % mod n \u003e\u003e= 1 return res return myPow(5, (n + 1) \u003e\u003e 1) * myPow(4, n \u003e\u003e 1) % mod ","description":"1922. Count Good Numbers","title":"1922. Count Good Numbers","uri":"/en/tracks/algorithms-101/leetcode/medium/1922/"},{"content":"LeetCode problem 1923\nclass Solution: def longestCommonSubpath(self, n: int, paths: List[List[int]]) -\u003e int: def check(k: int) -\u003e bool: cnt = Counter() for h in hh: vis = set() for i in range(1, len(h) - k + 1): j = i + k - 1 x = (h[j] - h[i - 1] * p[j - i + 1]) % mod if x not in vis: vis.add(x) cnt[x] += 1 return max(cnt.values()) == m m = len(paths) mx = max(len(path) for path in paths) base = 133331 mod = 2**64 + 1 p = [0] * (mx + 1) p[0] = 1 for i in range(1, len(p)): p[i] = p[i - 1] * base % mod hh = [] for path in paths: k = len(path) h = [0] * (k + 1) for i, x in enumerate(path, 1): h[i] = h[i - 1] * base % mod + x hh.append(h) l, r = 0, min(len(path) for path in paths) while l \u003c r: mid = (l + r + 1) \u003e\u003e 1 if check(mid): l = mid else: r = mid - 1 return l ","description":"1923. Longest Common Subpath","title":"1923. Longest Common Subpath","uri":"/en/tracks/algorithms-101/leetcode/hard/1923/"},{"content":"LeetCode problem 1926\nclass Solution: def nearestExit(self, maze: List[List[str]], entrance: List[int]) -\u003e int: m, n = len(maze), len(maze[0]) i, j = entrance q = deque([(i, j)]) maze[i][j] = '+' res = 0 while q: res += 1 for _ in range(len(q)): i, j = q.popleft() for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]: x, y = i + a, j + b if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and maze[x][y] == '.': if x == 0 or x == m - 1 or y == 0 or y == n - 1: return res q.append((x, y)) maze[x][y] = '+' return -1 ","description":"1926. Nearest Exit from Entrance in Maze","title":"1926. Nearest Exit from Entrance in Maze","uri":"/en/tracks/algorithms-101/leetcode/medium/1926/"},{"content":"LeetCode problem 1927\nclass Solution: def sumGame(self, num: str) -\u003e bool: n = len(num) cnt1 = num[: n // 2].count(\"?\") cnt2 = num[n // 2 :].count(\"?\") s1 = sum(int(x) for x in num[: n // 2] if x != \"?\") s2 = sum(int(x) for x in num[n // 2 :] if x != \"?\") return (cnt1 + cnt2) % 2 == 1 or s1 - s2 != 9 * (cnt2 - cnt1) // 2 ","description":"1927. Sum Game","title":"1927. Sum Game","uri":"/en/tracks/algorithms-101/leetcode/medium/1927/"},{"content":"LeetCode problem 1929\nclass Solution: def getConcatenation(self, nums: List[int]) -\u003e List[int]: return nums + nums ","description":"1929. Concatenation of Array","title":"1929. Concatenation of Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1929/"},{"content":"LeetCode problem 1931\nclass Solution: def colorTheGrid(self, m: int, n: int) -\u003e int: def f1(x: int) -\u003e bool: last = -1 for _ in range(m): if x % 3 == last: return False last = x % 3 x //= 3 return True def f2(x: int, y: int) -\u003e bool: for _ in range(m): if x % 3 == y % 3: return False x, y = x // 3, y // 3 return True mod = 10**9 + 7 mx = 3**m valid = {i for i in range(mx) if f1(i)} d = defaultdict(list) for x in valid: for y in valid: if f2(x, y): d[x].append(y) f = [int(i in valid) for i in range(mx)] for _ in range(n - 1): g = [0] * mx for i in valid: for j in d[i]: g[i] = (g[i] + f[j]) % mod f = g return sum(f) % mod ","description":"1931. Painting a Grid With Three Different Colors","title":"1931. Painting a Grid With Three Different Colors","uri":"/en/tracks/algorithms-101/leetcode/hard/1931/"},{"content":"LeetCode problem 1933\nclass Solution: def isDecomposable(self, s: str) -\u003e bool: cnt2 = 0 for _, g in groupby(s): m = len(list(g)) if m % 3 == 1: return False cnt2 += m % 3 == 2 if cnt2 \u003e 1: return False return cnt2 == 1 ","description":"1933. Check if String Is Decomposable Into Value-Equal Substrings","title":"1933. Check if String Is Decomposable Into Value-Equal Substrings","uri":"/en/tracks/algorithms-101/leetcode/easy/1933/"},{"content":"LeetCode problem 1935\nclass Solution: def canBeTypedWords(self, text: str, brokenLetters: str) -\u003e int: s = set(brokenLetters) return sum(all(c not in s for c in w) for w in text.split()) ","description":"1935. Maximum Number of Words You Can Type","title":"1935. Maximum Number of Words You Can Type","uri":"/en/tracks/algorithms-101/leetcode/easy/1935/"},{"content":"LeetCode problem 1936\nclass Solution: def addRungs(self, rungs: List[int], dist: int) -\u003e int: rungs = [0] + rungs return sum((b - a - 1) // dist for a, b in pairwise(rungs)) ","description":"1936. Add Minimum Number of Rungs","title":"1936. Add Minimum Number of Rungs","uri":"/en/tracks/algorithms-101/leetcode/medium/1936/"},{"content":"LeetCode problem 1937\nclass Solution: def maxPoints(self, points: List[List[int]]) -\u003e int: n = len(points[0]) f = points[0][:] for p in points[1:]: g = [0] * n lmx = -inf for j in range(n): lmx = max(lmx, f[j] + j) g[j] = max(g[j], p[j] + lmx - j) rmx = -inf for j in range(n - 1, -1, -1): rmx = max(rmx, f[j] - j) g[j] = max(g[j], p[j] + rmx + j) f = g return max(f) ","description":"1937. Maximum Number of Points with Cost","title":"1937. Maximum Number of Points with Cost","uri":"/en/tracks/algorithms-101/leetcode/medium/1937/"},{"content":"LeetCode problem 1940\nclass Solution: def longestCommomSubsequence(self, arrays: List[List[int]]) -\u003e List[int]: def common(l1, l2): i, j, n1, n2 = 0, 0, len(l1), len(l2) res = [] while i \u003c n1 and j \u003c n2: if l1[i] == l2[j]: res.append(l1[i]) i += 1 j += 1 elif l1[i] \u003e l2[j]: j += 1 else: i += 1 return res n = len(arrays) for i in range(1, n): arrays[i] = common(arrays[i - 1], arrays[i]) return arrays[n - 1] ","description":"1940. Longest Common Subsequence Between Sorted Arrays","title":"1940. Longest Common Subsequence Between Sorted Arrays","uri":"/en/tracks/algorithms-101/leetcode/medium/1940/"},{"content":"LeetCode problem 1941\nclass Solution: def areOccurrencesEqual(self, s: str) -\u003e bool: cnt = Counter(s) return len(set(cnt.values())) == 1 ","description":"1941. Check if All Characters Have Equal Number of Occurrences","title":"1941. Check if All Characters Have Equal Number of Occurrences","uri":"/en/tracks/algorithms-101/leetcode/easy/1941/"},{"content":"LeetCode problem 1942\nclass Solution: def smallestChair(self, times: List[List[int]], targetFriend: int) -\u003e int: n = len(times) h = list(range(n)) heapify(h) for i in range(n): times[i].append(i) times.sort() busy = [] for a, b, i in times: while busy and busy[0][0] \u003c= a: heappush(h, heappop(busy)[1]) c = heappop(h) if i == targetFriend: return c heappush(busy, (b, c)) return -1 ","description":"1942. The Number of the Smallest Unoccupied Chair","title":"1942. The Number of the Smallest Unoccupied Chair","uri":"/en/tracks/algorithms-101/leetcode/medium/1942/"},{"content":"LeetCode problem 1943\nclass Solution: def splitPainting(self, segments: List[List[int]]) -\u003e List[List[int]]: d = defaultdict(int) for l, r, c in segments: d[l] += c d[r] -= c s = sorted([[k, v] for k, v in d.items()]) n = len(s) for i in range(1, n): s[i][1] += s[i - 1][1] return [[s[i][0], s[i + 1][0], s[i][1]] for i in range(n - 1) if s[i][1]] ","description":"1943. Describe the Painting","title":"1943. Describe the Painting","uri":"/en/tracks/algorithms-101/leetcode/medium/1943/"},{"content":"LeetCode problem 1944\nclass Solution: def canSeePersonsCount(self, heights: List[int]) -\u003e List[int]: n = len(heights) res = [0] * n stk = [] for i in range(n - 1, -1, -1): while stk and stk[-1] \u003c heights[i]: res[i] += 1 stk.pop() if stk: res[i] += 1 stk.append(heights[i]) return res ","description":"1944. Number of Visible People in a Queue","title":"1944. Number of Visible People in a Queue","uri":"/en/tracks/algorithms-101/leetcode/hard/1944/"},{"content":"LeetCode problem 1945\nclass Solution: def getLucky(self, s: str, k: int) -\u003e int: s = ''.join(str(ord(c) - ord('a') + 1) for c in s) for _ in range(k): t = sum(int(c) for c in s) s = str(t) return int(s) ","description":"1945. Sum of Digits of String After Convert","title":"1945. Sum of Digits of String After Convert","uri":"/en/tracks/algorithms-101/leetcode/easy/1945/"},{"content":"LeetCode problem 1946\nclass Solution: def maximumNumber(self, num: str, change: List[int]) -\u003e str: s = list(num) for i, c in enumerate(s): if change[int(c)] \u003e int(c): while i \u003c len(s) and int(s[i]) \u003c= change[int(s[i])]: s[i] = str(change[int(s[i])]) i += 1 break return ''.join(s) ","description":"1946. Largest Number After Mutating Substring","title":"1946. Largest Number After Mutating Substring","uri":"/en/tracks/algorithms-101/leetcode/medium/1946/"},{"content":"LeetCode problem 1947\nclass Solution: def maxCompatibilitySum( self, students: List[List[int]], mentors: List[List[int]] ) -\u003e int: def dfs(i, t): if i == m: nonlocal res res = max(res, t) return for j in range(m): if not vis[j]: vis[j] = True dfs(i + 1, t + g[i][j]) vis[j] = False m = len(students) g = [[0] * m for _ in range(m)] for i in range(m): for j in range(m): g[i][j] = sum(a == b for a, b in zip(students[i], mentors[j])) vis = [False] * m res = 0 dfs(0, 0) return res ","description":"1947. Maximum Compatibility Score Sum","title":"1947. Maximum Compatibility Score Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1947/"},{"content":"LeetCode problem 1950\nclass Solution: def findMaximums(self, nums: List[int]) -\u003e List[int]: n = len(nums) left = [-1] * n right = [n] * n stk = [] for i, x in enumerate(nums): while stk and nums[stk[-1]] \u003e= x: stk.pop() if stk: left[i] = stk[-1] stk.append(i) stk = [] for i in range(n - 1, -1, -1): while stk and nums[stk[-1]] \u003e= nums[i]: stk.pop() if stk: right[i] = stk[-1] stk.append(i) res = [0] * n for i in range(n): m = right[i] - left[i] - 1 res[m - 1] = max(res[m - 1], nums[i]) for i in range(n - 2, -1, -1): res[i] = max(res[i], res[i + 1]) return res ","description":"1950. Maximum of Minimum Values in All Subarrays","title":"1950. Maximum of Minimum Values in All Subarrays","uri":"/en/tracks/algorithms-101/leetcode/medium/1950/"},{"content":"LeetCode problem 1952\nclass Solution: def isThree(self, n: int) -\u003e bool: cnt = 0 i = 1 while i \u003c= n // i: if n % i == 0: cnt += 1 if i == n // i else 2 i += 1 return cnt == 3 ","description":"1952. Three Divisors","title":"1952. Three Divisors","uri":"/en/tracks/algorithms-101/leetcode/easy/1952/"},{"content":"LeetCode problem 1953\nclass Solution: def numberOfWeeks(self, milestones: List[int]) -\u003e int: mx, s = max(milestones), sum(milestones) rest = s - mx return rest * 2 + 1 if mx \u003e rest + 1 else s ","description":"1953. Maximum Number of Weeks for Which You Can Work","title":"1953. Maximum Number of Weeks for Which You Can Work","uri":"/en/tracks/algorithms-101/leetcode/medium/1953/"},{"content":"LeetCode problem 1954\nclass Solution: def minimumPerimeter(self, neededApples: int) -\u003e int: l, r = 1, 100000 while l \u003c r: mid = (l + r) \u003e\u003e 1 if 2 * mid * (mid + 1) * (2 * mid + 1) \u003e= neededApples: r = mid else: l = mid + 1 return l * 8 ","description":"1954. Minimum Garden Perimeter to Collect Enough Apples","title":"1954. Minimum Garden Perimeter to Collect Enough Apples","uri":"/en/tracks/algorithms-101/leetcode/medium/1954/"},{"content":"LeetCode problem 1955\nclass Solution: def countSpecialSubsequences(self, nums: List[int]) -\u003e int: mod = 10**9 + 7 n = len(nums) f = [0] * 3 f[0] = nums[0] == 0 for i in range(1, n): if nums[i] == 0: f[0] = (2 * f[0] + 1) % mod elif nums[i] == 1: f[1] = (f[0] + 2 * f[1]) % mod else: f[2] = (f[1] + 2 * f[2]) % mod return f[2] ","description":"1955. Count Number of Special Subsequences","title":"1955. Count Number of Special Subsequences","uri":"/en/tracks/algorithms-101/leetcode/hard/1955/"},{"content":"LeetCode problem 1957\nclass Solution: def makeFancyString(self, s: str) -\u003e str: res = [] for c in s: if len(res) \u003e 1 and res[-1] == res[-2] == c: continue res.append(c) return ''.join(res) ","description":"1957. Delete Characters to Make Fancy String","title":"1957. Delete Characters to Make Fancy String","uri":"/en/tracks/algorithms-101/leetcode/easy/1957/"},{"content":"LeetCode problem 1958\nclass Solution: def checkMove( self, board: List[List[str]], rMove: int, cMove: int, color: str ) -\u003e bool: dirs = [(1, 0), (0, 1), (-1, 0), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)] n = 8 for a, b in dirs: i, j = rMove, cMove t = 0 while 0 \u003c= i + a \u003c n and 0 \u003c= j + b \u003c n: t += 1 i, j = i + a, j + b if board[i][j] in ['.', color]: break if board[i][j] == color and t \u003e 1: return True return False ","description":"1958. Check if Move is Legal","title":"1958. Check if Move is Legal","uri":"/en/tracks/algorithms-101/leetcode/medium/1958/"},{"content":"LeetCode problem 1959\nclass Solution: def minSpaceWastedKResizing(self, nums: List[int], k: int) -\u003e int: k += 1 n = len(nums) g = [[0] * n for _ in range(n)] for i in range(n): s = mx = 0 for j in range(i, n): s += nums[j] mx = max(mx, nums[j]) g[i][j] = mx * (j - i + 1) - s f = [[inf] * (k + 1) for _ in range(n + 1)] f[0][0] = 0 for i in range(1, n + 1): for j in range(1, k + 1): for h in range(i): f[i][j] = min(f[i][j], f[h][j - 1] + g[h][i - 1]) return f[-1][-1] ","description":"1959. Minimum Total Space Wasted With K Resizing Operations","title":"1959. Minimum Total Space Wasted With K Resizing Operations","uri":"/en/tracks/algorithms-101/leetcode/medium/1959/"},{"content":"LeetCode problem 1961\nclass Solution: def isPrefixString(self, s: str, words: List[str]) -\u003e bool: n, m = len(s), 0 for i, w in enumerate(words): m += len(w) if m == n: return \"\".join(words[: i + 1]) == s return False ","description":"1961. Check If String Is a Prefix of Array","title":"1961. Check If String Is a Prefix of Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1961/"},{"content":"LeetCode problem 1962\nclass Solution: def minStoneSum(self, piles: List[int], k: int) -\u003e int: pq = [-x for x in piles] heapify(pq) for _ in range(k): heapreplace(pq, pq[0] // 2) return -sum(pq) ","description":"1962. Remove Stones to Minimize the Total","title":"1962. Remove Stones to Minimize the Total","uri":"/en/tracks/algorithms-101/leetcode/medium/1962/"},{"content":"LeetCode problem 1963\nclass Solution: def minSwaps(self, s: str) -\u003e int: x = 0 for c in s: if c == \"[\": x += 1 elif x: x -= 1 return (x + 1) \u003e\u003e 1 ","description":"1963. Minimum Number of Swaps to Make the String Balanced","title":"1963. Minimum Number of Swaps to Make the String Balanced","uri":"/en/tracks/algorithms-101/leetcode/medium/1963/"},{"content":"LeetCode problem 1964\nclass BinaryIndexedTree: __slots__ = [\"n\", \"c\"] def __init__(self, n: int): self.n = n self.c = [0] * (n + 1) def update(self, x: int, v: int): while x \u003c= self.n: self.c[x] = max(self.c[x], v) x += x \u0026 -x def query(self, x: int) -\u003e int: s = 0 while x: s = max(s, self.c[x]) x -= x \u0026 -x return s class Solution: def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -\u003e List[int]: nums = sorted(set(obstacles)) n = len(nums) tree = BinaryIndexedTree(n) res = [] for x in obstacles: i = bisect_left(nums, x) + 1 res.append(tree.query(i) + 1) tree.update(i, res[-1]) return res ","description":"1964. Find the Longest Valid Obstacle Course at Each Position","title":"1964. Find the Longest Valid Obstacle Course at Each Position","uri":"/en/tracks/algorithms-101/leetcode/hard/1964/"},{"content":"LeetCode problem 1966\nclass Solution: def binarySearchableNumbers(self, nums: List[int]) -\u003e int: n = len(nums) ok = [1] * n mx, mi = -1000000, 1000000 for i, x in enumerate(nums): if x \u003c mx: ok[i] = 0 else: mx = x for i in range(n - 1, -1, -1): if nums[i] \u003e mi: ok[i] = 0 else: mi = nums[i] return sum(ok) ","description":"1966. Binary Searchable Numbers in an Unsorted Array","title":"1966. Binary Searchable Numbers in an Unsorted Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1966/"},{"content":"LeetCode problem 1967\nclass Solution: def numOfStrings(self, patterns: List[str], word: str) -\u003e int: return sum(p in word for p in patterns) ","description":"1967. Number of Strings That Appear as Substrings in Word","title":"1967. Number of Strings That Appear as Substrings in Word","uri":"/en/tracks/algorithms-101/leetcode/easy/1967/"},{"content":"LeetCode problem 1968\nclass Solution: def rearrangeArray(self, nums: List[int]) -\u003e List[int]: nums.sort() n = len(nums) m = (n + 1) \u003e\u003e 1 res = [] for i in range(m): res.append(nums[i]) if i + m \u003c n: res.append(nums[i + m]) return res ","description":"1968. Array With Elements Not Equal to Average of Neighbors","title":"1968. Array With Elements Not Equal to Average of Neighbors","uri":"/en/tracks/algorithms-101/leetcode/medium/1968/"},{"content":"LeetCode problem 1969\nclass Solution: def minNonZeroProduct(self, p: int) -\u003e int: mod = 10**9 + 7 return (2**p - 1) * pow(2**p - 2, 2 ** (p - 1) - 1, mod) % mod ","description":"1969. Minimum Non-Zero Product of the Array Elements","title":"1969. Minimum Non-Zero Product of the Array Elements","uri":"/en/tracks/algorithms-101/leetcode/medium/1969/"},{"content":"LeetCode problem 1970\nclass Solution: def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -\u003e int: n = row * col p = list(range(n + 2)) grid = [[False] * col for _ in range(row)] top, bottom = n, n + 1 def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] def check(i, j): return 0 \u003c= i \u003c row and 0 \u003c= j \u003c col and grid[i][j] for k in range(len(cells) - 1, -1, -1): i, j = cells[k][0] - 1, cells[k][1] - 1 grid[i][j] = True for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]: if check(i + x, j + y): p[find(i * col + j)] = find((i + x) * col + j + y) if i == 0: p[find(i * col + j)] = find(top) if i == row - 1: p[find(i * col + j)] = find(bottom) if find(top) == find(bottom): return k return 0 ","description":"1970. Last Day Where You Can Still Cross","title":"1970. Last Day Where You Can Still Cross","uri":"/en/tracks/algorithms-101/leetcode/hard/1970/"},{"content":"LeetCode problem 1971\nclass Solution: def validPath( self, n: int, edges: List[List[int]], source: int, destination: int ) -\u003e bool: def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] p = list(range(n)) for u, v in edges: p[find(u)] = find(v) return find(source) == find(destination) ","description":"1971. Find if Path Exists in Graph","title":"1971. Find if Path Exists in Graph","uri":"/en/tracks/algorithms-101/leetcode/easy/1971/"},{"content":"LeetCode problem 1973\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def equalToDescendants(self, root: Optional[TreeNode]) -\u003e int: def dfs(root): if root is None: return 0 l, r = dfs(root.left), dfs(root.right) if l + r == root.val: nonlocal res res += 1 return root.val + l + r res = 0 dfs(root) return res ","description":"1973. Count Nodes Equal to Sum of Descendants","title":"1973. Count Nodes Equal to Sum of Descendants","uri":"/en/tracks/algorithms-101/leetcode/medium/1973/"},{"content":"LeetCode problem 1974\nclass Solution: def minTimeToType(self, word: str) -\u003e int: res = prev = 0 for c in word: curr = ord(c) - ord('a') t = abs(prev - curr) t = min(t, 26 - t) res += t + 1 prev = curr return res ","description":"1974. Minimum Time to Type Word Using Special Typewriter","title":"1974. Minimum Time to Type Word Using Special Typewriter","uri":"/en/tracks/algorithms-101/leetcode/easy/1974/"},{"content":"LeetCode problem 1975\nclass Solution: def maxMatrixSum(self, matrix: List[List[int]]) -\u003e int: s = cnt = 0 mi = inf for row in matrix: for v in row: s += abs(v) mi = min(mi, abs(v)) if v \u003c 0: cnt += 1 if cnt % 2 == 0 or mi == 0: return s return s - mi * 2 ","description":"1975. Maximum Matrix Sum","title":"1975. Maximum Matrix Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1975/"},{"content":"LeetCode problem 1976\nclass Solution: def countPaths(self, n: int, roads: List[List[int]]) -\u003e int: INF = inf MOD = 10**9 + 7 g = [[INF] * n for _ in range(n)] for u, v, t in roads: g[u][v] = t g[v][u] = t g[0][0] = 0 dist = [INF] * n w = [0] * n dist[0] = 0 w[0] = 1 vis = [False] * n for _ in range(n): t = -1 for i in range(n): if not vis[i] and (t == -1 or dist[i] \u003c dist[t]): t = i vis[t] = True for i in range(n): if i == t: continue ne = dist[t] + g[t][i] if dist[i] \u003e ne: dist[i] = ne w[i] = w[t] elif dist[i] == ne: w[i] += w[t] return w[-1] % MOD ","description":"1976. Number of Ways to Arrive at Destination","title":"1976. Number of Ways to Arrive at Destination","uri":"/en/tracks/algorithms-101/leetcode/medium/1976/"},{"content":"LeetCode problem 1977\nclass Solution: def numberOfCombinations(self, num: str) -\u003e int: def cmp(i, j, k): x = lcp[i][j] return x \u003e= k or num[i + x] \u003e= num[j + x] mod = 10**9 + 7 n = len(num) lcp = [[0] * (n + 1) for _ in range(n + 1)] for i in range(n - 1, -1, -1): for j in range(n - 1, -1, -1): if num[i] == num[j]: lcp[i][j] = 1 + lcp[i + 1][j + 1] dp = [[0] * (n + 1) for _ in range(n + 1)] dp[0][0] = 1 for i in range(1, n + 1): for j in range(1, i + 1): v = 0 if num[i - j] != '0': if i - j - j \u003e= 0 and cmp(i - j, i - j - j, j): v = dp[i - j][j] else: v = dp[i - j][min(j - 1, i - j)] dp[i][j] = (dp[i][j - 1] + v) % mod return dp[n][n] ","description":"1977. Number of Ways to Separate Numbers","title":"1977. Number of Ways to Separate Numbers","uri":"/en/tracks/algorithms-101/leetcode/hard/1977/"},{"content":"LeetCode problem 1979\nclass Solution: def findGCD(self, nums: List[int]) -\u003e int: return gcd(max(nums), min(nums)) ","description":"1979. Find Greatest Common Divisor of Array","title":"1979. Find Greatest Common Divisor of Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1979/"},{"content":"LeetCode problem 1980\nclass Solution: def findDifferentBinaryString(self, nums: List[str]) -\u003e str: mask = 0 for x in nums: mask |= 1 \u003c\u003c x.count(\"1\") n = len(nums) for i in range(n + 1): if mask \u003e\u003e i \u0026 1 ^ 1: return \"1\" * i + \"0\" * (n - i) ","description":"1980. Find Unique Binary String","title":"1980. Find Unique Binary String","uri":"/en/tracks/algorithms-101/leetcode/medium/1980/"},{"content":"LeetCode problem 1981\nclass Solution: def minimizeTheDifference(self, mat: List[List[int]], target: int) -\u003e int: f = {0} for row in mat: f = set(a + b for a in f for b in row) return min(abs(v - target) for v in f) ","description":"1981. Minimize the Difference Between Target and Chosen Elements","title":"1981. Minimize the Difference Between Target and Chosen Elements","uri":"/en/tracks/algorithms-101/leetcode/medium/1981/"},{"content":"LeetCode problem 1982\nclass Solution: def recoverArray(self, n: int, sums: List[int]) -\u003e List[int]: sums.sort() res = [] for i in range(n, 0, -1): k = 1 \u003c\u003c i d = sums[k - 1] - sums[k - 2] cnt = Counter(sums[:k]) sums1, sums2 = [], [] sign = 1 for s in sums[:k]: if not cnt[s]: continue cnt[s] -= 1 cnt[s + d] -= 1 sums1.append(s) sums2.append(s + d) if s + d == 0: sign = -1 res.append(sign * d) sums = sums1 if sign == 1 else sums2 return res ","description":"1982. Find Array Given Subset Sums","title":"1982. Find Array Given Subset Sums","uri":"/en/tracks/algorithms-101/leetcode/hard/1982/"},{"content":"LeetCode problem 1983\nclass Solution: def widestPairOfIndices(self, nums1: List[int], nums2: List[int]) -\u003e int: d = {0: -1} res = s = 0 for i, (a, b) in enumerate(zip(nums1, nums2)): s += a - b if s in d: res = max(res, i - d[s]) else: d[s] = i return res ","description":"1983. Widest Pair of Indices With Equal Range Sum","title":"1983. Widest Pair of Indices With Equal Range Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/1983/"},{"content":"LeetCode problem 1984\nclass Solution: def minimumDifference(self, nums: List[int], k: int) -\u003e int: nums.sort() return min(nums[i + k - 1] - nums[i] for i in range(len(nums) - k + 1)) ","description":"1984. Minimum Difference Between Highest and Lowest of K Scores","title":"1984. Minimum Difference Between Highest and Lowest of K Scores","uri":"/en/tracks/algorithms-101/leetcode/easy/1984/"},{"content":"LeetCode problem 1985\nclass Solution: def kthLargestNumber(self, nums: List[str], k: int) -\u003e str: def cmp(a, b): if len(a) != len(b): return len(b) - len(a) return 1 if b \u003e a else -1 nums.sort(key=cmp_to_key(cmp)) return nums[k - 1] ","description":"1985. Find the Kth Largest Integer in the Array","title":"1985. Find the Kth Largest Integer in the Array","uri":"/en/tracks/algorithms-101/leetcode/medium/1985/"},{"content":"LeetCode problem 1986\nclass Solution: def minSessions(self, tasks: List[int], sessionTime: int) -\u003e int: n = len(tasks) ok = [False] * (1 \u003c\u003c n) for i in range(1, 1 \u003c\u003c n): t = sum(tasks[j] for j in range(n) if i \u003e\u003e j \u0026 1) ok[i] = t \u003c= sessionTime f = [inf] * (1 \u003c\u003c n) f[0] = 0 for i in range(1, 1 \u003c\u003c n): j = i while j: if ok[j]: f[i] = min(f[i], f[i ^ j] + 1) j = (j - 1) \u0026 i return f[-1] ","description":"1986. Minimum Number of Work Sessions to Finish the Tasks","title":"1986. Minimum Number of Work Sessions to Finish the Tasks","uri":"/en/tracks/algorithms-101/leetcode/medium/1986/"},{"content":"LeetCode problem 1987\nclass Solution: def numberOfUniqueGoodSubsequences(self, binary: str) -\u003e int: f = g = 0 res = 0 mod = 10**9 + 7 for c in binary: if c == \"0\": g = (g + f) % mod res = 1 else: f = (f + g + 1) % mod res = (res + f + g) % mod return res ","description":"1987. Number of Unique Good Subsequences","title":"1987. Number of Unique Good Subsequences","uri":"/en/tracks/algorithms-101/leetcode/hard/1987/"},{"content":"LeetCode problem 1989\nclass Solution: def catchMaximumAmountofPeople(self, team: List[int], dist: int) -\u003e int: res = j = 0 n = len(team) for i, x in enumerate(team): if x: while j \u003c n and (team[j] or i - j \u003e dist): j += 1 if j \u003c n and abs(i - j) \u003c= dist: res += 1 j += 1 return res ","description":"1989. Maximum Number of People That Can Be Caught in Tag","title":"1989. Maximum Number of People That Can Be Caught in Tag","uri":"/en/tracks/algorithms-101/leetcode/medium/1989/"},{"content":"LeetCode problem 1991\nclass Solution: def findMiddleIndex(self, nums: List[int]) -\u003e int: left, right = 0, sum(nums) for i, x in enumerate(nums): right -= x if left == right: return i left += x return -1 ","description":"1991. Find the Middle Index in Array","title":"1991. Find the Middle Index in Array","uri":"/en/tracks/algorithms-101/leetcode/easy/1991/"},{"content":"LeetCode problem 1992\nclass Solution: def findFarmland(self, land: List[List[int]]) -\u003e List[List[int]]: m, n = len(land), len(land[0]) res = [] for i in range(m): for j in range(n): if ( land[i][j] == 0 or (j \u003e 0 and land[i][j - 1] == 1) or (i \u003e 0 and land[i - 1][j] == 1) ): continue x, y = i, j while x + 1 \u003c m and land[x + 1][j] == 1: x += 1 while y + 1 \u003c n and land[x][y + 1] == 1: y += 1 res.append([i, j, x, y]) return res ","description":"1992. Find All Groups of Farmland","title":"1992. Find All Groups of Farmland","uri":"/en/tracks/algorithms-101/leetcode/medium/1992/"},{"content":"LeetCode problem 1993\nclass LockingTree: def __init__(self, parent: List[int]): n = len(parent) self.locked = [-1] * n self.parent = parent self.children = [[] for _ in range(n)] for son, fa in enumerate(parent[1:], 1): self.children[fa].append(son) def lock(self, num: int, user: int) -\u003e bool: if self.locked[num] == -1: self.locked[num] = user return True return False def unlock(self, num: int, user: int) -\u003e bool: if self.locked[num] == user: self.locked[num] = -1 return True return False def upgrade(self, num: int, user: int) -\u003e bool: def dfs(x: int): nonlocal find for y in self.children[x]: if self.locked[y] != -1: self.locked[y] = -1 find = True dfs(y) x = num while x != -1: if self.locked[x] != -1: return False x = self.parent[x] find = False dfs(num) if not find: return False self.locked[num] = user return True # Your LockingTree object will be instantiated and called as such: # obj = LockingTree(parent) # param_1 = obj.lock(num,user) # param_2 = obj.unlock(num,user) # param_3 = obj.upgrade(num,user) ","description":"1993. Operations on Tree","title":"1993. Operations on Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/1993/"},{"content":"LeetCode problem 1994\nclass Solution: def numberOfGoodSubsets(self, nums: List[int]) -\u003e int: primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] cnt = Counter(nums) mod = 10**9 + 7 n = len(primes) f = [0] * (1 \u003c\u003c n) f[0] = pow(2, cnt[1]) for x in range(2, 31): if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0: continue mask = 0 for i, p in enumerate(primes): if x % p == 0: mask |= 1 \u003c\u003c i for state in range((1 \u003c\u003c n) - 1, 0, -1): if state \u0026 mask == mask: f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod return sum(f[i] for i in range(1, 1 \u003c\u003c n)) % mod ","description":"1994. The Number of Good Subsets","title":"1994. The Number of Good Subsets","uri":"/en/tracks/algorithms-101/leetcode/hard/1994/"},{"content":"LeetCode problem 1995\nclass Solution: def countQuadruplets(self, nums: List[int]) -\u003e int: res, n = 0, len(nums) counter = Counter() for b in range(n - 3, 0, -1): c = b + 1 for d in range(c + 1, n): counter[nums[d] - nums[c]] += 1 for a in range(b): res += counter[nums[a] + nums[b]] return res ","description":"1995. Count Special Quadruplets","title":"1995. Count Special Quadruplets","uri":"/en/tracks/algorithms-101/leetcode/easy/1995/"},{"content":"LeetCode problem 1996\nclass Solution: def numberOfWeakCharacters(self, properties: List[List[int]]) -\u003e int: properties.sort(key=lambda x: (-x[0], x[1])) res = mx = 0 for _, x in properties: res += x \u003c mx mx = max(mx, x) return res ","description":"1996. The Number of Weak Characters in the Game","title":"1996. The Number of Weak Characters in the Game","uri":"/en/tracks/algorithms-101/leetcode/medium/1996/"},{"content":"LeetCode problem 1997\nclass Solution: def firstDayBeenInAllRooms(self, nextVisit: List[int]) -\u003e int: n = len(nextVisit) f = [0] * n mod = 10**9 + 7 for i in range(1, n): f[i] = (f[i - 1] + 1 + f[i - 1] - f[nextVisit[i - 1]] + 1) % mod return f[-1] ","description":"1997. First Day Where You Have Been in All the Rooms","title":"1997. First Day Where You Have Been in All the Rooms","uri":"/en/tracks/algorithms-101/leetcode/medium/1997/"},{"content":"LeetCode problem 1998\nclass Solution: def gcdSort(self, nums: List[int]) -\u003e bool: n = 10**5 + 10 p = list(range(n)) f = defaultdict(list) mx = max(nums) for i in range(2, mx + 1): if f[i]: continue for j in range(i, mx + 1, i): f[j].append(i) def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] for i in nums: for j in f[i]: p[find(i)] = find(j) s = sorted(nums) for i, num in enumerate(nums): if s[i] != num and find(num) != find(s[i]): return False return True ","description":"1998. GCD Sort of an Array","title":"1998. GCD Sort of an Array","uri":"/en/tracks/algorithms-101/leetcode/hard/1998/"},{"content":"LeetCode problem 1999\nclass Solution: def findInteger(self, k: int, digit1: int, digit2: int) -\u003e int: if digit1 == 0 and digit2 == 0: return -1 if digit1 \u003e digit2: return self.findInteger(k, digit2, digit1) q = deque([0]) while 1: x = q.popleft() if x \u003e 2**31 - 1: return -1 if x \u003e k and x % k == 0: return x q.append(x * 10 + digit1) if digit1 != digit2: q.append(x * 10 + digit2) ","description":"1999. Smallest Greater Multiple Made of Two Digits","title":"1999. Smallest Greater Multiple Made of Two Digits","uri":"/en/tracks/algorithms-101/leetcode/medium/1999/"},{"content":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample 1:\nInput: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807. First accepted Idea:\nLoop through lists add each value to the list reverse list calculate sum create linked list from reversed sum class Solution: def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -\u003e Optional[ListNode]: def createLinkedNode(values): head = ListNode(values[0]) current = head for i in values[1:]: node = ListNode(i) current.next = node current = current.next return head res = None vals_l1 = [] cur = l1 while cur: vals_l1.append(cur.val) cur = cur.next vals_l2 = [] cur = l2 while cur: vals_l2.append(cur.val) cur = cur.next s_l1 = '' for i in reversed(vals_l1): s_l1 += str(i) s_l2 = '' for i in reversed(vals_l2): s_l2 += str(i) ll_sum = int(s_l1) + int(s_l2) values = [] for val in reversed(str(ll_sum)): values.append(int(val)) res = createLinkedNode(values) return res Better solution Idea:\nJust like how you would sum two numbers on a piece of paper.\nclass Solution: def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -\u003e Optional[ListNode]: dummyHead = ListNode(0) curr = dummyHead carry = 0 while l1 != None or l2 != None or carry != 0: l1Val = l1.val if l1 else 0 l2Val = l2.val if l2 else 0 columnSum = l1Val + l2Val + carry carry = columnSum // 10 newNode = ListNode(columnSum % 10) curr.next = newNode curr = newNode l1 = l1.next if l1 else None l2 = l2.next if l2 else None return dummyHead.next ","description":"LeetCode 2. Add Two Numbers","title":"2. Add Two Numbers","uri":"/en/tracks/algorithms-101/leetcode/medium/2/"},{"content":"LeetCode problem\nGiven a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type. Example 1:\nInput: s = \"()[]{}\" Output: true Example 2:\nInput: s = \"()[]{}\" Output: true First accepted Idea:\nLoop through string If current “closes” the last in stack, then remove last from stack Else: add current to stack class Solution: def isValid(self, s: str) -\u003e bool: stack = [] par_dict = {'(': ')', '{': '}', '[': ']'} last_value = None for i in s: second_value = par_dict.get(last_value, None) if i == second_value: stack.pop() last_value = stack[-1] if stack else None else: stack.append(i) last_value = i return not stack Better solution class Solution: def isValid(self, s: str) -\u003e bool: par_dict = {'(': ')', '{': '}', '[': ']'} stack = [] for char in s: if char in par_dict: # If it's an opening bracket, add it to the stack stack.append(char) elif stack: # If there's something in the stack if char == par_dict[stack[-1]]: # If it's a closing bracket for the last opened bracket, remove it from the stack. stack.pop() else: # It's not a closing bracket for the last opened bracket. Invalid string. return False else: # Not an opening bracket or closing bracket. Invalid string. return False return stack == [] ","description":"LeetCode 20. Valid Parentheses solution","title":"20. Valid Parentheses","uri":"/en/tracks/algorithms-101/leetcode/easy/20/"},{"content":"LeetCode problem 2000\nclass Solution: def reversePrefix(self, word: str, ch: str) -\u003e str: i = word.find(ch) return word if i == -1 else word[i::-1] + word[i + 1 :] ","description":"2000. Reverse Prefix of Word","title":"2000. Reverse Prefix of Word","uri":"/en/tracks/algorithms-101/leetcode/easy/2000/"},{"content":"LeetCode problem 2001\nclass Solution: def interchangeableRectangles(self, rectangles: List[List[int]]) -\u003e int: res = 0 cnt = Counter() for w, h in rectangles: g = gcd(w, h) w, h = w // g, h // g res += cnt[(w, h)] cnt[(w, h)] += 1 return res ","description":"2001. Number of Pairs of Interchangeable Rectangles","title":"2001. Number of Pairs of Interchangeable Rectangles","uri":"/en/tracks/algorithms-101/leetcode/medium/2001/"},{"content":"LeetCode problem 2002\nclass Solution: def maxProduct(self, s: str) -\u003e int: n = len(s) p = [True] * (1 \u003c\u003c n) for k in range(1, 1 \u003c\u003c n): i, j = 0, n - 1 while i \u003c j: while i \u003c j and (k \u003e\u003e i \u0026 1) == 0: i += 1 while i \u003c j and (k \u003e\u003e j \u0026 1) == 0: j -= 1 if i \u003c j and s[i] != s[j]: p[k] = False break i, j = i + 1, j - 1 res = 0 for i in range(1, 1 \u003c\u003c n): if p[i]: mx = ((1 \u003c\u003c n) - 1) ^ i j = mx a = i.bit_count() while j: if p[j]: b = j.bit_count() res = max(res, a * b) j = (j - 1) \u0026 mx return res ","description":"2002. Maximum Product of the Length of Two Palindromic Subsequences","title":"2002. Maximum Product of the Length of Two Palindromic Subsequences","uri":"/en/tracks/algorithms-101/leetcode/medium/2002/"},{"content":"LeetCode problem 2003\nclass Solution: def smallestMissingValueSubtree( self, parents: List[int], nums: List[int] ) -\u003e List[int]: def dfs(i: int): if vis[i]: return vis[i] = True if nums[i] \u003c len(has): has[nums[i]] = True for j in g[i]: dfs(j) n = len(nums) res = [1] * n g = [[] for _ in range(n)] idx = -1 for i, p in enumerate(parents): if i: g[p].append(i) if nums[i] == 1: idx = i if idx == -1: return res vis = [False] * n has = [False] * (n + 2) i = 2 while idx != -1: dfs(idx) while has[i]: i += 1 res[idx] = i idx = parents[idx] return res ","description":"2003. Smallest Missing Genetic Value in Each Subtree","title":"2003. Smallest Missing Genetic Value in Each Subtree","uri":"/en/tracks/algorithms-101/leetcode/hard/2003/"},{"content":"LeetCode problem 2006\nclass Solution: def countKDifference(self, nums: List[int], k: int) -\u003e int: res = 0 cnt = Counter() for num in nums: res += cnt[num - k] + cnt[num + k] cnt[num] += 1 return res ","description":"2006. Count Number of Pairs With Absolute Difference K","title":"2006. Count Number of Pairs With Absolute Difference K","uri":"/en/tracks/algorithms-101/leetcode/easy/2006/"},{"content":"LeetCode problem 2007\nclass Solution: def findOriginalArray(self, changed: List[int]) -\u003e List[int]: n = len(changed) if n \u0026 1: return [] cnt = Counter(changed) changed.sort() res = [] for x in changed: if cnt[x] == 0: continue if cnt[x * 2] \u003c= 0: return [] res.append(x) cnt[x] -= 1 cnt[x * 2] -= 1 return res if len(res) == n // 2 else [] ","description":"2007. Find Original Array From Doubled Array","title":"2007. Find Original Array From Doubled Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2007/"},{"content":"LeetCode problem 2008\nclass Solution: def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -\u003e int: rides.sort(key=lambda x: x[1]) f = [0] * (len(rides) + 1) for i, (st, ed, tip) in enumerate(rides, 1): j = bisect_left(rides, st + 1, hi=i, key=lambda x: x[1]) f[i] = max(f[i - 1], f[j] + ed - st + tip) return f[-1] ","description":"2008. Maximum Earnings From Taxi","title":"2008. Maximum Earnings From Taxi","uri":"/en/tracks/algorithms-101/leetcode/medium/2008/"},{"content":"LeetCode problem 2009\nclass Solution: def minOperations(self, nums: List[int]) -\u003e int: n = len(nums) nums = sorted(set(nums)) res, j = n, 0 for i, v in enumerate(nums): while j \u003c len(nums) and nums[j] - v \u003c= n - 1: j += 1 res = min(res, n - (j - i)) return res ","description":"2009. Minimum Number of Operations to Make Array Continuous","title":"2009. Minimum Number of Operations to Make Array Continuous","uri":"/en/tracks/algorithms-101/leetcode/hard/2009/"},{"content":"LeetCode problem 2011\nclass Solution: def finalValueAfterOperations(self, operations: List[str]) -\u003e int: return sum(1 if s[1] == '+' else -1 for s in operations) ","description":"2011. Final Value of Variable After Performing Operations","title":"2011. Final Value of Variable After Performing Operations","uri":"/en/tracks/algorithms-101/leetcode/easy/2011/"},{"content":"LeetCode problem 2012\nclass Solution: def sumOfBeauties(self, nums: List[int]) -\u003e int: n = len(nums) right = [nums[-1]] * n for i in range(n - 2, -1, -1): right[i] = min(right[i + 1], nums[i]) res = 0 l = nums[0] for i in range(1, n - 1): r = right[i + 1] if l \u003c nums[i] \u003c r: res += 2 elif nums[i - 1] \u003c nums[i] \u003c nums[i + 1]: res += 1 l = max(l, nums[i]) return res ","description":"2012. Sum of Beauty in the Array","title":"2012. Sum of Beauty in the Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2012/"},{"content":"LeetCode problem 2013\nclass DetectSquares: def __init__(self): self.cnt = defaultdict(Counter) def add(self, point: List[int]) -\u003e None: x, y = point self.cnt[x][y] += 1 def count(self, point: List[int]) -\u003e int: x1, y1 = point if x1 not in self.cnt: return 0 res = 0 for x2 in self.cnt.keys(): if x2 != x1: d = x2 - x1 res += self.cnt[x2][y1] * self.cnt[x1][y1 + d] * self.cnt[x2][y1 + d] res += self.cnt[x2][y1] * self.cnt[x1][y1 - d] * self.cnt[x2][y1 - d] return res # Your DetectSquares object will be instantiated and called as such: # obj = DetectSquares() # obj.add(point) # param_2 = obj.count(point) ","description":"2013. Detect Squares","title":"2013. Detect Squares","uri":"/en/tracks/algorithms-101/leetcode/medium/2013/"},{"content":"LeetCode problem 2015\nclass Solution: def averageHeightOfBuildings(self, buildings: List[List[int]]) -\u003e List[List[int]]: height = defaultdict(int) cnt = defaultdict(int) for s, e, h in buildings: cnt[s] += 1 cnt[e] -= 1 height[s] += h height[e] -= h res = [] i = h = n = 0 for j in sorted(cnt.keys()): if n: t = [i, j, h // n] if res and res[-1][1] == i and res[-1][2] == t[-1]: res[-1][1] = j else: res.append(t) i = j h += height[j] n += cnt[j] return res ","description":"2015. Average Height of Buildings in Each Segment","title":"2015. Average Height of Buildings in Each Segment","uri":"/en/tracks/algorithms-101/leetcode/medium/2015/"},{"content":"LeetCode problem 2016\nclass Solution: def maximumDifference(self, nums: List[int]) -\u003e int: mi = inf res = -1 for x in nums: if x \u003e mi: res = max(res, x - mi) else: mi = x return res ","description":"2016. Maximum Difference Between Increasing Elements","title":"2016. Maximum Difference Between Increasing Elements","uri":"/en/tracks/algorithms-101/leetcode/easy/2016/"},{"content":"LeetCode problem 2017\nclass Solution: def gridGame(self, grid: List[List[int]]) -\u003e int: res = inf s1, s2 = sum(grid[0]), 0 for j, v in enumerate(grid[0]): s1 -= v res = min(res, max(s1, s2)) s2 += grid[1][j] return res ","description":"2017. Grid Game","title":"2017. Grid Game","uri":"/en/tracks/algorithms-101/leetcode/medium/2017/"},{"content":"LeetCode problem 2018\nclass Solution: def placeWordInCrossword(self, board: List[List[str]], word: str) -\u003e bool: def check(i, j, a, b): x, y = i + a * k, j + b * k if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and board[x][y] != '#': return False for c in word: if ( i \u003c 0 or i \u003e= m or j \u003c 0 or j \u003e= n or (board[i][j] != ' ' and board[i][j] != c) ): return False i, j = i + a, j + b return True m, n = len(board), len(board[0]) k = len(word) for i in range(m): for j in range(n): left_to_right = (j == 0 or board[i][j - 1] == '#') and check(i, j, 0, 1) right_to_left = (j == n - 1 or board[i][j + 1] == '#') and check( i, j, 0, -1 ) up_to_down = (i == 0 or board[i - 1][j] == '#') and check(i, j, 1, 0) down_to_up = (i == m - 1 or board[i + 1][j] == '#') and check( i, j, -1, 0 ) if left_to_right or right_to_left or up_to_down or down_to_up: return True return False ","description":"2018. Check if Word Can Be Placed In Crossword","title":"2018. Check if Word Can Be Placed In Crossword","uri":"/en/tracks/algorithms-101/leetcode/medium/2018/"},{"content":"LeetCode problem 2019\nclass Solution: def scoreOfStudents(self, s: str, answers: List[int]) -\u003e int: def cal(s: str) -\u003e int: res, pre = 0, int(s[0]) for i in range(1, n, 2): if s[i] == \"*\": pre *= int(s[i + 1]) else: res += pre pre = int(s[i + 1]) res += pre return res n = len(s) x = cal(s) m = (n + 1) \u003e\u003e 1 f = [[set() for _ in range(m)] for _ in range(m)] for i in range(m): f[i][i] = {int(s[i \u003c\u003c 1])} for i in range(m - 1, -1, -1): for j in range(i, m): for k in range(i, j): for l in f[i][k]: for r in f[k + 1][j]: if s[k \u003c\u003c 1 | 1] == \"+\" and l + r \u003c= 1000: f[i][j].add(l + r) elif s[k \u003c\u003c 1 | 1] == \"*\" and l * r \u003c= 1000: f[i][j].add(l * r) cnt = Counter(answers) res = cnt[x] * 5 for k, v in cnt.items(): if k != x and k in f[0][m - 1]: res += v \u003c\u003c 1 return res ","description":"2019. The Score of Students Solving Math Expression","title":"2019. The Score of Students Solving Math Expression","uri":"/en/tracks/algorithms-101/leetcode/hard/2019/"},{"content":"LeetCode problem\nProblem Statement In this problem, we are given a number n. We have to determine whether this number is a “happy” number or not. A happy number is a number defined by the following process:\nStarting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Naive Solution A naive solution would be to follow the process as stated in the problem description and use a data structure such as a set to check for repetitions indicating a cycle. If during the process, the number becomes 1, we can conclude that the number is happy. However, if we encounter a number that was already visited, it means we are stuck in a cycle, and the number is not happy.\nWe calculate the sum of squares of the digits of n in each iteration, and check if this sum is 1 or a number we’ve seen before. If it’s 1, we return true. If it’s a number we’ve seen before, we return false, as this means we’re in an endless loop. Hints \u0026 Tips However, continuously checking if a number was already visited can be costly in terms of time complexity. A more efficient way to detect cycles is to use the Floyd Cycle detection algorithm (also known as the “Tortoise and the Hare” algorithm).\nThis algorithm allows us to detect a cycle in the sequence without having to store all previously seen numbers, making it more efficient in terms of space usage.\nApproach Floyd Cycle detection algorithm works by moving two pointers at different speeds - a slow pointer (tortoise) and a fast pointer (hare). If there is a cycle, the fast pointer will eventually meet the slow pointer again.\nSteps Initialize two pointers slow and fast as n. Replace slow with the sum of the squares of its digits, and fast with the sum of squares of the next number in the sequence. If fast becomes 1, return True. - n is a happy number. If slow meets fast and the number is not 1, return False. - n is not a happy number as we have detected a cycle. Solution def isHappy(n): def get_next(num): # get the next number in the sequence total_sum = 0 while num \u003e 0: # get the last digit of the number and the remaining part num, digit = divmod(num, 10) total_sum += digit ** 2 return total_sum slow = n fast = get_next(n) visited = set() while fast != 1 and slow != fast: slow = get_next(slow) fast = get_next(get_next(fast)) visited.add(slow) if fast in visited: break return fast == 1 In this solution, the function get_next(n) is used to get the next number in the sequence by replacing n with the sum of the squares of its digits.\nWe initialize slow and fast to n and get_next(n) respectively.\nThen, until fast equals 1 or slow catches up to fast, we continue moving slow one step at a time and fast two steps at a time. If fast equals 1 at the end of the loop, n is a happy number.\n","description":"Learn how to determine if a number is happy using Python.","title":"202. Happy Number","uri":"/en/tracks/algorithms-101/leetcode/easy/202/"},{"content":"LeetCode problem 2021\nclass Solution: def brightestPosition(self, lights: List[List[int]]) -\u003e int: d = defaultdict(int) for i, j in lights: l, r = i - j, i + j d[l] += 1 d[r + 1] -= 1 res = s = mx = 0 for k in sorted(d): s += d[k] if mx \u003c s: mx = s res = k return res ","description":"2021. Brightest Position on Street","title":"2021. Brightest Position on Street","uri":"/en/tracks/algorithms-101/leetcode/medium/2021/"},{"content":"LeetCode problem 2023\nclass Solution: def numOfPairs(self, nums: List[str], target: str) -\u003e int: cnt = Counter(nums) res = 0 for i in range(1, len(target)): a, b = target[:i], target[i:] if a != b: res += cnt[a] * cnt[b] else: res += cnt[a] * (cnt[a] - 1) return res ","description":"2023. Number of Pairs of Strings With Concatenation Equal to Target","title":"2023. Number of Pairs of Strings With Concatenation Equal to Target","uri":"/en/tracks/algorithms-101/leetcode/medium/2023/"},{"content":"LeetCode problem 2024\nclass Solution: def maxConsecutiveAnswers(self, answerKey: str, k: int) -\u003e int: def get(c, k): l = r = -1 while r \u003c len(answerKey) - 1: r += 1 if answerKey[r] == c: k -= 1 if k \u003c 0: l += 1 if answerKey[l] == c: k += 1 return r - l return max(get('T', k), get('F', k)) ","description":"2024. Maximize the Confusion of an Exam","title":"2024. Maximize the Confusion of an Exam","uri":"/en/tracks/algorithms-101/leetcode/medium/2024/"},{"content":"LeetCode problem 2025\nclass Solution: def waysToPartition(self, nums: List[int], k: int) -\u003e int: n = len(nums) s = [nums[0]] * n right = defaultdict(int) for i in range(1, n): s[i] = s[i - 1] + nums[i] right[s[i - 1]] += 1 res = 0 if s[-1] % 2 == 0: res = right[s[-1] // 2] left = defaultdict(int) for v, x in zip(s, nums): d = k - x if (s[-1] + d) % 2 == 0: t = left[(s[-1] + d) // 2] + right[(s[-1] - d) // 2] if res \u003c t: res = t left[v] += 1 right[v] -= 1 return res ","description":"2025. Maximum Number of Ways to Partition an Array","title":"2025. Maximum Number of Ways to Partition an Array","uri":"/en/tracks/algorithms-101/leetcode/hard/2025/"},{"content":"LeetCode problem 2027\nclass Solution: def minimumMoves(self, s: str) -\u003e int: res = i = 0 while i \u003c len(s): if s[i] == \"X\": res += 1 i += 3 else: i += 1 return res ","description":"2027. Minimum Moves to Convert String","title":"2027. Minimum Moves to Convert String","uri":"/en/tracks/algorithms-101/leetcode/easy/2027/"},{"content":"LeetCode problem 2028\nclass Solution: def missingRolls(self, rolls: List[int], mean: int, n: int) -\u003e List[int]: m = len(rolls) s = (n + m) * mean - sum(rolls) if s \u003e n * 6 or s \u003c n: return [] res = [s // n] * n for i in range(s % n): res[i] += 1 return res ","description":"2028. Find Missing Observations","title":"2028. Find Missing Observations","uri":"/en/tracks/algorithms-101/leetcode/medium/2028/"},{"content":"LeetCode problem 2029\nclass Solution: def stoneGameIX(self, stones: List[int]) -\u003e bool: def check(c): if c[1] == 0: return False c[1] -= 1 turn = 1 + min(c[1], c[2]) * 2 + c[0] if c[1] \u003e c[2]: turn += 1 c[1] -= 1 return turn % 2 == 1 and c[1] != c[2] c = [0] * 3 for s in stones: c[s % 3] += 1 c1 = [c[0], c[2], c[1]] return check(c) or check(c1) ","description":"2029. Stone Game IX","title":"2029. Stone Game IX","uri":"/en/tracks/algorithms-101/leetcode/medium/2029/"},{"content":"LeetCode problem 2031\nfrom sortedcontainers import SortedList class Solution: def subarraysWithMoreZerosThanOnes(self, nums: List[int]) -\u003e int: sl = SortedList([0]) mod = 10**9 + 7 res = s = 0 for x in nums: s += x or -1 res += sl.bisect_left(s) res %= mod sl.add(s) return res ","description":"2031. Count Subarrays With More Ones Than Zeros","title":"2031. Count Subarrays With More Ones Than Zeros","uri":"/en/tracks/algorithms-101/leetcode/medium/2031/"},{"content":"LeetCode problem 2032\nclass Solution: def twoOutOfThree( self, nums1: List[int], nums2: List[int], nums3: List[int] ) -\u003e List[int]: s1, s2, s3 = set(nums1), set(nums2), set(nums3) return [i for i in range(1, 101) if (i in s1) + (i in s2) + (i in s3) \u003e 1] ","description":"2032. Two Out of Three","title":"2032. Two Out of Three","uri":"/en/tracks/algorithms-101/leetcode/easy/2032/"},{"content":"LeetCode problem 2033\nclass Solution: def minOperations(self, grid: List[List[int]], x: int) -\u003e int: nums = [] mod = grid[0][0] % x for row in grid: for v in row: if v % x != mod: return -1 nums.append(v) nums.sort() mid = nums[len(nums) \u003e\u003e 1] return sum(abs(v - mid) // x for v in nums) ","description":"2033. Minimum Operations to Make a Uni-Value Grid","title":"2033. Minimum Operations to Make a Uni-Value Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/2033/"},{"content":"LeetCode problem 2034\nfrom sortedcontainers import SortedList class StockPrice: def __init__(self): self.d = {} self.ls = SortedList() self.last = 0 def update(self, timestamp: int, price: int) -\u003e None: if timestamp in self.d: self.ls.remove(self.d[timestamp]) self.d[timestamp] = price self.ls.add(price) self.last = max(self.last, timestamp) def current(self) -\u003e int: return self.d[self.last] def maximum(self) -\u003e int: return self.ls[-1] def minimum(self) -\u003e int: return self.ls[0] # Your StockPrice object will be instantiated and called as such: # obj = StockPrice() # obj.update(timestamp,price) # param_2 = obj.current() # param_3 = obj.maximum() # param_4 = obj.minimum() ","description":"2034. Stock Price Fluctuation","title":"2034. Stock Price Fluctuation","uri":"/en/tracks/algorithms-101/leetcode/medium/2034/"},{"content":"LeetCode problem 2035\nclass Solution: def minimumDifference(self, nums: List[int]) -\u003e int: n = len(nums) \u003e\u003e 1 f = defaultdict(set) g = defaultdict(set) for i in range(1 \u003c\u003c n): s = cnt = 0 s1 = cnt1 = 0 for j in range(n): if (i \u0026 (1 \u003c\u003c j)) != 0: s += nums[j] cnt += 1 s1 += nums[n + j] cnt1 += 1 else: s -= nums[j] s1 -= nums[n + j] f[cnt].add(s) g[cnt1].add(s1) res = inf for i in range(n + 1): fi, gi = sorted(list(f[i])), sorted(list(g[n - i])) # min(abs(f[i] + g[n - i])) for a in fi: left, right = 0, len(gi) - 1 b = -a while left \u003c right: mid = (left + right) \u003e\u003e 1 if gi[mid] \u003e= b: right = mid else: left = mid + 1 res = min(res, abs(a + gi[left])) if left \u003e 0: res = min(res, abs(a + gi[left - 1])) return res ","description":"2035. Partition Array Into Two Arrays to Minimize Sum Difference","title":"2035. Partition Array Into Two Arrays to Minimize Sum Difference","uri":"/en/tracks/algorithms-101/leetcode/hard/2035/"},{"content":"LeetCode problem 2036\nclass Solution: def maximumAlternatingSubarraySum(self, nums: List[int]) -\u003e int: res = f = g = -inf for x in nums: f, g = max(g, 0) + x, f - x res = max(res, f, g) return res ","description":"2036. Maximum Alternating Subarray Sum","title":"2036. Maximum Alternating Subarray Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/2036/"},{"content":"LeetCode problem 2037\nclass Solution: def minMovesToSeat(self, seats: List[int], students: List[int]) -\u003e int: seats.sort() students.sort() return sum(abs(a - b) for a, b in zip(seats, students)) ","description":"2037. Minimum Number of Moves to Seat Everyone","title":"2037. Minimum Number of Moves to Seat Everyone","uri":"/en/tracks/algorithms-101/leetcode/easy/2037/"},{"content":"LeetCode problem 2038\nclass Solution: def winnerOfGame(self, colors: str) -\u003e bool: a = b = 0 for c, v in groupby(colors): m = len(list(v)) - 2 if m \u003e 0 and c == 'A': a += m elif m \u003e 0 and c == 'B': b += m return a \u003e b ","description":"2038. Remove Colored Pieces if Both Neighbors are the Same Color","title":"2038. Remove Colored Pieces if Both Neighbors are the Same Color","uri":"/en/tracks/algorithms-101/leetcode/medium/2038/"},{"content":"LeetCode problem 2039\nclass Solution: def networkBecomesIdle(self, edges: List[List[int]], patience: List[int]) -\u003e int: g = defaultdict(list) for u, v in edges: g[u].append(v) g[v].append(u) q = deque([0]) vis = {0} res = d = 0 while q: d += 1 t = d * 2 for _ in range(len(q)): u = q.popleft() for v in g[u]: if v not in vis: vis.add(v) q.append(v) res = max(res, (t - 1) // patience[v] * patience[v] + t + 1) return res ","description":"2039. The Time When the Network Becomes Idle","title":"2039. The Time When the Network Becomes Idle","uri":"/en/tracks/algorithms-101/leetcode/medium/2039/"},{"content":"LeetCode problem 2042\nclass Solution: def areNumbersAscending(self, s: str) -\u003e bool: pre = i = 0 n = len(s) while i \u003c n: if s[i].isdigit(): cur = 0 while i \u003c n and s[i].isdigit(): cur = cur * 10 + int(s[i]) i += 1 if pre \u003e= cur: return False pre = cur else: i += 1 return True ","description":"2042. Check if Numbers Are Ascending in a Sentence","title":"2042. Check if Numbers Are Ascending in a Sentence","uri":"/en/tracks/algorithms-101/leetcode/easy/2042/"},{"content":"LeetCode problem 2043\nclass Bank: def __init__(self, balance: List[int]): self.balance = balance self.n = len(balance) def transfer(self, account1: int, account2: int, money: int) -\u003e bool: if account1 \u003e self.n or account2 \u003e self.n or self.balance[account1 - 1] \u003c money: return False self.balance[account1 - 1] -= money self.balance[account2 - 1] += money return True def deposit(self, account: int, money: int) -\u003e bool: if account \u003e self.n: return False self.balance[account - 1] += money return True def withdraw(self, account: int, money: int) -\u003e bool: if account \u003e self.n or self.balance[account - 1] \u003c money: return False self.balance[account - 1] -= money return True # Your Bank object will be instantiated and called as such: # obj = Bank(balance) # param_1 = obj.transfer(account1,account2,money) # param_2 = obj.deposit(account,money) # param_3 = obj.withdraw(account,money) ","description":"2043. Simple Bank System","title":"2043. Simple Bank System","uri":"/en/tracks/algorithms-101/leetcode/medium/2043/"},{"content":"LeetCode problem 2044\nclass Solution: def countMaxOrSubsets(self, nums: List[int]) -\u003e int: n = len(nums) res = 0 mx = 0 for mask in range(1 \u003c\u003c n): t = 0 for i, v in enumerate(nums): if (mask \u003e\u003e i) \u0026 1: t |= v if mx \u003c t: mx = t res = 1 elif mx == t: res += 1 return res ","description":"2044. Count Number of Maximum Bitwise-OR Subsets","title":"2044. Count Number of Maximum Bitwise-OR Subsets","uri":"/en/tracks/algorithms-101/leetcode/medium/2044/"},{"content":"LeetCode problem 2045\nclass Solution: def secondMinimum( self, n: int, edges: List[List[int]], time: int, change: int ) -\u003e int: g = defaultdict(set) for u, v in edges: g[u].add(v) g[v].add(u) q = deque([(1, 0)]) dist = [[inf] * 2 for _ in range(n + 1)] dist[1][1] = 0 while q: u, d = q.popleft() for v in g[u]: if d + 1 \u003c dist[v][0]: dist[v][0] = d + 1 q.append((v, d + 1)) elif dist[v][0] \u003c d + 1 \u003c dist[v][1]: dist[v][1] = d + 1 if v == n: break q.append((v, d + 1)) res = 0 for i in range(dist[n][1]): res += time if i \u003c dist[n][1] - 1 and (res // change) % 2 == 1: res = (res + change) // change * change return res ","description":"2045. Second Minimum Time to Reach Destination","title":"2045. Second Minimum Time to Reach Destination","uri":"/en/tracks/algorithms-101/leetcode/hard/2045/"},{"content":"LeetCode problem 2046\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def sortLinkedList(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: prev, curr = head, head.next while curr: if curr.val \u003c 0: t = curr.next prev.next = t curr.next = head head = curr curr = t else: prev, curr = curr, curr.next return head ","description":"2046. Sort Linked List Already Sorted Using Absolute Values","title":"2046. Sort Linked List Already Sorted Using Absolute Values","uri":"/en/tracks/algorithms-101/leetcode/medium/2046/"},{"content":"LeetCode problem 2047\nclass Solution: def countValidWords(self, sentence: str) -\u003e int: def check(token): hyphen = False for i, c in enumerate(token): if c.isdigit() or (c in '!.,' and i \u003c len(token) - 1): return False if c == '-': if ( hyphen or i == 0 or i == len(token) - 1 or not token[i - 1].islower() or not token[i + 1].islower() ): return False hyphen = True return True return sum(check(token) for token in sentence.split()) ","description":"2047. Number of Valid Words in a Sentence","title":"2047. Number of Valid Words in a Sentence","uri":"/en/tracks/algorithms-101/leetcode/easy/2047/"},{"content":"LeetCode problem 2048\nclass Solution: def nextBeautifulNumber(self, n: int) -\u003e int: for x in count(n + 1): y = x cnt = [0] * 10 while y: y, v = divmod(y, 10) cnt[v] += 1 if all(v == 0 or i == v for i, v in enumerate(cnt)): return x ","description":"2048. Next Greater Numerically Balanced Number","title":"2048. Next Greater Numerically Balanced Number","uri":"/en/tracks/algorithms-101/leetcode/medium/2048/"},{"content":"LeetCode problem 2049\nclass Solution: def countHighestScoreNodes(self, parents: List[int]) -\u003e int: def dfs(i: int, fa: int): cnt = score = 1 for j in g[i]: if j != fa: t = dfs(j, i) score *= t cnt += t if n - cnt: score *= n - cnt nonlocal res, mx if mx \u003c score: mx = score res = 1 elif mx == score: res += 1 return cnt n = len(parents) g = [[] for _ in range(n)] for i in range(1, n): g[parents[i]].append(i) res = mx = 0 dfs(0, -1) return res ","description":"2049. Count Nodes With the Highest Score","title":"2049. Count Nodes With the Highest Score","uri":"/en/tracks/algorithms-101/leetcode/medium/2049/"},{"content":"LeetCode problem 205\nUse two dictionaries to track the mappings from s to t and from t to s. This helps in ensuring no two characters map to the same character.\nKey Idea: To verify if two strings are isomorphic, we need to ensure that each character in s maps to a unique character in t, and vice versa. This bi-directional mapping is crucial to maintain the isomorphism property. Data Structures: Two hash maps (or dictionaries in Python) are ideal for maintaining these mappings efficiently. Approach Initial Checks: If the lengths of s and t are different, they cannot be isomorphic. Return false immediately. Create Two Mappings: Initialize two dictionaries. One for mapping characters from s to t (s_to_t) and another from t to s (t_to_s). Iterate Over Characters: For each character pair (s_char, t_char) in s and t, check: If s_char maps to a different t_char in s_to_t, or t_char maps to a different s_char in t_to_s, return false. Update s_to_t[s_char] = t_char and t_to_s[t_char] = s_char. Return True: If the loop completes without returning false, then s and t are isomorphic. class Solution: def isIsomorphic(self, s: str, t: str) -\u003e bool: if len(s) != len(t): return False s_to_t, t_to_s = {}, {} for s_char, t_char in zip(s, t): if (s_char in s_to_t and s_to_t[s_char] != t_char) or \\ (t_char in t_to_s and t_to_s[t_char] != s_char): return False s_to_t[s_char] = t_char t_to_s[t_char] = s_char return True ","description":"205. Isomorphic Strings","title":"205. Isomorphic Strings","uri":"/en/tracks/algorithms-101/leetcode/easy/205/"},{"content":"LeetCode problem 2050\nclass Solution: def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -\u003e int: g = defaultdict(list) indeg = [0] * n for a, b in relations: g[a - 1].append(b - 1) indeg[b - 1] += 1 q = deque() f = [0] * n res = 0 for i, (v, t) in enumerate(zip(indeg, time)): if v == 0: q.append(i) f[i] = t res = max(res, t) while q: i = q.popleft() for j in g[i]: f[j] = max(f[j], f[i] + time[j]) res = max(res, f[j]) indeg[j] -= 1 if indeg[j] == 0: q.append(j) return res ","description":"2050. Parallel Courses III","title":"2050. Parallel Courses III","uri":"/en/tracks/algorithms-101/leetcode/hard/2050/"},{"content":"LeetCode problem 2052\nclass Solution: def minimumCost(self, sentence: str, k: int) -\u003e int: @cache def dfs(i): if s[-1] - s[i] + n - i - 1 \u003c= k: return 0 res, j = inf, i + 1 while j \u003c n and (t := s[j] - s[i] + j - i - 1) \u003c= k: res = min(res, (k - t) ** 2 + dfs(j)) j += 1 return res t = [len(w) for w in sentence.split()] n = len(t) s = list(accumulate(t, initial=0)) return dfs(0) ","description":"2052. Minimum Cost to Separate Sentence Into Rows","title":"2052. Minimum Cost to Separate Sentence Into Rows","uri":"/en/tracks/algorithms-101/leetcode/medium/2052/"},{"content":"LeetCode problem 2053\nclass Solution: def kthDistinct(self, arr: List[str], k: int) -\u003e str: counter = Counter(arr) for v in arr: if counter[v] == 1: k -= 1 if k == 0: return v return '' ","description":"2053. Kth Distinct String in an Array","title":"2053. Kth Distinct String in an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2053/"},{"content":"LeetCode problem 2054\nclass Solution: def maxTwoEvents(self, events: List[List[int]]) -\u003e int: events.sort() n = len(events) f = [events[-1][2]] * n for i in range(n - 2, -1, -1): f[i] = max(f[i + 1], events[i][2]) res = 0 for _, e, v in events: idx = bisect_right(events, e, key=lambda x: x[0]) if idx \u003c n: v += f[idx] res = max(res, v) return res ","description":"2054. Two Best Non-Overlapping Events","title":"2054. Two Best Non-Overlapping Events","uri":"/en/tracks/algorithms-101/leetcode/medium/2054/"},{"content":"LeetCode problem 2055\nclass Solution: def platesBetweenCandles(self, s: str, queries: List[List[int]]) -\u003e List[int]: n = len(s) presum = [0] * (n + 1) for i, c in enumerate(s): presum[i + 1] = presum[i] + (c == '*') left, right = [0] * n, [0] * n l = r = -1 for i, c in enumerate(s): if c == '|': l = i left[i] = l for i in range(n - 1, -1, -1): if s[i] == '|': r = i right[i] = r res = [0] * len(queries) for k, (l, r) in enumerate(queries): i, j = right[l], left[r] if i \u003e= 0 and j \u003e= 0 and i \u003c j: res[k] = presum[j] - presum[i + 1] return res ","description":"2055. Plates Between Candles","title":"2055. Plates Between Candles","uri":"/en/tracks/algorithms-101/leetcode/medium/2055/"},{"content":"LeetCode problem 2057\nclass Solution: def smallestEqual(self, nums: List[int]) -\u003e int: for i, v in enumerate(nums): if i % 10 == v: return i return -1 ","description":"2057. Smallest Index With Equal Value","title":"2057. Smallest Index With Equal Value","uri":"/en/tracks/algorithms-101/leetcode/easy/2057/"},{"content":"LeetCode problem 2058\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -\u003e List[int]: prev, curr = head, head.next first = last = None i = 1 res = [inf, -inf] while curr.next: if curr.val \u003c min(prev.val, curr.next.val) or curr.val \u003e max( prev.val, curr.next.val ): if last is None: first = last = i else: res[0] = min(res[0], i - last) res[1] = i - first last = i i += 1 prev, curr = curr, curr.next return res if first != last else [-1, -1] ","description":"2058. Find the Minimum and Maximum Number of Nodes Between Critical Points","title":"2058. Find the Minimum and Maximum Number of Nodes Between Critical Points","uri":"/en/tracks/algorithms-101/leetcode/medium/2058/"},{"content":"LeetCode problem 2059\nclass Solution: def minimumOperations(self, nums: List[int], start: int, goal: int) -\u003e int: def next(x): res = [] for num in nums: res.append(x + num) res.append(x - num) res.append(x ^ num) return res def extend(m1, m2, q): for _ in range(len(q)): x = q.popleft() step = m1[x] for y in next(x): if y in m1: continue if y in m2: return step + 1 + m2[y] if 0 \u003c= y \u003c= 1000: m1[y] = step + 1 q.append(y) return -1 m1, m2 = {start: 0}, {goal: 0} q1, q2 = deque([start]), deque([goal]) while q1 and q2: t = extend(m1, m2, q1) if len(q1) \u003c= len(q2) else extend(m2, m1, q2) if t != -1: return t return -1 ","description":"2059. Minimum Operations to Convert Number","title":"2059. Minimum Operations to Convert Number","uri":"/en/tracks/algorithms-101/leetcode/medium/2059/"},{"content":"LeetCode problem 206\nProblem Statement Reverse a given singly linked list and return its head. A singly linked list is a data structure consisting of nodes, where each node has a value and a reference to the next node in the sequence.\nNaive Solution A naive approach could be to traverse the entire linked list once to read all its elements into an array. Then, we could reverse the array and construct a new linked list from it. This would work, but it takes up additional space for the array.\nHints \u0026 Tips An efficient way to approach this problem is by using pointers to reverse the links between the nodes directly within the linked list, without using additional space.\nWe will discuss two approaches to solve this problem: Iterative and Recursive.\nIterative Approach Initialize three pointers: prev as None, current as the head of the linked list, and next as None. Traverse the linked list, reversing the next pointers of each node to point to its previous node. Steps Initialize prev = None and current = head. While current is not None: Save current.next into next. Update current.next to prev. Move prev and current forward. Solution class Solution: def reverseList(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: prev = None curr = head while curr: next = curr.next curr.next = prev prev = curr curr = next return prev Recursive Approach Traverse to the end of the list. As the recursion stack unwinds, change the next pointers to create the reversed list. Steps Base case: If the head or head.next is None, return head. Recursively reverse the rest of the list. Change the next-next pointer to reverse the list. Solution class Solution: def reverseList(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: if not head or not head.next: return head new_head = self.reverseList(head.next) head.next.next = head head.next = None return new_head ","description":"This article explores solving the 206. Reverse Linked List problem on LeetCode.","title":"206. Reverse Linked List","uri":"/en/tracks/algorithms-101/leetcode/easy/206/"},{"content":"LeetCode problem 2061\nclass Solution: def numberOfCleanRooms(self, room: List[List[int]]) -\u003e int: dirs = (0, 1, 0, -1, 0) i = j = k = 0 res = 0 vis = set() while (i, j, k) not in vis: vis.add((i, j, k)) res += room[i][j] == 0 room[i][j] = -1 x, y = i + dirs[k], j + dirs[k + 1] if 0 \u003c= x \u003c len(room) and 0 \u003c= y \u003c len(room[0]) and room[x][y] != 1: i, j = x, y else: k = (k + 1) % 4 return res ","description":"2061. Number of Spaces Cleaning Robot Cleaned","title":"2061. Number of Spaces Cleaning Robot Cleaned","uri":"/en/tracks/algorithms-101/leetcode/medium/2061/"},{"content":"LeetCode problem 2062\nclass Solution: def countVowelSubstrings(self, word: str) -\u003e int: s = set('aeiou') res, n = 0, len(word) for i in range(n): t = set() for c in word[i:]: if c not in s: break t.add(c) res += len(t) == 5 return res ","description":"2062. Count Vowel Substrings of a String","title":"2062. Count Vowel Substrings of a String","uri":"/en/tracks/algorithms-101/leetcode/easy/2062/"},{"content":"LeetCode problem 2063\nclass Solution: def countVowels(self, word: str) -\u003e int: n = len(word) return sum((i + 1) * (n - i) for i, c in enumerate(word) if c in 'aeiou') ","description":"2063. Vowels of All Substrings","title":"2063. Vowels of All Substrings","uri":"/en/tracks/algorithms-101/leetcode/medium/2063/"},{"content":"LeetCode problem 2064\nclass Solution: def minimizedMaximum(self, n: int, quantities: List[int]) -\u003e int: def check(x): return sum((v + x - 1) // x for v in quantities) \u003c= n return 1 + bisect_left(range(1, 10**6), True, key=check) ","description":"2064. Minimized Maximum of Products Distributed to Any Store","title":"2064. Minimized Maximum of Products Distributed to Any Store","uri":"/en/tracks/algorithms-101/leetcode/medium/2064/"},{"content":"LeetCode problem 2067\nclass Solution: def equalCountSubstrings(self, s: str, count: int) -\u003e int: res = 0 for x in range(1, 27): m = count * x if m \u003e len(s): break cnt = Counter() y = 0 for i, c in enumerate(s): cnt[c] += 1 y += cnt[c] == count y -= cnt[c] == count + 1 j = i - m if j \u003e= 0: cnt[s[j]] -= 1 y += cnt[s[j]] == count y -= cnt[s[j]] == count - 1 res += x == y return res ","description":"2067. Number of Equal Count Substrings","title":"2067. Number of Equal Count Substrings","uri":"/en/tracks/algorithms-101/leetcode/medium/2067/"},{"content":"LeetCode problem 2068\nclass Solution: def checkAlmostEquivalent(self, word1: str, word2: str) -\u003e bool: cnt = Counter(word1) for c in word2: cnt[c] -= 1 return all(abs(x) \u003c= 3 for x in cnt.values()) ","description":"2068. Check Whether Two Strings are Almost Equivalent","title":"2068. Check Whether Two Strings are Almost Equivalent","uri":"/en/tracks/algorithms-101/leetcode/easy/2068/"},{"content":"LeetCode problem 2070\nclass Solution: def maximumBeauty(self, items: List[List[int]], queries: List[int]) -\u003e List[int]: items.sort() prices = [p for p, _ in items] mx = [items[0][1]] for _, b in items[1:]: mx.append(max(mx[-1], b)) res = [0] * len(queries) for i, q in enumerate(queries): j = bisect_right(prices, q) if j: res[i] = mx[j - 1] return res ","description":"2070. Most Beautiful Item for Each Query","title":"2070. Most Beautiful Item for Each Query","uri":"/en/tracks/algorithms-101/leetcode/medium/2070/"},{"content":"LeetCode problem 2071\nclass Solution: def maxTaskAssign( self, tasks: List[int], workers: List[int], pills: int, strength: int ) -\u003e int: def check(x): i = 0 q = deque() p = pills for j in range(m - x, m): while i \u003c x and tasks[i] \u003c= workers[j] + strength: q.append(tasks[i]) i += 1 if not q: return False if q[0] \u003c= workers[j]: q.popleft() elif p == 0: return False else: p -= 1 q.pop() return True n, m = len(tasks), len(workers) tasks.sort() workers.sort() left, right = 0, min(n, m) while left \u003c right: mid = (left + right + 1) \u003e\u003e 1 if check(mid): left = mid else: right = mid - 1 return left ","description":"2071. Maximum Number of Tasks You Can Assign","title":"2071. Maximum Number of Tasks You Can Assign","uri":"/en/tracks/algorithms-101/leetcode/hard/2071/"},{"content":"LeetCode problem 2073\nThink about the relationship between the position of the person in the queue and the number of tickets they want to buy. How does the position of the person affect the time it will take for them to buy all their tickets?\nTo solve this problem, focus on two key observations:\nEveryone before the k-th person, including k, will buy tickets at least tickets[k] times. People after the k-th person will buy tickets either tickets[k] times if they want as many or more tickets than k, or their total ticket count if it’s less. class Solution: def timeRequiredToBuy(self, tickets: List[int], k: int) -\u003e int: time = 0 # result # round 1 people before for t in tickets[:k]: time += min(t, tickets[k]) # person is first in the queue time += tickets[k] person_require = tickets[k] - 1 # people after the person k += 1 while k \u003c len(tickets): time += min(person_require, tickets[k]) k += 1 return time class Solution: def timeRequiredToBuy(self, tickets: List[int], k: int) -\u003e int: time = 0 for i, ticket in enumerate(tickets): if i \u003c= k: time += min(tickets[k], ticket) else: time += min(tickets[k] - 1, ticket) return time ","description":"2073. Time Needed to Buy Tickets","title":"2073. Time Needed to Buy Tickets","uri":"/en/tracks/algorithms-101/leetcode/easy/2073/"},{"content":"LeetCode problem 2074\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseEvenLengthGroups(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: def reverse(head, l): prev, cur, tail = None, head, head i = 0 while cur and i \u003c l: t = cur.next cur.next = prev prev = cur cur = t i += 1 tail.next = cur return prev n = 0 t = head while t: t = t.next n += 1 dummy = ListNode(0, head) prev = dummy l = 1 while (1 + l) * l // 2 \u003c= n and prev: if l % 2 == 0: prev.next = reverse(prev.next, l) i = 0 while i \u003c l and prev: prev = prev.next i += 1 l += 1 left = n - l * (l - 1) // 2 if left \u003e 0 and left % 2 == 0: prev.next = reverse(prev.next, left) return dummy.next ","description":"2074. Reverse Nodes in Even Length Groups","title":"2074. Reverse Nodes in Even Length Groups","uri":"/en/tracks/algorithms-101/leetcode/medium/2074/"},{"content":"LeetCode problem 2075\nclass Solution: def decodeCiphertext(self, encodedText: str, rows: int) -\u003e str: res = [] cols = len(encodedText) // rows for j in range(cols): x, y = 0, j while x \u003c rows and y \u003c cols: res.append(encodedText[x * cols + y]) x, y = x + 1, y + 1 return ''.join(res).rstrip() ","description":"2075. Decode the Slanted Ciphertext","title":"2075. Decode the Slanted Ciphertext","uri":"/en/tracks/algorithms-101/leetcode/medium/2075/"},{"content":"LeetCode problem 2076\nclass Solution: def friendRequests( self, n: int, restrictions: List[List[int]], requests: List[List[int]] ) -\u003e List[bool]: p = list(range(n)) def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] res = [] i = 0 for u, v in requests: if find(u) == find(v): res.append(True) else: valid = True for x, y in restrictions: if (find(u) == find(x) and find(v) == find(y)) or ( find(u) == find(y) and find(v) == find(x) ): valid = False break res.append(valid) if valid: p[find(u)] = find(v) return res ","description":"2076. Process Restricted Friend Requests","title":"2076. Process Restricted Friend Requests","uri":"/en/tracks/algorithms-101/leetcode/hard/2076/"},{"content":"LeetCode problem 2077\nclass Solution: def numberOfPaths(self, n: int, corridors: List[List[int]]) -\u003e int: g = defaultdict(set) for a, b in corridors: g[a].add(b) g[b].add(a) res = 0 for i in range(1, n + 1): for j, k in combinations(g[i], 2): if j in g[k]: res += 1 return res // 3 ","description":"2077. Paths in Maze That Lead to Same Room","title":"2077. Paths in Maze That Lead to Same Room","uri":"/en/tracks/algorithms-101/leetcode/medium/2077/"},{"content":"LeetCode problem 2078\nclass Solution: def maxDistance(self, colors: List[int]) -\u003e int: n = len(colors) if colors[0] != colors[-1]: return n - 1 i, j = 1, n - 2 while colors[i] == colors[0]: i += 1 while colors[j] == colors[0]: j -= 1 return max(n - i - 1, j) ","description":"2078. Two Furthest Houses With Different Colors","title":"2078. Two Furthest Houses With Different Colors","uri":"/en/tracks/algorithms-101/leetcode/easy/2078/"},{"content":"LeetCode problem 2079\nclass Solution: def wateringPlants(self, plants: List[int], capacity: int) -\u003e int: res, cap = 0, capacity for i, x in enumerate(plants): if cap \u003e= x: cap -= x res += 1 else: cap = capacity - x res += i * 2 + 1 return res ","description":"2079. Watering Plants","title":"2079. Watering Plants","uri":"/en/tracks/algorithms-101/leetcode/medium/2079/"},{"content":"LeetCode problem 2080\nclass RangeFreqQuery: def __init__(self, arr: List[int]): self.mp = defaultdict(list) for i, x in enumerate(arr): self.mp[x].append(i) def query(self, left: int, right: int, value: int) -\u003e int: if value not in self.mp: return 0 arr = self.mp[value] l, r = bisect_right(arr, left - 1), bisect_right(arr, right) return r - l # Your RangeFreqQuery object will be instantiated and called as such: # obj = RangeFreqQuery(arr) # param_1 = obj.query(left,right,value) ","description":"2080. Range Frequency Queries","title":"2080. Range Frequency Queries","uri":"/en/tracks/algorithms-101/leetcode/medium/2080/"},{"content":"LeetCode problem 2083\nclass Solution: def numberOfSubstrings(self, s: str) -\u003e int: cnt = Counter() res = 0 for c in s: cnt[c] += 1 res += cnt[c] return res ","description":"2083. Substrings That Begin and End With the Same Letter","title":"2083. Substrings That Begin and End With the Same Letter","uri":"/en/tracks/algorithms-101/leetcode/medium/2083/"},{"content":"LeetCode problem 2085\nclass Solution: def countWords(self, words1: List[str], words2: List[str]) -\u003e int: cnt1 = Counter(words1) cnt2 = Counter(words2) return sum(v == 1 and cnt2[w] == 1 for w, v in cnt1.items()) ","description":"2085. Count Common Words With One Occurrence","title":"2085. Count Common Words With One Occurrence","uri":"/en/tracks/algorithms-101/leetcode/easy/2085/"},{"content":"LeetCode problem 2086\nclass Solution: def minimumBuckets(self, street: str) -\u003e int: res = 0 i, n = 0, len(street) while i \u003c n: if street[i] == 'H': if i + 1 \u003c n and street[i + 1] == '.': i += 2 res += 1 elif i and street[i - 1] == '.': res += 1 else: return -1 i += 1 return res ","description":"2086. Minimum Number of Food Buckets to Feed the Hamsters","title":"2086. Minimum Number of Food Buckets to Feed the Hamsters","uri":"/en/tracks/algorithms-101/leetcode/medium/2086/"},{"content":"LeetCode problem 2087\nclass Solution: def minCost( self, startPos: List[int], homePos: List[int], rowCosts: List[int], colCosts: List[int], ) -\u003e int: i, j = startPos x, y = homePos res = 0 if i \u003c x: res += sum(rowCosts[i + 1 : x + 1]) else: res += sum(rowCosts[x:i]) if j \u003c y: res += sum(colCosts[j + 1 : y + 1]) else: res += sum(colCosts[y:j]) return res ","description":"2087. Minimum Cost Homecoming of a Robot in a Grid","title":"2087. Minimum Cost Homecoming of a Robot in a Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/2087/"},{"content":"LeetCode problem 2088\nclass Solution: def countPyramids(self, grid: List[List[int]]) -\u003e int: m, n = len(grid), len(grid[0]) f = [[0] * n for _ in range(m)] res = 0 for i in range(m - 1, -1, -1): for j in range(n): if grid[i][j] == 0: f[i][j] = -1 elif not (i == m - 1 or j == 0 or j == n - 1): f[i][j] = min(f[i + 1][j - 1], f[i + 1][j], f[i + 1][j + 1]) + 1 res += f[i][j] for i in range(m): for j in range(n): if grid[i][j] == 0: f[i][j] = -1 elif i == 0 or j == 0 or j == n - 1: f[i][j] = 0 else: f[i][j] = min(f[i - 1][j - 1], f[i - 1][j], f[i - 1][j + 1]) + 1 res += f[i][j] return res ","description":"2088. Count Fertile Pyramids in a Land","title":"2088. Count Fertile Pyramids in a Land","uri":"/en/tracks/algorithms-101/leetcode/hard/2088/"},{"content":"LeetCode problem 2089\nclass Solution: def targetIndices(self, nums: List[int], target: int) -\u003e List[int]: nums.sort() return [i for i, v in enumerate(nums) if v == target] ","description":"2089. Find Target Indices After Sorting Array","title":"2089. Find Target Indices After Sorting Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2089/"},{"content":"LeetCode problem 2090\nclass Solution: def getAverages(self, nums: List[int], k: int) -\u003e List[int]: s = 0 res = [-1] * len(nums) for i, v in enumerate(nums): s += v if i \u003e= k * 2: res[i - k] = s // (k * 2 + 1) s -= nums[i - k * 2] return res ","description":"2090. K Radius Subarray Averages","title":"2090. K Radius Subarray Averages","uri":"/en/tracks/algorithms-101/leetcode/medium/2090/"},{"content":"LeetCode problem 2091\nclass Solution: def minimumDeletions(self, nums: List[int]) -\u003e int: mi = mx = 0 for i, num in enumerate(nums): if num \u003c nums[mi]: mi = i if num \u003e nums[mx]: mx = i if mi \u003e mx: mi, mx = mx, mi return min(mx + 1, len(nums) - mi, mi + 1 + len(nums) - mx) ","description":"2091. Removing Minimum and Maximum From Array","title":"2091. Removing Minimum and Maximum From Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2091/"},{"content":"LeetCode problem 2092\nclass Solution: def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -\u003e List[int]: vis = [False] * n vis[0] = vis[firstPerson] = True meetings.sort(key=lambda x: x[2]) i, m = 0, len(meetings) while i \u003c m: j = i while j + 1 \u003c m and meetings[j + 1][2] == meetings[i][2]: j += 1 s = set() g = defaultdict(list) for x, y, _ in meetings[i : j + 1]: g[x].append(y) g[y].append(x) s.update([x, y]) q = deque([u for u in s if vis[u]]) while q: u = q.popleft() for v in g[u]: if not vis[v]: vis[v] = True q.append(v) i = j + 1 return [i for i, v in enumerate(vis) if v] ","description":"2092. Find All People With Secret","title":"2092. Find All People With Secret","uri":"/en/tracks/algorithms-101/leetcode/hard/2092/"},{"content":"LeetCode problem 2093\nclass Solution: def minimumCost(self, n: int, highways: List[List[int]], discounts: int) -\u003e int: g = defaultdict(list) for a, b, c in highways: g[a].append((b, c)) g[b].append((a, c)) q = [(0, 0, 0)] dist = [[inf] * (discounts + 1) for _ in range(n)] while q: cost, i, k = heappop(q) if k \u003e discounts: continue if i == n - 1: return cost if dist[i][k] \u003e cost: dist[i][k] = cost for j, v in g[i]: heappush(q, (cost + v, j, k)) heappush(q, (cost + v // 2, j, k + 1)) return -1 ","description":"2093. Minimum Cost to Reach City With Discounts","title":"2093. Minimum Cost to Reach City With Discounts","uri":"/en/tracks/algorithms-101/leetcode/medium/2093/"},{"content":"LeetCode задача 2095\nЗадача Дан связный список (linked list). Задача — удалить средний узел из этого списка и вернуть начало(head) измененного списка.\nПодсказки Мы можем использовать метод двух указателей для того, чтобы найти средний узел в одном проходе по списку, где второй указатель проходит весь список в два раза быстрее первого указателя.\nПодход Используем два указателя для прохода по списку: один медленный и один быстрый. Оба начинают с головного узла списка. Быстрый указатель будет двигаться в два раза быстрее медленного. Каждый шаг он перескакивает через два узла, в то время как медленный только на один. Таким образом, когда быстрый указатель достигнет конца список, первый указатель будет на середине. По мере продвижения указателей сохраняем узел, предшествующий медленному поинтеру (prev), так как именно его next нам нужно будет изменить. Когда быстрый указатель достигнет конца списка или окажется на последнем узле, медленный указатель будет указывать на средний узел. Удаляем средний узел. Алгоритм Инициализируем два указателя: один медленный (p1), другой быстрый (p2), и третий указатель prev. Обновляем указатели до момента достижения быстрым конца списка: Быстрый указатель на каждом шаге перепрыгивает через next. Временный (prev) указатель сохраняет ссылку на медленный указатель до его изменения Медленный указатель на каждом шаге обновляется до next. Удаляем средний элемент путем обновления ссылки в указателе prev.next на p1.next Решение class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def deleteMiddleNode(head: ListNode) -\u003e ListNode: if not head.next: return None p1 = head # быстрый p2 = head # медленный prev = None # предыдущий. Будет в середине while p2 and p2.next: prev = p1 p1 = p1.next p2 = p2.next.next prev.next = p1.next return head ","description":"LeetCode 2095. Удаление среднего узла в связном списке. Разбор задачи.","title":"2095. Delete the Middle Node of a Linked List","uri":"/en/tracks/algorithms-101/leetcode/medium/2095/"},{"content":"LeetCode problem 2096\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def getDirections( self, root: Optional[TreeNode], startValue: int, destValue: int ) -\u003e str: edges = defaultdict(list) res = None visited = set() def traverse(root): if not root: return if root.left: edges[root.val].append([root.left.val, 'L']) edges[root.left.val].append([root.val, 'U']) if root.right: edges[root.val].append([root.right.val, 'R']) edges[root.right.val].append([root.val, 'U']) traverse(root.left) traverse(root.right) def dfs(start, dest, t): nonlocal res if start in visited: return if start == dest: if res is None or len(res) \u003e len(t): res = ''.join(t) return visited.add(start) for d, k in edges[start]: t.append(k) dfs(d, dest, t) t.pop() traverse(root) dfs(startValue, destValue, []) return res ","description":"2096. Step-By-Step Directions From a Binary Tree Node to Another","title":"2096. Step-By-Step Directions From a Binary Tree Node to Another","uri":"/en/tracks/algorithms-101/leetcode/medium/2096/"},{"content":"LeetCode problem 2098\nclass Solution: def largestEvenSum(self, nums: List[int], k: int) -\u003e int: nums.sort() res = sum(nums[-k:]) if res % 2 == 0: return res n = len(nums) mx1 = mx2 = -inf for x in nums[: n - k]: if x \u0026 1: mx1 = x else: mx2 = x mi1 = mi2 = inf for x in nums[-k:][::-1]: if x \u0026 1: mi2 = x else: mi1 = x res = max(res - mi1 + mx1, res - mi2 + mx2, -1) return -1 if res % 2 else res ","description":"2098. Subsequence of Size K With the Largest Even Sum","title":"2098. Subsequence of Size K With the Largest Even Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/2098/"},{"content":"LeetCode problem 2099\nclass Solution: def maxSubsequence(self, nums: List[int], k: int) -\u003e List[int]: idx = list(range(len(nums))) idx.sort(key=lambda i: nums[i]) return [nums[i] for i in sorted(idx[-k:])] ","description":"2099. Find Subsequence of Length K With the Largest Sum","title":"2099. Find Subsequence of Length K With the Largest Sum","uri":"/en/tracks/algorithms-101/leetcode/easy/2099/"},{"content":"LeetCode problem\nYou are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\nExample 1:\nInput: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2:\nInput: list1 = [], list2 = [0] Output: [0] First accepted Idea:\nGet smallest head. Loop and update its next.\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -\u003e Optional[ListNode]: res = ListNode() current = res while l1 and l2: if l1.val \u003c= l2.val: node = ListNode(l1.val) l1 = l1.next else: node = ListNode(l2.val) l2 = l2.next current.next = node current = current.next if l1: current.next = l1 if l2: current.next = l2 return res.next Better solution Recursion\ndef mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -\u003e Optional[ListNode]: if l1 and l2: if l1.val \u003e l2.val: l1, l2 = l2, l1 #swap smaller and larger: make l1 the one with the smaller first value l1.next = self.mergeTwoLists(l1.next, l2) # move forward in the list which starts with the smaller value return l1 or l2 # return whichever of the two lists remains at the end Loop\ndef mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -\u003e Optional[ListNode]: res = ListNode() current = res while l1 and l2: if l1.val \u003c= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next class Solution: def mergeTwoLists(self, a, b): if a and b: if a.val \u003e b.val: a, b = b, a a.next = self.mergeTwoLists(a.next, b) return a or b First make sure that a is the “better” one (meaning b is None or has larger/equal value). Then merge the remainders behind a.\ndef mergeTwoLists(self, a, b): if not a or b and a.val \u003e b.val: a, b = b, a if a: a.next = self.mergeTwoLists(a.next, b) return a ","description":"LeetCode 21. Merge Two Sorted Lists","title":"21. Merge Two Sorted Lists","uri":"/en/tracks/algorithms-101/leetcode/easy/21/"},{"content":"LeetCode задача 210\nЗадача Вам дано ( n ) курсов для изучения, пронумерованных от ( 0 ) до ( n-1 ), и массив ( prerequisites ), где ( prerequisites[i] = [a, b] ) означает, что для изучения курса ( a ) предварительно необходимо пройти курс ( b ).\nНапишите функцию для нахождения порядка, в котором можно пройти курсы. Если это невозможно, верните пустой массив.\nПодсказки Топологическая сортировка может быть использована для решения этой задачи.\nПодход Создадим граф, представляющий предварительные требования для каждого курса. Применим топологическую сортировку для нахождения порядка курсов. Алгоритм Инициализируем граф и массив для хранения входящих степеней всех вершин (курсов). Заполним граф и массив входящих степеней, используя массив ( prerequisites ). Используем алгоритм топологической сортировки для нахождения порядка курсов. Решение from collections import deque, defaultdict def findOrder(numCourses, prerequisites): # Создаем граф и массив для хранения входящих степеней graph = defaultdict(list) indegree = [0] * numCourses # Заполняем граф и массив входящих степеней for course, prereq in prerequisites: graph[prereq].append(course) indegree[course] += 1 # Инициализация очереди для вершин с нулевой входящей степенью queue = deque([i for i in range(numCourses) if indegree[i] == 0]) # Топологическая сортировка order = [] while queue: prereq = queue.popleft() order.append(prereq) for course in graph[prereq]: indegree[course] -= 1 if indegree[course] == 0: queue.append(course) return order if len(order) == numCourses else [] ","description":"LeetCode 210. Узнайте возможный порядок завершения курсов, учитывая их предварительные требования.","title":"210. Course Schedule II","uri":"/en/tracks/algorithms-101/leetcode/medium/210/"},{"content":"LeetCode problem 2100\nclass Solution: def goodDaysToRobBank(self, security: List[int], time: int) -\u003e List[int]: n = len(security) if n \u003c= time * 2: return [] left, right = [0] * n, [0] * n for i in range(1, n): if security[i] \u003c= security[i - 1]: left[i] = left[i - 1] + 1 for i in range(n - 2, -1, -1): if security[i] \u003c= security[i + 1]: right[i] = right[i + 1] + 1 return [i for i in range(n) if time \u003c= min(left[i], right[i])] ","description":"2100. Find Good Days to Rob the Bank","title":"2100. Find Good Days to Rob the Bank","uri":"/en/tracks/algorithms-101/leetcode/medium/2100/"},{"content":"LeetCode problem 2101\nclass Solution: def maximumDetonation(self, bombs: List[List[int]]) -\u003e int: def check(i, j): if i == j: return False x, y = bombs[i][0] - bombs[j][0], bombs[i][1] - bombs[j][1] r = bombs[i][2] return r * r \u003e= x * x + y * y g = defaultdict(list) n = len(bombs) for i in range(n): for j in range(n): if check(i, j): g[i].append(j) res = 0 for k in range(n): q = deque([k]) vis = [False] * n vis[k] = True cnt = 0 while q: i = q.popleft() cnt += 1 for j in g[i]: if not vis[j]: vis[j] = True q.append(j) res = max(res, cnt) return res ","description":"2101. Detonate the Maximum Bombs","title":"2101. Detonate the Maximum Bombs","uri":"/en/tracks/algorithms-101/leetcode/medium/2101/"},{"content":"LeetCode problem 2103\nclass Solution: def countPoints(self, rings: str) -\u003e int: mask = [0] * 10 d = {\"R\": 1, \"G\": 2, \"B\": 4} for i in range(0, len(rings), 2): c = rings[i] j = int(rings[i + 1]) mask[j] |= d[c] return mask.count(7) ","description":"2103. Rings and Rods","title":"2103. Rings and Rods","uri":"/en/tracks/algorithms-101/leetcode/easy/2103/"},{"content":"LeetCode problem 2104\nclass Solution: def subArrayRanges(self, nums: List[int]) -\u003e int: def f(nums): stk = [] n = len(nums) left = [-1] * n right = [n] * n for i, v in enumerate(nums): while stk and nums[stk[-1]] \u003c= v: stk.pop() if stk: left[i] = stk[-1] stk.append(i) stk = [] for i in range(n - 1, -1, -1): while stk and nums[stk[-1]] \u003c nums[i]: stk.pop() if stk: right[i] = stk[-1] stk.append(i) return sum((i - left[i]) * (right[i] - i) * v for i, v in enumerate(nums)) mx = f(nums) mi = f([-v for v in nums]) return mx + mi ","description":"2104. Sum of Subarray Ranges","title":"2104. Sum of Subarray Ranges","uri":"/en/tracks/algorithms-101/leetcode/medium/2104/"},{"content":"LeetCode problem 2105\nclass Solution: def minimumRefill(self, plants: List[int], capacityA: int, capacityB: int) -\u003e int: i, j = 0, len(plants) - 1 res = 0 a, b = capacityA, capacityB while i \u003c= j: if i == j: if max(capacityA, capacityB) \u003c plants[i]: res += 1 break if capacityA \u003c plants[i]: capacityA = a - plants[i] res += 1 else: capacityA -= plants[i] if capacityB \u003c plants[j]: capacityB = b - plants[j] res += 1 else: capacityB -= plants[j] i += 1 j -= 1 return res ","description":"2105. Watering Plants II","title":"2105. Watering Plants II","uri":"/en/tracks/algorithms-101/leetcode/medium/2105/"},{"content":"LeetCode problem 2106\nclass Solution: def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -\u003e int: res = i = s = 0 for j, (pj, fj) in enumerate(fruits): s += fj while ( i \u003c= j and pj - fruits[i][0] + min(abs(startPos - fruits[i][0]), abs(startPos - fruits[j][0])) \u003e k ): s -= fruits[i][1] i += 1 res = max(res, s) return res ","description":"2106. Maximum Fruits Harvested After at Most K Steps","title":"2106. Maximum Fruits Harvested After at Most K Steps","uri":"/en/tracks/algorithms-101/leetcode/hard/2106/"},{"content":"LeetCode problem 2107\nclass Solution: def shareCandies(self, candies: List[int], k: int) -\u003e int: cnt = Counter(candies[k:]) res = len(cnt) for i in range(k, len(candies)): cnt[candies[i - k]] += 1 cnt[candies[i]] -= 1 if cnt[candies[i]] == 0: cnt.pop(candies[i]) res = max(res, len(cnt)) return res ","description":"2107. Number of Unique Flavors After Sharing K Candies","title":"2107. Number of Unique Flavors After Sharing K Candies","uri":"/en/tracks/algorithms-101/leetcode/medium/2107/"},{"content":"LeetCode problem 2108\nclass Solution: def firstPalindrome(self, words: List[str]) -\u003e str: return next((w for w in words if w == w[::-1]), \"\") ","description":"2108. Find First Palindromic String in the Array","title":"2108. Find First Palindromic String in the Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2108/"},{"content":"LeetCode problem 2109\nclass Solution: def addSpaces(self, s: str, spaces: List[int]) -\u003e str: res = [] i, j = len(s) - 1, len(spaces) - 1 while i \u003e= 0: res.append(s[i]) if j \u003e= 0 and i == spaces[j]: res.append(' ') j -= 1 i -= 1 return ''.join(res[::-1]) ","description":"2109. Adding Spaces to a String","title":"2109. Adding Spaces to a String","uri":"/en/tracks/algorithms-101/leetcode/medium/2109/"},{"content":"LeetCode problem 2110\nclass Solution: def getDescentPeriods(self, prices: List[int]) -\u003e int: res = 0 i, n = 0, len(prices) while i \u003c n: j = i + 1 while j \u003c n and prices[j - 1] - prices[j] == 1: j += 1 cnt = j - i res += (1 + cnt) * cnt // 2 i = j return res ","description":"2110. Number of Smooth Descent Periods of a Stock","title":"2110. Number of Smooth Descent Periods of a Stock","uri":"/en/tracks/algorithms-101/leetcode/medium/2110/"},{"content":"LeetCode problem 2111\nclass Solution: def kIncreasing(self, arr: List[int], k: int) -\u003e int: def lis(arr): t = [] for x in arr: idx = bisect_right(t, x) if idx == len(t): t.append(x) else: t[idx] = x return len(arr) - len(t) return sum(lis(arr[i::k]) for i in range(k)) ","description":"2111. Minimum Operations to Make the Array K-Increasing","title":"2111. Minimum Operations to Make the Array K-Increasing","uri":"/en/tracks/algorithms-101/leetcode/hard/2111/"},{"content":"LeetCode problem 2113\nclass Solution: def elementInNums(self, nums: List[int], queries: List[List[int]]) -\u003e List[int]: n, m = len(nums), len(queries) res = [-1] * m for j, (t, i) in enumerate(queries): t %= 2 * n if t \u003c n and i \u003c n - t: res[j] = nums[i + t] elif t \u003e n and i \u003c t - n: res[j] = nums[i] return res ","description":"2113. Elements in Array After Removing and Replacing Elements","title":"2113. Elements in Array After Removing and Replacing Elements","uri":"/en/tracks/algorithms-101/leetcode/medium/2113/"},{"content":"LeetCode problem 2114\nclass Solution: def mostWordsFound(self, sentences: List[str]) -\u003e int: return 1 + max(s.count(' ') for s in sentences) ","description":"2114. Maximum Number of Words Found in Sentences","title":"2114. Maximum Number of Words Found in Sentences","uri":"/en/tracks/algorithms-101/leetcode/easy/2114/"},{"content":"LeetCode problem 2115\nclass Solution: def findAllRecipes( self, recipes: List[str], ingredients: List[List[str]], supplies: List[str] ) -\u003e List[str]: g = defaultdict(list) indeg = defaultdict(int) for a, b in zip(recipes, ingredients): for v in b: g[v].append(a) indeg[a] += len(b) q = deque(supplies) res = [] while q: for _ in range(len(q)): i = q.popleft() for j in g[i]: indeg[j] -= 1 if indeg[j] == 0: res.append(j) q.append(j) return res ","description":"2115. Find All Possible Recipes from Given Supplies","title":"2115. Find All Possible Recipes from Given Supplies","uri":"/en/tracks/algorithms-101/leetcode/medium/2115/"},{"content":"LeetCode problem 2116\nclass Solution: def canBeValid(self, s: str, locked: str) -\u003e bool: n = len(s) if n \u0026 1: return False x = 0 for i in range(n): if s[i] == '(' or locked[i] == '0': x += 1 elif x: x -= 1 else: return False x = 0 for i in range(n - 1, -1, -1): if s[i] == ')' or locked[i] == '0': x += 1 elif x: x -= 1 else: return False return True ","description":"2116. Check if a Parentheses String Can Be Valid","title":"2116. Check if a Parentheses String Can Be Valid","uri":"/en/tracks/algorithms-101/leetcode/medium/2116/"},{"content":"LeetCode problem 2117\nclass Solution: def abbreviateProduct(self, left: int, right: int) -\u003e str: cnt2 = cnt5 = 0 for x in range(left, right + 1): while x % 2 == 0: cnt2 += 1 x //= 2 while x % 5 == 0: cnt5 += 1 x //= 5 c = cnt2 = cnt5 = min(cnt2, cnt5) pre = suf = 1 gt = False for x in range(left, right + 1): suf *= x while cnt2 and suf % 2 == 0: suf //= 2 cnt2 -= 1 while cnt5 and suf % 5 == 0: suf //= 5 cnt5 -= 1 if suf \u003e= 1e10: gt = True suf %= int(1e10) pre *= x while pre \u003e 1e5: pre /= 10 if gt: return str(int(pre)) + \"...\" + str(suf % int(1e5)).zfill(5) + 'e' + str(c) return str(suf) + \"e\" + str(c) ","description":"2117. Abbreviating the Product of a Range","title":"2117. Abbreviating the Product of a Range","uri":"/en/tracks/algorithms-101/leetcode/hard/2117/"},{"content":"LeetCode problem 2119\nclass Solution: def isSameAfterReversals(self, num: int) -\u003e bool: return num == 0 or num % 10 != 0 ","description":"2119. A Number After a Double Reversal","title":"2119. A Number After a Double Reversal","uri":"/en/tracks/algorithms-101/leetcode/easy/2119/"},{"content":"LeetCode problem 2120\nclass Solution: def executeInstructions(self, n: int, startPos: List[int], s: str) -\u003e List[int]: res = [] m = len(s) mp = {\"L\": [0, -1], \"R\": [0, 1], \"U\": [-1, 0], \"D\": [1, 0]} for i in range(m): x, y = startPos t = 0 for j in range(i, m): a, b = mp[s[j]] if 0 \u003c= x + a \u003c n and 0 \u003c= y + b \u003c n: x, y, t = x + a, y + b, t + 1 else: break res.append(t) return res ","description":"2120. Execution of All Suffix Instructions Staying in a Grid","title":"2120. Execution of All Suffix Instructions Staying in a Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/2120/"},{"content":"LeetCode problem 2121\nclass Solution: def getDistances(self, arr: List[int]) -\u003e List[int]: d = defaultdict(list) n = len(arr) for i, v in enumerate(arr): d[v].append(i) res = [0] * n for v in d.values(): m = len(v) val = sum(v) - v[0] * m for i, p in enumerate(v): delta = v[i] - v[i - 1] if i \u003e= 1 else 0 val += i * delta - (m - i) * delta res[p] = val return res ","description":"2121. Intervals Between Identical Elements","title":"2121. Intervals Between Identical Elements","uri":"/en/tracks/algorithms-101/leetcode/medium/2121/"},{"content":"LeetCode problem 2122\nclass Solution: def recoverArray(self, nums: List[int]) -\u003e List[int]: nums.sort() n = len(nums) for i in range(1, n): d = nums[i] - nums[0] if d == 0 or d % 2 == 1: continue vis = [False] * n vis[i] = True res = [(nums[0] + nums[i]) \u003e\u003e 1] l, r = 1, i + 1 while r \u003c n: while l \u003c n and vis[l]: l += 1 while r \u003c n and nums[r] - nums[l] \u003c d: r += 1 if r == n or nums[r] - nums[l] \u003e d: break vis[r] = True res.append((nums[l] + nums[r]) \u003e\u003e 1) l, r = l + 1, r + 1 if len(res) == (n \u003e\u003e 1): return res return [] ","description":"2122. Recover the Original Array","title":"2122. Recover the Original Array","uri":"/en/tracks/algorithms-101/leetcode/hard/2122/"},{"content":"LeetCode problem 2123\nclass Solution: def minimumOperations(self, grid: List[List[int]]) -\u003e int: def find(i: int) -\u003e int: for j in g[i]: if j not in vis: vis.add(j) if match[j] == -1 or find(match[j]): match[j] = i return 1 return 0 g = defaultdict(list) m, n = len(grid), len(grid[0]) for i, row in enumerate(grid): for j, v in enumerate(row): if (i + j) % 2 and v: x = i * n + j if i \u003c m - 1 and grid[i + 1][j]: g[x].append(x + n) if i and grid[i - 1][j]: g[x].append(x - n) if j \u003c n - 1 and grid[i][j + 1]: g[x].append(x + 1) if j and grid[i][j - 1]: g[x].append(x - 1) match = [-1] * (m * n) res = 0 for i in g.keys(): vis = set() res += find(i) return res ","description":"2123. Minimum Operations to Remove Adjacent Ones in Matrix","title":"2123. Minimum Operations to Remove Adjacent Ones in Matrix","uri":"/en/tracks/algorithms-101/leetcode/hard/2123/"},{"content":"LeetCode problem 2124\nclass Solution: def checkString(self, s: str) -\u003e bool: return \"ba\" not in s ","description":"2124. Check if All A's Appears Before All B's","title":"2124. Check if All A's Appears Before All B's","uri":"/en/tracks/algorithms-101/leetcode/easy/2124/"},{"content":"LeetCode problem 2125\nclass Solution: def numberOfBeams(self, bank: List[str]) -\u003e int: last = res = 0 for b in bank: if (t := b.count('1')) \u003e 0: res += last * t last = t return res ","description":"2125. Number of Laser Beams in a Bank","title":"2125. Number of Laser Beams in a Bank","uri":"/en/tracks/algorithms-101/leetcode/medium/2125/"},{"content":"LeetCode problem 2126\nclass Solution: def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -\u003e bool: asteroids.sort() for v in asteroids: if mass \u003c v: return False mass += v return True ","description":"2126. Destroying Asteroids","title":"2126. Destroying Asteroids","uri":"/en/tracks/algorithms-101/leetcode/medium/2126/"},{"content":"LeetCode problem 2127\nclass Solution: def maximumInvitations(self, favorite: List[int]) -\u003e int: def max_cycle(fa: List[int]) -\u003e int: n = len(fa) vis = [False] * n res = 0 for i in range(n): if vis[i]: continue cycle = [] j = i while not vis[j]: cycle.append(j) vis[j] = True j = fa[j] for k, v in enumerate(cycle): if v == j: res = max(res, len(cycle) - k) break return res def topological_sort(fa: List[int]) -\u003e int: n = len(fa) indeg = [0] * n dist = [1] * n for v in fa: indeg[v] += 1 q = deque(i for i, v in enumerate(indeg) if v == 0) while q: i = q.popleft() dist[fa[i]] = max(dist[fa[i]], dist[i] + 1) indeg[fa[i]] -= 1 if indeg[fa[i]] == 0: q.append(fa[i]) return sum(dist[i] for i, v in enumerate(fa) if i == fa[fa[i]]) return max(max_cycle(favorite), topological_sort(favorite)) ","description":"2127. Maximum Employees to Be Invited to a Meeting","title":"2127. Maximum Employees to Be Invited to a Meeting","uri":"/en/tracks/algorithms-101/leetcode/hard/2127/"},{"content":"LeetCode problem 2128\nclass Solution: def removeOnes(self, grid: List[List[int]]) -\u003e bool: s = set() for row in grid: t = tuple(row) if row[0] == grid[0][0] else tuple(x ^ 1 for x in row) s.add(t) return len(s) == 1 ","description":"2128. Remove All Ones With Row and Column Flips","title":"2128. Remove All Ones With Row and Column Flips","uri":"/en/tracks/algorithms-101/leetcode/medium/2128/"},{"content":"LeetCode problem 2129\nclass Solution: def capitalizeTitle(self, title: str) -\u003e str: words = [w.lower() if len(w) \u003c 3 else w.capitalize() for w in title.split()] return \" \".join(words) ","description":"2129. Capitalize the Title","title":"2129. Capitalize the Title","uri":"/en/tracks/algorithms-101/leetcode/easy/2129/"},{"content":"LeetCode задача 2130\nЗадача Дан односвязный список четной длины. Узлы в этом списке имеют “близнецов” по определенным правилам. Задача — найти максимальную сумму “близнецов”.\nТ.е. у первой половины узлов списка есть свой близнец из второй половины.\nПример: для списка длиной n = 8 i = 0, twin = n-1-i = 8-1-0 = 7 i = 1, twin = n-1-1 = 6 i = 2, twin = n-1-2 = 5 …\nПодсказки У первой половины узлов списка есть свой близнец из второй половины, т.е. нужно получить значения узлов и сложить значения из первой половины со значением из второй.\nПодход Мы можем решить эту задачу, проходя список дважды. В первый проход мы можем сохранить все значения узлов в массиве для удобства доступа. Во втором проходе, мы используем этот массив для вычисления суммы “близнецов” и отслеживания максимальной такой суммы.\nМассив здесь нужен для того, чтобы мы могли быстро получить доступ к “близнецу” каждого узла, не проходя список заново.\nАлгоритм Пройдемся по связному списку, сохраняя значения всех узлов в массиве. Инициализируем переменную max_twin_sum как 0, которая будет хранить максимальную сумму “близнецов”. Снова пройдемся по связному списку, вычисляя сумму “близнецов” для каждого узла и обновляя max_twin_sum, если текущая сумма больше максимальной. Решение # Определение односвязного списка. class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class Solution: def maxTwinSum(self, head: ListNode) -\u003e int: # Проходим по списку, сохраняя все значения в массив. vals = [] curr = head while curr: vals.append(curr.val) curr = curr.next # Инициализация максимальной суммы \"близнецов\". max_twin_sum = 0 for i in range(len(vals) // 2 + 1): # проходим по первой половине twin_i = -i -1 twin_sum = vals[i] + vals[twin_i] max_twin_sum = max(max_twin_sum, twin_sum) return max_twin_sum ","description":"LeetCode 2130. Maximum Twin Sum of a Linked List. Разбор задачи.","title":"2130. Maximum Twin Sum of a Linked List","uri":"/en/tracks/algorithms-101/leetcode/medium/2130/"},{"content":"LeetCode problem 2131\nclass Solution: def longestPalindrome(self, words: List[str]) -\u003e int: cnt = Counter(words) res = x = 0 for k, v in cnt.items(): if k[0] == k[1]: x += v \u0026 1 res += v // 2 * 2 * 2 else: res += min(v, cnt[k[::-1]]) * 2 res += 2 if x else 0 return res ","description":"2131. Longest Palindrome by Concatenating Two Letter Words","title":"2131. Longest Palindrome by Concatenating Two Letter Words","uri":"/en/tracks/algorithms-101/leetcode/medium/2131/"},{"content":"LeetCode problem 2132\nclass Solution: def possibleToStamp( self, grid: List[List[int]], stampHeight: int, stampWidth: int ) -\u003e bool: m, n = len(grid), len(grid[0]) s = [[0] * (n + 1) for _ in range(m + 1)] for i, row in enumerate(grid, 1): for j, v in enumerate(row, 1): s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v d = [[0] * (n + 2) for _ in range(m + 2)] for i in range(1, m - stampHeight + 2): for j in range(1, n - stampWidth + 2): x, y = i + stampHeight - 1, j + stampWidth - 1 if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0: d[i][j] += 1 d[i][y + 1] -= 1 d[x + 1][j] -= 1 d[x + 1][y + 1] += 1 for i, row in enumerate(grid, 1): for j, v in enumerate(row, 1): d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1] if v == 0 and d[i][j] == 0: return False return True ","description":"2132. Stamping the Grid","title":"2132. Stamping the Grid","uri":"/en/tracks/algorithms-101/leetcode/hard/2132/"},{"content":"LeetCode problem 2133\nclass Solution: def checkValid(self, matrix: List[List[int]]) -\u003e bool: n = len(matrix) for i in range(n): seen = [False] * n for j in range(n): v = matrix[i][j] - 1 if seen[v]: return False seen[v] = True for j in range(n): seen = [False] * n for i in range(n): v = matrix[i][j] - 1 if seen[v]: return False seen[v] = True return True ","description":"2133. Check if Every Row and Column Contains All Numbers","title":"2133. Check if Every Row and Column Contains All Numbers","uri":"/en/tracks/algorithms-101/leetcode/easy/2133/"},{"content":"LeetCode problem 2135\nclass Solution: def wordCount(self, startWords: List[str], targetWords: List[str]) -\u003e int: s = set() for word in startWords: mask = 0 for c in word: mask |= 1 \u003c\u003c (ord(c) - ord('a')) s.add(mask) res = 0 for word in targetWords: mask = 0 for c in word: mask |= 1 \u003c\u003c (ord(c) - ord('a')) for c in word: t = mask ^ (1 \u003c\u003c (ord(c) - ord('a'))) if t in s: res += 1 break return res ","description":"2135. Count Words Obtained After Adding a Letter","title":"2135. Count Words Obtained After Adding a Letter","uri":"/en/tracks/algorithms-101/leetcode/medium/2135/"},{"content":"LeetCode problem 2136\nclass Solution: def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -\u003e int: res = t = 0 for pt, gt in sorted(zip(plantTime, growTime), key=lambda x: -x[1]): t += pt res = max(res, t + gt) return res ","description":"2136. Earliest Possible Day of Full Bloom","title":"2136. Earliest Possible Day of Full Bloom","uri":"/en/tracks/algorithms-101/leetcode/hard/2136/"},{"content":"LeetCode problem 2137\nclass Solution: def equalizeWater(self, buckets: List[int], loss: int) -\u003e float: def check(v): a = b = 0 for x in buckets: if x \u003e= v: a += x - v else: b += (v - x) * 100 / (100 - loss) return a \u003e= b l, r = 0, max(buckets) while r - l \u003e 1e-5: mid = (l + r) / 2 if check(mid): l = mid else: r = mid return l ","description":"2137. Pour Water Between Buckets to Make Water Levels Equal","title":"2137. Pour Water Between Buckets to Make Water Levels Equal","uri":"/en/tracks/algorithms-101/leetcode/medium/2137/"},{"content":"LeetCode problem 2138\nclass Solution: def divideString(self, s: str, k: int, fill: str) -\u003e List[str]: return [s[i : i + k].ljust(k, fill) for i in range(0, len(s), k)] ","description":"2138. Divide a String Into Groups of Size k","title":"2138. Divide a String Into Groups of Size k","uri":"/en/tracks/algorithms-101/leetcode/easy/2138/"},{"content":"LeetCode problem 2139\nclass Solution: def minMoves(self, target: int, maxDoubles: int) -\u003e int: res = 0 while maxDoubles and target \u003e 1: res += 1 if target % 2 == 1: target -= 1 else: maxDoubles -= 1 target \u003e\u003e= 1 res += target - 1 return res ","description":"2139. Minimum Moves to Reach Target Score","title":"2139. Minimum Moves to Reach Target Score","uri":"/en/tracks/algorithms-101/leetcode/medium/2139/"},{"content":"LeetCode problem 2140\nclass Solution: def mostPoints(self, questions: List[List[int]]) -\u003e int: n = len(questions) f = [0] * (n + 1) for i in range(n - 1, -1, -1): p, b = questions[i] j = i + b + 1 f[i] = max(f[i + 1], p + (0 if j \u003e n else f[j])) return f[0] ","description":"2140. Solving Questions With Brainpower","title":"2140. Solving Questions With Brainpower","uri":"/en/tracks/algorithms-101/leetcode/medium/2140/"},{"content":"LeetCode problem 2141\nclass Solution: def maxRunTime(self, n: int, batteries: List[int]) -\u003e int: l, r = 0, sum(batteries) while l \u003c r: mid = (l + r + 1) \u003e\u003e 1 if sum(min(x, mid) for x in batteries) \u003e= n * mid: l = mid else: r = mid - 1 return l ","description":"2141. Maximum Running Time of N Computers","title":"2141. Maximum Running Time of N Computers","uri":"/en/tracks/algorithms-101/leetcode/hard/2141/"},{"content":"LeetCode problem 2143\nclass Solution: def countSubranges(self, nums1: List[int], nums2: List[int]) -\u003e int: n = len(nums1) s1, s2 = sum(nums1), sum(nums2) f = [[0] * (s1 + s2 + 1) for _ in range(n)] res = 0 mod = 10**9 + 7 for i, (a, b) in enumerate(zip(nums1, nums2)): f[i][a + s2] += 1 f[i][-b + s2] += 1 if i: for j in range(s1 + s2 + 1): if j \u003e= a: f[i][j] = (f[i][j] + f[i - 1][j - a]) % mod if j + b \u003c s1 + s2 + 1: f[i][j] = (f[i][j] + f[i - 1][j + b]) % mod res = (res + f[i][s2]) % mod return res ","description":"2143. Choose Numbers From Two Arrays in Range","title":"2143. Choose Numbers From Two Arrays in Range","uri":"/en/tracks/algorithms-101/leetcode/hard/2143/"},{"content":"LeetCode problem 2144\nclass Solution: def minimumCost(self, cost: List[int]) -\u003e int: cost.sort(reverse=True) return sum(cost) - sum(cost[2::3]) ","description":"2144. Minimum Cost of Buying Candies With Discount","title":"2144. Minimum Cost of Buying Candies With Discount","uri":"/en/tracks/algorithms-101/leetcode/easy/2144/"},{"content":"LeetCode problem 2145\nclass Solution: def numberOfArrays(self, differences: List[int], lower: int, upper: int) -\u003e int: num = mi = mx = 0 for d in differences: num += d mi = min(mi, num) mx = max(mx, num) return max(0, upper - lower - (mx - mi) + 1) ","description":"2145. Count the Hidden Sequences","title":"2145. Count the Hidden Sequences","uri":"/en/tracks/algorithms-101/leetcode/medium/2145/"},{"content":"LeetCode problem 2146\nclass Solution: def highestRankedKItems( self, grid: List[List[int]], pricing: List[int], start: List[int], k: int ) -\u003e List[List[int]]: m, n = len(grid), len(grid[0]) row, col, low, high = start + pricing items = [] if low \u003c= grid[row][col] \u003c= high: items.append([0, grid[row][col], row, col]) q = deque([(row, col, 0)]) grid[row][col] = 0 while q: i, j, d = q.popleft() for a, b in [[0, 1], [0, -1], [1, 0], [-1, 0]]: x, y = i + a, j + b if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and grid[x][y]: if low \u003c= grid[x][y] \u003c= high: items.append([d + 1, grid[x][y], x, y]) q.append((x, y, d + 1)) grid[x][y] = 0 items.sort() return [item[2:] for item in items][:k] ","description":"2146. K Highest Ranked Items Within a Price Range","title":"2146. K Highest Ranked Items Within a Price Range","uri":"/en/tracks/algorithms-101/leetcode/medium/2146/"},{"content":"LeetCode problem 2147\nclass Solution: def numberOfWays(self, corridor: str) -\u003e int: @cache def dfs(i, cnt): if i == n: return int(cnt == 2) cnt += corridor[i] == 'S' if cnt \u003e 2: return 0 res = dfs(i + 1, cnt) if cnt == 2: res += dfs(i + 1, 0) res %= mod return res n = len(corridor) mod = 10**9 + 7 res = dfs(0, 0) dfs.cache_clear() return res ","description":"2147. Number of Ways to Divide a Long Corridor","title":"2147. Number of Ways to Divide a Long Corridor","uri":"/en/tracks/algorithms-101/leetcode/hard/2147/"},{"content":"LeetCode problem 2148\nclass Solution: def countElements(self, nums: List[int]) -\u003e int: mi, mx = min(nums), max(nums) return sum(mi \u003c num \u003c mx for num in nums) ","description":"2148. Count Elements With Strictly Smaller and Greater Elements","title":"2148. Count Elements With Strictly Smaller and Greater Elements","uri":"/en/tracks/algorithms-101/leetcode/easy/2148/"},{"content":"LeetCode problem 2149\nclass Solution: def rearrangeArray(self, nums: List[int]) -\u003e List[int]: res = [0] * len(nums) i, j = 0, 1 for num in nums: if num \u003e 0: res[i] = num i += 2 else: res[j] = num j += 2 return res ","description":"2149. Rearrange Array Elements by Sign","title":"2149. Rearrange Array Elements by Sign","uri":"/en/tracks/algorithms-101/leetcode/medium/2149/"},{"content":"LeetCode задача 215\nЗадача Найти k-тый по величине элемент в неотсортированном массиве. Примечание: это k-тый по величине элемент в отсортированном порядке, а не k-тый различный элемент.\nПодсказки Можно отсортировать массив и просто взять k-тый элемент с конца. Для более эффективного решения можно использовать алгоритм быстрой выборки. Подход В самом простом случае мы можем отсортировать массив и взять k-тый элемент с конца.\nАлгоритм Сортируем массив. Возвращаем k-тый элемент с конца. Решение def findKthLargest(nums, k): nums.sort() return nums[-k] ","description":"LeetCode 215. Найти k-тый по величине элемент в неотсортированном массиве.","title":"215. Kth Largest Element in an Array","uri":"/en/tracks/algorithms-101/leetcode/medium/215/"},{"content":"LeetCode problem 2150\nclass Solution: def findLonely(self, nums: List[int]) -\u003e List[int]: counter = Counter(nums) res = [] for num, cnt in counter.items(): if cnt == 1 and counter[num - 1] == 0 and counter[num + 1] == 0: res.append(num) return res ","description":"2150. Find All Lonely Numbers in the Array","title":"2150. Find All Lonely Numbers in the Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2150/"},{"content":"LeetCode problem 2151\nclass Solution: def maximumGood(self, statements: List[List[int]]) -\u003e int: def check(mask): cnt = 0 for i, s in enumerate(statements): if (mask \u003e\u003e i) \u0026 1: for j, v in enumerate(s): if v \u003c 2 and ((mask \u003e\u003e j) \u0026 1) != v: return 0 cnt += 1 return cnt return max(check(mask) for mask in range(1, 1 \u003c\u003c len(statements))) ","description":"2151. Maximum Good People Based on Statements","title":"2151. Maximum Good People Based on Statements","uri":"/en/tracks/algorithms-101/leetcode/hard/2151/"},{"content":"LeetCode problem 2152\nclass Solution: def minimumLines(self, points: List[List[int]]) -\u003e int: def check(i, j, k): x1, y1 = points[i] x2, y2 = points[j] x3, y3 = points[k] return (x2 - x1) * (y3 - y1) == (x3 - x1) * (y2 - y1) @cache def dfs(state): if state == (1 \u003c\u003c n) - 1: return 0 res = inf for i in range(n): if not (state \u003e\u003e i \u0026 1): for j in range(i + 1, n): nxt = state | 1 \u003c\u003c i | 1 \u003c\u003c j for k in range(j + 1, n): if not (nxt \u003e\u003e k \u0026 1) and check(i, j, k): nxt |= 1 \u003c\u003c k res = min(res, dfs(nxt) + 1) if i == n - 1: res = min(res, dfs(state | 1 \u003c\u003c i) + 1) return res n = len(points) return dfs(0) ","description":"2152. Minimum Number of Lines to Cover Points","title":"2152. Minimum Number of Lines to Cover Points","uri":"/en/tracks/algorithms-101/leetcode/medium/2152/"},{"content":"LeetCode problem 2154\nclass Solution: def findFinalValue(self, nums: List[int], original: int) -\u003e int: s = set(nums) while original in s: original \u003c\u003c= 1 return original ","description":"2154. Keep Multiplying Found Values by Two","title":"2154. Keep Multiplying Found Values by Two","uri":"/en/tracks/algorithms-101/leetcode/easy/2154/"},{"content":"LeetCode problem 2155\nclass Solution: def maxScoreIndices(self, nums: List[int]) -\u003e List[int]: left, right = 0, sum(nums) mx = right res = [0] for i, num in enumerate(nums): if num == 0: left += 1 else: right -= 1 t = left + right if mx == t: res.append(i + 1) elif mx \u003c t: mx = t res = [i + 1] return res ","description":"2155. All Divisions With the Highest Score of a Binary Array","title":"2155. All Divisions With the Highest Score of a Binary Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2155/"},{"content":"LeetCode problem 2157\nclass Solution: def groupStrings(self, words: List[str]) -\u003e List[int]: def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] def union(a, b): nonlocal mx, n if b not in p: return pa, pb = find(a), find(b) if pa == pb: return p[pa] = pb size[pb] += size[pa] mx = max(mx, size[pb]) n -= 1 p = {} size = Counter() n = len(words) mx = 0 for word in words: x = 0 for c in word: x |= 1 \u003c\u003c (ord(c) - ord('a')) p[x] = x size[x] += 1 mx = max(mx, size[x]) if size[x] \u003e 1: n -= 1 for x in p.keys(): for i in range(26): union(x, x ^ (1 \u003c\u003c i)) if (x \u003e\u003e i) \u0026 1: for j in range(26): if ((x \u003e\u003e j) \u0026 1) == 0: union(x, x ^ (1 \u003c\u003c i) | (1 \u003c\u003c j)) return [n, mx] ","description":"2157. Groups of Strings","title":"2157. Groups of Strings","uri":"/en/tracks/algorithms-101/leetcode/hard/2157/"},{"content":"LeetCode problem 2158\nclass Node: def __init__(self, l, r): self.left = None self.right = None self.l = l self.r = r self.mid = (l + r) \u003e\u003e 1 self.v = 0 self.add = 0 class SegmentTree: def __init__(self): self.root = Node(1, 10**5 + 10) def modify(self, l, r, v, node=None): if l \u003e r: return if node is None: node = self.root if node.l \u003e= l and node.r \u003c= r: node.v = node.r - node.l + 1 node.add = v return self.pushdown(node) if l \u003c= node.mid: self.modify(l, r, v, node.left) if r \u003e node.mid: self.modify(l, r, v, node.right) self.pushup(node) def query(self, l, r, node=None): if l \u003e r: return 0 if node is None: node = self.root if node.l \u003e= l and node.r \u003c= r: return node.v self.pushdown(node) v = 0 if l \u003c= node.mid: v += self.query(l, r, node.left) if r \u003e node.mid: v += self.query(l, r, node.right) return v def pushup(self, node): node.v = node.left.v + node.right.v def pushdown(self, node): if node.left is None: node.left = Node(node.l, node.mid) if node.right is None: node.right = Node(node.mid + 1, node.r) if node.add: left, right = node.left, node.right left.v = left.r - left.l + 1 right.v = right.r - right.l + 1 left.add = node.add right.add = node.add node.add = 0 class Solution: def amountPainted(self, paint: List[List[int]]) -\u003e List[int]: tree = SegmentTree() res = [] for i, (start, end) in enumerate(paint): l, r = start + 1, end v = tree.query(l, r) res.append(r - l + 1 - v) tree.modify(l, r, 1) return res ","description":"2158. Amount of New Area Painted Each Day","title":"2158. Amount of New Area Painted Each Day","uri":"/en/tracks/algorithms-101/leetcode/hard/2158/"},{"content":"LeetCode problem 2160\nclass Solution: def minimumSum(self, num: int) -\u003e int: nums = [] while num: nums.append(num % 10) num //= 10 nums.sort() return 10 * (nums[0] + nums[1]) + nums[2] + nums[3] ","description":"2160. Minimum Sum of Four Digit Number After Splitting Digits","title":"2160. Minimum Sum of Four Digit Number After Splitting Digits","uri":"/en/tracks/algorithms-101/leetcode/easy/2160/"},{"content":"LeetCode problem 2161\nclass Solution: def pivotArray(self, nums: List[int], pivot: int) -\u003e List[int]: a, b, c = [], [], [] for x in nums: if x \u003c pivot: a.append(x) elif x == pivot: b.append(x) else: c.append(x) return a + b + c ","description":"2161. Partition Array According to Given Pivot","title":"2161. Partition Array According to Given Pivot","uri":"/en/tracks/algorithms-101/leetcode/medium/2161/"},{"content":"LeetCode problem 2162\nclass Solution: def minCostSetTime( self, startAt: int, moveCost: int, pushCost: int, targetSeconds: int ) -\u003e int: def f(m, s): if not 0 \u003c= m \u003c 100 or not 0 \u003c= s \u003c 100: return inf arr = [m // 10, m % 10, s // 10, s % 10] i = 0 while i \u003c 4 and arr[i] == 0: i += 1 t = 0 prev = startAt for v in arr[i:]: if v != prev: t += moveCost t += pushCost prev = v return t m, s = divmod(targetSeconds, 60) res = min(f(m, s), f(m - 1, s + 60)) return res ","description":"2162. Minimum Cost to Set Cooking Time","title":"2162. Minimum Cost to Set Cooking Time","uri":"/en/tracks/algorithms-101/leetcode/medium/2162/"},{"content":"LeetCode problem 2163\nclass Solution: def minimumDifference(self, nums: List[int]) -\u003e int: m = len(nums) n = m // 3 s = 0 pre = [0] * (m + 1) q1 = [] for i, x in enumerate(nums[: n * 2], 1): s += x heappush(q1, -x) if len(q1) \u003e n: s -= -heappop(q1) pre[i] = s s = 0 suf = [0] * (m + 1) q2 = [] for i in range(m, n, -1): x = nums[i - 1] s += x heappush(q2, x) if len(q2) \u003e n: s -= heappop(q2) suf[i] = s return min(pre[i] - suf[i + 1] for i in range(n, n * 2 + 1)) ","description":"2163. Minimum Difference in Sums After Removal of Elements","title":"2163. Minimum Difference in Sums After Removal of Elements","uri":"/en/tracks/algorithms-101/leetcode/hard/2163/"},{"content":"LeetCode problem 2164\nclass Solution: def sortEvenOdd(self, nums: List[int]) -\u003e List[int]: a = sorted(nums[::2]) b = sorted(nums[1::2], reverse=True) nums[::2] = a nums[1::2] = b return nums ","description":"2164. Sort Even and Odd Indices Independently","title":"2164. Sort Even and Odd Indices Independently","uri":"/en/tracks/algorithms-101/leetcode/easy/2164/"},{"content":"LeetCode problem 2165\nclass Solution: def smallestNumber(self, num: int) -\u003e int: if num == 0: return 0 cnt = [0] * 10 neg = num \u003c 0 num = abs(num) while num: num, v = divmod(num, 10) cnt[v] += 1 res = \"\" if neg: for i in range(9, -1, -1): if cnt[i]: res += str(i) * cnt[i] return -int(res) if cnt[0]: for i in range(1, 10): if cnt[i]: res += str(i) cnt[i] -= 1 break for i in range(10): if cnt[i]: res += str(i) * cnt[i] return int(res) ","description":"2165. Smallest Value of the Rearranged Number","title":"2165. Smallest Value of the Rearranged Number","uri":"/en/tracks/algorithms-101/leetcode/medium/2165/"},{"content":"LeetCode problem 2166\nclass Bitset: def __init__(self, size: int): self.a = ['0'] * size self.b = ['1'] * size self.cnt = 0 def fix(self, idx: int) -\u003e None: if self.a[idx] == '0': self.a[idx] = '1' self.cnt += 1 self.b[idx] = '0' def unfix(self, idx: int) -\u003e None: if self.a[idx] == '1': self.a[idx] = '0' self.cnt -= 1 self.b[idx] = '1' def flip(self) -\u003e None: self.a, self.b = self.b, self.a self.cnt = len(self.a) - self.cnt def all(self) -\u003e bool: return self.cnt == len(self.a) def one(self) -\u003e bool: return self.cnt \u003e 0 def count(self) -\u003e int: return self.cnt def toString(self) -\u003e str: return ''.join(self.a) # Your Bitset object will be instantiated and called as such: # obj = Bitset(size) # obj.fix(idx) # obj.unfix(idx) # obj.flip() # param_4 = obj.all() # param_5 = obj.one() # param_6 = obj.count() # param_7 = obj.toString() ","description":"2166. Design Bitset","title":"2166. Design Bitset","uri":"/en/tracks/algorithms-101/leetcode/medium/2166/"},{"content":"LeetCode problem 2167\nclass Solution: def minimumTime(self, s: str) -\u003e int: n = len(s) pre = [0] * (n + 1) suf = [0] * (n + 1) for i, c in enumerate(s): pre[i + 1] = pre[i] if c == '0' else min(pre[i] + 2, i + 1) for i in range(n - 1, -1, -1): suf[i] = suf[i + 1] if s[i] == '0' else min(suf[i + 1] + 2, n - i) return min(a + b for a, b in zip(pre[1:], suf[1:])) ","description":"2167. Minimum Time to Remove All Cars Containing Illegal Goods","title":"2167. Minimum Time to Remove All Cars Containing Illegal Goods","uri":"/en/tracks/algorithms-101/leetcode/hard/2167/"},{"content":"LeetCode problem 2168\nclass Solution: def equalDigitFrequency(self, s: str) -\u003e int: def check(i, j): v = set() for k in range(10): cnt = presum[j + 1][k] - presum[i][k] if cnt \u003e 0: v.add(cnt) if len(v) \u003e 1: return False return True n = len(s) presum = [[0] * 10 for _ in range(n + 1)] for i, c in enumerate(s): presum[i + 1][int(c)] += 1 for j in range(10): presum[i + 1][j] += presum[i][j] vis = set(s[i : j + 1] for i in range(n) for j in range(i, n) if check(i, j)) return len(vis) ","description":"2168. Unique Substrings With Equal Digit Frequency","title":"2168. Unique Substrings With Equal Digit Frequency","uri":"/en/tracks/algorithms-101/leetcode/medium/2168/"},{"content":"LeetCode problem 2169\nclass Solution: def countOperations(self, num1: int, num2: int) -\u003e int: res = 0 while num1 and num2: if num1 \u003e= num2: num1, num2 = num2, num1 num2 -= num1 res += 1 return res ","description":"2169. Count Operations to Obtain Zero","title":"2169. Count Operations to Obtain Zero","uri":"/en/tracks/algorithms-101/leetcode/easy/2169/"},{"content":"LeetCode problem 2170\nclass Solution: def minimumOperations(self, nums: List[int]) -\u003e int: def get(i): c = Counter(nums[i::2]).most_common(2) if not c: return [(0, 0), (0, 0)] if len(c) == 1: return [c[0], (0, 0)] return c n = len(nums) return min(n - (n1 + n2) for a, n1 in get(0) for b, n2 in get(1) if a != b) ","description":"2170. Minimum Operations to Make the Array Alternating","title":"2170. Minimum Operations to Make the Array Alternating","uri":"/en/tracks/algorithms-101/leetcode/medium/2170/"},{"content":"LeetCode problem 2171\nclass Solution: def minimumRemoval(self, beans: List[int]) -\u003e int: beans.sort() s, n = sum(beans), len(beans) return min(s - x * (n - i) for i, x in enumerate(beans)) ","description":"2171. Removing Minimum Number of Magic Beans","title":"2171. Removing Minimum Number of Magic Beans","uri":"/en/tracks/algorithms-101/leetcode/medium/2171/"},{"content":"LeetCode problem 2172\nclass Solution: def maximumANDSum(self, nums: List[int], numSlots: int) -\u003e int: n = len(nums) m = numSlots \u003c\u003c 1 f = [0] * (1 \u003c\u003c m) for i in range(1 \u003c\u003c m): cnt = i.bit_count() if cnt \u003e n: continue for j in range(m): if i \u003e\u003e j \u0026 1: f[i] = max(f[i], f[i ^ (1 \u003c\u003c j)] + (nums[cnt - 1] \u0026 (j // 2 + 1))) return max(f) ","description":"2172. Maximum AND Sum of Array","title":"2172. Maximum AND Sum of Array","uri":"/en/tracks/algorithms-101/leetcode/hard/2172/"},{"content":"LeetCode problem 2174\nclass Solution: def removeOnes(self, grid: List[List[int]]) -\u003e int: m, n = len(grid), len(grid[0]) state = sum(1 \u003c\u003c (i * n + j) for i in range(m) for j in range(n) if grid[i][j]) q = deque([state]) vis = {state} res = 0 while q: for _ in range(len(q)): state = q.popleft() if state == 0: return res for i in range(m): for j in range(n): if grid[i][j] == 0: continue nxt = state for r in range(m): nxt \u0026= ~(1 \u003c\u003c (r * n + j)) for c in range(n): nxt \u0026= ~(1 \u003c\u003c (i * n + c)) if nxt not in vis: vis.add(nxt) q.append(nxt) res += 1 return -1 ","description":"2174. Remove All Ones With Row and Column Flips II","title":"2174. Remove All Ones With Row and Column Flips II","uri":"/en/tracks/algorithms-101/leetcode/medium/2174/"},{"content":"LeetCode problem 2176\nclass Solution: def countPairs(self, nums: List[int], k: int) -\u003e int: n = len(nums) return sum( nums[i] == nums[j] and (i * j) % k == 0 for i in range(n) for j in range(i + 1, n) ) ","description":"2176. Count Equal and Divisible Pairs in an Array","title":"2176. Count Equal and Divisible Pairs in an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2176/"},{"content":"LeetCode problem 2177\nclass Solution: def sumOfThree(self, num: int) -\u003e List[int]: x, mod = divmod(num, 3) return [] if mod else [x - 1, x, x + 1] ","description":"2177. Find Three Consecutive Integers That Sum to a Given Number","title":"2177. Find Three Consecutive Integers That Sum to a Given Number","uri":"/en/tracks/algorithms-101/leetcode/medium/2177/"},{"content":"LeetCode problem 2178\nclass Solution: def maximumEvenSplit(self, finalSum: int) -\u003e List[int]: if finalSum % 2: return [] i = 2 res = [] while i \u003c= finalSum: res.append(i) finalSum -= i i += 2 res[-1] += finalSum return res ","description":"2178. Maximum Split of Positive Even Integers","title":"2178. Maximum Split of Positive Even Integers","uri":"/en/tracks/algorithms-101/leetcode/medium/2178/"},{"content":"LeetCode problem 2179\nclass Node: def __init__(self): self.l = 0 self.r = 0 self.v = 0 class SegmentTree: def __init__(self, n): self.tr = [Node() for _ in range(4 * n)] self.build(1, 1, n) def build(self, u, l, r): self.tr[u].l = l self.tr[u].r = r if l == r: return mid = (l + r) \u003e\u003e 1 self.build(u \u003c\u003c 1, l, mid) self.build(u \u003c\u003c 1 | 1, mid + 1, r) def modify(self, u, x, v): if self.tr[u].l == x and self.tr[u].r == x: self.tr[u].v += v return mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 if x \u003c= mid: self.modify(u \u003c\u003c 1, x, v) else: self.modify(u \u003c\u003c 1 | 1, x, v) self.pushup(u) def pushup(self, u): self.tr[u].v = self.tr[u \u003c\u003c 1].v + self.tr[u \u003c\u003c 1 | 1].v def query(self, u, l, r): if self.tr[u].l \u003e= l and self.tr[u].r \u003c= r: return self.tr[u].v mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 v = 0 if l \u003c= mid: v += self.query(u \u003c\u003c 1, l, r) if r \u003e mid: v += self.query(u \u003c\u003c 1 | 1, l, r) return v class Solution: def goodTriplets(self, nums1: List[int], nums2: List[int]) -\u003e int: pos = {v: i for i, v in enumerate(nums2, 1)} res = 0 n = len(nums1) tree = SegmentTree(n) for num in nums1: p = pos[num] left = tree.query(1, 1, p) right = n - p - (tree.query(1, 1, n) - tree.query(1, 1, p)) res += left * right tree.modify(1, p, 1) return res ","description":"2179. Count Good Triplets in an Array","title":"2179. Count Good Triplets in an Array","uri":"/en/tracks/algorithms-101/leetcode/hard/2179/"},{"content":"LeetCode problem 2180\nclass Solution: def countEven(self, num: int) -\u003e int: res = num // 10 * 5 - 1 x, s = num // 10, 0 while x: s += x % 10 x //= 10 res += (num % 10 + 2 - (s \u0026 1)) \u003e\u003e 1 return res ","description":"2180. Count Integers With Even Digit Sum","title":"2180. Count Integers With Even Digit Sum","uri":"/en/tracks/algorithms-101/leetcode/easy/2180/"},{"content":"LeetCode problem 2181\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def mergeNodes(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: dummy = tail = ListNode() s = 0 cur = head.next while cur: if cur.val != 0: s += cur.val else: tail.next = ListNode(s) tail = tail.next s = 0 cur = cur.next return dummy.next ","description":"2181. Merge Nodes in Between Zeros","title":"2181. Merge Nodes in Between Zeros","uri":"/en/tracks/algorithms-101/leetcode/medium/2181/"},{"content":"LeetCode problem 2182\nclass Solution: def repeatLimitedString(self, s: str, repeatLimit: int) -\u003e str: cnt = [0] * 26 for c in s: cnt[ord(c) - ord(\"a\")] += 1 res = [] j = 24 for i in range(25, -1, -1): j = min(i - 1, j) while 1: x = min(repeatLimit, cnt[i]) cnt[i] -= x res.append(ascii_lowercase[i] * x) if cnt[i] == 0: break while j \u003e= 0 and cnt[j] == 0: j -= 1 if j \u003c 0: break cnt[j] -= 1 res.append(ascii_lowercase[j]) return \"\".join(res) ","description":"2182. Construct String With Repeat Limit","title":"2182. Construct String With Repeat Limit","uri":"/en/tracks/algorithms-101/leetcode/medium/2182/"},{"content":"LeetCode problem 2184\nclass Solution: def buildWall(self, height: int, width: int, bricks: List[int]) -\u003e int: def dfs(v): if v \u003e width: return if v == width: s.append(t[:]) return for x in bricks: t.append(x) dfs(v + x) t.pop() def check(a, b): s1, s2 = a[0], b[0] i = j = 1 while i \u003c len(a) and j \u003c len(b): if s1 == s2: return False if s1 \u003c s2: s1 += a[i] i += 1 else: s2 += b[j] j += 1 return True mod = 10**9 + 7 s = [] t = [] dfs(0) g = defaultdict(list) n = len(s) for i in range(n): if check(s[i], s[i]): g[i].append(i) for j in range(i + 1, n): if check(s[i], s[j]): g[i].append(j) g[j].append(i) dp = [[0] * n for _ in range(height)] for j in range(n): dp[0][j] = 1 for i in range(1, height): for j in range(n): for k in g[j]: dp[i][j] += dp[i - 1][k] dp[i][j] %= mod return sum(dp[-1]) % mod ","description":"2184. Number of Ways to Build Sturdy Brick Wall","title":"2184. Number of Ways to Build Sturdy Brick Wall","uri":"/en/tracks/algorithms-101/leetcode/medium/2184/"},{"content":"LeetCode problem 2185\nclass Trie: def __init__(self): self.children = [None] * 26 self.cnt = 0 def insert(self, w): node = self for c in w: i = ord(c) - ord('a') if node.children[i] is None: node.children[i] = Trie() node = node.children[i] node.cnt += 1 def search(self, pref): node = self for c in pref: i = ord(c) - ord('a') if node.children[i] is None: return 0 node = node.children[i] return node.cnt class Solution: def prefixCount(self, words: List[str], pref: str) -\u003e int: tree = Trie() for w in words: tree.insert(w) return tree.search(pref) ","description":"2185. Counting Words With a Given Prefix","title":"2185. Counting Words With a Given Prefix","uri":"/en/tracks/algorithms-101/leetcode/easy/2185/"},{"content":"LeetCode problem 2186\nclass Solution: def minSteps(self, s: str, t: str) -\u003e int: cnt = Counter(s) for c in t: cnt[c] -= 1 return sum(abs(v) for v in cnt.values()) ","description":"2186. Minimum Number of Steps to Make Two Strings Anagram II","title":"2186. Minimum Number of Steps to Make Two Strings Anagram II","uri":"/en/tracks/algorithms-101/leetcode/medium/2186/"},{"content":"LeetCode problem 2187\nclass Solution: def minimumTime(self, time: List[int], totalTrips: int) -\u003e int: mx = min(time) * totalTrips return bisect_left( range(mx), totalTrips, key=lambda x: sum(x // v for v in time) ) ","description":"2187. Minimum Time to Complete Trips","title":"2187. Minimum Time to Complete Trips","uri":"/en/tracks/algorithms-101/leetcode/medium/2187/"},{"content":"LeetCode problem 2188\nclass Solution: def minimumFinishTime( self, tires: List[List[int]], changeTime: int, numLaps: int ) -\u003e int: cost = [inf] * 18 for f, r in tires: i, s, t = 1, 0, f while t \u003c= changeTime + f: s += t cost[i] = min(cost[i], s) t *= r i += 1 f = [inf] * (numLaps + 1) f[0] = -changeTime for i in range(1, numLaps + 1): for j in range(1, min(18, i + 1)): f[i] = min(f[i], f[i - j] + cost[j]) f[i] += changeTime return f[numLaps] ","description":"2188. Minimum Time to Finish the Race","title":"2188. Minimum Time to Finish the Race","uri":"/en/tracks/algorithms-101/leetcode/hard/2188/"},{"content":"LeetCode problem 2189\nclass Solution: def houseOfCards(self, n: int) -\u003e int: @cache def dfs(n: int, k: int) -\u003e int: x = 3 * k + 2 if x \u003e n: return 0 if x == n: return 1 return dfs(n - x, k + 1) + dfs(n, k + 1) return dfs(n, 0) ","description":"2189. Number of Ways to Build House of Cards","title":"2189. Number of Ways to Build House of Cards","uri":"/en/tracks/algorithms-101/leetcode/medium/2189/"},{"content":"LeetCode problem 2190\nclass Solution: def mostFrequent(self, nums: List[int], key: int) -\u003e int: cnt = Counter() res = mx = 0 for a, b in pairwise(nums): if a == key: cnt[b] += 1 if mx \u003c cnt[b]: mx = cnt[b] res = b return res ","description":"2190. Most Frequent Number Following Key In an Array","title":"2190. Most Frequent Number Following Key In an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2190/"},{"content":"LeetCode problem 2191\nclass Solution: def sortJumbled(self, mapping: List[int], nums: List[int]) -\u003e List[int]: arr = [] for i, x in enumerate(nums): y = mapping[0] if x == 0 else 0 k = 1 while x: x, v = divmod(x, 10) y = mapping[v] * k + y k *= 10 arr.append((y, i)) arr.sort() return [nums[i] for _, i in arr] ","description":"2191. Sort the Jumbled Numbers","title":"2191. Sort the Jumbled Numbers","uri":"/en/tracks/algorithms-101/leetcode/medium/2191/"},{"content":"LeetCode problem 2192\nclass Solution: def getAncestors(self, n: int, edges: List[List[int]]) -\u003e List[List[int]]: def bfs(s: int): q = deque([s]) vis = {s} while q: i = q.popleft() for j in g[i]: if j not in vis: vis.add(j) q.append(j) res[j].append(s) g = defaultdict(list) for u, v in edges: g[u].append(v) res = [[] for _ in range(n)] for i in range(n): bfs(i) return res ","description":"2192. All Ancestors of a Node in a Directed Acyclic Graph","title":"2192. All Ancestors of a Node in a Directed Acyclic Graph","uri":"/en/tracks/algorithms-101/leetcode/medium/2192/"},{"content":"LeetCode problem 2193\nclass Solution: def minMovesToMakePalindrome(self, s: str) -\u003e int: cs = list(s) res, n = 0, len(s) i, j = 0, n - 1 while i \u003c j: even = False for k in range(j, i, -1): if cs[i] == cs[k]: even = True while k \u003c j: cs[k], cs[k + 1] = cs[k + 1], cs[k] k += 1 res += 1 j -= 1 break if not even: res += n // 2 - i i += 1 return res ","description":"2193. Minimum Number of Moves to Make Palindrome","title":"2193. Minimum Number of Moves to Make Palindrome","uri":"/en/tracks/algorithms-101/leetcode/hard/2193/"},{"content":"LeetCode problem 2194\nclass Solution: def cellsInRange(self, s: str) -\u003e List[str]: return [ chr(i) + str(j) for i in range(ord(s[0]), ord(s[-2]) + 1) for j in range(int(s[1]), int(s[-1]) + 1) ] ","description":"2194. Cells in a Range on an Excel Sheet","title":"2194. Cells in a Range on an Excel Sheet","uri":"/en/tracks/algorithms-101/leetcode/easy/2194/"},{"content":"LeetCode problem 2195\nclass Solution: def minimalKSum(self, nums: List[int], k: int) -\u003e int: nums.append(0) nums.append(2 * 10**9) nums.sort() res = 0 for a, b in pairwise(nums): n = min(k, b - a - 1) if n \u003c= 0: continue k -= n res += (a + 1 + a + n) * n // 2 if k == 0: break return res ","description":"2195. Append K Integers With Minimal Sum","title":"2195. Append K Integers With Minimal Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/2195/"},{"content":"LeetCode problem 2196\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def createBinaryTree(self, descriptions: List[List[int]]) -\u003e Optional[TreeNode]: g = defaultdict(TreeNode) vis = set() for p, c, left in descriptions: if p not in g: g[p] = TreeNode(p) if c not in g: g[c] = TreeNode(c) if left: g[p].left = g[c] else: g[p].right = g[c] vis.add(c) for v, node in g.items(): if v not in vis: return node ","description":"2196. Create Binary Tree From Descriptions","title":"2196. Create Binary Tree From Descriptions","uri":"/en/tracks/algorithms-101/leetcode/medium/2196/"},{"content":"LeetCode problem 2198\nclass Solution: def singleDivisorTriplet(self, nums: List[int]) -\u003e int: def check(a, b, c): s = a + b + c return sum(s % x == 0 for x in [a, b, c]) == 1 counter = Counter(nums) res = 0 for a, cnt1 in counter.items(): for b, cnt2 in counter.items(): for c, cnt3 in counter.items(): if check(a, b, c): if a == b: res += cnt1 * (cnt1 - 1) * cnt3 elif a == c: res += cnt1 * (cnt1 - 1) * cnt2 elif b == c: res += cnt1 * cnt2 * (cnt2 - 1) else: res += cnt1 * cnt2 * cnt3 return res ","description":"2198. Number of Single Divisor Triplets","title":"2198. Number of Single Divisor Triplets","uri":"/en/tracks/algorithms-101/leetcode/medium/2198/"},{"content":"LeetCode problem\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nExample 1:\nInput: n = 3 Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] Example 2:\nInput: n = 1 Output: [\"()\"] Prerequirements Backtracking pattern\nFirst accepted Idea:\nclass Solution: def generateParenthesis(self, n): res = [] def dfs(l: int, r: int, s: str) -\u003e None: if l == 0 and r == 0: res.append(s) if l \u003e 0: dfs(l - 1, r, s + '(') if l \u003c r: dfs(l, r - 1, s + ')') dfs(n, n, '') return res ","description":"LeetCode 22. Generate Parentheses","title":"22. Generate Parentheses","uri":"/en/tracks/algorithms-101/leetcode/medium/22/"},{"content":"LeetCode problem 2200\nclass Solution: def findKDistantIndices(self, nums: List[int], key: int, k: int) -\u003e List[int]: res = [] j, n = 0, len(nums) for i in range(n): while j \u003c i - k or (j \u003c n and nums[j] != key): j += 1 if j \u003c n and j \u003c= (i + k): res.append(i) return res ","description":"2200. Find All K-Distant Indices in an Array","title":"2200. Find All K-Distant Indices in an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2200/"},{"content":"LeetCode problem 2201\nclass Solution: def digArtifacts( self, n: int, artifacts: List[List[int]], dig: List[List[int]] ) -\u003e int: def check(a: List[int]) -\u003e bool: x1, y1, x2, y2 = a return all( (x, y) in s for x in range(x1, x2 + 1) for y in range(y1, y2 + 1) ) s = {(i, j) for i, j in dig} return sum(check(a) for a in artifacts) ","description":"2201. Count Artifacts That Can Be Extracted","title":"2201. Count Artifacts That Can Be Extracted","uri":"/en/tracks/algorithms-101/leetcode/medium/2201/"},{"content":"LeetCode problem 2202\nclass Solution: def maximumTop(self, nums: List[int], k: int) -\u003e int: if k == 0: return nums[0] n = len(nums) if n == 1: if k % 2: return -1 return nums[0] res = max(nums[: k - 1], default=-1) if k \u003c n: res = max(res, nums[k]) return res ","description":"2202. Maximize the Topmost Element After K Moves","title":"2202. Maximize the Topmost Element After K Moves","uri":"/en/tracks/algorithms-101/leetcode/medium/2202/"},{"content":"LeetCode problem 2203\nclass Solution: def minimumWeight( self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int ) -\u003e int: def dijkstra(g, u): dist = [inf] * n dist[u] = 0 q = [(0, u)] while q: d, u = heappop(q) if d \u003e dist[u]: continue for v, w in g[u]: if dist[v] \u003e dist[u] + w: dist[v] = dist[u] + w heappush(q, (dist[v], v)) return dist g = defaultdict(list) rg = defaultdict(list) for f, t, w in edges: g[f].append((t, w)) rg[t].append((f, w)) d1 = dijkstra(g, src1) d2 = dijkstra(g, src2) d3 = dijkstra(rg, dest) res = min(sum(v) for v in zip(d1, d2, d3)) return -1 if res \u003e= inf else res ","description":"2203. Minimum Weighted Subgraph With the Required Paths","title":"2203. Minimum Weighted Subgraph With the Required Paths","uri":"/en/tracks/algorithms-101/leetcode/hard/2203/"},{"content":"LeetCode problem 2204\nclass Solution: def distanceToCycle(self, n: int, edges: List[List[int]]) -\u003e List[int]: g = defaultdict(set) for a, b in edges: g[a].add(b) g[b].add(a) q = deque(i for i in range(n) if len(g[i]) == 1) f = [0] * n seq = [] while q: i = q.popleft() seq.append(i) for j in g[i]: g[j].remove(i) f[i] = j if len(g[j]) == 1: q.append(j) g[i].clear() res = [0] * n for i in seq[::-1]: res[i] = res[f[i]] + 1 return res ","description":"2204. Distance to a Cycle in Undirected Graph","title":"2204. Distance to a Cycle in Undirected Graph","uri":"/en/tracks/algorithms-101/leetcode/hard/2204/"},{"content":"LeetCode problem 2206\nclass Solution: def divideArray(self, nums: List[int]) -\u003e bool: cnt = Counter(nums) return all(v % 2 == 0 for v in cnt.values()) ","description":"2206. Divide Array Into Equal Pairs","title":"2206. Divide Array Into Equal Pairs","uri":"/en/tracks/algorithms-101/leetcode/easy/2206/"},{"content":"LeetCode problem 2207\nclass Solution: def maximumSubsequenceCount(self, text: str, pattern: str) -\u003e int: res = 0 cnt = Counter() for c in text: if c == pattern[1]: res += cnt[pattern[0]] cnt[c] += 1 res += max(cnt[pattern[0]], cnt[pattern[1]]) return res ","description":"2207. Maximize Number of Subsequences in a String","title":"2207. Maximize Number of Subsequences in a String","uri":"/en/tracks/algorithms-101/leetcode/medium/2207/"},{"content":"LeetCode problem 2208\nclass Solution: def halveArray(self, nums: List[int]) -\u003e int: s = sum(nums) / 2 h = [] for v in nums: heappush(h, -v) res = 0 while s \u003e 0: t = -heappop(h) / 2 s -= t heappush(h, -t) res += 1 return res ","description":"2208. Minimum Operations to Halve Array Sum","title":"2208. Minimum Operations to Halve Array Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/2208/"},{"content":"LeetCode problem 2209\nclass Solution: def minimumWhiteTiles(self, floor: str, numCarpets: int, carpetLen: int) -\u003e int: @cache def dfs(i, j): if i \u003e= n: return 0 if floor[i] == '0': return dfs(i + 1, j) if j == 0: return s[-1] - s[i] return min(1 + dfs(i + 1, j), dfs(i + carpetLen, j - 1)) n = len(floor) s = [0] * (n + 1) for i, c in enumerate(floor): s[i + 1] = s[i] + int(c == '1') res = dfs(0, numCarpets) dfs.cache_clear() return res ","description":"2209. Minimum White Tiles After Covering With Carpets","title":"2209. Minimum White Tiles After Covering With Carpets","uri":"/en/tracks/algorithms-101/leetcode/hard/2209/"},{"content":"LeetCode problem 2210\nclass Solution: def countHillValley(self, nums: List[int]) -\u003e int: res = j = 0 for i in range(1, len(nums) - 1): if nums[i] == nums[i + 1]: continue if nums[i] \u003e nums[j] and nums[i] \u003e nums[i + 1]: res += 1 if nums[i] \u003c nums[j] and nums[i] \u003c nums[i + 1]: res += 1 j = i return res ","description":"2210. Count Hills and Valleys in an Array","title":"2210. Count Hills and Valleys in an Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2210/"},{"content":"LeetCode problem 2211\nclass Solution: def countCollisions(self, directions: str) -\u003e int: d = directions.lstrip('L').rstrip('R') return len(d) - d.count('S') ","description":"2211. Count Collisions on a Road","title":"2211. Count Collisions on a Road","uri":"/en/tracks/algorithms-101/leetcode/medium/2211/"},{"content":"LeetCode problem 2212\nclass Solution: def maximumBobPoints(self, numArrows: int, aliceArrows: List[int]) -\u003e List[int]: n = len(aliceArrows) state = 0 mx = -1 for mask in range(1 \u003c\u003c n): cnt = points = 0 for i, alice in enumerate(aliceArrows): if (mask \u003e\u003e i) \u0026 1: cnt += alice + 1 points += i if cnt \u003c= numArrows and mx \u003c points: state = mask mx = points res = [0] * n for i, alice in enumerate(aliceArrows): if (state \u003e\u003e i) \u0026 1: res[i] = alice + 1 numArrows -= res[i] res[0] = numArrows return res ","description":"2212. Maximum Points in an Archery Competition","title":"2212. Maximum Points in an Archery Competition","uri":"/en/tracks/algorithms-101/leetcode/medium/2212/"},{"content":"LeetCode problem 2213\nclass Node: def __init__(self): self.l = 0 self.r = 0 self.lmx = 0 self.rmx = 0 self.mx = 0 self.size = 0 self.lc = None self.rc = None N = 100010 tr = [Node() for _ in range(N \u003c\u003c 2)] class SegmentTree: def __init__(self, s): n = len(s) self.s = s self.build(1, 1, n) def build(self, u, l, r): tr[u].l = l tr[u].r = r if l == r: tr[u].lmx = tr[u].rmx = tr[u].mx = tr[u].size = 1 tr[u].lc = tr[u].rc = self.s[l - 1] return mid = (l + r) \u003e\u003e 1 self.build(u \u003c\u003c 1, l, mid) self.build(u \u003c\u003c 1 | 1, mid + 1, r) self.pushup(u) def modify(self, u, x, v): if tr[u].l == x and tr[u].r == x: tr[u].lc = tr[u].rc = v return mid = (tr[u].l + tr[u].r) \u003e\u003e 1 if x \u003c= mid: self.modify(u \u003c\u003c 1, x, v) else: self.modify(u \u003c\u003c 1 | 1, x, v) self.pushup(u) def query(self, u, l, r): if tr[u].l \u003e= l and tr[u].r \u003c= r: return tr[u] mid = (tr[u].l + tr[u].r) \u003e\u003e 1 if r \u003c= mid: return self.query(u \u003c\u003c 1, l, r) if l \u003e mid: return self.query(u \u003c\u003c 1 | 1, l, r) left, right = self.query(u \u003c\u003c 1, l, r), self.query(u \u003c\u003c 1 | 1, l, r) res = Node() self._pushup(res, left, right) return res def _pushup(self, root, left, right): root.lc, root.rc = left.lc, right.rc root.size = left.size + right.size root.mx = max(left.mx, right.mx) root.lmx, root.rmx = left.lmx, right.rmx if left.rc == right.lc: if left.lmx == left.size: root.lmx += right.lmx if right.rmx == right.size: root.rmx += left.rmx root.mx = max(root.mx, left.rmx + right.lmx) def pushup(self, u): self._pushup(tr[u], tr[u \u003c\u003c 1], tr[u \u003c\u003c 1 | 1]) class Solution: def longestRepeating( self, s: str, queryCharacters: str, queryIndices: List[int] ) -\u003e List[int]: tree = SegmentTree(s) k = len(queryIndices) res = [] for i, c in enumerate(queryCharacters): x = queryIndices[i] + 1 tree.modify(1, x, c) res.append(tree.query(1, 1, len(s)).mx) return res ","description":"2213. Longest Substring of One Repeating Character","title":"2213. Longest Substring of One Repeating Character","uri":"/en/tracks/algorithms-101/leetcode/hard/2213/"},{"content":"LeetCode problem 2214\nclass Solution: def minimumHealth(self, damage: List[int], armor: int) -\u003e int: return sum(damage) - min(max(damage), armor) + 1 ","description":"2214. Minimum Health to Beat Game","title":"2214. Minimum Health to Beat Game","uri":"/en/tracks/algorithms-101/leetcode/medium/2214/"},{"content":"LeetCode problem\nProblem Statement Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:\nanswer[0] is a list of all distinct integers in nums1 which are not present in nums2. answer[1] is a list of all distinct integers in nums2 which are not present in nums1. Note that the integers in the lists may be returned in any order.\nNaive Solution A naive approach would be to iterate over each element of the first array and check whether it’s in the second array. Similarly, iterate over each element of the second array and check whether it’s in the first array. This approach will take O(n*m) time, where n is the size of the first array and m is the size of the second array. This isn’t efficient for large input sizes.\nHints \u0026 Tips We can solve this problem more efficiently by using Python’s built-in set data structure. A set is a collection of unique elements and allows for O(1) time complexity for lookup operations.\nApproach Convert both arrays to sets. Find the difference between the two sets in both directions. Convert the results to lists and return them. Steps Convert nums1 to a set set1 and nums2 to a set set2. Find the difference between set1 and set2 and convert it to a list. This will give us all the elements that are in set1 but not in set2. Find the difference between set2 and set1 and convert it to a list. This will give us all the elements that are in set2 but not in set1. Return the results as a list of two lists. Solution def findDifference(nums1, nums2): set1 = set(nums1) set2 = set(nums2) diff1 = list(set1 - set2) diff2 = list(set2 - set1) return [diff1, diff2] ","description":"2215. Find the Difference of Two Arrays","title":"2215. Find the Difference of Two Arrays","uri":"/en/tracks/algorithms-101/leetcode/easy/2215/"},{"content":"LeetCode problem 2216\nclass Solution: def minDeletion(self, nums: List[int]) -\u003e int: n = len(nums) res = i = 0 while i \u003c n: j = i + 1 while j \u003c n and nums[j] == nums[i]: j += 1 res += 1 i = j + 1 res += (n - res) % 2 return res ","description":"2216. Minimum Deletions to Make Array Beautiful","title":"2216. Minimum Deletions to Make Array Beautiful","uri":"/en/tracks/algorithms-101/leetcode/medium/2216/"},{"content":"LeetCode problem 2217\nclass Solution: def kthPalindrome(self, queries: List[int], intLength: int) -\u003e List[int]: l = (intLength + 1) \u003e\u003e 1 start, end = 10 ** (l - 1), 10**l - 1 res = [] for q in queries: v = start + q - 1 if v \u003e end: res.append(-1) continue s = str(v) s += s[::-1][intLength % 2 :] res.append(int(s)) return res ","description":"2217. Find Palindrome With Fixed Length","title":"2217. Find Palindrome With Fixed Length","uri":"/en/tracks/algorithms-101/leetcode/medium/2217/"},{"content":"LeetCode problem 2218\nclass Solution: def maxValueOfCoins(self, piles: List[List[int]], k: int) -\u003e int: presum = [list(accumulate(p, initial=0)) for p in piles] dp = [0] * (k + 1) for s in presum: for j in range(k, -1, -1): for idx, v in enumerate(s): if j \u003e= idx: dp[j] = max(dp[j], dp[j - idx] + v) return dp[-1] ","description":"2218. Maximum Value of K Coins From Piles","title":"2218. Maximum Value of K Coins From Piles","uri":"/en/tracks/algorithms-101/leetcode/hard/2218/"},{"content":"LeetCode problem 2219\nclass Solution: def maximumSumScore(self, nums: List[int]) -\u003e int: s = [0] + list(accumulate(nums)) return max(max(s[i + 1], s[-1] - s[i]) for i in range(len(nums))) ","description":"2219. Maximum Sum Score of Array","title":"2219. Maximum Sum Score of Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2219/"},{"content":"LeetCode problem 2220\nclass Solution: def minBitFlips(self, start: int, goal: int) -\u003e int: t = start ^ goal res = 0 while t: res += t \u0026 1 t \u003e\u003e= 1 return res ","description":"2220. Minimum Bit Flips to Convert Number","title":"2220. Minimum Bit Flips to Convert Number","uri":"/en/tracks/algorithms-101/leetcode/easy/2220/"},{"content":"LeetCode problem 2221\nclass Solution: def triangularSum(self, nums: List[int]) -\u003e int: n = len(nums) for i in range(n, 0, -1): for j in range(i - 1): nums[j] = (nums[j] + nums[j + 1]) % 10 return nums[0] ","description":"2221. Find Triangular Sum of an Array","title":"2221. Find Triangular Sum of an Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2221/"},{"content":"LeetCode problem 2222\nclass Solution: def numberOfWays(self, s: str) -\u003e int: n = len(s) cnt0 = s.count(\"0\") cnt1 = n - cnt0 c0 = c1 = 0 res = 0 for c in s: if c == \"0\": res += c1 * (cnt1 - c1) c0 += 1 else: res += c0 * (cnt0 - c0) c1 += 1 return res ","description":"2222. Number of Ways to Select Buildings","title":"2222. Number of Ways to Select Buildings","uri":"/en/tracks/algorithms-101/leetcode/medium/2222/"},{"content":"LeetCode problem 2224\nclass Solution: def convertTime(self, current: str, correct: str) -\u003e int: a = int(current[:2]) * 60 + int(current[3:]) b = int(correct[:2]) * 60 + int(correct[3:]) res, d = 0, b - a for i in [60, 15, 5, 1]: res += d // i d %= i return res ","description":"2224. Minimum Number of Operations to Convert Time","title":"2224. Minimum Number of Operations to Convert Time","uri":"/en/tracks/algorithms-101/leetcode/easy/2224/"},{"content":"LeetCode problem 2225\nclass Solution: def findWinners(self, matches: List[List[int]]) -\u003e List[List[int]]: cnt = Counter() for a, b in matches: if a not in cnt: cnt[a] = 0 cnt[b] += 1 res = [[], []] for u, v in cnt.items(): if v \u003c 2: res[v].append(u) res[0].sort() res[1].sort() return res ","description":"2225. Find Players With Zero or One Losses","title":"2225. Find Players With Zero or One Losses","uri":"/en/tracks/algorithms-101/leetcode/medium/2225/"},{"content":"LeetCode problem 2226\nclass Solution: def maximumCandies(self, candies: List[int], k: int) -\u003e int: left, right = 0, max(candies) while left \u003c right: mid = (left + right + 1) \u003e\u003e 1 cnt = sum(v // mid for v in candies) if cnt \u003e= k: left = mid else: right = mid - 1 return left ","description":"2226. Maximum Candies Allocated to K Children","title":"2226. Maximum Candies Allocated to K Children","uri":"/en/tracks/algorithms-101/leetcode/medium/2226/"},{"content":"LeetCode problem 2227\nclass Encrypter: def __init__(self, keys: List[str], values: List[str], dictionary: List[str]): self.mp = dict(zip(keys, values)) self.cnt = Counter(self.encrypt(v) for v in dictionary) def encrypt(self, word1: str) -\u003e str: res = [] for c in word1: if c not in self.mp: return '' res.append(self.mp[c]) return ''.join(res) def decrypt(self, word2: str) -\u003e int: return self.cnt[word2] # Your Encrypter object will be instantiated and called as such: # obj = Encrypter(keys, values, dictionary) # param_1 = obj.encrypt(word1) # param_2 = obj.decrypt(word2) ","description":"2227. Encrypt and Decrypt Strings","title":"2227. Encrypt and Decrypt Strings","uri":"/en/tracks/algorithms-101/leetcode/hard/2227/"},{"content":"LeetCode problem 2229\nclass Solution: def isConsecutive(self, nums: List[int]) -\u003e bool: mi, mx = min(nums), max(nums) n = len(nums) return len(set(nums)) == n and mx == mi + n - 1 ","description":"2229. Check if an Array Is Consecutive","title":"2229. Check if an Array Is Consecutive","uri":"/en/tracks/algorithms-101/leetcode/easy/2229/"},{"content":"LeetCode problem 2231\nclass Solution: def largestInteger(self, num: int) -\u003e int: cnt = Counter() x = num while x: x, v = divmod(x, 10) cnt[v] += 1 x = num res = 0 t = 1 while x: x, v = divmod(x, 10) for y in range(10): if ((v ^ y) \u0026 1) == 0 and cnt[y]: res += y * t t *= 10 cnt[y] -= 1 break return res ","description":"2231. Largest Number After Digit Swaps by Parity","title":"2231. Largest Number After Digit Swaps by Parity","uri":"/en/tracks/algorithms-101/leetcode/easy/2231/"},{"content":"LeetCode problem 2232\nclass Solution: def minimizeResult(self, expression: str) -\u003e str: l, r = expression.split(\"+\") m, n = len(l), len(r) mi = inf res = None for i in range(m): for j in range(n): c = int(l[i:]) + int(r[: j + 1]) a = 1 if i == 0 else int(l[:i]) b = 1 if j == n - 1 else int(r[j + 1 :]) if (t := a * b * c) \u003c mi: mi = t res = f\"{l[:i]}({l[i:]}+{r[: j + 1]}){r[j + 1:]}\" return res ","description":"2232. Minimize Result by Adding Parentheses to Expression","title":"2232. Minimize Result by Adding Parentheses to Expression","uri":"/en/tracks/algorithms-101/leetcode/medium/2232/"},{"content":"LeetCode problem 2233\nclass Solution: def maximumProduct(self, nums: List[int], k: int) -\u003e int: heapify(nums) for _ in range(k): heappush(nums, heappop(nums) + 1) res = 1 mod = 10**9 + 7 for v in nums: res = (res * v) % mod return res ","description":"2233. Maximum Product After K Increments","title":"2233. Maximum Product After K Increments","uri":"/en/tracks/algorithms-101/leetcode/medium/2233/"},{"content":"LeetCode problem 2234\nclass Solution: def maximumBeauty( self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int ) -\u003e int: flowers.sort() n = len(flowers) s = list(accumulate(flowers, initial=0)) res, i = 0, n - bisect_left(flowers, target) for x in range(i, n + 1): newFlowers -= 0 if x == 0 else max(target - flowers[n - x], 0) if newFlowers \u003c 0: break l, r = 0, n - x - 1 while l \u003c r: mid = (l + r + 1) \u003e\u003e 1 if flowers[mid] * (mid + 1) - s[mid + 1] \u003c= newFlowers: l = mid else: r = mid - 1 y = 0 if r != -1: cost = flowers[l] * (l + 1) - s[l + 1] y = min(flowers[l] + (newFlowers - cost) // (l + 1), target - 1) res = max(res, x * full + y * partial) return res ","description":"2234. Maximum Total Beauty of the Gardens","title":"2234. Maximum Total Beauty of the Gardens","uri":"/en/tracks/algorithms-101/leetcode/hard/2234/"},{"content":"LeetCode problem 2235\nclass Solution: def sum(self, num1: int, num2: int) -\u003e int: num1, num2 = num1 \u0026 0xFFFFFFFF, num2 \u0026 0xFFFFFFFF while num2: carry = ((num1 \u0026 num2) \u003c\u003c 1) \u0026 0xFFFFFFFF num1, num2 = num1 ^ num2, carry return num1 if num1 \u003c 0x80000000 else ~(num1 ^ 0xFFFFFFFF) ","description":"2235. Add Two Integers","title":"2235. Add Two Integers","uri":"/en/tracks/algorithms-101/leetcode/easy/2235/"},{"content":"LeetCode problem 2236\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def checkTree(self, root: Optional[TreeNode]) -\u003e bool: return root.val == root.left.val + root.right.val ","description":"2236. Root Equals Sum of Children","title":"2236. Root Equals Sum of Children","uri":"/en/tracks/algorithms-101/leetcode/easy/2236/"},{"content":"LeetCode problem 2237\nclass Solution: def meetRequirement( self, n: int, lights: List[List[int]], requirement: List[int] ) -\u003e int: d = [0] * 100010 for p, r in lights: i, j = max(0, p - r), min(n - 1, p + r) d[i] += 1 d[j + 1] -= 1 return sum(s \u003e= r for s, r in zip(accumulate(d), requirement)) ","description":"2237. Count Positions on Street With Required Brightness","title":"2237. Count Positions on Street With Required Brightness","uri":"/en/tracks/algorithms-101/leetcode/medium/2237/"},{"content":"LeetCode problem 2239\nclass Solution: def findClosestNumber(self, nums: List[int]) -\u003e int: res, d = 0, inf for x in nums: if (y := abs(x)) \u003c d or (y == d and x \u003e res): res, d = x, y return res ","description":"2239. Find Closest Number to Zero","title":"2239. Find Closest Number to Zero","uri":"/en/tracks/algorithms-101/leetcode/easy/2239/"},{"content":"LeetCode problem 2240\nclass Solution: def waysToBuyPensPencils(self, total: int, cost1: int, cost2: int) -\u003e int: res = 0 for x in range(total // cost1 + 1): y = (total - (x * cost1)) // cost2 + 1 res += y return res ","description":"2240. Number of Ways to Buy Pens and Pencils","title":"2240. Number of Ways to Buy Pens and Pencils","uri":"/en/tracks/algorithms-101/leetcode/medium/2240/"},{"content":"LeetCode problem 2241\nclass ATM: def __init__(self): self.cnt = [0] * 5 self.d = [20, 50, 100, 200, 500] def deposit(self, banknotesCount: List[int]) -\u003e None: for i, v in enumerate(banknotesCount): self.cnt[i] += v def withdraw(self, amount: int) -\u003e List[int]: res = [0] * 5 for i in range(4, -1, -1): res[i] = min(amount // self.d[i], self.cnt[i]) amount -= res[i] * self.d[i] if amount \u003e 0: return [-1] for i, v in enumerate(res): self.cnt[i] -= v return res # Your ATM object will be instantiated and called as such: # obj = ATM() # obj.deposit(banknotesCount) # param_2 = obj.withdraw(amount) ","description":"2241. Design an ATM Machine","title":"2241. Design an ATM Machine","uri":"/en/tracks/algorithms-101/leetcode/medium/2241/"},{"content":"LeetCode problem 2242\nclass Solution: def maximumScore(self, scores: List[int], edges: List[List[int]]) -\u003e int: g = defaultdict(list) for a, b in edges: g[a].append(b) g[b].append(a) for k in g.keys(): g[k] = nlargest(3, g[k], key=lambda x: scores[x]) res = -1 for a, b in edges: for c in g[a]: for d in g[b]: if b != c != d != a: t = scores[a] + scores[b] + scores[c] + scores[d] res = max(res, t) return res ","description":"2242. Maximum Score of a Node Sequence","title":"2242. Maximum Score of a Node Sequence","uri":"/en/tracks/algorithms-101/leetcode/hard/2242/"},{"content":"LeetCode problem 2243\nclass Solution: def digitSum(self, s: str, k: int) -\u003e str: if len(s) \u003c= k: return s t = [] while s: t.append(str(sum(int(v) for v in s[:k]))) s = s[k:] return self.digitSum(''.join(t), k) ","description":"2243. Calculate Digit Sum of a String","title":"2243. Calculate Digit Sum of a String","uri":"/en/tracks/algorithms-101/leetcode/easy/2243/"},{"content":"LeetCode problem 2244\nclass Solution: def minimumRounds(self, tasks: List[int]) -\u003e int: cnt = Counter(tasks) res = 0 for v in cnt.values(): if v == 1: return -1 res += v // 3 + (v % 3 != 0) return res ","description":"2244. Minimum Rounds to Complete All Tasks","title":"2244. Minimum Rounds to Complete All Tasks","uri":"/en/tracks/algorithms-101/leetcode/medium/2244/"},{"content":"LeetCode problem 2245\nclass Solution: def maxTrailingZeros(self, grid: List[List[int]]) -\u003e int: m, n = len(grid), len(grid[0]) r2 = [[0] * (n + 1) for _ in range(m + 1)] c2 = [[0] * (n + 1) for _ in range(m + 1)] r5 = [[0] * (n + 1) for _ in range(m + 1)] c5 = [[0] * (n + 1) for _ in range(m + 1)] for i, row in enumerate(grid, 1): for j, x in enumerate(row, 1): s2 = s5 = 0 while x % 2 == 0: x //= 2 s2 += 1 while x % 5 == 0: x //= 5 s5 += 1 r2[i][j] = r2[i][j - 1] + s2 c2[i][j] = c2[i - 1][j] + s2 r5[i][j] = r5[i][j - 1] + s5 c5[i][j] = c5[i - 1][j] + s5 res = 0 for i in range(1, m + 1): for j in range(1, n + 1): a = min(r2[i][j] + c2[i - 1][j], r5[i][j] + c5[i - 1][j]) b = min(r2[i][j] + c2[m][j] - c2[i][j], r5[i][j] + c5[m][j] - c5[i][j]) c = min(r2[i][n] - r2[i][j] + c2[i][j], r5[i][n] - r5[i][j] + c5[i][j]) d = min( r2[i][n] - r2[i][j - 1] + c2[m][j] - c2[i][j], r5[i][n] - r5[i][j - 1] + c5[m][j] - c5[i][j], ) res = max(res, a, b, c, d) return res ","description":"2245. Maximum Trailing Zeros in a Cornered Path","title":"2245. Maximum Trailing Zeros in a Cornered Path","uri":"/en/tracks/algorithms-101/leetcode/medium/2245/"},{"content":"LeetCode problem 2246\nclass Solution: def longestPath(self, parent: List[int], s: str) -\u003e int: def dfs(i: int) -\u003e int: mx = 0 nonlocal res for j in g[i]: x = dfs(j) + 1 if s[i] != s[j]: res = max(res, mx + x) mx = max(mx, x) return mx g = defaultdict(list) for i in range(1, len(parent)): g[parent[i]].append(i) res = 0 dfs(0) return res + 1 ","description":"2246. Longest Path With Different Adjacent Characters","title":"2246. Longest Path With Different Adjacent Characters","uri":"/en/tracks/algorithms-101/leetcode/hard/2246/"},{"content":"LeetCode problem 2247\nclass Solution: def maximumCost(self, n: int, highways: List[List[int]], k: int) -\u003e int: if k \u003e= n: return -1 g = defaultdict(list) for a, b, cost in highways: g[a].append((b, cost)) g[b].append((a, cost)) f = [[-inf] * n for _ in range(1 \u003c\u003c n)] for i in range(n): f[1 \u003c\u003c i][i] = 0 res = -1 for i in range(1 \u003c\u003c n): for j in range(n): if i \u003e\u003e j \u0026 1: for h, cost in g[j]: if i \u003e\u003e h \u0026 1: f[i][j] = max(f[i][j], f[i ^ (1 \u003c\u003c j)][h] + cost) if i.bit_count() == k + 1: res = max(res, f[i][j]) return res ","description":"2247. Maximum Cost of Trip With K Highways","title":"2247. Maximum Cost of Trip With K Highways","uri":"/en/tracks/algorithms-101/leetcode/hard/2247/"},{"content":"LeetCode problem 2248\nclass Solution: def intersection(self, nums: List[List[int]]) -\u003e List[int]: cnt = Counter() res = [] for arr in nums: for x in arr: cnt[x] += 1 if cnt[x] == len(nums): res.append(x) res.sort() return res ","description":"2248. Intersection of Multiple Arrays","title":"2248. Intersection of Multiple Arrays","uri":"/en/tracks/algorithms-101/leetcode/easy/2248/"},{"content":"LeetCode problem 2249\nclass Solution: def countLatticePoints(self, circles: List[List[int]]) -\u003e int: res = 0 mx = max(x + r for x, _, r in circles) my = max(y + r for _, y, r in circles) for i in range(mx + 1): for j in range(my + 1): for x, y, r in circles: dx, dy = i - x, j - y if dx * dx + dy * dy \u003c= r * r: res += 1 break return res ","description":"2249. Count Lattice Points Inside a Circle","title":"2249. Count Lattice Points Inside a Circle","uri":"/en/tracks/algorithms-101/leetcode/medium/2249/"},{"content":"LeetCode problem 2250\nclass Solution: def countRectangles( self, rectangles: List[List[int]], points: List[List[int]] ) -\u003e List[int]: d = defaultdict(list) for x, y in rectangles: d[y].append(x) for y in d.keys(): d[y].sort() res = [] for x, y in points: cnt = 0 for h in range(y, 101): xs = d[h] cnt += len(xs) - bisect_left(xs, x) res.append(cnt) return res ","description":"2250. Count Number of Rectangles Containing Each Point","title":"2250. Count Number of Rectangles Containing Each Point","uri":"/en/tracks/algorithms-101/leetcode/medium/2250/"},{"content":"LeetCode Problem 2251\nProblem Statement In the given problem, we are presented with two arrays. The first, flowers, represents when each flower starts and stops being in full bloom. The second, people, indicates when each person arrives to see the flowers. Our task is to determine, for each person, how many flowers they will see in full bloom upon their arrival.\nNaive Solution A straightforward approach might involve iterating over each person’s arrival time. For each time, we could iterate over the flowers list to count how many flowers are in full bloom. This approach, however, would lead to a time complexity of O(n*m), with n being the number of people and m being the number of flowers. With larger constraints, this could be quite inefficient.\nHints \u0026 Tips Separating the start and end times of each flower’s blooming period can simplify the problem. Binary search can be an effective tool to efficiently find specific intervals in sorted lists. Approach / Idea Instead of associating the start and end times of each flower’s blooming period, we can consider them separately. By focusing on how many flowers have started and stopped blooming by a specific time, we can easily determine the number of flowers in full bloom.\nThe idea is to use two separate arrays: one for all the start times (starts) and one for all the end times (ends). By sorting these arrays, we can use binary search to swiftly identify the number of flowers that have started and stopped blooming by any given time.\nSteps / High level algorithm Create Two Arrays:\nInitialize two empty lists, starts and ends. Fill Arrays with Data:\nLoop through each flower’s blooming period in flowers and populate the starts and ends lists. Sort the Arrays:\nSort both starts and ends to ensure efficient binary searches. Determine Blooming Flowers:\nFor each person’s arrival time in people: Use binary search on starts to determine how many flowers have begun blooming. Use another binary search on ends to see how many have finished. Subtract the number of finished blooms from the started ones and append to the results list. Return the Result:\nReturn the generated list containing the number of flowers in full bloom for each person. Solution Below is the Python code implementing the above-mentioned approach:\nfrom bisect import bisect_right from typing import List class Solution: def fullBloomFlowers(self, flowers: List[List[int]], people: List[int]) -\u003e List[int]: starts = [] # Initialize start and end arrays ends = [] for start, end in flowers: # Populate arrays with flower bloom periods starts.append(start) ends.append(end + 1) starts.sort() # Sort both arrays for efficient binary search ends.sort() res = [] for person in people: # Calc number of flowers for each person's arrival time i = bisect_right(starts, person) # Use binary search to find flowers j = bisect_right(ends, person) # that have started and finished blooming res.append(i - j) return res ","description":"Understanding the number of flowers in full bloom at specific times using binary search.","title":"2251. Number of Flowers in Full Bloom","uri":"/en/tracks/algorithms-101/leetcode/hard/2251/"},{"content":"LeetCode problem 2255\nclass Solution: def countPrefixes(self, words: List[str], s: str) -\u003e int: return sum(s.startswith(w) for w in words) ","description":"2255. Count Prefixes of a Given String","title":"2255. Count Prefixes of a Given String","uri":"/en/tracks/algorithms-101/leetcode/easy/2255/"},{"content":"LeetCode problem 2256\nclass Solution: def minimumAverageDifference(self, nums: List[int]) -\u003e int: pre, suf = 0, sum(nums) n = len(nums) res, mi = 0, inf for i, x in enumerate(nums): pre += x suf -= x a = pre // (i + 1) b = 0 if n - i - 1 == 0 else suf // (n - i - 1) if (t := abs(a - b)) \u003c mi: res = i mi = t return res ","description":"2256. Minimum Average Difference","title":"2256. Minimum Average Difference","uri":"/en/tracks/algorithms-101/leetcode/medium/2256/"},{"content":"LeetCode problem 2257\nclass Solution: def countUnguarded( self, m: int, n: int, guards: List[List[int]], walls: List[List[int]] ) -\u003e int: g = [[0] * n for _ in range(m)] for i, j in guards: g[i][j] = 2 for i, j in walls: g[i][j] = 2 dirs = (-1, 0, 1, 0, -1) for i, j in guards: for a, b in pairwise(dirs): x, y = i, j while 0 \u003c= x + a \u003c m and 0 \u003c= y + b \u003c n and g[x + a][y + b] \u003c 2: x, y = x + a, y + b g[x][y] = 1 return sum(v == 0 for row in g for v in row) ","description":"2257. Count Unguarded Cells in the Grid","title":"2257. Count Unguarded Cells in the Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/2257/"},{"content":"LeetCode problem 2258\nclass Solution: def maximumMinutes(self, grid: List[List[int]]) -\u003e int: def spread(q: Deque[int]) -\u003e Deque[int]: nq = deque() while q: i, j = q.popleft() for a, b in pairwise(dirs): x, y = i + a, j + b if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and not fire[x][y] and grid[x][y] == 0: fire[x][y] = True nq.append((x, y)) return nq def check(t: int) -\u003e bool: for i in range(m): for j in range(n): fire[i][j] = False q1 = deque() for i, row in enumerate(grid): for j, x in enumerate(row): if x == 1: fire[i][j] = True q1.append((i, j)) while t and q1: q1 = spread(q1) t -= 1 if fire[0][0]: return False q2 = deque([(0, 0)]) vis = [[False] * n for _ in range(m)] vis[0][0] = True while q2: for _ in range(len(q2)): i, j = q2.popleft() if fire[i][j]: continue for a, b in pairwise(dirs): x, y = i + a, j + b if ( 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and not vis[x][y] and not fire[x][y] and grid[x][y] == 0 ): if x == m - 1 and y == n - 1: return True vis[x][y] = True q2.append((x, y)) q1 = spread(q1) return False m, n = len(grid), len(grid[0]) l, r = -1, m * n dirs = (-1, 0, 1, 0, -1) fire = [[False] * n for _ in range(m)] while l \u003c r: mid = (l + r + 1) \u003e\u003e 1 if check(mid): l = mid else: r = mid - 1 return int(1e9) if l == m * n else l ","description":"2258. Escape the Spreading Fire","title":"2258. Escape the Spreading Fire","uri":"/en/tracks/algorithms-101/leetcode/hard/2258/"},{"content":"LeetCode problem 2259\nclass Solution: def removeDigit(self, number: str, digit: str) -\u003e str: last = -1 n = len(number) for i, d in enumerate(number): if d == digit: last = i if i + 1 \u003c n and d \u003c number[i + 1]: break return number[:last] + number[last + 1 :] ","description":"2259. Remove Digit From Number to Maximize Result","title":"2259. Remove Digit From Number to Maximize Result","uri":"/en/tracks/algorithms-101/leetcode/easy/2259/"},{"content":"LeetCode problem 2260\nclass Solution: def minimumCardPickup(self, cards: List[int]) -\u003e int: last = {} res = inf for i, x in enumerate(cards): if x in last: res = min(res, i - last[x] + 1) last[x] = i return -1 if res == inf else res ","description":"2260. Minimum Consecutive Cards to Pick Up","title":"2260. Minimum Consecutive Cards to Pick Up","uri":"/en/tracks/algorithms-101/leetcode/medium/2260/"},{"content":"LeetCode problem 2261\nclass Solution: def countDistinct(self, nums: List[int], k: int, p: int) -\u003e int: n = len(nums) s = set() for i in range(n): cnt = 0 t = \"\" for x in nums[i:]: cnt += x % p == 0 if cnt \u003e k: break t += str(x) + \",\" s.add(t) return len(s) ","description":"2261. K Divisible Elements Subarrays","title":"2261. K Divisible Elements Subarrays","uri":"/en/tracks/algorithms-101/leetcode/medium/2261/"},{"content":"LeetCode problem 2262\nclass Solution: def appealSum(self, s: str) -\u003e int: res = t = 0 pos = [-1] * 26 for i, c in enumerate(s): c = ord(c) - ord('a') t += i - pos[c] res += t pos[c] = i return res ","description":"2262. Total Appeal of A String","title":"2262. Total Appeal of A String","uri":"/en/tracks/algorithms-101/leetcode/hard/2262/"},{"content":"LeetCode problem 2263\nclass Solution: def convertArray(self, nums: List[int]) -\u003e int: def solve(nums): n = len(nums) f = [[0] * 1001 for _ in range(n + 1)] for i, x in enumerate(nums, 1): mi = inf for j in range(1001): if mi \u003e f[i - 1][j]: mi = f[i - 1][j] f[i][j] = mi + abs(x - j) return min(f[n]) return min(solve(nums), solve(nums[::-1])) ","description":"2263. Make Array Non-decreasing or Non-increasing","title":"2263. Make Array Non-decreasing or Non-increasing","uri":"/en/tracks/algorithms-101/leetcode/hard/2263/"},{"content":"LeetCode problem 2265\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def averageOfSubtree(self, root: Optional[TreeNode]) -\u003e int: def dfs(root): if root is None: return 0, 0 ls, ln = dfs(root.left) rs, rn = dfs(root.right) s = ls + rs + root.val n = ln + rn + 1 if s // n == root.val: nonlocal res res += 1 return s, n res = 0 dfs(root) return res ","description":"2265. Count Nodes Equal to Average of Subtree","title":"2265. Count Nodes Equal to Average of Subtree","uri":"/en/tracks/algorithms-101/leetcode/medium/2265/"},{"content":"LeetCode problem 2266\nmod = 10**9 + 7 f = [1, 1, 2, 4] g = [1, 1, 2, 4] for _ in range(100000): f.append((f[-1] + f[-2] + f[-3]) % mod) g.append((g[-1] + g[-2] + g[-3] + g[-4]) % mod) class Solution: def countTexts(self, pressedKeys: str) -\u003e int: res = 1 for ch, s in groupby(pressedKeys): m = len(list(s)) res = res * (g[m] if ch in \"79\" else f[m]) % mod return res ","description":"2266. Count Number of Texts","title":"2266. Count Number of Texts","uri":"/en/tracks/algorithms-101/leetcode/medium/2266/"},{"content":"LeetCode problem 2267\nclass Solution: def hasValidPath(self, grid: List[List[str]]) -\u003e bool: @cache def dfs(i, j, t): if grid[i][j] == '(': t += 1 else: t -= 1 if t \u003c 0: return False if i == m - 1 and j == n - 1: return t == 0 for x, y in [(i + 1, j), (i, j + 1)]: if x \u003c m and y \u003c n and dfs(x, y, t): return True return False m, n = len(grid), len(grid[0]) return dfs(0, 0, 0) ","description":"2267. Check if There Is a Valid Parentheses String Path","title":"2267. Check if There Is a Valid Parentheses String Path","uri":"/en/tracks/algorithms-101/leetcode/hard/2267/"},{"content":"LeetCode problem 2268\nclass Solution: def minimumKeypresses(self, s: str) -\u003e int: cnt = Counter(s) res = 0 i, j = 0, 1 for v in sorted(cnt.values(), reverse=True): i += 1 res += j * v if i % 9 == 0: j += 1 return res ","description":"2268. Minimum Number of Keypresses","title":"2268. Minimum Number of Keypresses","uri":"/en/tracks/algorithms-101/leetcode/medium/2268/"},{"content":"LeetCode problem 2269\nclass Solution: def divisorSubstrings(self, num: int, k: int) -\u003e int: res = 0 s = str(num) for i in range(len(s) - k + 1): t = int(s[i : i + k]) if t and num % t == 0: res += 1 return res ","description":"2269. Find the K-Beauty of a Number","title":"2269. Find the K-Beauty of a Number","uri":"/en/tracks/algorithms-101/leetcode/easy/2269/"},{"content":"LeetCode problem 2270\nclass Solution: def waysToSplitArray(self, nums: List[int]) -\u003e int: s = sum(nums) res = t = 0 for v in nums[:-1]: t += v if t \u003e= s - t: res += 1 return res ","description":"2270. Number of Ways to Split Array","title":"2270. Number of Ways to Split Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2270/"},{"content":"LeetCode problem 2271\nclass Solution: def maximumWhiteTiles(self, tiles: List[List[int]], carpetLen: int) -\u003e int: tiles.sort() n = len(tiles) s = res = j = 0 for i, (li, ri) in enumerate(tiles): while j \u003c n and tiles[j][1] - li + 1 \u003c= carpetLen: s += tiles[j][1] - tiles[j][0] + 1 j += 1 if j \u003c n and li + carpetLen \u003e tiles[j][0]: res = max(res, s + li + carpetLen - tiles[j][0]) else: res = max(res, s) s -= ri - li + 1 return res ","description":"2271. Maximum White Tiles Covered by a Carpet","title":"2271. Maximum White Tiles Covered by a Carpet","uri":"/en/tracks/algorithms-101/leetcode/medium/2271/"},{"content":"LeetCode problem 2272\nclass Solution: def largestVariance(self, s: str) -\u003e int: res = 0 for a, b in permutations(ascii_lowercase, 2): if a == b: continue f = [0, -inf] for c in s: if c == a: f[0], f[1] = f[0] + 1, f[1] + 1 elif c == b: f[1] = max(f[1] - 1, f[0] - 1) f[0] = 0 if res \u003c f[1]: res = f[1] return res ","description":"2272. Substring With Largest Variance","title":"2272. Substring With Largest Variance","uri":"/en/tracks/algorithms-101/leetcode/hard/2272/"},{"content":"LeetCode problem 2273\nclass Solution: def removeAnagrams(self, words: List[str]) -\u003e List[str]: return [ w for i, w in enumerate(words) if i == 0 or sorted(w) != sorted(words[i - 1]) ] ","description":"2273. Find Resultant Array After Removing Anagrams","title":"2273. Find Resultant Array After Removing Anagrams","uri":"/en/tracks/algorithms-101/leetcode/easy/2273/"},{"content":"LeetCode problem 2274\nclass Solution: def maxConsecutive(self, bottom: int, top: int, special: List[int]) -\u003e int: special.sort() res = max(special[0] - bottom, top - special[-1]) for i in range(1, len(special)): res = max(res, special[i] - special[i - 1] - 1) return res ","description":"2274. Maximum Consecutive Floors Without Special Floors","title":"2274. Maximum Consecutive Floors Without Special Floors","uri":"/en/tracks/algorithms-101/leetcode/medium/2274/"},{"content":"LeetCode problem 2275\nclass Solution: def largestCombination(self, candidates: List[int]) -\u003e int: res = 0 for i in range(32): t = 0 for x in candidates: t += (x \u003e\u003e i) \u0026 1 res = max(res, t) return res ","description":"2275. Largest Combination With Bitwise AND Greater Than Zero","title":"2275. Largest Combination With Bitwise AND Greater Than Zero","uri":"/en/tracks/algorithms-101/leetcode/medium/2275/"},{"content":"LeetCode problem 2276\nclass Node: __slots__ = (\"left\", \"right\", \"l\", \"r\", \"mid\", \"v\", \"add\") def __init__(self, l, r): self.left = None self.right = None self.l = l self.r = r self.mid = (l + r) // 2 self.v = 0 self.add = 0 class SegmentTree: def __init__(self): self.root = Node(1, int(1e9) + 1) def modify(self, l, r, v, node=None): if node is None: node = self.root if l \u003e r: return if node.l \u003e= l and node.r \u003c= r: node.v = node.r - node.l + 1 node.add = v return self.pushdown(node) if l \u003c= node.mid: self.modify(l, r, v, node.left) if r \u003e node.mid: self.modify(l, r, v, node.right) self.pushup(node) def query(self, l, r, node=None): if node is None: node = self.root if l \u003e r: return 0 if node.l \u003e= l and node.r \u003c= r: return node.v self.pushdown(node) v = 0 if l \u003c= node.mid: v += self.query(l, r, node.left) if r \u003e node.mid: v += self.query(l, r, node.right) return v def pushup(self, node): node.v = node.left.v + node.right.v def pushdown(self, node): if node.left is None: node.left = Node(node.l, node.mid) if node.right is None: node.right = Node(node.mid + 1, node.r) if node.add != 0: left, right = node.left, node.right left.add = node.add right.add = node.add left.v = left.r - left.l + 1 right.v = right.r - right.l + 1 node.add = 0 class CountIntervals: def __init__(self): self.tree = SegmentTree() def add(self, left, right): self.tree.modify(left, right, 1) def count(self): return self.tree.query(1, int(1e9)) # Your CountIntervals object will be instantiated and called as such: # obj = CountIntervals() # obj.add(left, right) # param_2 = obj.count() ","description":"2276. Count Integers in Intervals","title":"2276. Count Integers in Intervals","uri":"/en/tracks/algorithms-101/leetcode/hard/2276/"},{"content":"LeetCode problem 2278\nclass Solution: def percentageLetter(self, s: str, letter: str) -\u003e int: return s.count(letter) * 100 // len(s) ","description":"2278. Percentage of Letter in String","title":"2278. Percentage of Letter in String","uri":"/en/tracks/algorithms-101/leetcode/easy/2278/"},{"content":"LeetCode problem 2279\nclass Solution: def maximumBags( self, capacity: List[int], rocks: List[int], additionalRocks: int ) -\u003e int: d = [a - b for a, b in zip(capacity, rocks)] d.sort() res = 0 for v in d: if v \u003c= additionalRocks: res += 1 additionalRocks -= v return res ","description":"2279. Maximum Bags With Full Capacity of Rocks","title":"2279. Maximum Bags With Full Capacity of Rocks","uri":"/en/tracks/algorithms-101/leetcode/medium/2279/"},{"content":"LeetCode problem 2280\nclass Solution: def minimumLines(self, stockPrices: List[List[int]]) -\u003e int: stockPrices.sort() dx, dy = 0, 1 res = 0 for (x, y), (x1, y1) in pairwise(stockPrices): dx1, dy1 = x1 - x, y1 - y if dy * dx1 != dx * dy1: res += 1 dx, dy = dx1, dy1 return res ","description":"2280. Minimum Lines to Represent a Line Chart","title":"2280. Minimum Lines to Represent a Line Chart","uri":"/en/tracks/algorithms-101/leetcode/medium/2280/"},{"content":"LeetCode problem 2281\nclass Solution: def totalStrength(self, strength: List[int]) -\u003e int: n = len(strength) left = [-1] * n right = [n] * n stk = [] for i, v in enumerate(strength): while stk and strength[stk[-1]] \u003e= v: stk.pop() if stk: left[i] = stk[-1] stk.append(i) stk = [] for i in range(n - 1, -1, -1): while stk and strength[stk[-1]] \u003e strength[i]: stk.pop() if stk: right[i] = stk[-1] stk.append(i) ss = list(accumulate(list(accumulate(strength, initial=0)), initial=0)) mod = int(1e9) + 7 res = 0 for i, v in enumerate(strength): l, r = left[i] + 1, right[i] - 1 a = (ss[r + 2] - ss[i + 1]) * (i - l + 1) b = (ss[i + 1] - ss[l]) * (r - i + 1) res = (res + (a - b) * v) % mod return res ","description":"2281. Sum of Total Strength of Wizards","title":"2281. Sum of Total Strength of Wizards","uri":"/en/tracks/algorithms-101/leetcode/hard/2281/"},{"content":"LeetCode problem 2282\nclass Solution: def seePeople(self, heights: List[List[int]]) -\u003e List[List[int]]: def f(nums: List[int]) -\u003e List[int]: n = len(nums) stk = [] res = [0] * n for i in range(n - 1, -1, -1): while stk and stk[-1] \u003c nums[i]: res[i] += 1 stk.pop() if stk: res[i] += 1 while stk and stk[-1] == nums[i]: stk.pop() stk.append(nums[i]) return res res = [f(row) for row in heights] m, n = len(heights), len(heights[0]) for j in range(n): add = f([heights[i][j] for i in range(m)]) for i in range(m): res[i][j] += add[i] return res ","description":"2282. Number of People That Can Be Seen in a Grid","title":"2282. Number of People That Can Be Seen in a Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/2282/"},{"content":"LeetCode problem 2283\nclass Solution: def digitCount(self, num: str) -\u003e bool: cnt = Counter(num) return all(cnt[str(i)] == int(v) for i, v in enumerate(num)) ","description":"2283. Check if Number Has Equal Digit Count and Digit Value","title":"2283. Check if Number Has Equal Digit Count and Digit Value","uri":"/en/tracks/algorithms-101/leetcode/easy/2283/"},{"content":"LeetCode problem 2284\nclass Solution: def largestWordCount(self, messages: List[str], senders: List[str]) -\u003e str: cnt = Counter() for msg, sender in zip(messages, senders): cnt[sender] += msg.count(' ') + 1 res = '' for sender, v in cnt.items(): if cnt[res] \u003c v or (cnt[res] == v and res \u003c sender): res = sender return res ","description":"2284. Sender With Largest Word Count","title":"2284. Sender With Largest Word Count","uri":"/en/tracks/algorithms-101/leetcode/medium/2284/"},{"content":"LeetCode problem 2285\nclass Solution: def maximumImportance(self, n: int, roads: List[List[int]]) -\u003e int: deg = [0] * n for a, b in roads: deg[a] += 1 deg[b] += 1 deg.sort() return sum(i * v for i, v in enumerate(deg, 1)) ","description":"2285. Maximum Total Importance of Roads","title":"2285. Maximum Total Importance of Roads","uri":"/en/tracks/algorithms-101/leetcode/medium/2285/"},{"content":"LeetCode problem 2286\nclass Node: def __init__(self): self.l = self.r = 0 self.s = self.mx = 0 class SegmentTree: def __init__(self, n, m): self.m = m self.tr = [Node() for _ in range(n \u003c\u003c 2)] self.build(1, 1, n) def build(self, u, l, r): self.tr[u].l, self.tr[u].r = l, r if l == r: self.tr[u].s = self.tr[u].mx = self.m return mid = (l + r) \u003e\u003e 1 self.build(u \u003c\u003c 1, l, mid) self.build(u \u003c\u003c 1 | 1, mid + 1, r) self.pushup(u) def modify(self, u, x, v): if self.tr[u].l == x and self.tr[u].r == x: self.tr[u].s = self.tr[u].mx = v return mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 if x \u003c= mid: self.modify(u \u003c\u003c 1, x, v) else: self.modify(u \u003c\u003c 1 | 1, x, v) self.pushup(u) def query_sum(self, u, l, r): if self.tr[u].l \u003e= l and self.tr[u].r \u003c= r: return self.tr[u].s mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 v = 0 if l \u003c= mid: v += self.query_sum(u \u003c\u003c 1, l, r) if r \u003e mid: v += self.query_sum(u \u003c\u003c 1 | 1, l, r) return v def query_idx(self, u, l, r, k): if self.tr[u].mx \u003c k: return 0 if self.tr[u].l == self.tr[u].r: return self.tr[u].l mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 if self.tr[u \u003c\u003c 1].mx \u003e= k: return self.query_idx(u \u003c\u003c 1, l, r, k) if r \u003e mid: return self.query_idx(u \u003c\u003c 1 | 1, l, r, k) return 0 def pushup(self, u): self.tr[u].s = self.tr[u \u003c\u003c 1].s + self.tr[u \u003c\u003c 1 | 1].s self.tr[u].mx = max(self.tr[u \u003c\u003c 1].mx, self.tr[u \u003c\u003c 1 | 1].mx) class BookMyShow: def __init__(self, n: int, m: int): self.n = n self.tree = SegmentTree(n, m) def gather(self, k: int, maxRow: int) -\u003e List[int]: maxRow += 1 i = self.tree.query_idx(1, 1, maxRow, k) if i == 0: return [] s = self.tree.query_sum(1, i, i) self.tree.modify(1, i, s - k) return [i - 1, self.tree.m - s] def scatter(self, k: int, maxRow: int) -\u003e bool: maxRow += 1 if self.tree.query_sum(1, 1, maxRow) \u003c k: return False i = self.tree.query_idx(1, 1, maxRow, 1) for j in range(i, self.n + 1): s = self.tree.query_sum(1, j, j) if s \u003e= k: self.tree.modify(1, j, s - k) return True k -= s self.tree.modify(1, j, 0) return True # Your BookMyShow object will be instantiated and called as such: # obj = BookMyShow(n, m) # param_1 = obj.gather(k,maxRow) # param_2 = obj.scatter(k,maxRow) ","description":"2286. Booking Concert Tickets in Groups","title":"2286. Booking Concert Tickets in Groups","uri":"/en/tracks/algorithms-101/leetcode/hard/2286/"},{"content":"LeetCode problem 2287\nclass Solution: def rearrangeCharacters(self, s: str, target: str) -\u003e int: cnt1 = Counter(s) cnt2 = Counter(target) return min(cnt1[c] // v for c, v in cnt2.items()) ","description":"2287. Rearrange Characters to Make Target String","title":"2287. Rearrange Characters to Make Target String","uri":"/en/tracks/algorithms-101/leetcode/easy/2287/"},{"content":"LeetCode problem 2288\nclass Solution: def discountPrices(self, sentence: str, discount: int) -\u003e str: res = [] for w in sentence.split(): if w[0] == '$' and w[1:].isdigit(): w = f'${int(w[1:]) * (1 - discount / 100):.2f}' res.append(w) return ' '.join(res) ","description":"2288. Apply Discount to Prices","title":"2288. Apply Discount to Prices","uri":"/en/tracks/algorithms-101/leetcode/medium/2288/"},{"content":"LeetCode problem 2289\nclass Solution: def totalSteps(self, nums: List[int]) -\u003e int: stk = [] res, n = 0, len(nums) dp = [0] * n for i in range(n - 1, -1, -1): while stk and nums[i] \u003e nums[stk[-1]]: dp[i] = max(dp[i] + 1, dp[stk.pop()]) stk.append(i) return max(dp) ","description":"2289. Steps to Make Array Non-decreasing","title":"2289. Steps to Make Array Non-decreasing","uri":"/en/tracks/algorithms-101/leetcode/medium/2289/"},{"content":"LeetCode problem 229\nProblem Statement Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.\nNaive Solution The immediate solution would involve using a hashmap or dictionary to track the occurrence of each number in the array. After which, we can iterate over the dictionary to find numbers whose occurrences are greater than n/3.\nHints \u0026 Tips There can be at most one or two majority elements which appear more than n/3 times in the array. Employ the Boyer-Moore Voting Algorithm. Approach We can apply a variation of the Boyer-Moore Voting Algorithm. The fundamental insight behind this algorithm is that at each step, we can discard a certain portion of the elements and still have the same majority elements.\nFor this problem, we’ll maintain two counters and two majority candidates. This is because there could be at most two majority elements.\nSteps Initialize two counters and two majority candidates. Parse the array: If the current element matches either of the majority candidates, increase the respective counter. If both counters are zero, reset both majority candidates and counters. Otherwise, decrease both counters. Reassess the majority candidates by verifying their counts. Solution def majorityElement(self, nums: List[int]) -\u003e List[int]: cand1 = 0 # Two majority candidates and their counters cand2 = 1 count1 = 0 count2 = 0 for num in nums: if num == cand1: count1 += 1 elif num == cand2: count2 += 1 elif count1 == 0: cand1, count1 = num, 1 elif count2 == 0: cand2, count2 = num, 1 else: count1, count2 = count1 - 1, count2 - 1 res = [] count = len(nums) // 3 for cand in (cand1, cand2): if nums.count(cand) \u003e count: res.append(cand) return res ","description":"A detailed explanation and Python solution for LeetCode problem 229. Majority Element II.","title":"229. Majority Element II","uri":"/en/tracks/algorithms-101/leetcode/medium/229/"},{"content":"LeetCode problem 2290\nclass Solution: def minimumObstacles(self, grid: List[List[int]]) -\u003e int: m, n = len(grid), len(grid[0]) q = deque([(0, 0, 0)]) vis = set() dirs = (-1, 0, 1, 0, -1) while 1: i, j, k = q.popleft() if i == m - 1 and j == n - 1: return k if (i, j) in vis: continue vis.add((i, j)) for a, b in pairwise(dirs): x, y = i + a, j + b if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n: if grid[x][y] == 0: q.appendleft((x, y, k)) else: q.append((x, y, k + 1)) ","description":"2290. Minimum Obstacle Removal to Reach Corner","title":"2290. Minimum Obstacle Removal to Reach Corner","uri":"/en/tracks/algorithms-101/leetcode/hard/2290/"},{"content":"LeetCode problem 2291\nclass Solution: def maximumProfit(self, present: List[int], future: List[int], budget: int) -\u003e int: f = [0] * (budget + 1) for a, b in zip(present, future): for j in range(budget, a - 1, -1): f[j] = max(f[j], f[j - a] + b - a) return f[-1] ","description":"2291. Maximum Profit From Trading Stocks","title":"2291. Maximum Profit From Trading Stocks","uri":"/en/tracks/algorithms-101/leetcode/medium/2291/"},{"content":"LeetCode problem 2293\nclass Solution: def minMaxGame(self, nums: List[int]) -\u003e int: n = len(nums) while n \u003e 1: n \u003e\u003e= 1 for i in range(n): a, b = nums[i \u003c\u003c 1], nums[i \u003c\u003c 1 | 1] nums[i] = min(a, b) if i % 2 == 0 else max(a, b) return nums[0] ","description":"2293. Min Max Game","title":"2293. Min Max Game","uri":"/en/tracks/algorithms-101/leetcode/easy/2293/"},{"content":"LeetCode problem 2294\nclass Solution: def partitionArray(self, nums: List[int], k: int) -\u003e int: nums.sort() res, a = 1, nums[0] for b in nums: if b - a \u003e k: a = b res += 1 return res ","description":"2294. Partition Array Such That Maximum Difference Is K","title":"2294. Partition Array Such That Maximum Difference Is K","uri":"/en/tracks/algorithms-101/leetcode/medium/2294/"},{"content":"LeetCode problem 2295\nclass Solution: def arrayChange(self, nums: List[int], operations: List[List[int]]) -\u003e List[int]: d = {v: i for i, v in enumerate(nums)} for a, b in operations: nums[d[a]] = b d[b] = d[a] return nums ","description":"2295. Replace Elements in an Array","title":"2295. Replace Elements in an Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2295/"},{"content":"LeetCode problem 2296\nclass TextEditor: def __init__(self): self.left = [] self.right = [] def addText(self, text: str) -\u003e None: self.left.extend(list(text)) def deleteText(self, k: int) -\u003e int: k = min(k, len(self.left)) for _ in range(k): self.left.pop() return k def cursorLeft(self, k: int) -\u003e str: k = min(k, len(self.left)) for _ in range(k): self.right.append(self.left.pop()) return ''.join(self.left[-10:]) def cursorRight(self, k: int) -\u003e str: k = min(k, len(self.right)) for _ in range(k): self.left.append(self.right.pop()) return ''.join(self.left[-10:]) # Your TextEditor object will be instantiated and called as such: # obj = TextEditor() # obj.addText(text) # param_2 = obj.deleteText(k) # param_3 = obj.cursorLeft(k) # param_4 = obj.cursorRight(k) ","description":"2296. Design a Text Editor","title":"2296. Design a Text Editor","uri":"/en/tracks/algorithms-101/leetcode/hard/2296/"},{"content":"LeetCode problem 2297\nclass Solution: def minCost(self, nums: List[int], costs: List[int]) -\u003e int: n = len(nums) g = defaultdict(list) stk = [] for i in range(n - 1, -1, -1): while stk and nums[stk[-1]] \u003c nums[i]: stk.pop() if stk: g[i].append(stk[-1]) stk.append(i) stk = [] for i in range(n - 1, -1, -1): while stk and nums[stk[-1]] \u003e= nums[i]: stk.pop() if stk: g[i].append(stk[-1]) stk.append(i) f = [inf] * n f[0] = 0 for i in range(n): for j in g[i]: f[j] = min(f[j], f[i] + costs[j]) return f[n - 1] ","description":"2297. Jump Game VIII","title":"2297. Jump Game VIII","uri":"/en/tracks/algorithms-101/leetcode/medium/2297/"},{"content":"LeetCode problem 2299\nclass Solution: def strongPasswordCheckerII(self, password: str) -\u003e bool: if len(password) \u003c 8: return False mask = 0 for i, c in enumerate(password): if i and c == password[i - 1]: return False if c.islower(): mask |= 1 elif c.isupper(): mask |= 2 elif c.isdigit(): mask |= 4 else: mask |= 8 return mask == 15 ","description":"2299. Strong Password Checker II","title":"2299. Strong Password Checker II","uri":"/en/tracks/algorithms-101/leetcode/easy/2299/"},{"content":"LeetCode problem 2300\nclass Solution: def successfulPairs( self, spells: List[int], potions: List[int], success: int ) -\u003e List[int]: potions.sort() m = len(potions) return [m - bisect_left(potions, success / v) for v in spells] ","description":"2300. Successful Pairs of Spells and Potions","title":"2300. Successful Pairs of Spells and Potions","uri":"/en/tracks/algorithms-101/leetcode/medium/2300/"},{"content":"LeetCode problem 2301\nclass Solution: def matchReplacement(self, s: str, sub: str, mappings: List[List[str]]) -\u003e bool: d = [[False] * 128 for _ in range(128)] for a, b in mappings: d[ord(a)][ord(b)] = True for i in range(len(s) - len(sub) + 1): if all( a == b or d[ord(b)][ord(a)] for a, b in zip(s[i : i + len(sub)], sub) ): return True return False ","description":"2301. Match Substring After Replacement","title":"2301. Match Substring After Replacement","uri":"/en/tracks/algorithms-101/leetcode/hard/2301/"},{"content":"LeetCode problem 2302\nclass Solution: def countSubarrays(self, nums: List[int], k: int) -\u003e int: res = s = j = 0 for i, v in enumerate(nums): s += v while s * (i - j + 1) \u003e= k: s -= nums[j] j += 1 res += i - j + 1 return res ","description":"2302. Count Subarrays With Score Less Than K","title":"2302. Count Subarrays With Score Less Than K","uri":"/en/tracks/algorithms-101/leetcode/hard/2302/"},{"content":"LeetCode problem 2303\nclass Solution: def calculateTax(self, brackets: List[List[int]], income: int) -\u003e float: res = prev = 0 for upper, percent in brackets: res += max(0, min(income, upper) - prev) * percent prev = upper return res / 100 ","description":"2303. Calculate Amount Paid in Taxes","title":"2303. Calculate Amount Paid in Taxes","uri":"/en/tracks/algorithms-101/leetcode/easy/2303/"},{"content":"LeetCode problem 2304\nclass Solution: def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -\u003e int: m, n = len(grid), len(grid[0]) f = grid[0] for i in range(1, m): g = [inf] * n for j in range(n): for k in range(n): g[j] = min(g[j], f[k] + moveCost[grid[i - 1][k]][j] + grid[i][j]) f = g return min(f) ","description":"2304. Minimum Path Cost in a Grid","title":"2304. Minimum Path Cost in a Grid","uri":"/en/tracks/algorithms-101/leetcode/medium/2304/"},{"content":"LeetCode problem 2305\nclass Solution: def distributeCookies(self, cookies: List[int], k: int) -\u003e int: def dfs(i): if i \u003e= len(cookies): nonlocal res res = max(cnt) return for j in range(k): if cnt[j] + cookies[i] \u003e= res or (j and cnt[j] == cnt[j - 1]): continue cnt[j] += cookies[i] dfs(i + 1) cnt[j] -= cookies[i] res = inf cnt = [0] * k cookies.sort(reverse=True) dfs(0) return res ","description":"2305. Fair Distribution of Cookies","title":"2305. Fair Distribution of Cookies","uri":"/en/tracks/algorithms-101/leetcode/medium/2305/"},{"content":"LeetCode problem 2306\nclass Solution: def distinctNames(self, ideas: List[str]) -\u003e int: s = set(ideas) f = [[0] * 26 for _ in range(26)] for v in ideas: i = ord(v[0]) - ord('a') t = list(v) for j in range(26): t[0] = chr(ord('a') + j) if ''.join(t) not in s: f[i][j] += 1 res = 0 for v in ideas: i = ord(v[0]) - ord('a') t = list(v) for j in range(26): t[0] = chr(ord('a') + j) if ''.join(t) not in s: res += f[j][i] return res ","description":"2306. Naming a Company","title":"2306. Naming a Company","uri":"/en/tracks/algorithms-101/leetcode/hard/2306/"},{"content":"LeetCode problem 2307\nclass Solution: def checkContradictions( self, equations: List[List[str]], values: List[float] ) -\u003e bool: def find(x: int) -\u003e int: if p[x] != x: root = find(p[x]) w[x] *= w[p[x]] p[x] = root return p[x] d = defaultdict(int) n = 0 for e in equations: for s in e: if s not in d: d[s] = n n += 1 p = list(range(n)) w = [1.0] * n eps = 1e-5 for (a, b), v in zip(equations, values): a, b = d[a], d[b] pa, pb = find(a), find(b) if pa != pb: p[pb] = pa w[pb] = v * w[a] / w[b] elif abs(v * w[a] - w[b]) \u003e= eps: return True return False ","description":"2307. Check for Contradictions in Equations","title":"2307. Check for Contradictions in Equations","uri":"/en/tracks/algorithms-101/leetcode/hard/2307/"},{"content":"LeetCode problem 2309\nclass Solution: def greatestLetter(self, s: str) -\u003e str: mask1 = mask2 = 0 for c in s: if c.islower(): mask1 |= 1 \u003c\u003c (ord(c) - ord(\"a\")) else: mask2 |= 1 \u003c\u003c (ord(c) - ord(\"A\")) mask = mask1 \u0026 mask2 return chr(mask.bit_length() - 1 + ord(\"A\")) if mask else \"\" ","description":"2309. Greatest English Letter in Upper and Lower Case","title":"2309. Greatest English Letter in Upper and Lower Case","uri":"/en/tracks/algorithms-101/leetcode/easy/2309/"},{"content":"LeetCode problem 2310\nclass Solution: def minimumNumbers(self, num: int, k: int) -\u003e int: @cache def dfs(v): if v == 0: return 0 if v \u003c 10 and v % k: return inf i = 0 t = inf while (x := i * 10 + k) \u003c= v: t = min(t, dfs(v - x)) i += 1 return t + 1 if num == 0: return 0 if k == 0: return -1 if num % 10 else 1 res = dfs(num) return -1 if res \u003e= inf else res ","description":"2310. Sum of Numbers With Units Digit K","title":"2310. Sum of Numbers With Units Digit K","uri":"/en/tracks/algorithms-101/leetcode/medium/2310/"},{"content":"LeetCode problem 2311\nclass Solution: def longestSubsequence(self, s: str, k: int) -\u003e int: res = v = 0 for c in s[::-1]: if c == \"0\": res += 1 elif res \u003c 30 and (v | 1 \u003c\u003c res) \u003c= k: v |= 1 \u003c\u003c res res += 1 return res ","description":"2311. Longest Binary Subsequence Less Than or Equal to K","title":"2311. Longest Binary Subsequence Less Than or Equal to K","uri":"/en/tracks/algorithms-101/leetcode/medium/2311/"},{"content":"LeetCode problem 2312\nclass Solution: def sellingWood(self, m: int, n: int, prices: List[List[int]]) -\u003e int: d = defaultdict(dict) for h, w, p in prices: d[h][w] = p dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): dp[i][j] = d[i].get(j, 0) for k in range(1, i): dp[i][j] = max(dp[i][j], dp[k][j] + dp[i - k][j]) for k in range(1, j): dp[i][j] = max(dp[i][j], dp[i][k] + dp[i][j - k]) return dp[-1][-1] ","description":"2312. Selling Pieces of Wood","title":"2312. Selling Pieces of Wood","uri":"/en/tracks/algorithms-101/leetcode/hard/2312/"},{"content":"LeetCode problem 2313\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def minimumFlips(self, root: Optional[TreeNode], result: bool) -\u003e int: def dfs(root: Optional[TreeNode]) -\u003e (int, int): if root is None: return inf, inf x = root.val if x in (0, 1): return x, x ^ 1 l, r = dfs(root.left), dfs(root.right) if x == 2: return l[0] + r[0], min(l[0] + r[1], l[1] + r[0], l[1] + r[1]) if x == 3: return min(l[0] + r[0], l[0] + r[1], l[1] + r[0]), l[1] + r[1] if x == 4: return min(l[0] + r[0], l[1] + r[1]), min(l[0] + r[1], l[1] + r[0]) return min(l[1], r[1]), min(l[0], r[0]) return dfs(root)[int(result)] ","description":"2313. Minimum Flips in Binary Tree to Get Result","title":"2313. Minimum Flips in Binary Tree to Get Result","uri":"/en/tracks/algorithms-101/leetcode/hard/2313/"},{"content":"LeetCode problem 2315\nclass Solution: def countAsterisks(self, s: str) -\u003e int: res, ok = 0, 1 for c in s: if c == \"*\": res += ok elif c == \"|\": ok ^= 1 return res ","description":"2315. Count Asterisks","title":"2315. Count Asterisks","uri":"/en/tracks/algorithms-101/leetcode/easy/2315/"},{"content":"LeetCode problem 2316\nclass Solution: def countPairs(self, n: int, edges: List[List[int]]) -\u003e int: def dfs(i: int) -\u003e int: if vis[i]: return 0 vis[i] = True return 1 + sum(dfs(j) for j in g[i]) g = [[] for _ in range(n)] for a, b in edges: g[a].append(b) g[b].append(a) vis = [False] * n res = s = 0 for i in range(n): t = dfs(i) res += s * t s += t return res ","description":"2316. Count Unreachable Pairs of Nodes in an Undirected Graph","title":"2316. Count Unreachable Pairs of Nodes in an Undirected Graph","uri":"/en/tracks/algorithms-101/leetcode/medium/2316/"},{"content":"LeetCode problem 2317\nclass Solution: def maximumXOR(self, nums: List[int]) -\u003e int: return reduce(or_, nums) ","description":"2317. Maximum XOR After Operations","title":"2317. Maximum XOR After Operations","uri":"/en/tracks/algorithms-101/leetcode/medium/2317/"},{"content":"LeetCode problem 2318\nclass Solution: def distinctSequences(self, n: int) -\u003e int: if n == 1: return 6 mod = 10**9 + 7 dp = [[[0] * 6 for _ in range(6)] for _ in range(n + 1)] for i in range(6): for j in range(6): if gcd(i + 1, j + 1) == 1 and i != j: dp[2][i][j] = 1 for k in range(3, n + 1): for i in range(6): for j in range(6): if gcd(i + 1, j + 1) == 1 and i != j: for h in range(6): if gcd(h + 1, i + 1) == 1 and h != i and h != j: dp[k][i][j] += dp[k - 1][h][i] res = 0 for i in range(6): for j in range(6): res += dp[-1][i][j] return res % mod ","description":"2318. Number of Distinct Roll Sequences","title":"2318. Number of Distinct Roll Sequences","uri":"/en/tracks/algorithms-101/leetcode/hard/2318/"},{"content":"LeetCode problem 2319\nclass Solution: def checkXMatrix(self, grid: List[List[int]]) -\u003e bool: for i, row in enumerate(grid): for j, v in enumerate(row): if i == j or i + j == len(grid) - 1: if v == 0: return False elif v: return False return True ","description":"2319. Check if Matrix Is X-Matrix","title":"2319. Check if Matrix Is X-Matrix","uri":"/en/tracks/algorithms-101/leetcode/easy/2319/"},{"content":"LeetCode problem 2320\nclass Solution: def countHousePlacements(self, n: int) -\u003e int: mod = 10**9 + 7 f = [1] * n g = [1] * n for i in range(1, n): f[i] = g[i - 1] g[i] = (f[i - 1] + g[i - 1]) % mod v = f[-1] + g[-1] return v * v % mod ","description":"2320. Count Number of Ways to Place Houses","title":"2320. Count Number of Ways to Place Houses","uri":"/en/tracks/algorithms-101/leetcode/medium/2320/"},{"content":"LeetCode problem 2321\nclass Solution: def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -\u003e int: def f(nums1, nums2): d = [a - b for a, b in zip(nums1, nums2)] t = mx = d[0] for v in d[1:]: if t \u003e 0: t += v else: t = v mx = max(mx, t) return mx s1, s2 = sum(nums1), sum(nums2) return max(s2 + f(nums1, nums2), s1 + f(nums2, nums1)) ","description":"2321. Maximum Score Of Spliced Array","title":"2321. Maximum Score Of Spliced Array","uri":"/en/tracks/algorithms-101/leetcode/hard/2321/"},{"content":"LeetCode problem 2322\nclass Solution: def minimumScore(self, nums: List[int], edges: List[List[int]]) -\u003e int: def dfs(i, fa, x): res = nums[i] for j in g[i]: if j != fa and j != x: res ^= dfs(j, i, x) return res def dfs2(i, fa, x): nonlocal s, s1, res res = nums[i] for j in g[i]: if j != fa and j != x: a = dfs2(j, i, x) res ^= a b = s1 ^ a c = s ^ s1 t = max(a, b, c) - min(a, b, c) res = min(res, t) return res g = defaultdict(list) for a, b in edges: g[a].append(b) g[b].append(a) s = 0 for v in nums: s ^= v n = len(nums) res = inf for i in range(n): for j in g[i]: s1 = dfs(i, -1, j) dfs2(i, -1, j) return res ","description":"2322. Minimum Score After Removals on a Tree","title":"2322. Minimum Score After Removals on a Tree","uri":"/en/tracks/algorithms-101/leetcode/hard/2322/"},{"content":"LeetCode problem 2323\nclass Solution: def minimumTime(self, jobs: List[int], workers: List[int]) -\u003e int: jobs.sort() workers.sort() return max((a + b - 1) // b for a, b in zip(jobs, workers)) ","description":"2323. Find Minimum Time to Finish All Jobs II","title":"2323. Find Minimum Time to Finish All Jobs II","uri":"/en/tracks/algorithms-101/leetcode/medium/2323/"},{"content":"LeetCode problem 2325\nclass Solution: def decodeMessage(self, key: str, message: str) -\u003e str: d = {\" \": \" \"} i = 0 for c in key: if c not in d: d[c] = ascii_lowercase[i] i += 1 return \"\".join(d[c] for c in message) ","description":"2325. Decode the Message","title":"2325. Decode the Message","uri":"/en/tracks/algorithms-101/leetcode/easy/2325/"},{"content":"LeetCode problem 2326\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -\u003e List[List[int]]: res = [[-1] * n for _ in range(m)] i = j = p = 0 dirs = [[0, 1], [1, 0], [0, -1], [-1, 0]] while 1: res[i][j] = head.val head = head.next if not head: break while 1: x, y = i + dirs[p][0], j + dirs[p][1] if x \u003c 0 or y \u003c 0 or x \u003e= m or y \u003e= n or ~res[x][y]: p = (p + 1) % 4 else: i, j = x, y break return res ","description":"2326. Spiral Matrix IV","title":"2326. Spiral Matrix IV","uri":"/en/tracks/algorithms-101/leetcode/medium/2326/"},{"content":"LeetCode problem 2327\nclass Solution: def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -\u003e int: m = (n \u003c\u003c 1) + 10 d = [0] * m cnt = [0] * m cnt[1] = 1 for i in range(1, n + 1): if cnt[i]: d[i] += cnt[i] d[i + forget] -= cnt[i] nxt = i + delay while nxt \u003c i + forget: cnt[nxt] += cnt[i] nxt += 1 mod = 10**9 + 7 return sum(d[: n + 1]) % mod ","description":"2327. Number of People Aware of a Secret","title":"2327. Number of People Aware of a Secret","uri":"/en/tracks/algorithms-101/leetcode/medium/2327/"},{"content":"LeetCode problem 2328\nclass Solution: def countPaths(self, grid: List[List[int]]) -\u003e int: @cache def dfs(i: int, j: int) -\u003e int: res = 1 for a, b in pairwise((-1, 0, 1, 0, -1)): x, y = i + a, j + b if 0 \u003c= x \u003c m and 0 \u003c= y \u003c n and grid[i][j] \u003c grid[x][y]: res = (res + dfs(x, y)) % mod return res mod = 10**9 + 7 m, n = len(grid), len(grid[0]) return sum(dfs(i, j) for i in range(m) for j in range(n)) % mod ","description":"2328. Number of Increasing Paths in a Grid","title":"2328. Number of Increasing Paths in a Grid","uri":"/en/tracks/algorithms-101/leetcode/hard/2328/"},{"content":"LeetCode problem 2330\nclass Solution: def makePalindrome(self, s: str) -\u003e bool: i, j = 0, len(s) - 1 cnt = 0 while i \u003c j: cnt += s[i] != s[j] i, j = i + 1, j - 1 return cnt \u003c= 2 ","description":"2330. Valid Palindrome IV","title":"2330. Valid Palindrome IV","uri":"/en/tracks/algorithms-101/leetcode/medium/2330/"},{"content":"LeetCode problem 2331\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def evaluateTree(self, root: Optional[TreeNode]) -\u003e bool: if root.left is None: return bool(root.val) l = self.evaluateTree(root.left) r = self.evaluateTree(root.right) return l or r if root.val == 2 else l and r ","description":"2331. Evaluate Boolean Binary Tree","title":"2331. Evaluate Boolean Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/easy/2331/"},{"content":"LeetCode problem 2332\nclass Solution: def latestTimeCatchTheBus( self, buses: List[int], passengers: List[int], capacity: int ) -\u003e int: buses.sort() passengers.sort() j = 0 for t in buses: c = capacity while c and j \u003c len(passengers) and passengers[j] \u003c= t: c, j = c - 1, j + 1 j -= 1 res = buses[-1] if c else passengers[j] while ~j and passengers[j] == res: res, j = res - 1, j - 1 return res ","description":"2332. The Latest Time to Catch a Bus","title":"2332. The Latest Time to Catch a Bus","uri":"/en/tracks/algorithms-101/leetcode/medium/2332/"},{"content":"LeetCode problem 2333\nclass Solution: def minSumSquareDiff( self, nums1: List[int], nums2: List[int], k1: int, k2: int ) -\u003e int: d = [abs(a - b) for a, b in zip(nums1, nums2)] k = k1 + k2 if sum(d) \u003c= k: return 0 left, right = 0, max(d) while left \u003c right: mid = (left + right) \u003e\u003e 1 if sum(max(v - mid, 0) for v in d) \u003c= k: right = mid else: left = mid + 1 for i, v in enumerate(d): d[i] = min(left, v) k -= max(0, v - left) for i, v in enumerate(d): if k == 0: break if v == left: k -= 1 d[i] -= 1 return sum(v * v for v in d) ","description":"2333. Minimum Sum of Squared Difference","title":"2333. Minimum Sum of Squared Difference","uri":"/en/tracks/algorithms-101/leetcode/medium/2333/"},{"content":"LeetCode problem 2334\nclass Solution: def validSubarraySize(self, nums: List[int], threshold: int) -\u003e int: n = len(nums) left = [-1] * n right = [n] * n stk = [] for i, v in enumerate(nums): while stk and nums[stk[-1]] \u003e= v: stk.pop() if stk: left[i] = stk[-1] stk.append(i) stk = [] for i in range(n - 1, -1, -1): while stk and nums[stk[-1]] \u003e= nums[i]: stk.pop() if stk: right[i] = stk[-1] stk.append(i) for i, v in enumerate(nums): k = right[i] - left[i] - 1 if v \u003e threshold // k: return k return -1 ","description":"2334. Subarray With Elements Greater Than Varying Threshold","title":"2334. Subarray With Elements Greater Than Varying Threshold","uri":"/en/tracks/algorithms-101/leetcode/hard/2334/"},{"content":"LeetCode problem 2335\nclass Solution: def fillCups(self, amount: List[int]) -\u003e int: amount.sort() if amount[0] + amount[1] \u003c= amount[2]: return amount[2] return (sum(amount) + 1) // 2 ","description":"2335. Minimum Amount of Time to Fill Cups","title":"2335. Minimum Amount of Time to Fill Cups","uri":"/en/tracks/algorithms-101/leetcode/easy/2335/"},{"content":"LeetCode problem 2336\nfrom sortedcontainers import SortedSet class SmallestInfiniteSet: def __init__(self): self.s = SortedSet(range(1, 1001)) def popSmallest(self) -\u003e int: x = self.s[0] self.s.remove(x) return x def addBack(self, num: int) -\u003e None: self.s.add(num) # Your SmallestInfiniteSet object will be instantiated and called as such: # obj = SmallestInfiniteSet() # param_1 = obj.popSmallest() # obj.addBack(num) ","description":"2336. Smallest Number in Infinite Set","title":"2336. Smallest Number in Infinite Set","uri":"/en/tracks/algorithms-101/leetcode/medium/2336/"},{"content":"LeetCode problem 2337\nclass Solution: def canChange(self, start: str, target: str) -\u003e bool: n = len(start) i = j = 0 while 1: while i \u003c n and start[i] == '_': i += 1 while j \u003c n and target[j] == '_': j += 1 if i \u003e= n and j \u003e= n: return True if i \u003e= n or j \u003e= n or start[i] != target[j]: return False if start[i] == 'L' and i \u003c j: return False if start[i] == 'R' and i \u003e j: return False i, j = i + 1, j + 1 ","description":"2337. Move Pieces to Obtain a String","title":"2337. Move Pieces to Obtain a String","uri":"/en/tracks/algorithms-101/leetcode/medium/2337/"},{"content":"LeetCode problem 2338\nclass Solution: def idealArrays(self, n: int, maxValue: int) -\u003e int: c = [[0] * 16 for _ in range(n)] mod = 10**9 + 7 for i in range(n): for j in range(min(16, i + 1)): c[i][j] = 1 if j == 0 else (c[i - 1][j] + c[i - 1][j - 1]) % mod dp = [[0] * 16 for _ in range(maxValue + 1)] for i in range(1, maxValue + 1): dp[i][1] = 1 for j in range(1, 15): for i in range(1, maxValue + 1): k = 2 while k * i \u003c= maxValue: dp[k * i][j + 1] = (dp[k * i][j + 1] + dp[i][j]) % mod k += 1 res = 0 for i in range(1, maxValue + 1): for j in range(1, 16): res = (res + dp[i][j] * c[-1][j - 1]) % mod return res ","description":"2338. Count the Number of Ideal Arrays","title":"2338. Count the Number of Ideal Arrays","uri":"/en/tracks/algorithms-101/leetcode/hard/2338/"},{"content":"LeetCode problem\nProblem Statement Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\nNaive Solution A simple solution to this problem is to:\ntraverse the linked list storing the value of each node in an array. Then, we could compare the array with its reversed version.\nIf they match, the linked list is a palindrome. Otherwise, it is not.\nThis solution takes O(n) time (where n is the number of nodes in the list), as we need to traverse the list once.\nHowever, it also takes O(n) space, as we store the value of each node in an array.\nApproach To solve the problem in O(n) time and O(1) space, we can use the two-pointer technique to find the middle of the linked list. Then, we can reverse the second half of the list in-place. After that, we can compare the first half with the reversed second half. If they match, the list is a palindrome.\nReversing a linked list in-place involves changing the next pointers of the nodes to point to the previous node. This process can be done with a constant amount of space.\nSteps Initialize two pointers: slow and fast at the head of the list. Move slow one step at a time and fast two steps at a time. When fast reaches the end of the list, slow will be at the middle. Reverse the second half of the list starting from slow. Compare the first half of the list with the reversed second half. If they match, return true. If they don’t, return false. Solution class Solution: def isPalindrome(self, head: ListNode) -\u003e bool: slow = fast = head # find the mid node while fast and fast.next: slow = slow.next fast = fast.next.next # reverse the second half prev = None cur = slow while cur: # 1 [1 2 3 4] nxt = cur.next # 2 cur.next = prev # 1.next = None prev = cur # 1, at the end of loop will be 4 cur = nxt # 2 # compare the first and second half nodes while prev: if prev.val != head.val: return False prev = prev.next head = head.next return True Debug of Reversing Assuming we have a linked list as [1,2,3,4,5,6] and slow initially points to 4. Result should be [6,5,4,3,2,1]\nInitial state:\nLinked list: 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5 -\u003e 6 cur points to 4 prev = None First iteration: nxt is assigned 5 (the next node after cur) cur.next (the next node after 4) is assigned None prev is assigned 4 cur is assigned 5 (nxt) After first iteration:\nLinked list: 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e None, 5 -\u003e 6 cur points to 5 prev points to 4 Second iteration: nxt is assigned 6 cur.next (the next node after 5) is assigned 4 (prev) prev is assigned 5 cur is assigned 6 (nxt) After second iteration:\nLinked list: 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e None, 5 -\u003e 4, 6 cur points to 6 prev points to 5 Third iteration: nxt is assigned None cur.next (the next node after 6) is assigned 5 (prev) prev is assigned 6 cur is assigned None (nxt) After third iteration:\nLinked list: 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e None, 5 -\u003e 4, 6 -\u003e 5 cur points to None prev points to 6 Since cur is None, we exit the while loop. Now prev is pointing to the head of the reversed second half of the list.\nThe list now looks like this: 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e None and 6 -\u003e 5 -\u003e 4 -\u003e None.\n","description":"234. Palindrome Linked List","title":"234. Palindrome Linked List","uri":"/en/tracks/algorithms-101/leetcode/easy/234/"},{"content":"LeetCode problem 2340\nclass Solution: def minimumSwaps(self, nums: List[int]) -\u003e int: i = j = 0 for k, v in enumerate(nums): if v \u003c nums[i] or (v == nums[i] and k \u003c i): i = k if v \u003e= nums[j] or (v == nums[j] and k \u003e j): j = k return 0 if i == j else i + len(nums) - 1 - j - (i \u003e j) ","description":"2340. Minimum Adjacent Swaps to Make a Valid Array","title":"2340. Minimum Adjacent Swaps to Make a Valid Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2340/"},{"content":"LeetCode problem 2341\nclass Solution: def numberOfPairs(self, nums: List[int]) -\u003e List[int]: cnt = Counter(nums) s = sum(v // 2 for v in cnt.values()) return [s, len(nums) - s * 2] ","description":"2341. Maximum Number of Pairs in Array","title":"2341. Maximum Number of Pairs in Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2341/"},{"content":"LeetCode problem 2342\nclass Solution: def maximumSum(self, nums: List[int]) -\u003e int: d = defaultdict(int) res = -1 for v in nums: x, y = 0, v while y: x += y % 10 y //= 10 if x in d: res = max(res, d[x] + v) d[x] = max(d[x], v) return res ","description":"2342. Max Sum of a Pair With Equal Sum of Digits","title":"2342. Max Sum of a Pair With Equal Sum of Digits","uri":"/en/tracks/algorithms-101/leetcode/medium/2342/"},{"content":"LeetCode problem 2343\nclass Solution: def smallestTrimmedNumbers( self, nums: List[str], queries: List[List[int]] ) -\u003e List[int]: res = [] for k, trim in queries: t = sorted((v[-trim:], i) for i, v in enumerate(nums)) res.append(t[k - 1][1]) return res ","description":"2343. Query Kth Smallest Trimmed Number","title":"2343. Query Kth Smallest Trimmed Number","uri":"/en/tracks/algorithms-101/leetcode/medium/2343/"},{"content":"LeetCode problem 2344\nclass Solution: def minOperations(self, nums: List[int], numsDivide: List[int]) -\u003e int: x = gcd(*numsDivide) y = min((v for v in nums if x % v == 0), default=0) return sum(v \u003c y for v in nums) if y else -1 ","description":"2344. Minimum Deletions to Make Array Divisible","title":"2344. Minimum Deletions to Make Array Divisible","uri":"/en/tracks/algorithms-101/leetcode/hard/2344/"},{"content":"LeetCode problem 2345\nclass Solution: def visibleMountains(self, peaks: List[List[int]]) -\u003e int: arr = [(x - y, x + y) for x, y in peaks] cnt = Counter(arr) arr.sort(key=lambda x: (x[0], -x[1])) res, cur = 0, -inf for l, r in arr: if r \u003c= cur: continue cur = r if cnt[(l, r)] == 1: res += 1 return res ","description":"2345. Finding the Number of Visible Mountains","title":"2345. Finding the Number of Visible Mountains","uri":"/en/tracks/algorithms-101/leetcode/medium/2345/"},{"content":"LeetCode problem 2347\nclass Solution: def bestHand(self, ranks: List[int], suits: List[str]) -\u003e str: # if len(set(suits)) == 1: if all(a == b for a, b in pairwise(suits)): return 'Flush' cnt = Counter(ranks) if any(v \u003e= 3 for v in cnt.values()): return 'Three of a Kind' if any(v == 2 for v in cnt.values()): return 'Pair' return 'High Card' ","description":"2347. Best Poker Hand","title":"2347. Best Poker Hand","uri":"/en/tracks/algorithms-101/leetcode/easy/2347/"},{"content":"LeetCode problem 2348\nclass Solution: def zeroFilledSubarray(self, nums: List[int]) -\u003e int: res = cnt = 0 for v in nums: cnt = 0 if v else cnt + 1 res += cnt return res ","description":"2348. Number of Zero-Filled Subarrays","title":"2348. Number of Zero-Filled Subarrays","uri":"/en/tracks/algorithms-101/leetcode/medium/2348/"},{"content":"LeetCode problem 2349\nfrom sortedcontainers import SortedSet class NumberContainers: def __init__(self): self.mp = {} self.t = defaultdict(SortedSet) def change(self, index: int, number: int) -\u003e None: if index in self.mp: v = self.mp[index] self.t[v].remove(index) self.mp[index] = number self.t[number].add(index) def find(self, number: int) -\u003e int: s = self.t[number] return s[0] if s else -1 # Your NumberContainers object will be instantiated and called as such: # obj = NumberContainers() # obj.change(index,number) # param_2 = obj.find(number) ","description":"2349. Design a Number Container System","title":"2349. Design a Number Container System","uri":"/en/tracks/algorithms-101/leetcode/medium/2349/"},{"content":"LeetCode problem 2350\nclass Solution: def shortestSequence(self, rolls: List[int], k: int) -\u003e int: res = 1 s = set() for v in rolls: s.add(v) if len(s) == k: res += 1 s.clear() return res ","description":"2350. Shortest Impossible Sequence of Rolls","title":"2350. Shortest Impossible Sequence of Rolls","uri":"/en/tracks/algorithms-101/leetcode/hard/2350/"},{"content":"LeetCode problem 2351\nclass Solution: def repeatedCharacter(self, s: str) -\u003e str: mask = 0 for c in s: i = ord(c) - ord('a') if mask \u003e\u003e i \u0026 1: return c mask |= 1 \u003c\u003c i ","description":"2351. First Letter to Appear Twice","title":"2351. First Letter to Appear Twice","uri":"/en/tracks/algorithms-101/leetcode/easy/2351/"},{"content":"LeetCode problem 2352\nProblem Statement You are given a square grid of integers, specifically a 0-indexed n×n matrix named grid. The objective is to determine how many pairs of rows and columns in the grid are identical in terms of their content and order.\nTo elucidate, if row $r_i$ and column $c_j$ have the same integers in the exact same sequence, they are considered an “equal” pair. The challenge is to count all such pairs in the given matrix.\nNaive Solution A naive approach would be to compare each row with every column in the grid. This results in a $O(n^3)$ solution since for every row $O(n)$, you compare with each column $O(n)$, and for every comparison, you traverse the entire row or column $O(n)$. This method is inefficient for large matrices.\nApproach Instead of comparing every row with every column directly, we can convert each row and column into a tuple and utilize a dictionary to keep a count of occurrences of each unique row. While iterating through the columns, we can directly reference our dictionary to see if the tuple representation of the column matches with any row.\nWhy Tuples? Before we dive into the optimized approach, it’s essential to understand the role of tuples here. We transform rows and columns into tuples because:\nTuples are immutable: their content cannot be altered after they’re created. They can be used as keys in dictionaries, unlike lists or sets. This property is pivotal for our solution. Tuples maintain the order of elements, crucial for our problem’s requirements. Steps Convert each row to a tuple and count its occurrences using a dictionary. Traverse each column, convert it to a tuple. Check if the column tuple exists in our dictionary. If it does, increment the count by the occurrences of that tuple. Solution def equalPairs(self, grid: List[List[int]]) -\u003e int: count = 0 rows = {} # Store row tuples and their occurrence count for row in grid: row = tuple(row) rows[row]= 1 + rows.get(row, 0) # For each column, check if the column tuple exists in rows dictionary n = len(grid) for c in range(n): col = tuple(grid[r][c] for r in range(n)) count += rows.get(col, 0) return count ","description":"2352. Equal Row and Column Pairs","title":"2352. Equal Row and Column Pairs","uri":"/en/tracks/algorithms-101/leetcode/medium/2352/"},{"content":"LeetCode problem 2353\nfrom sortedcontainers import SortedSet class FoodRatings: def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]): self.mp = {} self.t = defaultdict(lambda: SortedSet(key=lambda x: (-x[0], x[1]))) for a, b, c in zip(foods, cuisines, ratings): self.mp[a] = (b, c) self.t[b].add((c, a)) def changeRating(self, food: str, newRating: int) -\u003e None: b, c = self.mp[food] self.mp[food] = (b, newRating) self.t[b].remove((c, food)) self.t[b].add((newRating, food)) def highestRated(self, cuisine: str) -\u003e str: return self.t[cuisine][0][1] # Your FoodRatings object will be instantiated and called as such: # obj = FoodRatings(foods, cuisines, ratings) # obj.changeRating(food,newRating) # param_2 = obj.highestRated(cuisine) ","description":"2353. Design a Food Rating System","title":"2353. Design a Food Rating System","uri":"/en/tracks/algorithms-101/leetcode/medium/2353/"},{"content":"LeetCode problem 2354\nclass Solution: def countExcellentPairs(self, nums: List[int], k: int) -\u003e int: s = set(nums) res = 0 cnt = Counter() for v in s: cnt[v.bit_count()] += 1 for v in s: t = v.bit_count() for i, x in cnt.items(): if t + i \u003e= k: res += x return res ","description":"2354. Number of Excellent Pairs","title":"2354. Number of Excellent Pairs","uri":"/en/tracks/algorithms-101/leetcode/hard/2354/"},{"content":"LeetCode problem 2355\nclass Solution: def maximumBooks(self, books: List[int]) -\u003e int: nums = [v - i for i, v in enumerate(books)] n = len(nums) left = [-1] * n stk = [] for i, v in enumerate(nums): while stk and nums[stk[-1]] \u003e= v: stk.pop() if stk: left[i] = stk[-1] stk.append(i) res = 0 dp = [0] * n dp[0] = books[0] for i, v in enumerate(books): j = left[i] cnt = min(v, i - j) u = v - cnt + 1 s = (u + v) * cnt // 2 dp[i] = s + (0 if j == -1 else dp[j]) res = max(res, dp[i]) return res ","description":"2355. Maximum Number of Books You Can Take","title":"2355. Maximum Number of Books You Can Take","uri":"/en/tracks/algorithms-101/leetcode/hard/2355/"},{"content":"LeetCode problem 2357\nclass Solution: def minimumOperations(self, nums: List[int]) -\u003e int: return len({x for x in nums if x}) ","description":"2357. Make Array Zero by Subtracting Equal Amounts","title":"2357. Make Array Zero by Subtracting Equal Amounts","uri":"/en/tracks/algorithms-101/leetcode/easy/2357/"},{"content":"LeetCode problem 2358\nclass Solution: def maximumGroups(self, grades: List[int]) -\u003e int: n = len(grades) return bisect_right(range(n + 1), n * 2, key=lambda x: x * x + x) - 1 ","description":"2358. Maximum Number of Groups Entering a Competition","title":"2358. Maximum Number of Groups Entering a Competition","uri":"/en/tracks/algorithms-101/leetcode/medium/2358/"},{"content":"LeetCode problem 2359\nclass Solution: def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -\u003e int: def f(i): dist = [inf] * n dist[i] = 0 q = deque([i]) while q: i = q.popleft() for j in g[i]: if dist[j] == inf: dist[j] = dist[i] + 1 q.append(j) return dist g = defaultdict(list) for i, j in enumerate(edges): if j != -1: g[i].append(j) n = len(edges) d1 = f(node1) d2 = f(node2) res, d = -1, inf for i, (a, b) in enumerate(zip(d1, d2)): if (t := max(a, b)) \u003c d: d = t res = i return res ","description":"2359. Find Closest Node to Given Two Nodes","title":"2359. Find Closest Node to Given Two Nodes","uri":"/en/tracks/algorithms-101/leetcode/medium/2359/"},{"content":"LeetCode задача 236\nЗадача Найдите наименьшего общего предка (LCA) двух заданных узлов в бинарном дереве.\nПодсказки Используйте метод обхода в глубину (DFS) для решения этой задачи.\nПодход Обход в глубину (DFS): Используйте рекурсивный метод для обхода дерева. Поиск узлов: При обходе дерева ищите заданные узлы p и q. Возврат значения: Если найден один из узлов, верните его как потенциального предка. Сравнение результатов: Если оба поддерева возвращают узлы, текущий узел является LCA. Пропуск пустых узлов: Если узел пуст, верните None. Алгоритм Запустите рекурсивный DFS, начиная с корня дерева. В каждой итерации рекурсии: Проверьте, является ли текущий узел одним из искомых (p или q). Произведите обход левого и правого поддеревьев. Если оба поддерева возвращают не-None значения, текущий узел является LCA. Решение class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode) -\u003e TreeNode: if not root: return None # Если текущий узел является одним из искомых, вернуть его if root.val == p.val or root.val == q.val: return root # Обход левого и правого поддеревьев left = lowestCommonAncestor(root.left, p, q) right = lowestCommonAncestor(root.right, p, q) # Если оба поддерева возвращают узлы, текущий узел является LCA if left and right: return root return left or right ","description":"LeetCode 236. Находите наименьшего общего предка в бинарном дереве. Разбор задачи.","title":"236. Lowest Common Ancestor of a Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/236/"},{"content":"LeetCode problem 2360\nclass Solution: def longestCycle(self, edges: List[int]) -\u003e int: n = len(edges) vis = [False] * n res = -1 for i in range(n): if vis[i]: continue j = i cycle = [] while j != -1 and not vis[j]: vis[j] = True cycle.append(j) j = edges[j] if j == -1: continue m = len(cycle) k = next((k for k in range(m) if cycle[k] == j), inf) res = max(res, m - k) return res ","description":"2360. Longest Cycle in a Graph","title":"2360. Longest Cycle in a Graph","uri":"/en/tracks/algorithms-101/leetcode/hard/2360/"},{"content":"LeetCode problem 2361\nclass Solution: def minimumCosts( self, regular: List[int], express: List[int], expressCost: int ) -\u003e List[int]: n = len(regular) f, g = 0, inf cost = [0] * n for i, (a, b) in enumerate(zip(regular, express), 1): ff = min(f + a, g + a) gg = min(f + expressCost + b, g + b) f, g = ff, gg cost[i - 1] = min(f, g) return cost ","description":"2361. Minimum Costs Using the Train Line","title":"2361. Minimum Costs Using the Train Line","uri":"/en/tracks/algorithms-101/leetcode/hard/2361/"},{"content":"LeetCode problem 2363\nclass Solution: def mergeSimilarItems( self, items1: List[List[int]], items2: List[List[int]] ) -\u003e List[List[int]]: cnt = Counter() for v, w in chain(items1, items2): cnt[v] += w return sorted(cnt.items()) ","description":"2363. Merge Similar Items","title":"2363. Merge Similar Items","uri":"/en/tracks/algorithms-101/leetcode/easy/2363/"},{"content":"LeetCode problem 2364\nclass Solution: def countBadPairs(self, nums: List[int]) -\u003e int: cnt = Counter() res = 0 for i, x in enumerate(nums): res += i - cnt[i - x] cnt[i - x] += 1 return res ","description":"2364. Count Number of Bad Pairs","title":"2364. Count Number of Bad Pairs","uri":"/en/tracks/algorithms-101/leetcode/medium/2364/"},{"content":"LeetCode problem 2365\nclass Solution: def taskSchedulerII(self, tasks: List[int], space: int) -\u003e int: day = defaultdict(int) res = 0 for task in tasks: res += 1 res = max(res, day[task]) day[task] = res + space + 1 return res ","description":"2365. Task Scheduler II","title":"2365. Task Scheduler II","uri":"/en/tracks/algorithms-101/leetcode/medium/2365/"},{"content":"LeetCode problem 2366\nclass Solution: def minimumReplacement(self, nums: List[int]) -\u003e int: res = 0 n = len(nums) mx = nums[-1] for i in range(n - 2, -1, -1): if nums[i] \u003c= mx: mx = nums[i] continue k = (nums[i] + mx - 1) // mx res += k - 1 mx = nums[i] // k return res ","description":"2366. Minimum Replacements to Sort the Array","title":"2366. Minimum Replacements to Sort the Array","uri":"/en/tracks/algorithms-101/leetcode/hard/2366/"},{"content":"LeetCode problem 2367\nclass Solution: def arithmeticTriplets(self, nums: List[int], diff: int) -\u003e int: vis = set(nums) return sum(x + diff in vis and x + diff * 2 in vis for x in nums) ","description":"2367. Number of Arithmetic Triplets","title":"2367. Number of Arithmetic Triplets","uri":"/en/tracks/algorithms-101/leetcode/easy/2367/"},{"content":"LeetCode problem 2368\nclass Solution: def reachableNodes( self, n: int, edges: List[List[int]], restricted: List[int] ) -\u003e int: s = set(restricted) g = defaultdict(list) for a, b in edges: g[a].append(b) g[b].append(a) q = deque([0]) vis = [False] * n for v in restricted: vis[v] = True res = 0 while q: i = q.popleft() res += 1 vis[i] = True for j in g[i]: if not vis[j]: q.append(j) return res ","description":"2368. Reachable Nodes With Restrictions","title":"2368. Reachable Nodes With Restrictions","uri":"/en/tracks/algorithms-101/leetcode/medium/2368/"},{"content":"LeetCode problem 2369\nclass Solution: def validPartition(self, nums: List[int]) -\u003e bool: n = len(nums) dp = [False] * (n + 1) dp[0] = True for i in range(2, n + 1): if nums[i - 1] == nums[i - 2]: dp[i] = dp[i] or dp[i - 2] if i \u003e 2 and nums[i - 1] == nums[i - 2] == nums[i - 3]: dp[i] = dp[i] or dp[i - 3] if ( i \u003e 2 and nums[i - 1] - nums[i - 2] == 1 and nums[i - 2] - nums[i - 3] == 1 ): dp[i] = dp[i] or dp[i - 3] return dp[-1] ","description":"2369. Check if There is a Valid Partition For The Array","title":"2369. Check if There is a Valid Partition For The Array","uri":"/en/tracks/algorithms-101/leetcode/medium/2369/"},{"content":"LeetCode задача 237\nЗадача Написать функцию для удаления узла (за исключением хвостового) в односвязном списке, дан только доступ к этому узлу.\nПодсказки Обычно, для удаления узла из односвязного списка, нам нужен доступ к предыдущему узлу. В этом случае, у нас такого доступа нет. Как это обойти? Подход Поскольку доступа к предыдущему узлу нет, мы не можем просто “вырезать” текущий узел. Однако мы можем переписать значение текущего узла значением следующего узла и затем удалить следующий узел.\nАлгоритм Перезаписываем значение текущего узла значением следующего узла. Удаляем следующий узел. Решение class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def deleteNode(node): node.val = node.next.val # Перезаписываем значение узла значением следующего узла node.next = node.next.next # Удаляем следующий узел ","description":"LeetCode 237. Удалить узел в односвязном списке.","title":"237. Delete Node in a Linked List","uri":"/en/tracks/algorithms-101/leetcode/medium/237/"},{"content":"LeetCode problem 2370\nclass Solution: def longestIdealString(self, s: str, k: int) -\u003e int: n = len(s) res = 1 dp = [1] * n d = {s[0]: 0} for i in range(1, n): a = ord(s[i]) for b in ascii_lowercase: if abs(a - ord(b)) \u003e k: continue if b in d: dp[i] = max(dp[i], dp[d[b]] + 1) d[s[i]] = i return max(dp) ","description":"2370. Longest Ideal Subsequence","title":"2370. Longest Ideal Subsequence","uri":"/en/tracks/algorithms-101/leetcode/medium/2370/"},{"content":"LeetCode problem 2371\nclass Solution: def minScore(self, grid: List[List[int]]) -\u003e List[List[int]]: m, n = len(grid), len(grid[0]) nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)] nums.sort() row_max = [0] * m col_max = [0] * n res = [[0] * n for _ in range(m)] for _, i, j in nums: res[i][j] = max(row_max[i], col_max[j]) + 1 row_max[i] = col_max[j] = res[i][j] return res ","description":"2371. Minimize Maximum Value in a Grid","title":"2371. Minimize Maximum Value in a Grid","uri":"/en/tracks/algorithms-101/leetcode/hard/2371/"},{"content":"LeetCode problem 2373\nclass Solution: def largestLocal(self, grid: List[List[int]]) -\u003e List[List[int]]: n = len(grid) res = [[0] * (n - 2) for _ in range(n - 2)] for i in range(n - 2): for j in range(n - 2): res[i][j] = max( grid[x][y] for x in range(i, i + 3) for y in range(j, j + 3) ) return res ","description":"2373. Largest Local Values in a Matrix","title":"2373. Largest Local Values in a Matrix","uri":"/en/tracks/algorithms-101/leetcode/easy/2373/"},{"content":"LeetCode problem 2374\nclass Solution: def edgeScore(self, edges: List[int]) -\u003e int: cnt = Counter() for i, v in enumerate(edges): cnt[v] += i res = 0 for i in range(len(edges)): if cnt[res] \u003c cnt[i]: res = i return res ","description":"2374. Node With Highest Edge Score","title":"2374. Node With Highest Edge Score","uri":"/en/tracks/algorithms-101/leetcode/medium/2374/"},{"content":"LeetCode problem 2375\nclass Solution: def smallestNumber(self, pattern: str) -\u003e str: def dfs(u): nonlocal res if res: return if u == len(pattern) + 1: res = ''.join(t) return for i in range(1, 10): if not vis[i]: if u and pattern[u - 1] == 'I' and int(t[-1]) \u003e= i: continue if u and pattern[u - 1] == 'D' and int(t[-1]) \u003c= i: continue vis[i] = True t.append(str(i)) dfs(u + 1) vis[i] = False t.pop() vis = [False] * 10 t = [] res = None dfs(0) return res ","description":"2375. Construct Smallest Number From DI String","title":"2375. Construct Smallest Number From DI String","uri":"/en/tracks/algorithms-101/leetcode/medium/2375/"},{"content":"LeetCode problem 2376\nclass Solution: def countSpecialNumbers(self, n: int) -\u003e int: return self.f(n) def f(self, n): @cache def dfs(pos, mask, lead, limit): if pos \u003c= 0: return lead ^ 1 up = a[pos] if limit else 9 res = 0 for i in range(up + 1): if (mask \u003e\u003e i) \u0026 1: continue if i == 0 and lead: res += dfs(pos - 1, mask, lead, limit and i == up) else: res += dfs(pos - 1, mask | 1 \u003c\u003c i, False, limit and i == up) return res a = [0] * 11 l = 0 while n: l += 1 a[l] = n % 10 n //= 10 return dfs(l, 0, True, True) ","description":"2376. Count Special Integers","title":"2376. Count Special Integers","uri":"/en/tracks/algorithms-101/leetcode/hard/2376/"},{"content":"LeetCode problem 2378\nclass Solution: def maxScore(self, edges: List[List[int]]) -\u003e int: def dfs(i): a = b = t = 0 for j, w in g[i]: x, y = dfs(j) a += y b += y t = max(t, x - y + w) b += t return a, b g = defaultdict(list) for i, (p, w) in enumerate(edges[1:], 1): g[p].append((i, w)) return dfs(0)[1] ","description":"2378. Choose Edges to Maximize Score in a Tree","title":"2378. Choose Edges to Maximize Score in a Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/2378/"},{"content":"LeetCode problem 2379\nclass Solution: def minimumRecolors(self, blocks: str, k: int) -\u003e int: res = cnt = blocks[:k].count('W') for i in range(k, len(blocks)): cnt += blocks[i] == 'W' cnt -= blocks[i - k] == 'W' res = min(res, cnt) return res ","description":"2379. Minimum Recolors to Get K Consecutive Black Blocks","title":"2379. Minimum Recolors to Get K Consecutive Black Blocks","uri":"/en/tracks/algorithms-101/leetcode/easy/2379/"},{"content":"LeetCode problem\nProblem Statement The problem is to find a product of all elements in the given integer array nums, except for the i-th element, and return a new array with the results. You must design an algorithm that runs in O(n) time and doesn’t use the division operation. The challenge here is to solve this problem with O(1) extra space complexity.\nNaive Solution A naive solution could be to calculate the product of all elements in the array, then iterate through the array and replace each element with the total product divided by the element. But this solution requires a division operation which is not allowed in this problem. Also, if there is a zero in the array, this solution will not work.\nHints \u0026 Tips This problem can be solved by using a two-pass approach.\nWe can make two passes over the input array:\none to calculate the product of all numbers to the left of each element, and another to calculate the product of all numbers to the right of each element. Then we multiply these two values to get the final result. Approach The provided solution already optimizes the space complexity by using a single result array and two iterations over the input array.\nIn the first pass, the product of all elements to the left of the current element is computed and stored in the res array.\nIn the second pass, the product of all elements to the right of the current element is computed and this value is multiplied with the corresponding value in the res array to give the final product.\nSteps Initialize an empty list res and a variable prod to hold the product of elements. Iterate over the nums array from left to right. For each element, append the current prod to res and update prod by multiplying it with the current element. Reset prod to 1. Then iterate over the nums array from right to left. For each element, multiply the corresponding element in res with prod and update res. Then update prod by multiplying it with the current element. Return res. Solution class Solution: def productExceptSelf(self, nums: List[int]) -\u003e List[int]: res = [] # -\u003e prod = 1 for x in nums: # nums[2,3,4] =\u003e res[1(1),2(1*2),6(2*3)] res.append(prod) prod *= x # \u003c- prod = 1 for i in range(len(nums) -1, -1, -1): res[i] *= prod prod *= nums[i] return res ","description":"238. Product of Array Except Self","title":"238. Product of Array Except Self","uri":"/en/tracks/algorithms-101/leetcode/medium/238/"},{"content":"LeetCode problem 2380\nclass Solution: def secondsToRemoveOccurrences(self, s: str) -\u003e int: res = cnt = 0 for c in s: if c == '0': cnt += 1 elif cnt: res = max(res + 1, cnt) return res ","description":"2380. Time Needed to Rearrange a Binary String","title":"2380. Time Needed to Rearrange a Binary String","uri":"/en/tracks/algorithms-101/leetcode/medium/2380/"},{"content":"LeetCode problem 2381\nclass Solution: def shiftingLetters(self, s: str, shifts: List[List[int]]) -\u003e str: n = len(s) d = [0] * (n + 1) for i, j, v in shifts: if v == 0: v = -1 d[i] += v d[j + 1] -= v for i in range(1, n + 1): d[i] += d[i - 1] return ''.join( chr(ord('a') + (ord(s[i]) - ord('a') + d[i] + 26) % 26) for i in range(n) ) ","description":"2381. Shifting Letters II","title":"2381. Shifting Letters II","uri":"/en/tracks/algorithms-101/leetcode/medium/2381/"},{"content":"LeetCode problem 2382\nclass Solution: def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -\u003e List[int]: def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] def merge(a, b): pa, pb = find(a), find(b) p[pa] = pb s[pb] += s[pa] n = len(nums) p = list(range(n)) s = [0] * n res = [0] * n mx = 0 for j in range(n - 1, 0, -1): i = removeQueries[j] s[i] = nums[i] if i and s[find(i - 1)]: merge(i, i - 1) if i \u003c n - 1 and s[find(i + 1)]: merge(i, i + 1) mx = max(mx, s[find(i)]) res[j - 1] = mx return res ","description":"2382. Maximum Segment Sum After Removals","title":"2382. Maximum Segment Sum After Removals","uri":"/en/tracks/algorithms-101/leetcode/hard/2382/"},{"content":"LeetCode problem 2383\nclass Solution: def minNumberOfHours( self, initialEnergy: int, initialExperience: int, energy: List[int], experience: List[int], ) -\u003e int: res = max(0, sum(energy) - initialEnergy + 1) for x in experience: if initialExperience \u003c= x: res += x - initialExperience + 1 initialExperience = x + 1 initialExperience += x return res ","description":"2383. Minimum Hours of Training to Win a Competition","title":"2383. Minimum Hours of Training to Win a Competition","uri":"/en/tracks/algorithms-101/leetcode/easy/2383/"},{"content":"LeetCode problem 2384\nclass Solution: def largestPalindromic(self, num: str) -\u003e str: cnt = Counter(num) res = '' for i in range(9, -1, -1): v = str(i) if cnt[v] % 2: res = v cnt[v] -= 1 break for i in range(10): v = str(i) if cnt[v]: cnt[v] //= 2 s = cnt[v] * v res = s + res + s return res.strip('0') or '0' ","description":"2384. Largest Palindromic Number","title":"2384. Largest Palindromic Number","uri":"/en/tracks/algorithms-101/leetcode/medium/2384/"},{"content":"LeetCode problem 2385\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def amountOfTime(self, root: Optional[TreeNode], start: int) -\u003e int: def dfs(root): if root is None: return if root.left: g[root.val].append(root.left.val) g[root.left.val].append(root.val) if root.right: g[root.val].append(root.right.val) g[root.right.val].append(root.val) dfs(root.left) dfs(root.right) def dfs2(i, fa): res = 0 for j in g[i]: if j != fa: res = max(res, 1 + dfs2(j, i)) return res g = defaultdict(list) dfs(root) return dfs2(start, -1) ","description":"2385. Amount of Time for Binary Tree to Be Infected","title":"2385. Amount of Time for Binary Tree to Be Infected","uri":"/en/tracks/algorithms-101/leetcode/medium/2385/"},{"content":"LeetCode problem 2386\nclass Solution: def kSum(self, nums: List[int], k: int) -\u003e int: mx = 0 for i, v in enumerate(nums): if v \u003e 0: mx += v else: nums[i] = -v nums.sort() h = [(0, 0)] for _ in range(k - 1): s, i = heappop(h) if i \u003c len(nums): heappush(h, (s + nums[i], i + 1)) if i: heappush(h, (s + nums[i] - nums[i - 1], i + 1)) return mx - h[0][0] ","description":"2386. Find the K-Sum of an Array","title":"2386. Find the K-Sum of an Array","uri":"/en/tracks/algorithms-101/leetcode/hard/2386/"},{"content":"LeetCode problem 2387\nclass Solution: def matrixMedian(self, grid: List[List[int]]) -\u003e int: def count(x): return sum(bisect_right(row, x) for row in grid) m, n = len(grid), len(grid[0]) target = (m * n + 1) \u003e\u003e 1 return bisect_left(range(10**6 + 1), target, key=count) ","description":"2387. Median of a Row Wise Sorted Matrix","title":"2387. Median of a Row Wise Sorted Matrix","uri":"/en/tracks/algorithms-101/leetcode/medium/2387/"},{"content":"LeetCode problem 2389\nclass Solution: def answerQueries(self, nums: List[int], queries: List[int]) -\u003e List[int]: nums.sort() m = len(queries) res = [0] * m idx = sorted(range(m), key=lambda i: queries[i]) s = j = 0 for i in idx: while j \u003c len(nums) and s + nums[j] \u003c= queries[i]: s += nums[j] j += 1 res[i] = j return res ","description":"2389. Longest Subsequence With Limited Sum","title":"2389. Longest Subsequence With Limited Sum","uri":"/en/tracks/algorithms-101/leetcode/easy/2389/"},{"content":"LeetCode problem\nProblem Statement You are provided with a string s that contains asterisks or stars (*). Your task is to transform this string. In each operation, you’ll select a star and remove the character immediately to its left and the star itself. Continue this process until there are no stars left in the string.\nThe challenge guarantees that the input string can always be transformed as per the given operation, and the result will always be unique.\nNaive Solution A direct approach would be to loop through the string, and every time you find a star, remove it along with the character to its left. Continue this process till no more stars exist. However, this can be optimized.\nHints \u0026 Tips In Python, strings are immutable. This means, whenever you make a change to a string, a new string is created in memory. To circumvent this inefficiency, we can utilize a data structure like a list (or a stack in this case), which allows for mutable operations.\nApproach A simplified, yet efficient approach is to use a stack:\nUse the stack to store the characters of the string. As you iterate through the string, push characters onto the stack. If you come across a star, pop the top character from the stack (if the stack isn’t empty). The remaining characters in the stack after this operation will form the transformed string. Steps Initialize an empty stack, named stack. Traverse the string from the beginning. For each character: If the character is a star, pop the top character from the stack (provided the stack isn’t empty). Otherwise, push the character onto the stack. Convert the stack to a string to get the result. Solution def removeStars(s: str) -\u003e str: stack = [] for c in s: if c == '*': stack.pop() else: stack.append(c) return ''.join(stack) ","description":"A step-by-step guide to solving the \"Removing Stars From a String\" problem on LeetCode.","title":"2390. Removing Stars From a String","uri":"/en/tracks/algorithms-101/leetcode/medium/2390/"},{"content":"LeetCode problem 2391\nclass Solution: def garbageCollection(self, garbage: List[str], travel: List[int]) -\u003e int: def f(x: str) -\u003e int: res = 0 st = 0 for i, s in enumerate(garbage): if t := s.count(x): res += t + st st = 0 if i \u003c len(travel): st += travel[i] return res return f('M') + f('P') + f('G') ","description":"2391. Minimum Amount of Time to Collect Garbage","title":"2391. Minimum Amount of Time to Collect Garbage","uri":"/en/tracks/algorithms-101/leetcode/medium/2391/"},{"content":"LeetCode problem 2392\nclass Solution: def buildMatrix( self, k: int, rowConditions: List[List[int]], colConditions: List[List[int]] ) -\u003e List[List[int]]: def f(cond): g = defaultdict(list) indeg = [0] * (k + 1) for a, b in cond: g[a].append(b) indeg[b] += 1 q = deque([i for i, v in enumerate(indeg[1:], 1) if v == 0]) res = [] while q: for _ in range(len(q)): i = q.popleft() res.append(i) for j in g[i]: indeg[j] -= 1 if indeg[j] == 0: q.append(j) return None if len(res) != k else res row = f(rowConditions) col = f(colConditions) if row is None or col is None: return [] res = [[0] * k for _ in range(k)] m = [0] * (k + 1) for i, v in enumerate(col): m[v] = i for i, v in enumerate(row): res[i][m[v]] = v return res ","description":"2392. Build a Matrix With Conditions","title":"2392. Build a Matrix With Conditions","uri":"/en/tracks/algorithms-101/leetcode/hard/2392/"},{"content":"LeetCode problem 2393\nclass Solution: def countSubarrays(self, nums: List[int]) -\u003e int: res = pre = cnt = 0 for x in nums: if pre \u003c x: cnt += 1 else: cnt = 1 pre = x res += cnt return res ","description":"2393. Count Strictly Increasing Subarrays","title":"2393. Count Strictly Increasing Subarrays","uri":"/en/tracks/algorithms-101/leetcode/medium/2393/"},{"content":"LeetCode problem 2395\nclass Solution: def findSubarrays(self, nums: List[int]) -\u003e bool: vis = set() for a, b in pairwise(nums): if (x := a + b) in vis: return True vis.add(x) return False ","description":"2395. Find Subarrays With Equal Sum","title":"2395. Find Subarrays With Equal Sum","uri":"/en/tracks/algorithms-101/leetcode/easy/2395/"},{"content":"LeetCode problem 2396\nclass Solution: def isStrictlyPalindromic(self, n: int) -\u003e bool: return False ","description":"2396. Strictly Palindromic Number","title":"2396. Strictly Palindromic Number","uri":"/en/tracks/algorithms-101/leetcode/medium/2396/"},{"content":"LeetCode problem 2397\nclass Solution: def maximumRows(self, matrix: List[List[int]], numSelect: int) -\u003e int: rows = [] for row in matrix: mask = reduce(or_, (1 \u003c\u003c j for j, x in enumerate(row) if x), 0) rows.append(mask) res = 0 for mask in range(1 \u003c\u003c len(matrix[0])): if mask.bit_count() != numSelect: continue t = sum((x \u0026 mask) == x for x in rows) res = max(res, t) return res ","description":"2397. Maximum Rows Covered by Columns","title":"2397. Maximum Rows Covered by Columns","uri":"/en/tracks/algorithms-101/leetcode/medium/2397/"},{"content":"LeetCode problem 2398\nclass Solution: def maximumRobots( self, chargeTimes: List[int], runningCosts: List[int], budget: int ) -\u003e int: q = deque() res = j = s = 0 for i, (a, b) in enumerate(zip(chargeTimes, runningCosts)): while q and chargeTimes[q[-1]] \u003c= a: q.pop() q.append(i) s += b while q and chargeTimes[q[0]] + (i - j + 1) * s \u003e budget: if q[0] == j: q.popleft() s -= runningCosts[j] j += 1 res = max(res, i - j + 1) return res ","description":"2398. Maximum Number of Robots Within Budget","title":"2398. Maximum Number of Robots Within Budget","uri":"/en/tracks/algorithms-101/leetcode/hard/2398/"},{"content":"LeetCode problem 2399\nclass Solution: def checkDistances(self, s: str, distance: List[int]) -\u003e bool: d = defaultdict(int) for i, c in enumerate(s, 1): if d[c] and i - d[c] - 1 != distance[ord(c) - ord('a')]: return False d[c] = i return True ","description":"2399. Check Distances Between Same Letters","title":"2399. Check Distances Between Same Letters","uri":"/en/tracks/algorithms-101/leetcode/easy/2399/"},{"content":"LeetCode problem 240\nclass Solution: def searchMatrix(self, matrix: List[List[int]], target: int) -\u003e bool: m, n = len(matrix), len(matrix[0]) i, j = m - 1, 0 while i \u003e= 0 and j \u003c n: if matrix[i][j] == target: return True if matrix[i][j] \u003e target: i -= 1 else: j += 1 return False ","description":"240. Search a 2D Matrix II","title":"240. Search a 2D Matrix II","uri":"/en/tracks/algorithms-101/leetcode/hard/2402/"},{"content":"LeetCode задача 240\nЗадача Вам дана двумерная матрица размера m x n, представляющая прямоугольник, и целое число target. Отсортированные строки матрицы по неубыванию с лева направо и столбцы отсортированы по неубыванию сверху вниз.\nНайдите элемент target в матрице. Верните True, если элемент target есть в матрице, и False, если его нет.\nПодсказки Попробуйте использовать двоичный поиск для каждого ряда.\nПодход Самый простой подход - использовать двоичный поиск для каждого ряда. Хотя это не самый эффективный метод, он достаточно прост для понимания.\nАлгоритм Пройдитесь по каждому ряду в матрице. В каждом ряду используйте двоичный поиск для поиска target. Решение from bisect import bisect_left def searchMatrix(matrix, target): for row in matrix: pos = bisect_left(row, target) if pos != len(row) and row[pos] == target: return True return False ","description":"LeetCode 240. Найти элемент в 2D матрице.","title":"240. Search a 2D Matrix II","uri":"/en/tracks/algorithms-101/leetcode/medium/240/"},{"content":"LeetCode problem 2400\nclass Solution: def numberOfWays(self, startPos: int, endPos: int, k: int) -\u003e int: @cache def dfs(i: int, j: int) -\u003e int: if i \u003e j or j \u003c 0: return 0 if j == 0: return 1 if i == 0 else 0 return (dfs(i + 1, j - 1) + dfs(abs(i - 1), j - 1)) % mod mod = 10**9 + 7 return dfs(abs(startPos - endPos), k) ","description":"2400. Number of Ways to Reach a Position After Exactly k Steps","title":"2400. Number of Ways to Reach a Position After Exactly k Steps","uri":"/en/tracks/algorithms-101/leetcode/medium/2400/"},{"content":"LeetCode problem 2401\nclass Solution: def longestNiceSubarray(self, nums: List[int]) -\u003e int: res = j = mask = 0 for i, x in enumerate(nums): while mask \u0026 x: mask ^= nums[j] j += 1 res = max(res, i - j + 1) mask |= x return res ","description":"2401. Longest Nice Subarray","title":"2401. Longest Nice Subarray","uri":"/en/tracks/algorithms-101/leetcode/medium/2401/"},{"content":"LeetCode problem 2403\nclass Solution: def minimumTime(self, power: List[int]) -\u003e int: n = len(power) dp = [inf] * (1 \u003c\u003c n) dp[0] = 0 for mask in range(1, 1 \u003c\u003c n): cnt = mask.bit_count() for i, v in enumerate(power): if (mask \u003e\u003e i) \u0026 1: dp[mask] = min(dp[mask], dp[mask ^ (1 \u003c\u003c i)] + (v + cnt - 1) // cnt) return dp[-1] ","description":"2403. Minimum Time to Kill All Monsters","title":"2403. Minimum Time to Kill All Monsters","uri":"/en/tracks/algorithms-101/leetcode/hard/2403/"},{"content":"LeetCode problem 2404\nclass Solution: def mostFrequentEven(self, nums: List[int]) -\u003e int: cnt = Counter(x for x in nums if x % 2 == 0) res, mx = -1, 0 for x, v in cnt.items(): if v \u003e mx or (v == mx and res \u003e x): res, mx = x, v return res ","description":"2404. Most Frequent Even Element","title":"2404. Most Frequent Even Element","uri":"/en/tracks/algorithms-101/leetcode/easy/2404/"},{"content":"LeetCode problem 2405\nclass Solution: def partitionString(self, s: str) -\u003e int: res, v = 1, 0 for c in s: i = ord(c) - ord('a') if (v \u003e\u003e i) \u0026 1: v = 0 res += 1 v |= 1 \u003c\u003c i return res ","description":"2405. Optimal Partition of String","title":"2405. Optimal Partition of String","uri":"/en/tracks/algorithms-101/leetcode/medium/2405/"},{"content":"LeetCode problem 2406\nclass Solution: def minGroups(self, intervals: List[List[int]]) -\u003e int: h = [] for a, b in sorted(intervals): if h and h[0] \u003c a: heappop(h) heappush(h, b) return len(h) ","description":"2406. Divide Intervals Into Minimum Number of Groups","title":"2406. Divide Intervals Into Minimum Number of Groups","uri":"/en/tracks/algorithms-101/leetcode/medium/2406/"},{"content":"LeetCode problem 2407\nclass Node: def __init__(self): self.l = 0 self.r = 0 self.v = 0 class SegmentTree: def __init__(self, n): self.tr = [Node() for _ in range(4 * n)] self.build(1, 1, n) def build(self, u, l, r): self.tr[u].l = l self.tr[u].r = r if l == r: return mid = (l + r) \u003e\u003e 1 self.build(u \u003c\u003c 1, l, mid) self.build(u \u003c\u003c 1 | 1, mid + 1, r) def modify(self, u, x, v): if self.tr[u].l == x and self.tr[u].r == x: self.tr[u].v = v return mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 if x \u003c= mid: self.modify(u \u003c\u003c 1, x, v) else: self.modify(u \u003c\u003c 1 | 1, x, v) self.pushup(u) def pushup(self, u): self.tr[u].v = max(self.tr[u \u003c\u003c 1].v, self.tr[u \u003c\u003c 1 | 1].v) def query(self, u, l, r): if self.tr[u].l \u003e= l and self.tr[u].r \u003c= r: return self.tr[u].v mid = (self.tr[u].l + self.tr[u].r) \u003e\u003e 1 v = 0 if l \u003c= mid: v = self.query(u \u003c\u003c 1, l, r) if r \u003e mid: v = max(v, self.query(u \u003c\u003c 1 | 1, l, r)) return v class Solution: def lengthOfLIS(self, nums: List[int], k: int) -\u003e int: tree = SegmentTree(max(nums)) res = 1 for v in nums: t = tree.query(1, v - k, v - 1) + 1 res = max(res, t) tree.modify(1, v, t) return res ","description":"2407. Longest Increasing Subsequence II","title":"2407. Longest Increasing Subsequence II","uri":"/en/tracks/algorithms-101/leetcode/hard/2407/"},{"content":"LeetCode problem 2408\nclass SQL: def __init__(self, names: List[str], columns: List[int]): self.tables = defaultdict(list) def insertRow(self, name: str, row: List[str]) -\u003e None: self.tables[name].append(row) def deleteRow(self, name: str, rowId: int) -\u003e None: pass def selectCell(self, name: str, rowId: int, columnId: int) -\u003e str: return self.tables[name][rowId - 1][columnId - 1] # Your SQL object will be instantiated and called as such: # obj = SQL(names, columns) # obj.insertRow(name,row) # obj.deleteRow(name,rowId) # param_3 = obj.selectCell(name,rowId,columnId) ","description":"2408. Design SQL","title":"2408. Design SQL","uri":"/en/tracks/algorithms-101/leetcode/medium/2408/"},{"content":"LeetCode problem 2409\nclass Solution: def countDaysTogether( self, arriveAlice: str, leaveAlice: str, arriveBob: str, leaveBob: str ) -\u003e int: a = max(arriveAlice, arriveBob) b = min(leaveAlice, leaveBob) days = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) x = sum(days[: int(a[:2]) - 1]) + int(a[3:]) y = sum(days[: int(b[:2]) - 1]) + int(b[3:]) return max(y - x + 1, 0) ","description":"2409. Count Days Spent Together","title":"2409. Count Days Spent Together","uri":"/en/tracks/algorithms-101/leetcode/easy/2409/"},{"content":"LeetCode problem 2410\nclass Solution: def matchPlayersAndTrainers(self, players: List[int], trainers: List[int]) -\u003e int: players.sort() trainers.sort() res = j = 0 for p in players: while j \u003c len(trainers) and trainers[j] \u003c p: j += 1 if j \u003c len(trainers): res += 1 j += 1 return res ","description":"2410. Maximum Matching of Players With Trainers","title":"2410. Maximum Matching of Players With Trainers","uri":"/en/tracks/algorithms-101/leetcode/medium/2410/"},{"content":"LeetCode problem 2411\nclass Solution: def smallestSubarrays(self, nums: List[int]) -\u003e List[int]: n = len(nums) res = [1] * n f = [-1] * 32 for i in range(n - 1, -1, -1): t = 1 for j in range(32): if (nums[i] \u003e\u003e j) \u0026 1: f[j] = i elif f[j] != -1: t = max(t, f[j] - i + 1) res[i] = t return res ","description":"2411. Smallest Subarrays With Maximum Bitwise OR","title":"2411. Smallest Subarrays With Maximum Bitwise OR","uri":"/en/tracks/algorithms-101/leetcode/medium/2411/"},{"content":"LeetCode problem 2412\nclass Solution: def minimumMoney(self, transactions: List[List[int]]) -\u003e int: s = sum(max(0, a - b) for a, b in transactions) res = 0 for a, b in transactions: if a \u003e b: res = max(res, s + b) else: res = max(res, s + a) return res ","description":"2412. Minimum Money Required Before Transactions","title":"2412. Minimum Money Required Before Transactions","uri":"/en/tracks/algorithms-101/leetcode/hard/2412/"},{"content":"LeetCode problem 2413\nclass Solution: def smallestEvenMultiple(self, n: int) -\u003e int: return n if n % 2 == 0 else n * 2 ","description":"2413. Smallest Even Multiple","title":"2413. Smallest Even Multiple","uri":"/en/tracks/algorithms-101/leetcode/easy/2413/"},{"content":"LeetCode problem 2414\nclass Solution: def longestContinuousSubstring(self, s: str) -\u003e int: res = 0 i, j = 0, 1 while j \u003c len(s): res = max(res, j - i) if ord(s[j]) - ord(s[j - 1]) != 1: i = j j += 1 res = max(res, j - i) return res ","description":"2414. Length of the Longest Alphabetical Continuous Substring","title":"2414. Length of the Longest Alphabetical Continuous Substring","uri":"/en/tracks/algorithms-101/leetcode/medium/2414/"},{"content":"LeetCode problem 2415\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def reverseOddLevels(self, root: Optional[TreeNode]) -\u003e Optional[TreeNode]: q = deque([root]) i = 0 while q: if i \u0026 1: l, r = 0, len(q) - 1 while l \u003c r: q[l].val, q[r].val = q[r].val, q[l].val l, r = l + 1, r - 1 for _ in range(len(q)): node = q.popleft() if node.left: q.append(node.left) q.append(node.right) i += 1 return root ","description":"2415. Reverse Odd Levels of Binary Tree","title":"2415. Reverse Odd Levels of Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/2415/"},{"content":"LeetCode problem 2416\nclass Trie: def __init__(self): self.children = [None] * 26 self.cnt = 0 def insert(self, w): node = self for c in w: idx = ord(c) - ord('a') if node.children[idx] is None: node.children[idx] = Trie() node = node.children[idx] node.cnt += 1 def search(self, w): node = self res = 0 for c in w: idx = ord(c) - ord('a') if node.children[idx] is None: return res node = node.children[idx] res += node.cnt return res class Solution: def sumPrefixScores(self, words: List[str]) -\u003e List[int]: trie = Trie() for w in words: trie.insert(w) return [trie.search(w) for w in words] ","description":"2416. Sum of Prefix Scores of Strings","title":"2416. Sum of Prefix Scores of Strings","uri":"/en/tracks/algorithms-101/leetcode/hard/2416/"},{"content":"LeetCode problem 2417\nclass Solution: def closestFair(self, n: int) -\u003e int: a = b = k = 0 t = n while t: if (t % 10) \u0026 1: a += 1 else: b += 1 t //= 10 k += 1 if k \u0026 1: x = 10**k y = int('1' * (k \u003e\u003e 1) or '0') return x + y if a == b: return n return self.closestFair(n + 1) ","description":"2417. Closest Fair Integer","title":"2417. Closest Fair Integer","uri":"/en/tracks/algorithms-101/leetcode/medium/2417/"},{"content":"LeetCode problem 2418\nclass Solution: def sortPeople(self, names: List[str], heights: List[int]) -\u003e List[str]: return [name for _, name in sorted(zip(heights, names), reverse=True)] ","description":"2418. Sort the People","title":"2418. Sort the People","uri":"/en/tracks/algorithms-101/leetcode/easy/2418/"},{"content":"LeetCode problem 2419\nclass Solution: def longestSubarray(self, nums: List[int]) -\u003e int: mx = max(nums) res = cnt = 0 for v in nums: if v == mx: cnt += 1 res = max(res, cnt) else: cnt = 0 return res ","description":"2419. Longest Subarray With Maximum Bitwise AND","title":"2419. Longest Subarray With Maximum Bitwise AND","uri":"/en/tracks/algorithms-101/leetcode/medium/2419/"},{"content":"LeetCode problem 2420\nclass Solution: def goodIndices(self, nums: List[int], k: int) -\u003e List[int]: n = len(nums) decr = [1] * (n + 1) incr = [1] * (n + 1) for i in range(2, n - 1): if nums[i - 1] \u003c= nums[i - 2]: decr[i] = decr[i - 1] + 1 for i in range(n - 3, -1, -1): if nums[i + 1] \u003c= nums[i + 2]: incr[i] = incr[i + 1] + 1 return [i for i in range(k, n - k) if decr[i] \u003e= k and incr[i] \u003e= k] ","description":"2420. Find All Good Indices","title":"2420. Find All Good Indices","uri":"/en/tracks/algorithms-101/leetcode/medium/2420/"},{"content":"LeetCode problem 2421\nclass Solution: def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -\u003e int: def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] g = defaultdict(list) for a, b in edges: g[a].append(b) g[b].append(a) n = len(vals) p = list(range(n)) size = defaultdict(Counter) for i, v in enumerate(vals): size[i][v] = 1 res = n for v, a in sorted(zip(vals, range(n))): for b in g[a]: if vals[b] \u003e v: continue pa, pb = find(a), find(b) if pa != pb: res += size[pa][v] * size[pb][v] p[pa] = pb size[pb][v] += size[pa][v] return res ","description":"2421. Number of Good Paths","title":"2421. Number of Good Paths","uri":"/en/tracks/algorithms-101/leetcode/hard/2421/"},{"content":"LeetCode problem 2422\nclass Solution: def minimumOperations(self, nums: List[int]) -\u003e int: i, j = 0, len(nums) - 1 a, b = nums[i], nums[j] res = 0 while i \u003c j: if a \u003c b: i += 1 a += nums[i] res += 1 elif b \u003c a: j -= 1 b += nums[j] res += 1 else: i, j = i + 1, j - 1 a, b = nums[i], nums[j] return res ","description":"2422. Merge Operations to Turn Array Into a Palindrome","title":"2422. Merge Operations to Turn Array Into a Palindrome","uri":"/en/tracks/algorithms-101/leetcode/medium/2422/"},{"content":"LeetCode problem 2423\nclass Solution: def equalFrequency(self, word: str) -\u003e bool: cnt = Counter(word) for c in cnt.keys(): cnt[c] -= 1 if len(set(v for v in cnt.values() if v)) == 1: return True cnt[c] += 1 return False ","description":"2423. Remove Letter To Equalize Frequency","title":"2423. Remove Letter To Equalize Frequency","uri":"/en/tracks/algorithms-101/leetcode/easy/2423/"},{"content":"LeetCode problem 2424\nclass LUPrefix: def __init__(self, n: int): self.r = 0 self.s = set() def upload(self, video: int) -\u003e None: self.s.add(video) while self.r + 1 in self.s: self.r += 1 def longest(self) -\u003e int: return self.r # Your LUPrefix object will be instantiated and called as such: # obj = LUPrefix(n) # obj.upload(video) # param_2 = obj.longest() ","description":"2424. Longest Uploaded Prefix","title":"2424. Longest Uploaded Prefix","uri":"/en/tracks/algorithms-101/leetcode/medium/2424/"},{"content":"LeetCode problem 2425\nclass Solution: def xorAllNums(self, nums1: List[int], nums2: List[int]) -\u003e int: res = 0 if len(nums2) \u0026 1: for v in nums1: res ^= v if len(nums1) \u0026 1: for v in nums2: res ^= v return res ","description":"2425. Bitwise XOR of All Pairings","title":"2425. Bitwise XOR of All Pairings","uri":"/en/tracks/algorithms-101/leetcode/medium/2425/"},{"content":"LeetCode problem 2426\nclass BinaryIndexedTree: def __init__(self, n): self.n = n self.c = [0] * (n + 1) @staticmethod def lowbit(x): return x \u0026 -x def update(self, x, delta): while x \u003c= self.n: self.c[x] += delta x += BinaryIndexedTree.lowbit(x) def query(self, x): s = 0 while x: s += self.c[x] x -= BinaryIndexedTree.lowbit(x) return s class Solution: def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -\u003e int: tree = BinaryIndexedTree(10**5) res = 0 for a, b in zip(nums1, nums2): v = a - b res += tree.query(v + diff + 40000) tree.update(v + 40000, 1) return res ","description":"2426. Number of Pairs Satisfying Inequality","title":"2426. Number of Pairs Satisfying Inequality","uri":"/en/tracks/algorithms-101/leetcode/hard/2426/"},{"content":"LeetCode problem 2427\nclass Solution: def commonFactors(self, a: int, b: int) -\u003e int: g = gcd(a, b) res, x = 0, 1 while x * x \u003c= g: if g % x == 0: res += 1 res += x * x \u003c g x += 1 return res ","description":"2427. Number of Common Factors","title":"2427. Number of Common Factors","uri":"/en/tracks/algorithms-101/leetcode/easy/2427/"},{"content":"LeetCode problem 2428\nclass Solution: def maxSum(self, grid: List[List[int]]) -\u003e int: m, n = len(grid), len(grid[0]) res = 0 for i in range(1, m - 1): for j in range(1, n - 1): s = -grid[i][j - 1] - grid[i][j + 1] s += sum( grid[x][y] for x in range(i - 1, i + 2) for y in range(j - 1, j + 2) ) res = max(res, s) return res ","description":"2428. Maximum Sum of an Hourglass","title":"2428. Maximum Sum of an Hourglass","uri":"/en/tracks/algorithms-101/leetcode/medium/2428/"},{"content":"LeetCode problem 2429\nclass Solution: def minimizeXor(self, num1: int, num2: int) -\u003e int: cnt1 = num1.bit_count() cnt2 = num2.bit_count() while cnt1 \u003e cnt2: num1 \u0026= num1 - 1 cnt1 -= 1 while cnt1 \u003c cnt2: num1 |= num1 + 1 cnt1 += 1 return num1 ","description":"2429. Minimize XOR","title":"2429. Minimize XOR","uri":"/en/tracks/algorithms-101/leetcode/medium/2429/"},{"content":"LeetCode problem 2430\nclass Solution: def deleteString(self, s: str) -\u003e int: n = len(s) g = [[0] * (n + 1) for _ in range(n + 1)] for i in range(n - 1, -1, -1): for j in range(i + 1, n): if s[i] == s[j]: g[i][j] = g[i + 1][j + 1] + 1 f = [1] * n for i in range(n - 1, -1, -1): for j in range(1, (n - i) // 2 + 1): if g[i][i + j] \u003e= j: f[i] = max(f[i], f[i + j] + 1) return f[0] ","description":"2430. Maximum Deletions on a String","title":"2430. Maximum Deletions on a String","uri":"/en/tracks/algorithms-101/leetcode/hard/2430/"},{"content":"LeetCode problem 2431\nclass Solution: def maxTastiness( self, price: List[int], tastiness: List[int], maxAmount: int, maxCoupons: int ) -\u003e int: @cache def dfs(i, j, k): if i == len(price): return 0 res = dfs(i + 1, j, k) if j \u003e= price[i]: res = max(res, dfs(i + 1, j - price[i], k) + tastiness[i]) if j \u003e= price[i] // 2 and k: res = max(res, dfs(i + 1, j - price[i] // 2, k - 1) + tastiness[i]) return res return dfs(0, maxAmount, maxCoupons) ","description":"2431. Maximize Total Tastiness of Purchased Fruits","title":"2431. Maximize Total Tastiness of Purchased Fruits","uri":"/en/tracks/algorithms-101/leetcode/medium/2431/"},{"content":"LeetCode problem 2441\nclass Solution: def findMaxK(self, nums: List[int]) -\u003e int: nums.sort() p1 = 0 p2 = len(nums)-1 while p1 \u003c p2: l = nums[p1] r = nums[p2] ssum = l + r if ssum == 0: return r if ssum \u003c 0: p1 += 1 else: p2 -= 1 return -1 class Solution: def findMaxK(self, nums: List[int]) -\u003e int: s = set(nums) return max((x for x in s if -x in s), default=-1) ","description":"2441. Largest Positive Integer That Exists With Its Negative","title":"2441. Largest Positive Integer That Exists With Its Negative","uri":"/en/tracks/algorithms-101/leetcode/easy/2441/"},{"content":"LeetCode problem 2444\nclass Solution: def countSubarrays(self, nums: List[int], minK: int, maxK: int) -\u003e int: j1 = j2 = k = -1 res = 0 for i, v in enumerate(nums): if v \u003c minK or v \u003e maxK: k = i if v == minK: j1 = i if v == maxK: j2 = i res += max(0, min(j1, j2) - k) return res ","description":"2444. Count Subarrays With Fixed Bounds","title":"2444. Count Subarrays With Fixed Bounds","uri":"/en/tracks/algorithms-101/leetcode/hard/2444/"},{"content":"LeetCode problem 2485\nclass Solution: def pivotInteger(self, n: int) -\u003e int: if n \u003c= 1: return n ar = [1] * n for i in range(1, n): ar[i] = ar[i - 1] + i + 1 pivot = 1 while pivot \u003c n: left = ar[pivot] right = ar[n - 1] - ar[pivot - 1] if left == right: return pivot + 1 pivot += 1 return -1 class Solution: def pivotInteger(self, n: int) -\u003e int: y = n * (n + 1) // 2 x = int(sqrt(y)) return x if x * x == y else -1 class Solution: def pivotInteger(self, n: int) -\u003e int: for x in range(1, n + 1): if (1 + x) * x == (x + n) * (n - x + 1): return x return -1 ","description":"2485. Find the Pivot Integer","title":"2485. Find the Pivot Integer","uri":"/en/tracks/algorithms-101/leetcode/easy/2485/"},{"content":"LeetCode problem 251\nclass Vector2D: def __init__(self, vec: List[List[int]]): self.i = 0 self.j = 0 self.vec = vec def next(self) -\u003e int: self.forward() res = self.vec[self.i][self.j] self.j += 1 return res def hasNext(self) -\u003e bool: self.forward() return self.i \u003c len(self.vec) def forward(self): while self.i \u003c len(self.vec) and self.j \u003e= len(self.vec[self.i]): self.i += 1 self.j = 0 # Your Vector2D object will be instantiated and called as such: # obj = Vector2D(vec) # param_1 = obj.next() # param_2 = obj.hasNext() ","description":"251. Flatten 2D Vector","title":"251. Flatten 2D Vector","uri":"/en/tracks/algorithms-101/leetcode/medium/2512/"},{"content":"LeetCode задача 251\nЗадача Дизайн и реализация итератора для 2D вектора. Итератор должен быть инициализирован 2D вектором (vector\u003cvector\u003cint\u003e\u003e) и должен поддерживать следующие операции:\nnext(): Возвращает следующий элемент из 2D вектора. Если нет больше элементов, возвращает 0. hasNext(): Возвращает True, если в 2D векторе есть следующий элемент, и False в противном случае. Подход Мы можем использовать две переменные: одну для текущего индекса строки и одну для текущего индекса столбца, чтобы навигироваться по 2D вектору.\nАлгоритм Инициализируем переменные row и col в конструкторе. В методе next(), возвращаем элемент в текущем row и col, и двигаем индексы на следующий доступный элемент. В методе hasNext(), проверяем, есть ли следующий доступный элемент в 2D векторе. Решение class Vector2D: def __init__(self, vec: list[list[int]]): self.vec = vec self.row = 0 self.col = 0 def next(self) -\u003e int: self._advance_to_next() result = self.vec[self.row][self.col] self.col += 1 return result def hasNext(self) -\u003e bool: self._advance_to_next() return self.row \u003c len(self.vec) def _advance_to_next(self): while self.row \u003c len(self.vec) and self.col == len(self.vec[self.row]): self.row += 1 self.col = 0 ","description":"LeetCode 251. Преобразование 2D вектора в 1D вектор.","title":"251. Flatten 2D Vector","uri":"/en/tracks/algorithms-101/leetcode/medium/251/"},{"content":"LeetCode problem 2540\nBy initializing two pointers, one for each array, we can compare the elements they point to. If the elements are equal, we’ve found a common value. If not, we move the pointer pointing to the smaller value forward. This approach ensures that we only traverse each array once.\nclass Solution: def getCommon(self, nums1: List[int], nums2: List[int]) -\u003e int: i = 0 j = 0 N1 = len(nums1) N2 = len(nums2) while i \u003c N1 and j \u003c N2: if nums1[i] == nums2[j]: return nums1[i] if nums1[i] \u003c nums2[j]: i += 1 else: j += 1 return -1 ","description":"Minimum Common Value","title":"2540. Minimum Common Value","uri":"/en/tracks/algorithms-101/leetcode/easy/2540/"},{"content":"LeetCode problem\nGiven an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array int[] expectedNums = [...]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length; for (int i = 0; i \u003c k; i++) { assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted.\nExample 1:\nInput: nums = [1,1,2] Output: 2, nums = [1,2,_] Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2:\nInput: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0,1,2,3,4,_,_,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). First accepted Idea:\nclass Solution: def removeDuplicates(self, nums: List[int]) -\u003e int: k = 1 if len(nums) == 1: return k p1 = 0 p2 = 1 while p2 \u003c len(nums): if nums[p1] == nums[p2]: p2 += 1 else: p1 += 1 nums[p1] = nums[p2] p2 += 1 k += 1 return k Better solution class Solution: def removeDuplicates(self, nums: List[int]) -\u003e int: if len(nums) == 1: return 1 k = 1 i = 1 for n in nums: if nums[i-1] != n: nums[i] = n i += 1 k += 1 return k ","description":"LeetCode 26. Remove Duplicates from Sorted Array","title":"26. Remove Duplicates from Sorted Array","uri":"/en/tracks/algorithms-101/leetcode/easy/26/"},{"content":"LeetCode problem 2709\nfrom collections import defaultdict from typing import List class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.clusterSize = [1] * size def find(self, node): if self.parent[node] != node: self.parent[node] = self.find(self.parent[node]) return self.parent[node] def union(self, node1, node2): root1, root2 = self.find(node1), self.find(node2) if root1 == root2: return False # No union made since they are already in the same set if self.clusterSize[root1] \u003e self.clusterSize[root2]: self.parent[root2] = root1 self.clusterSize[root1] += self.clusterSize[root2] else: self.parent[root1] = root2 self.clusterSize[root2] += self.clusterSize[root1] return True # Calculating prime factors for each number up to a maximum value maxValue = 100010 primeFactors = defaultdict(list) for number in range(1, maxValue + 1): value = number factor = 2 while factor \u003c= value // factor: if value % factor == 0: primeFactors[number].append(factor) while value % factor == 0: value //= factor factor += 1 if value \u003e 1: primeFactors[number].append(value) class Solution: def canTraverseAllPairs(self, nums: List[int]) -\u003e bool: numCount = len(nums) maxNum = max(nums) unionFind = UnionFind(numCount + maxNum + 1) for index, num in enumerate(nums): for prime in primeFactors[num]: # Mapping each number to its prime factors offset by numCount to avoid index collision unionFind.union(index, prime + numCount) # Checking if all numbers are interconnected through their prime factors rootSet = set(unionFind.find(i) for i in range(numCount)) return len(rootSet) == 1 Use a Union-Find data structure to dynamically connect numbers in the input list nums based on their prime factors.\nBy mapping each number to its prime factors (calculated and stored in primeFactors), and then performing union operations between numbers and their factors (offset by the length of nums to ensure unique indices).\nGroup numbers that share common factors.\nCheck if all numbers belong to a single interconnected group, which would imply that it’s possible to traverse all pairs with a GCD greater than 1.\n","description":"2709. Greatest Common Divisor Traversal","title":"2709. Greatest Common Divisor Traversal","uri":"/en/tracks/algorithms-101/leetcode/hard/2709/"},{"content":"LeetCode задача 277\nЗадача Предположим, у вас есть n человек и их отношения между собой неизвестны. Существует ли такая персона (знаменитость), что все знают её, но она никого не знает?\nИмплементируйте функцию int findCelebrity(n), которая вернет знаменитость если она есть, иначе вернёт -1.\nВам дана функция bool knows(a, b), которая скажет вам, знает ли a человека b.\nПодход Чтобы найти знаменитость, можно использовать двухпроходный алгоритм. В первом проходе идентифицируем возможную знаменитость. Во втором проходе проверяем эту кандидатуру.\nАлгоритм Инициализируем переменную candidate значением 0. Используем один проход для выявления кандидата. Если knows(candidate, i) возвращает True, переключаем candidate на i. Второй проход для проверки, является ли candidate знаменитостью. Решение class Solution: def findCelebrity(self, n: int) -\u003e int: candidate = 0 #1 for i in range(1, n): if knows(candidate, i): candidate = i for i in range(n): #3 if i != candidate and (knows(candidate, i) or not knows(i, candidate)): return -1 return candidate ","description":"LeetCode 277. Найти знаменитость среди группы людей.","title":"277. Find the Celebrity","uri":"/en/tracks/algorithms-101/leetcode/medium/277/"},{"content":"LeetCode problem\nProblem Statement The problem is asking to move all zeros in an integer array to the end of the array while maintaining the relative order of the non-zero elements. You must do this in-place without making a copy of the array.\nNaive Solution A naive solution could be to create a new list, iterate over the array, add non-zero elements to the new list and count zero elements. Then extend the new list with the same amount of zeros as counted. But this solution requires creating a new list, which contradicts the in-place requirement of the problem.\nHints \u0026 Tips The key to solve this problem is to keep a pointer, let’s call it i, that would track the position where the next non-zero element should be placed.\nApproach The provided solution employs a two-pass approach. In the first pass, it iterates over the list and whenever it encounters a non-zero element, it places it at the position i and increments i. After this pass, all non-zero elements are at the beginning of the list and i is set to the position of the first zero element.\nIn the second pass, it simply assigns zero to all positions from i to the end of the list.\nSteps Initialize i to 0. Iterate over nums. For each element, if it is not zero, assign it to nums[i] and increment i. After the iteration, i is at the position of the first zero in nums. Now assign zero to nums[i] and increment i. Repeat this step until i reaches the end of nums. Python Solution class Solution: def moveZeroes(self, nums: List[int]) -\u003e None: i = 0 for x in nums: # Set the non-zero elements if x != 0: nums[i] = x i += 1 while i \u003c= len(nums) - 1: # Set the rest number of zeros nums[i] = 0 i += 1 The solution maintains the relative order of the non-zero elements and minimizes the total number of operations by only doing a single pass through the non-zero elements and then assigning zeros in one go.\n","description":"283. Move Zeroes","title":"283. Move Zeroes","uri":"/en/tracks/algorithms-101/leetcode/easy/283/"},{"content":"LeetCode Problem\nProblem Statement You are given two strings s1 and s2, both of length 4, consisting of lowercase English letters. The objective is to find out if it’s possible to make the two strings equal by swapping certain pairs of characters.\nNaive Solution A naive approach would be to try out all possible swap combinations. However, this can be very inefficient, especially when the strings have a large number of characters.\nHints \u0026 Tips Observe that the swapping condition is quite specific: j - i = 2. The strings should be permutations of each other. Approach The efficient solution for this problem involves sorting the characters at even and odd positions separately for both strings and then comparing them.\nSteps Sort the characters at even indices for s1 and s2. Sort the characters at odd indices for s1 and s2. Compare the sorted characters at even indices for both strings and the sorted characters at odd indices for both strings. Solution class Solution: def canBeEqual(self, s1: str, s2: str) -\u003e bool: even_s1 = sorted(s1[::2]) odd_s1 = sorted(s1[1::2]) even_s2 = sorted(s2[::2]) odd_s2 = sorted(s2[1::2]) return even_s1 == even_s2 and odd_s1 == odd_s2 ","description":"2839. Check if Strings Can be Made Equal With Operations I","title":"2839. Check if Strings Can be Made Equal With Operations I","uri":"/en/tracks/algorithms-101/leetcode/easy/2839/"},{"content":"LeetCode Problem 2840\nProblem Statement You are given two strings s1 and s2, both of length n, consisting of lowercase English letters. You can apply certain operations to make them equal. The question is, is it possible?\nNaive Solution A naive approach would be to try all possible swap operations and compare the two strings at each step, which would be highly inefficient.\nHints \u0026 Tips Observe that swapping can only occur at indices i and j where j - i is even. Separate the string into two different sequences, one containing characters at even indices and the other at odd indices. Check the frequency of characters in both sequences. Approach The efficient approach involves separating characters at even and odd positions into two different sequences for each string and then comparing the frequency of characters in these sequences.\nSteps Initialize two empty lists for s1 and s2, each to store characters at even and odd positions. Populate these lists with characters from s1 and s2. Sort these lists. Compare the sorted lists for equality. Solution from collections import Counter def checkStrings(s1: str, s2: str) -\u003e bool: even_s1 = sorted(s1[::2]) odd_s1 = sorted(s1[1::2]) even_s2 = sorted(s2[::2]) odd_s2 = sorted(s2[1::2]) return even_s1 == even_s2 and odd_s1 == odd_s2 ","description":"2840. Check if Strings Can be Made Equal With Operations II","title":"2840. Check if Strings Can be Made Equal With Operations II","uri":"/en/tracks/algorithms-101/leetcode/medium/2840/"},{"content":"LeetCode Problem 2841\nProblem Statement You are given an integer array nums and two positive integers m and k.\nThe task is to return the maximum sum out of all almost unique subarrays of length k of nums. If no such subarray exists, return 0.\nA subarray is almost unique if it contains at least m pairwise distinct elements.\nNaive Solution A naive solution would be to generate all the possible subarrays of length k and check each one to see if it is almost unique and what its sum is. This would involve nested loops and would not be efficient.\nHints \u0026 Tips Use sliding window technique to find subarrays of length k. Keep track of unique elements using a set. Approach The solution adopts a sliding window approach to go through the given array nums, checking each subarray of size k for its “almost uniqueness” and sum.\nSteps Define a helper function, is_unique, which will take a subarray and return whether it contains at least m distinct elements or not.\nInitialize a variable _max to keep track of the maximum sum among the almost unique subarrays.\nLoop through nums using the sliding window technique:\nUse the is_unique function to check if the current subarray is almost unique. Update _max with the maximum sum found so far. Return _max if it is not 0; otherwise, return 0.\nSolution def maxSum(nums: List[int], m: int, k: int) -\u003e int: n = len(nums) def is_unique(arr, start, end, m): distinct_elements = set(arr[start:end]) return len(distinct_elements) \u003e= m _max = 0 for i in range(n - k + 1): if is_unique(nums, i, i + k, m): _max = max(_max, sum(nums[i:i + k])) return _max if _max != 0 else 0 ","description":"2841. Maximum Sum of Almost Unique Subarray","title":"2841. Maximum Sum of Almost Unique Subarray","uri":"/en/tracks/algorithms-101/leetcode/medium/2841/"},{"content":"LeetCode problem 2844\nProblem Statement You are given a 0-indexed string num representing a non-negative integer. In one operation, you can pick any digit of num and delete it. Note that if you delete all the digits of num, num becomes 0.\nReturn the minimum number of operations required to make num special. An integer x is considered special if it is divisible by 25.\nNaive Solution A naive approach to solving this problem might involve recursively generating all possible substrings of the input string, checking each one for divisibility by 25. While this would yield the correct result, the time complexity would be exponential, making it unfeasible for larger inputs.\nHints \u0026 Tips The main insight is that to be divisible by 25, the last two digits of the number must be one of the following: 00, 25, 50, 75. Therefore, it’s crucial to consider these patterns when trying to delete the minimum number of digits.\nApproach The core idea is to check how many minimum deletions are required for each of the four special last two-digit patterns (00, 25, 50, 75).\nWe can do this by iterating through the string in reverse order and checking how many digits do not match with each pattern, keeping track of the minimum number of deletions for each.\nAnalyzing Possible Endings: A number that is divisible by 25 must have one of the four possible endings: ‘00’, ‘25’, ‘50’, ‘75’. Reverse Traversal of String: Traverse the string from right to left, keeping flags for the presence of ‘5’ and ‘0’. Using these flags, look for possible endings ‘00’, ‘25’, ‘50’, ‘75’. Operation Count: During the traversal, count the minimum number of operations required to make the number special. Zero Check: If ‘0’ is not present in the string, then the number cannot be made special, and the number of operations would be equal to the length of the string. Steps Initialize variables to track the presence of ‘5’ and ‘0’. Reverse traversal through the string, search for possible endings, and operation count. Return the result. Solution def minimumOperations(num: str) -\u003e int: n = len(num) # Initialize variables to track the presence of '5' and '0' had_5 = False had_0 = False # Reverse traversal through the string for i in range(n - 1, -1, -1): if had_0 and num[i] == '0': # '00' return n - i - 2 if had_0 and num[i] == '5': # '50' return n - i - 2 if had_5 and num[i] == '2': # '25' return n - i - 2 if had_5 and num[i] == '7': # '75' return n - i - 2 # Update the flags for the presence of '5' and '0' had_0 = had_0 or num[i] == '0' had_5 = had_5 or num[i] == '5' return n - 1 if had_0 else n ","description":"2844. Minimum Operations to Make a Special Number","title":"2844. Minimum Operations to Make a Special Number","uri":"/en/tracks/algorithms-101/leetcode/medium/2844/"},{"content":"LeetCode problem 2848\nProblem Statement Given cars parked on a number line, represented by starting and ending coordinates, we aim to determine the number of points on this line that are covered by any part of these cars.\nNaive Solution A basic approach is to simply iterate through each interval and for each interval, iterate through its range, adding each point to a list. Finally, we can return the length of this list to get the total points. However, this approach has a risk of counting points multiple times when two cars overlap.\nHints \u0026 Tips Utilizing a set can prevent duplicate counting since sets do not allow duplicates. Iterating through each interval’s range and adding it to the set will ensure unique counting. Approach The idea is to use a set to hold all the integer points that the cars cover. We iterate through each car’s interval, and for each interval, we iterate through its range, adding each point to the set. As sets do not allow duplicate values, points that are covered by multiple cars are not double-counted. Finally, we return the size of the set which gives the total unique points covered by the cars.\nSteps Initialize an empty set points. Iterate through each interval in nums. For each interval, iterate through its range from start to end, adding each point to the points set. Return the size of the points set. Solution def numberOfPoints(nums: List[List[int]]) -\u003e int: points = set() for start, end in nums: for p in range(start, end + 1): points.add(p) return len(points) ","description":"Solving and understanding the problem of calculating the total points intersected by cars parked on a number line using a set-based approach.","title":"2848. Points That Intersect With Cars","uri":"/en/tracks/algorithms-101/leetcode/easy/2848/"},{"content":"LeetCode problem 2849\nProblem Statement You are given starting coordinates (sx, sy) and final coordinates (fx, fy) on a 2D infinite grid. Starting from the initial position, you can move to any of the 8 adjacent cells in one second. The challenge is to determine if you can reach the final cell (fx, fy) in exactly t seconds.\nNaive Solution A naive approach would be to use a recursive function to navigate the grid from the starting point (sx, sy) and attempt to reach the target (fx, fy) in t seconds. This approach will check every possible path, which can be very inefficient, especially for larger grids and values of t.\nHints \u0026 Tips Understand that not all paths are equal. Moving diagonally is more efficient than moving in a straight line if both x and y distances are positive. Check the constraints. If you cannot reach the destination within the given time t, there’s no need to try any further. Approach The idea is to calculate the shortest possible time to reach the target and then compare it to the given time t. If the starting point and the ending point are the same, we can always return to the same position unless the time is exactly 1.\nSteps Calculate the difference in x (diff_x) and y (diff_y) coordinates. For the minimum of diff_x and diff_y, move diagonally. This reduces both x and y distances by 1 in a single step. Move horizontally or vertically for the absolute difference between diff_x and diff_y. If (diff_x + diff_y) is less than or equal to t, and (t - (diff_x + diff_y)) is an even number or zero, return True, otherwise return False. Solution def isReachableAtTime(sx: int, sy: int, fx: int, fy: int, t: int) -\u003e bool: diff_x = abs(fx - sx) # Calculating the differences in x diff_y = abs(fy - sy) # and y coordinates if diff_x == 0 and diff_y == 0: # If both starting and ending points are same return t != 1 if diff_x \u003c= t and diff_y \u003c= t: # Check if we can reach the target within given time return True return False ","description":"Understanding the concept and solving the problem of determining if a cell is reachable within a given time on a 2D grid.","title":"2849. Determine if a Cell Is Reachable at a Given Time","uri":"/en/tracks/algorithms-101/leetcode/medium/2849/"},{"content":"LeetCode problem 2855\nclass Solution: def minimumRightShifts(self, nums: List[int]) -\u003e int: n = len(nums) i = 1 while i \u003c n and nums[i - 1] \u003c nums[i]: i += 1 k = i + 1 while k \u003c n and nums[k - 1] \u003c nums[k] \u003c nums[0]: k += 1 return -1 if k \u003c n else n - i ","description":"Minimum Right Shifts to Sort the Array","title":"2855. Minimum Right Shifts to Sort the Array","uri":"/en/tracks/algorithms-101/leetcode/easy/2855/"},{"content":"LeetCode problem 2856\nProblem Statement Given a 0-indexed sorted array of integers nums, you can perform a specific operation an unlimited number of times:\nChoose two indices, i and j, where i \u003c j and nums[i] \u003c nums[j]. Remove the elements at indices i and j from nums. The remaining elements retain their original order and the array is re-indexed. The task is to determine and return the smallest possible length of nums after executing the operation as many times as you wish.\nNaive Solution One way to approach this problem would be to iterate through every possible pair of elements in nums to check if they satisfy the condition nums[i] \u003c nums[j]. Whenever a valid pair is found, remove them and restart the search. This method would be inefficient and would result in a high time complexity due to frequent list updates.\nHints \u0026 Tips Utilizing two pointers can help in efficiently determining the pairs to remove. Keep track of removed indices in a set to avoid duplication. Focus on removing the largest numbers since they have the most potential pairs. Approach The idea is to maintain two pointers: a slow pointer i starting from the beginning of the array and a fast pointer j starting from the middle of the array. Since the array is sorted, this ensures that the number at j is always greater than the number at i.\nTraverse the list with the two pointers. If a valid pair is found (i.e., nums[i] \u003c nums[j] and i hasn’t been removed yet), mark the indices i and j as removed. Move the pointer i one step forward. Repeat the process until the end of the array is reached. The result would be the initial length of nums subtracted by the number of removed indices.\nSteps Initialize two pointers: i = 0 and j = len(nums) // 2. Create a set removed to keep track of removed indices. Traverse the list with the two pointers. If nums[j] \u003e nums[i] and i hasn’t been removed, add i and j to the removed set and move the pointer i one step forward. Continue the process until the end of the array. The result is len(nums) - len(removed). Solution def minimumLengthAfterRemoval(nums): i = 0 removed = set() for j in range(len(nums) // 2, len(nums)): if nums[j] \u003e nums[i] and i not in removed: removed.add(i) removed.add(j) i += 1 return len(nums) - len(removed) ","description":"2856. Minimum Array Length After Pair Removals","title":"2856. Minimum Array Length After Pair Removals","uri":"/en/tracks/algorithms-101/leetcode/medium/2856/"},{"content":"LeetCode problem 2859\nclass Solution: def sumIndicesWithKSetBits(self, nums: List[int], k: int) -\u003e int: return sum(x for i, x in enumerate(nums) if i.bit_count() == k) ","description":"Sum of Values at Indices With K Set Bits","title":"2859. Sum of Values at Indices With K Set Bits","uri":"/en/tracks/algorithms-101/leetcode/easy/2859/"},{"content":"LeetCode problem 2864\nclass Solution: def maximumOddBinaryNumber(self, s: str) -\u003e str: ones = [] zeros = [] for c in s: if c == '0': zeros.append(c) else: ones.append(c) zeros = ''.join(zeros) ones = ''.join(ones) if len(ones) \u003e 1: res = ones[1:] + zeros + '1' return res return zeros + ones class Solution: def maximumOddBinaryNumber(self, s: str) -\u003e str: cnt = s.count(\"1\") return \"1\" * (cnt - 1) + (len(s) - cnt) * \"0\" + \"1\" ","description":"Maximum Odd Binary Number","title":"2864. Maximum Odd Binary Number","uri":"/en/tracks/algorithms-101/leetcode/easy/2864/"},{"content":"LeetCode problem 2869\nclass Solution: def minOperations(self, nums: List[int], k: int) -\u003e int: is_added = [False] * k count = 0 n = len(nums) for i in range(n - 1, -1, -1): if nums[i] \u003e k or is_added[nums[i] - 1]: continue is_added[nums[i] - 1] = True count += 1 if count == k: return n - i ","description":"Minimum Operations to Collect Elements","title":"2869. Minimum Operations to Collect Elements","uri":"/en/tracks/algorithms-101/leetcode/easy/2869/"},{"content":"LeetCode problem 287\nProblem Statement Given an array of integers nums containing n + 1 integers where each integer is within the range [1, n], you need to find and return the only duplicate number present in nums.\nThe key constraints:\nYou shouldn’t modify the array nums. You should only use constant extra space. Naive Solution One possible naive solution would be to use a nested loop to compare each element with every other element in the array. This approach, however, is not efficient and has a time complexity of O(n^2), which doesn’t scale well with large inputs.\nApproach Think of the numbers in the array as representing a linked list. Each number is a pointer to the next index. Using Floyd’s Tortoise and Hare algorithm, determine if a cycle exists. If a cycle exists, use the algorithm’s phase 2 to find the starting point of the cycle which corresponds to our duplicate number. Algorithm/Data Structure: Floyd’s Tortoise and Hare (Cycle Detection) The problem can be visualized as a linked list where each value is a pointer to the next index. If there’s a duplicate, it means there’s a cycle in this ’list’. Floyd’s Tortoise and Hare algorithm, often used for cycle detection in linked lists, can be applied to find the duplicate number.\nHow the cycle detection works Phase 1 (Finding intersection point): Use two pointers, one moving fast (two steps at a time) and one moving slow. If there’s a cycle, they’ll eventually meet at some point. Phase 2 (Finding entry point of cycle): Move the fast pointer back to the start and advance both pointers at the same speed. The point where they meet again is the beginning of the cycle or, in this context, our duplicate number. An Illustrative Example Consider nums = [3, 1, 3, 4, 2]. Here’s how it maps to a “linked list”:\nStart at index 0: value 3 (jump to index 3) At index 3: value 4 (jump to index 4) At index 4: value 2 (jump to index 2) At index 2: value 3 (jump to index 3 again, and so on) We have a cycle involving the values/indices 3 → 4 → 2 → 3, and the duplicate number 3 is the “entry” to this cycle. Solution def findDuplicate(nums): slow = fast = nums[0] # Phase 1: Detect the cycle slow = nums[slow] fast = nums[nums[fast]] while slow != fast: slow = nums[slow] fast = nums[nums[fast]] slow = nums[0] # Phase 2: Find the entry point to the cycle while slow != fast: slow = nums[slow] fast = nums[fast] return slow ","description":"Unraveling the mystery of finding the duplicate number in an array.","title":"287. Find the Duplicate Number","uri":"/en/tracks/algorithms-101/leetcode/medium/287/"},{"content":"LeetCode problem 2873\nclass Solution: def maximumTripletValue(self, nums: List[int]) -\u003e int: res = mx = mx_diff = 0 for num in nums: res = max(res, mx_diff * num) mx = max(mx, num) mx_diff = max(mx_diff, mx - num) return res ","description":"Maximum Value of an Ordered Triplet I","title":"2873. Maximum Value of an Ordered Triplet I","uri":"/en/tracks/algorithms-101/leetcode/easy/2873/"},{"content":"LeetCode problem 2877\nimport pandas as pd def createDataframe(student_data: List[List[int]]) -\u003e pd.DataFrame: return pd.DataFrame(student_data, columns=['student_id', 'age']) ","description":"Create a DataFrame from List","title":"2877. Create a DataFrame from List","uri":"/en/tracks/algorithms-101/leetcode/easy/2877/"},{"content":"LeetCode problem 2878\nimport pandas as pd def getDataframeSize(players: pd.DataFrame) -\u003e List[int]: return list(players.shape) ","description":"Get the Size of a DataFrame","title":"2878. Get the Size of a DataFrame","uri":"/en/tracks/algorithms-101/leetcode/easy/2878/"},{"content":"LeetCode problem 2879\nimport pandas as pd def selectFirstRows(employees: pd.DataFrame) -\u003e pd.DataFrame: return employees.head(3) ","description":"Display the First Three Rows","title":"2879. Display the First Three Rows","uri":"/en/tracks/algorithms-101/leetcode/easy/2879/"},{"content":"LeetCode problem 2880\nimport pandas as pd def selectData(students: pd.DataFrame) -\u003e pd.DataFrame: return students[students['student_id'] == 101][['name', 'age']] ","description":"Select Data","title":"2880. Select Data","uri":"/en/tracks/algorithms-101/leetcode/easy/2880/"},{"content":"LeetCode problem 2881\nimport pandas as pd def createBonusColumn(employees: pd.DataFrame) -\u003e pd.DataFrame: employees['bonus'] = employees['salary'] * 2 return employees ","description":"Create a New Column","title":"2881. Create a New Column","uri":"/en/tracks/algorithms-101/leetcode/easy/2881/"},{"content":"LeetCode problem 2882\nimport pandas as pd def dropDuplicateEmails(customers: pd.DataFrame) -\u003e pd.DataFrame: return customers.drop_duplicates(subset=['email']) ","description":"Drop Duplicate Rows","title":"2882. Drop Duplicate Rows","uri":"/en/tracks/algorithms-101/leetcode/easy/2882/"},{"content":"LeetCode problem 2883\nimport pandas as pd def dropMissingData(students: pd.DataFrame) -\u003e pd.DataFrame: return students[students['name'].notnull()] ","description":"Drop Missing Data","title":"2883. Drop Missing Data","uri":"/en/tracks/algorithms-101/leetcode/easy/2883/"},{"content":"LeetCode problem 2884\nimport pandas as pd def modifySalaryColumn(employees: pd.DataFrame) -\u003e pd.DataFrame: employees['salary'] *= 2 return employees ","description":"Modify Columns","title":"2884. Modify Columns","uri":"/en/tracks/algorithms-101/leetcode/easy/2884/"},{"content":"LeetCode problem 2885\nimport pandas as pd def renameColumns(students: pd.DataFrame) -\u003e pd.DataFrame: students.rename( columns={ 'id': 'student_id', 'first': 'first_name', 'last': 'last_name', 'age': 'age_in_years', }, inplace=True, ) return students ","description":"Rename Columns","title":"2885. Rename Columns","uri":"/en/tracks/algorithms-101/leetcode/easy/2885/"},{"content":"LeetCode problem 2886\nimport pandas as pd def changeDatatype(students: pd.DataFrame) -\u003e pd.DataFrame: students['grade'] = students['grade'].astype(int) return students ","description":"Change Data Type","title":"2886. Change Data Type","uri":"/en/tracks/algorithms-101/leetcode/easy/2886/"},{"content":"LeetCode problem 2887\nimport pandas as pd def fillMissingValues(products: pd.DataFrame) -\u003e pd.DataFrame: products['quantity'] = products['quantity'].fillna(0) return products ","description":"Fill Missing Data","title":"2887. Fill Missing Data","uri":"/en/tracks/algorithms-101/leetcode/easy/2887/"},{"content":"LeetCode problem 2888\nimport pandas as pd def concatenateTables(df1: pd.DataFrame, df2: pd.DataFrame) -\u003e pd.DataFrame: return pd.concat([df1, df2], ignore_index=True) ","description":"LeetCode 2888. Data Concatenate","title":"2888. Reshape Data Concatenate","uri":"/en/tracks/algorithms-101/leetcode/easy/2888/"},{"content":"LeetCode problem 2889\nimport pandas as pd def pivotTable(weather: pd.DataFrame) -\u003e pd.DataFrame: return weather.pivot(index='month', columns='city', values='temperature') ","description":"LeetCode 2889. Reshape Data Pivot","title":"2889. Reshape Data Pivot","uri":"/en/tracks/algorithms-101/leetcode/easy/2889/"},{"content":"LeetCode problem 2890\nimport pandas as pd def meltTable(report: pd.DataFrame) -\u003e pd.DataFrame: return pd.melt(report, id_vars=['product'], var_name='quarter', value_name='sales') ","description":"LeetCode 2890. Reshape Data Melt","title":"2890. Reshape Data Melt","uri":"/en/tracks/algorithms-101/leetcode/easy/2890/"},{"content":"LeetCode problem 2891\nimport pandas as pd def findHeavyAnimals(animals: pd.DataFrame) -\u003e pd.DataFrame: return animals[animals['weight'] \u003e 100].sort_values('weight', ascending=False)[ ['name'] ] ","description":"Method Chaining","title":"2891. Method Chaining","uri":"/en/tracks/algorithms-101/leetcode/easy/2891/"},{"content":"LeetCode problem 2894\nclass Solution: def differenceOfSums(self, n: int, m: int) -\u003e int: return sum(i if i % m else -i for i in range(1, n + 1)) ","description":"Divisible and Non-divisible Sums Difference","title":"2894. Divisible and Non-divisible Sums Difference","uri":"/en/tracks/algorithms-101/leetcode/easy/2894/"},{"content":"LeetCode problem 2899\nclass Solution: def lastVisitedIntegers(self, words: List[str]) -\u003e List[int]: nums = [] res = [] k = 0 for w in words: if w == \"prev\": k += 1 i = len(nums) - k res.append(-1 if i \u003c 0 else nums[i]) else: k = 0 nums.append(int(w)) return res ","description":"Last Visited Integers","title":"2899. Last Visited Integers","uri":"/en/tracks/algorithms-101/leetcode/easy/2899/"},{"content":"LeetCode problem\nGiven two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\nReturn the quotient after dividing dividend by divisor.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\nExample 1:\nInput: dividend = 10, divisor = 3 Output: 3 Explanation: 10/3 = 3.33333.. which is truncated to 3.\nExample 2:\nInput: dividend = 7, divisor = -3 Output: -2 Explanation: 7/-3 = -2.33333.. which is truncated to -2.\nCode Idea:\nRemove decimals from both divisor and divident Remember the result sign (positive or \u003c 0) Subtract divisor from divident until result is less or equal to zero. Works but is too slow in case small number divisor (1) and greater number dividend (-2147483648):\nclass Solution: def divide(self, dividend: int, divisor: int) -\u003e int: res = 0 dd = abs(dividend) ds = abs(divisor) sign = -1 if (dividend \u003e 0 and divisor \u003c 0) or (dividend \u003c 0 and divisor \u003e 0) else 1 while dd \u003e= ds: dd -= ds res += 1 return sign * res Improve idea:\nSum divisor after “success” subtract until result of subtract is \u003e 0 Subtract divisor back until we can subtract it from dividend class Solution: def divide(self, dividend: int, divisor: int) -\u003e int: res = 0 dd = abs(dividend) ds = abs(divisor) sign = -1 if (dividend \u003e 0 and divisor \u003c 0) or (dividend \u003c 0 and divisor \u003e 0) else 1 if divisor == -1 and dividend == -2147483648: return 2147483647 elif divisor == 1: return sign * dd while dd \u003e= ds: tmp = ds multiples = 1 # count of subtracts while dd \u003e= tmp: ## sum divisor dd -= tmp res += multiples # hense sum count of subtracts tmp += tmp multiples += multiples else: if dd \u003e= ds: dd -= ds res += 1 return sign * res Better idea Idea: Bit manipulation\nclass Solution: def divide(self, dividend, divisor): positive = (dividend \u003c 0) is (divisor \u003c 0) dividend, divisor = abs(dividend), abs(divisor) res = 0 while dividend \u003e= divisor: curr_divisor, num_divisors = divisor, 1 while dividend \u003e= curr_divisor: dividend -= curr_divisor res += num_divisors curr_divisor = curr_divisor \u003c\u003c 1 num_divisors = num_divisors \u003c\u003c 1 if not positive: res = -res return min(max(-2147483648, res), 2147483647) Explanation:\nhttps://leetcode.com/problems/divide-two-integers/discuss/715094/Python-fast-code-with-detailed-explanation Another:\nTime: $O(\\log^2 n)$ Space: $O(1)$\nclass Solution: def divide(self, dividend: int, divisor: int) -\u003e int: if dividend == -2**31 and divisor == -1: return 2**31 - 1 sign = -1 if (dividend \u003e 0) ^ (divisor \u003e 0) else 1 res = 0 dvd = abs(dividend) dvs = abs(divisor) while dvd \u003e= dvs: k = 1 while k * 2 * dvs \u003c= dvd: k \u003c\u003c= 1 dvd -= k * dvs res += k return sign * res ","description":"LeetCode 29. Divide Two Integers","title":"29. Divide Two Integers","uri":"/en/tracks/algorithms-101/leetcode/medium/29/"},{"content":"LeetCode problem 2903\nclass Solution: def findIndices( self, nums: List[int], indexDifference: int, valueDifference: int ) -\u003e List[int]: mi = mx = 0 for i in range(indexDifference, len(nums)): j = i - indexDifference if nums[j] \u003c nums[mi]: mi = j if nums[j] \u003e nums[mx]: mx = j if nums[i] - nums[mi] \u003e= valueDifference: return [mi, i] if nums[mx] - nums[i] \u003e= valueDifference: return [mx, i] return [-1, -1] ","description":"Find Indices With Index and Value Difference I","title":"2903. Find Indices With Index and Value Difference I","uri":"/en/tracks/algorithms-101/leetcode/easy/2903/"},{"content":"LeetCode problem 2908\nclass Solution: def minimumSum(self, nums: List[int]) -\u003e int: n = len(nums) right = [inf] * (n + 1) for i in range(n - 1, -1, -1): right[i] = min(right[i + 1], nums[i]) res = left = inf for i, x in enumerate(nums): if left \u003c x and right[i + 1] \u003c x: res = min(res, left + x + right[i + 1]) left = min(left, x) return -1 if res == inf else res ","description":"Minimum Sum of Mountain Triplets I","title":"2908. Minimum Sum of Mountain Triplets I","uri":"/en/tracks/algorithms-101/leetcode/easy/2908/"},{"content":"LeetCode problem 2962\nclass Solution: def countSubarrays(self, nums: List[int], k: int) -\u003e int: mx = max(nums) n = len(nums) res = cnt = j = 0 for x in nums: while j \u003c n and cnt \u003c k: cnt += nums[j] == mx j += 1 if cnt \u003c k: break res += n - j + 1 cnt -= x == mx return res ","description":"2962. Count Subarrays Where Max Element Appears at Least K Times","title":"2962. Count Subarrays Where Max Element Appears at Least K Times","uri":"/en/tracks/algorithms-101/leetcode/medium/2962/"},{"content":"LeetCode problem 2971\nclass Solution: def largestPerimeter(self, nums: List[int]) -\u003e int: nums.sort() s = list(accumulate(nums, initial=0)) res = -1 for k in range(3, len(nums) + 1): if s[k - 1] \u003e nums[k - 1]: res = max(res, s[k]) return res ","description":"2971. Find Polygon With the Largest Perimeter","title":"2971. Find Polygon With the Largest Perimeter","uri":"/en/tracks/algorithms-101/leetcode/medium/2971/"},{"content":"LeetCode problem\nGiven a string s, find the length of the longest substring without repeating characters.\nExample 1:\nInput: s = \"abcabcbb\" Output: 3 Explanation: The answer is \"abc\", with the length of 3. First accepted Idea:\nLoop through string Calculate max count of elements in substring If get double element, then go back until get this element and do step 2. Proceed the main loop class Solution: def lengthOfLongestSubstring(self, s: str) -\u003e int: uniqs = set() len_max = 0 len_current = 0 idx = 0 for i in s: if i in uniqs: len_max = max(len_max, len_current) len_current = 1 uniqs = set(i) for j in reversed(s[:idx]): if j == i: break else: len_current += 1 uniqs.add(j) else: uniqs.add(i) len_current += 1 len_max = max(len_max, len_current) idx += 1 return len_max Better solution Sliding Window - template\nWindow Sliding Technique is a computational technique which aims to reduce the use of nested loop and replace it with a single loop, thereby reducing the time complexity. The Sliding window technique can reduce the time complexity to O(n).\nTips for identifying this kind of problem where we could use the sliding window technique:\nThe problem will be based on an array, string, or list data structure. You need to find the subrange in this array or string that should provide the longest, shortest, or target values. A classic problem: to find the largest/smallest sum of given k (for example, three) consecutive numbers in an array.\nclass Solution: def lengthOfLongestSubstring(self, s: str) -\u003e int: n = len(s) res = 0 # mp stores the current index of a character mp = {} i = 0 # try to extend the range [i, j] for j in range(n): if s[j] in mp: i = max(mp[s[j]], i) res = max(res, j - i + 1) mp[s[j]] = j + 1 return res class Solution: def lengthOfLongestSubstring(self, s: str) -\u003e int: chars = [None] * 128 left = right = 0 res = 0 while right \u003c len(s): r = s[right] index = chars[ord(r)] if index is not None and left \u003c= index \u003c right: left = index + 1 res = max(res, right - left + 1) chars[ord(r)] = right right += 1 return res class Solution(): def lengthOfLongestSubstring(self, s): max_len = 0 substr = '' for char in s: if char not in substr: substr += char max_len = max(max_len, len(substr)) else: start = substr.index(char) + 1 substr = substr[start:] + char return max_len Resources https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/2694302/JS-or-98-or-Sliding-window-or-With-exlanation https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/2133524/JavaC%2B%2B-A-reall-Detailed-Explanation ","description":"LeetCode 3. Longest Substring Without Repeating Characters","title":"3. Longest Substring Without Repeating Characters","uri":"/en/tracks/algorithms-101/leetcode/medium/3/"},{"content":"LeetCode задача 300\nЗадача Дан массив чисел, ваша задача — найти длину наибольшей возрастающей подпоследовательности.\nПодсказки Для решения этой задачи вы можете использовать динамическое программирование.\nПодход Инициализация: Инициализируйте массив, который будет хранить длины наибольших возрастающих подпоследовательностей для каждого элемента массива. Обход массива: Обойдите массив, и для каждого элемента обновите массив длин наибольших возрастающих подпоследовательностей. Максимум: По окончании обхода найдите максимальное значение в массиве длин. Простейший способ решения — это использовать двойной цикл для обхода массива и поиска наибольшей возрастающей подпоследовательности для каждого элемента. Это не самый эффективный способ, но его легко понять.\nАлгоритм Создать массив dp той же длины, что и исходный массив, и заполнить его единицами. Для каждого элемента nums[i] обойти все предыдущие элементы nums[j] и, если nums[i] \u003e nums[j], обновить dp[i] как max(dp[i], dp[j] + 1). Найти и вернуть максимальное значение в массиве dp. Решение def lengthOfLIS(nums): if not nums: return 0 dp = [1] * len(nums) # массив для хранения длин LIS для каждого элемента for i in range(len(nums)): for j in range(i): if nums[i] \u003e nums[j]: dp[i] = max(dp[i], dp[j] + 1) # обновление длины LIS для элемента nums[i] return max(dp) В этом решении используется двойной цикл для обхода массива и обновления массива dp, который хранит длину наибольшей возрастающей подпоследовательности для каждого элемента. По окончании обхода находим и возвращаем максимальное значение в массиве dp.\n","description":"LeetCode 300. Наибольшая возрастающая подпоследовательность. Разбор задачи.","title":"300. Longest Increasing Subsequence","uri":"/en/tracks/algorithms-101/leetcode/medium/300/"},{"content":"LeetCode problem 3079\nclass Solution: def sumOfEncryptedInt(self, nums: List[int]) -\u003e int: s = 0 for num in nums: str_num = str(num) max_digit = max(str_num) encrypted_num = int(max_digit * len(str_num)) s += encrypted_num return s ","description":"3079. Find the Sum of Encrypted Integers","title":"3079. Find the Sum of Encrypted Integers","uri":"/en/tracks/algorithms-101/leetcode/easy/3079/"},{"content":"LeetCode задача 328\nЗадача Дан односвязный список и задача переставить его узлы таким образом, чтобы все узлы с нечетными индексами шли перед всеми узлами с четными индексами.\nВариант решения 1 Рассмотрим вариант решения более простой для понимания и реализации.\nПодсказки Использовать два связных списка.\nПодход Во время прохода по связному списку указатель для чётных узлов добавлять связанный список с четными, то же самое делать с нечетными.\nВ конце прохода список с четными узлами добавить в конец списка с нечетными узлами.\nАлгоритм Объявляем 2 пустых связных списка (even_head, odd_head) Объявляем два указателя на каждый список (even,`odd). Данные указатели будут перемещаться по своим спискам. Проходим по списку head: если текущий указатель - четный, добавляем его в even_head (обновляем значение указателя списка). Переставляем указатель на следующий. even = even.next Шаги 1-2 для нечетного указателя соответсвенно. Переходим к следующему указателю в head. Соединяем два списка. Список с четные указателями становится следующим после списка с нечетными указателями. Так как четные указатели должны стоять в самом конце нового списка, то обновляем even.next = None, потому что после него ничего не должно идти. Добавляем even_head к списку odd_head в конец. Возвращаем odd_head Решение class Solution: def oddEvenList(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: odd_head = ListNode(0) even_head = ListNode(0) odd = odd_head even = even_head is_odd = True while head: if is_odd: odd.next = head odd = odd.next else: even.next = head even = even.next head = head.next is_odd = not is_odd even.next = None # самый последний узел odd.next = even_head.next # head в конец списка return odd_head.next Вариант решения 2 Подсказки Использовать указатели. Четный указатель будет головным для четных, нечетный для нечетных. Четный и нечетный по мере прохождения можно менять местами.\nПодход Абстрактная идея:\nпревратить список head в список из нечетных по счету узлов. превратить список even_head из списка head с содержанием только четных узлов Инициализация указателей: Инициализируем указатели для нечетных и четных узлов, а также сохраняем начальный четный узел, который будет использован после того, как пройдем весь список. Перестановка узлов: Проходим по списку, меняя местами нечетные и четные узлы. Обновляем next для нечетного путем взятия next у четного: odd.next = even.next Перемещаем указатель для нечетного вперед: odd = odd.next 1 и 2 шаги проделываем для четного указателя. 💡 четный указатель обновляет ссылки с обновленного четного указателя. Соединение списков: После того как все узлы переставлены, последний нечетный узел должен указывать на первый четный узел. Пример для 1,2,3,4,5:\nИнициализация указателей: Указатель odd указывает на узел с значением 1. состояние списка: 1-2-3-4-5 Указатель even указывает на узел с значением 2. состояние списка: 2-3-4-5 Указатель even_head указывает на узел с значением 2. состояние списка: 2-3-4-5 Первый проход: odd.next будет указывать на узел, следующий за even: 1-2 =\u003e 1-3, odd.next = 3. Обновляем odd на odd.next. odd = 3, odd.next = 4. even.next будет указывать на узел, следующий за новым odd: 2-3 =\u003e 2-\u003e4, even.next = 4. Перемещаем even на even.next Текущее состояние списков head: 1-3-4-5, even_head: 2-4-5 Второй проход: odd.next будет указывать на узел, следующий за even (узел с значением 6) Обновляем odd на odd.next. с значением 6 even.next будет указывать на узел, следующий за новым odd (узел с значением 5) Перемещаем even на узел с значением 5 Текущее состояние списка: 1-3-5. 2-4 Объединение четных и нечетных: После окончания всех проходов, установить odd.next на узел, на который указывает even_head.\nАлгоритм Инициализируем указатели odd и even на начальные нечетные и четные узлы. Сохраняем начальный четный узел в переменной even_head. Пока четные и нечетные узлы не None, продолжаем перестановку. В конце соединяем последний нечетный узел с even_head. Решение class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def oddEvenList(head: ListNode) -\u003e ListNode: if not head: return head odd = head even = head.next even_head = even while even and even.next: odd.next = even.next odd = odd.next even.next = odd.next even = even.next # Соединяем последний нечетный узел с первым четным odd.next = even_head return head ","description":"LeetCode 328. Разбор задачи на перестановку узлов односвязного списка так, чтобы все узлы с нечетными индексами были перед узлами с четными индексами.","title":"328. Odd Even Linked List","uri":"/en/tracks/algorithms-101/leetcode/medium/328/"},{"content":"LeetCode problem\nThere is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 \u003c= k \u003c nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0 Output: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3 Output: -1\nExample 3:\nInput: nums = [1], target = 0 Output: -1\nCode Idea:\nValues in the right part of the array are always lower than in the left part.\nUse binary search Define where to move (left or right) class Solution: def search(self, nums: List[int], target: int) -\u003e int: left = 0 right = len(nums) - 1 while left \u003c= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[left] \u003c= nums[mid]: if nums[left] \u003c= target \u003c nums[mid]: right = mid - 1 else: left = mid + 1 else: if nums[mid] \u003c target \u003c= nums[right]: left = mid + 1 else: right = mid - 1 return -1 ","description":"LeetCode 33. Search in Rotated Sorted Array","title":"33. Search in Rotated Sorted Array","uri":"/en/tracks/algorithms-101/leetcode/medium/33/"},{"content":"LeetCode problem\nProblem Statement Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from “JFK”, thus, the itinerary must begin with “JFK”. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\nNaive Solution One naive solution would be to use backtracking and try all possible combinations of tickets to form a valid itinerary. While this could work for small inputs, it’s not efficient for larger numbers of tickets.\nHints \u0026 Tips Consider the tickets as a directed graph where each airport is a node, and a ticket between two airports represents a directed edge. For this problem, instead of a depth-first traversal, the solution employs an iterative approach using a stack. Approach We can visualize this problem as a directed graph traversal task. Every ticket is a directed edge between two airports. The challenge is to find a path that uses all the directed edges and starts from JFK.\nThe stack is an essential data structure for this solution, and here’s why:\nA stack helps in maintaining the path. When visiting an airport, we’re not sure if this path will lead to a solution (because it might end up in a dead-end). Hence, pushing the airports to the stack gives us the flexibility to backtrack easily (by popping out the last visited airport) if we reach a dead-end.\nWhen all destinations from an airport are exhausted, it means we have found the end of that particular path. At this moment, by adding the airport to our final result and removing it from the stack, we backtrack to find the remaining itinerary.\nThe graph for this solution is a dictionary (specifically, a defaultdict for ease of handling non-existing keys). The keys of this dictionary are the source airports, and the values are a list of destination airports. Importantly, these destinations are sorted in reverse lexicographical order because we will be utilizing the pop() function to retrieve and remove the last element from these lists. This ensures that we always get the smallest lexical destination available without any extra computational overhead.\nSteps Convert the given list of tickets into a graph where each node (airport) points to a list of its destinations. Sort the destinations in reverse lexicographical order to aid in retrieving the smallest lexical order when using pop(). Use a stack to iteratively traverse the graph, always trying to go to the smallest lexical destination possible. When stuck at a node (airport) with no unvisited outbound paths, add it to the final itinerary. Continue the process until the stack is empty. Solution from collections import defaultdict def findItinerary(tickets): graph = defaultdict(list) # Convert tickets into a graph with destinations for each departure for src, dest in sorted(tickets, reverse=True): graph[src].append(dest) stack = [\"JFK\"] result = [] while stack: # Traverse the graph using the stack while graph[stack[-1]]: stack.append(graph[stack[-1]].pop()) result.append(stack.pop()) return result[::-1] # The result will be in reverse order # because of the way nodes are added to the result ","description":"332. Reconstruct Itinerary","title":"332. Reconstruct Itinerary","uri":"/en/tracks/algorithms-101/leetcode/hard/332/"},{"content":"LeetCode problem\nProblem Statement The task is to determine if the given list of numbers contains an increasing subsequence of length three. This means we need to find three indices i, j, and k in the list such that i \u003c j \u003c k and nums[i] \u003c nums[j] \u003c nums[k].\nNaive Solution One possible naive solution is to use three nested loops to go through all possible triples in the list and check if they are increasing. But this solution is very inefficient, has a time complexity of O(n³), and does not meet the follow-up constraints of the problem.\nApproach Use two variables, first and second, initialized with infinity\nGo through the list\nUpdate these variables with the smallest and second smallest numbers that has seen so far.\nIf find a number larger than both, it means you have found an increasing triplet. Return True.\nIf finish going through the list without finding such a number, return False.\nThis algorithm works because any number larger than first and second is effectively larger than at least two numbers before it in the list.\nSteps Initialize first and second to infinity. Iterate over nums. For each number n: If n is less than or equal to first, update first with n. Else, if n is less than or equal to second, update second with n. Else, return True. If you finish iterating without returning, return False. Python Solution class Solution: def increasingTriplet(self, nums: List[int]) -\u003e bool: # Initialize two pointers to track the smallest and second smallest elements first = second = float('inf') for n in nums: # If the current number is smaller or equal than the smallest number found so far, # then update the smallest number. if n \u003c= first: first = n # If the current number is greater than the smallest number but smaller or equal # than the second smallest number found so far, then update the second smallest number. elif n \u003c= second: second = n # If the current number is greater than both smallest and second smallest numbers, # it means we found a increasing triplet subsequence. else: return True # If no increasing triplet subsequence was found, return False. return False ","description":"334. Increasing Triplet Subsequence","title":"334. Increasing Triplet Subsequence","uri":"/en/tracks/algorithms-101/leetcode/medium/334/"},{"content":"LeetCode problem\nGiven an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nInput: nums = [5,7,7,8,8,10], target = 8 Output: [3,4]\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1]\nExample 3:\nInput: nums = [], target = 0 Output: [-1,-1]\nCode Idea:\nFind target index (target_index) using Binary Search If not exist then return [-1, -1] If exist then goto step 2 We got the middle index. For now this is the most left and most right index. Divide nums into two arrays: left_nums and right_nums: left_nums = nums[0:target_index] right_nums = nums[target_index:] Find the most left target in left_nums. (Set right border in subarray) Find the most right target in right_nums. (Set left border in subarray) class Solution: def searchRange(self, nums: List[int], target: int) -\u003e List[int]: def find_target(): left = 0 right = len(nums) - 1 while left \u003c= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[mid] \u003c target: left = mid + 1 else: right = mid - 1 return -1 def find_most_left(right_idx): l = 0 r = right_idx while l \u003c= r: m = (l + r) // 2 if nums[m] \u003c target: l = m + 1 else: r = m - 1 return l def find_most_right(left_idx): l = left_idx r = len(nums) - 1 while l \u003c= r: m = (l + r) // 2 if nums[m] == target: # ex: [8, 8, 8, 9, 10] l = l + 1 else: # ex: [8, 8, 8, 9, 10] r = m - 1 return l - 1 target_idx = find_target() if target_idx == -1: return [-1,-1] left = find_most_left(target_idx) right = find_most_right(target_idx) return [left, right] Code Ver2 Use prebuilt Python functions:\nbisect_left bisect_right class Solution: def searchRange(self, nums: List[int], target: int) -\u003e List[int]: l = bisect_left(nums, target) if l == len(nums) or nums[l] != target: return -1, -1 r = bisect_right(nums, target) - 1 return l, r ","description":"LeetCode 34. Find First and Last Position of Element in Sorted Array","title":"34. Find First and Last Position of Element in Sorted Array","uri":"/en/tracks/algorithms-101/leetcode/medium/34/"},{"content":"Задача Дан вложенный список целых чисел. Реализуйте итератор, который “разворачивает” этот вложенный список.\nПодход Задача состоит в реализации итератора, который будет последовательно возвращать все элементы из вложенного списка. Вложенный список может содержать как обычные числа, так и другие вложенные списки. Наивное решение заключается в том, чтобы сначала полностью “развернуть” весь вложенный список в одномерный список, а затем реализовать итератор для этого одномерного списка.\nАлгоритм Инициализация: Создать одномерный список и заполнить его элементами из вложенного списка. next(): Возвращает следующий элемент одномерного списка. hasNext(): Проверяет, остались ли еще элементы для итерации. Решение class NestedIterator: def __init__(self, nestedList): self.stack = [] self.flatten(nestedList) self.stack.reverse() # Рекурсивная функция для \"разворачивания\" вложенного списка def flatten(self, nestedList): for item in nestedList: if item.isInteger(): self.stack.append(item.getInteger()) else: self.flatten(item.getList()) def next(self) -\u003e int: return self.stack.pop() def hasNext(self) -\u003e bool: return len(self.stack) \u003e 0 В этом решении мы сначала “разворачиваем” весь вложенный список в одномерный список, используя рекурсивную функцию flatten. Затем, для получения следующего элемента и проверки наличия следующего элемента, используются методы next() и hasNext().\n","description":"LeetCode 341. Реализация итератора для вложенного списка. Разбор задачи.","title":"341. Flatten Nested List Iterator","uri":"/en/tracks/algorithms-101/leetcode/medium/341/"},{"content":"LeetCode problem 343\nProblem Statement Given a positive integer n, our task is to divide it into the sum of k positive integers, where $k \\geq 2$, in such a way that the product of these integers is maximized. Our goal is to determine the maximum possible product.\nNaive Solution A straightforward or naive way to solve this would be to consider all potential combinations to divide the number n and calculate the product for each division. This method, while comprehensive, would be inefficient and impractical for larger values of n.\nHints \u0026 Tips Try to break down n into smaller parts and observe the pattern of the results. The number 3 plays a significant role, so try to understand its impact on the problem. Approach A pattern emerges when observing how the number can be broken down to maximize the product: the number 3 becomes significant. This realization stems from the fact that 3 multiplied by any number $x \\geq 3$ is always greater than $x \\times 2$ and $x \\times 1$.\nThe only exception is 4, where $2 \\times 2$ is preferable to 3 and 1.\nTherefore, the optimized approach becomes:\nWhen $n = 2$, the answer is 1 (because $1 \\times 1 = 1$).\nFor $n = 3$, the answer becomes 2 (as $2 \\times 1 = 2$).\nIf $n = 4$, the result is 4 (as $2 \\times 2 = 4$).\nFor any $n \u003e 4$, we can repeatedly subtract 3 from n and multiply the resulting product by 3.\nAfter all the 3s are extracted, the remaining n (which will be less than 4) will contribute its optimal value to the product (either 1, 2, or 4).\nSolution def integerBreak(n: int) -\u003e int: if n == 2: # base cases return 1 if n == 3: return 2 if n == 4: return 4 product = 1 while n \u003e 4: # As long as n is greater than 4, product *= 3 # increase the product by a factor of 3 n -= 3 # and keep reducing n by 3 product *= n # Multiply the remaining value of n to the product return product ","description":"Integer Break","title":"343. Integer Break","uri":"/en/tracks/algorithms-101/leetcode/medium/343/"},{"content":"LeetCode problem\nProblem Statement Given a string s, the task is to reverse only all the vowels in the string and return it. The vowels are ‘a’, ’e’, ‘i’, ‘o’, and ‘u’, and they can appear in both lower and upper cases, more than once.\nNaive Solution The naive approach to solve this problem would be to:\nInitialize an empty string result. Traverse the given string s from the start to the end. If the current character is a vowel, find the next vowel in the string starting from the end, add it to result, and remove it from the string. If the current character is not a vowel, simply add it to result. Hints \u0026 Tips But this solution is inefficient as it requires traversing the string multiple times and manipulating it. A more efficient solution would use the two-pointer technique.\nApproach The efficient approach to solve this problem would be to:\nInitialize two pointers, one at the start and the other at the end of the string. While the two pointers have not met, check if the characters at the two pointers are vowels. If they are, swap them. If not, move the pointer(s). Steps Convert the string to a list of characters because Python strings are immutable. Initialize two pointers: left at 0 and right at the end of the string. While left \u003c right: If the character at left is a vowel and the character at right is also a vowel, swap them and move both pointers. If the character at left is not a vowel, move the left pointer. If the character at right is not a vowel, move the right pointer. Join the list of characters back to a string and return it. Solution class Solution: def reverseVowels(self, s: str) -\u003e str: vowels = 'aeiouAEIOU' s = list(s) left, right = 0, len(s) - 1 while left \u003c right: if s[left] not in vowels: left += 1 elif s[right] not in vowels: right -= 1 else: s[left], s[right] = s[right], s[left] left, right = left + 1, right - 1 return ''.join(s) Second solution:\nclass Solution: def reverseVowels(self, s: str) -\u003e str: vowels = 'aeiouAEIOU' vowels_order = [] for x in s: if x in vowels: vowels_order.append(x) res = '' for x in s: if x in vowels: res += vowels_order.pop() else: res += x return res ","description":"345. Reverse Vowels of a String","title":"345. Reverse Vowels of a String","uri":"/en/tracks/algorithms-101/leetcode/easy/345/"},{"content":"LeetCode problem\nDetermine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\nNote:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned rules. Example 1:\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] Output: true Example 2:\nInput: board = [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] Output: false Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid. Code Idea:\nclass Solution: def isValidSudoku(self, board: List[List[str]]) -\u003e bool: exist = set() for i in range(9): for j in range(9): x = board[i][j] if x != '.': uniqs = ( (i, x), (x, j), (int(i/3), int(j/3), x) ) # devide 3 because of third check in 3x3 block for z in uniqs: if z in exist: return False exist.add(z) return True ","description":"LeetCode 36. Valid Sudoku","title":"36. Valid Sudoku","uri":"/en/tracks/algorithms-101/leetcode/medium/36/"},{"content":"LeetCode задача 377\nЗадача Дан массив различных целых чисел nums и целевое целое число target от 1 до 1000. Нужно вернуть количество возможных комбинаций, которые в сумме дают target.\nПодсказки Построить дерево решений Задачу можно решить путем разложения ее на меньшие подзадачи с помощью динамического программирования. Нахождение целевого значения в дереве решений\nYour browser does not support the video tag. LeetCode 377 Решение Подход Если целевое значение - target=7 и nums=[2, 3, 4], то в дереве решений может быть несколько путей до этого числа. Например: 2-2-3, 2-3-2, 3-2-2, 3-4, 4-3, 5-2.\nВо время подсчета различных путей мы получаем различные суммы, например: 2-2-3, сначала сумма 2, потом 4, потом 7. Следующи возможный путь начинается с 3. Чтобы проверить, подходит данный путь или нет, мы можем рассчитать недостающее число до target: 7-3=4. Мы получили 4, но ранее мы уже получали такую сумму и знаем, что если на данном этапе мы хотим знать будет ли какое количество вариантов для суммы 4, то в итоге мы найдем решение.\nЭто - особенность динамического программирования, когда на каждом этапе мы используем уже подсчитанные данные, пройденные до текущего момента.\nМы будем использовать массив sums, где sums[s] будет хранить количество комбинаций, которые дают сумму s.\nДля каждого числа s от 1 до target, мы будем итерировать по каждому числу в nums и прибавлять sums[s-num] к sums[s].\nПример:\nsums[4] = sums[4-2] + sums[4-4] + sums[4-4] Почему мы рассматриваем числа от 1 до target?\nЦелью является поиск всех возможных комбинаций чисел из nums, которые в сумме дают target. Начиная с 1 и заканчивая target, мы стремимся найти все возможные комбинации для каждого промежуточного значения. Таким образом, когда мы достигаем target, у нас уже будут вычислены комбинации для всех предыдущих значений, что позволит быстро найти ответ для target.\nЗачем нам нужен индекс с нулевым значением в массиве?\nЗначение sums[0] = 1 может показаться не совсем интуитивным, но оно имеет особый смысл. Это значение говорит нам о том, что есть один способ получить сумму 0 — не использовать ни одного числа из nums. Это начальное условие необходимо для корректной работы алгоритма, так как при добавлении каждого нового числа из nums к уже найденным комбинациям мы будем обращаться к этому значению.\nРассмотрим пример. Пусть nums = [1,2,3] и target = 4. Когда мы рассматриваем число 1 (первый шаг итерации), наш алгоритм будет искать число комбинаций, которые дают сумму 1 - 1 = 0. И здесь значение sums[0] приходит на помощь: благодаря ему алгоритм “понимает”, что существует одна такая комбинация.\nАлгоритм Создаем список sums с длиной target + 1 и заполняем его нулями. Этот список будет представлять количество комбинаций, которые приводят к определенной (промежуточной) сумме. Устанавливаем sums[0] в 1, так как есть только один способ получить сумму 0: при пустом nums. Основной цикл (построение таблицы): Перебираем все возможные суммы от 1 до target (включительно). Допустим, текущее число обозначено как s Теперь перебираем каждое число n из nums. Находим остаточную сумму s - n Прибавляем к sums[s] значение sums[s-n], так как любая комбинация, ведущая к s-n, может быть дополнена числом n, чтобы достичь s. Решение class Solution: def combinationSum4(self, nums: List[int], target: int) -\u003e int: sums = [0] * (target + 1) sums[0] = 1 # entrypoint of dynamic p: sum 0 can be only in case if nums is empty for s in range(1, target + 1): for n in nums: # check all paths remainder = s - n if remainder \u003e= 0: # use only positive indexes (sums) sums[s] += sums[remainder] # count to previous results return sums[target] Данное решение можно отобразить с использованием словаря для всех сумм:\nclass Solution: def combinationSum4(self, nums: List[int], target: int) -\u003e int: sums = {0:1} for s in range(1, target + 1): sums[s] = 0 for n in nums: remainder = s - n sums[s] += sums.get(remainder, 0) return sums[target] ","description":"LeetCode 377. Количество возможных комбинаций, которые в сумме дают заданное число. Разбор задачи.","title":"377. Combination Sum IV","uri":"/en/tracks/algorithms-101/leetcode/medium/377/"},{"content":"LeetCode problem\nThe count-and-say sequence is a sequence of digit strings defined by the recursive formula:\ncountAndSay(1) = \"1\" countAndSay(n) is the way you would “say” the digit string from countAndSay(n-1), which is then converted into a different digit string. To determine how you “say” a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\nFor example, the saying and conversion for digit string \"3322251\": Given a positive integer n, return the nth term of the count-and-say sequence.\nExample 1:\nInput: n = 1 Output: \"1\" Explanation: This is the base case. Example 2:\nInput: n = 4 Output: \"1211\" Explanation: countAndSay(1) = \"1\" countAndSay(2) = say \"1\" = one 1 = \"11\" countAndSay(3) = say \"11\" = two 1's = \"21\" countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\" Idea:\nclass Solution: def countAndSay(self, n: int) -\u003e str: res = '1' while n \u003e 1: l = len(res) new_str = '' i = 0 while i \u003c l: count = 1 while i \u003c l - 1 and res[i] == res[i+1]: count += 1 i += 1 new_str += str(count) + res[i] i += 1 res = new_str n -= 1 return res ","description":"LeetCode 38. Count and Say","title":"38. Count and Say","uri":"/en/tracks/algorithms-101/leetcode/medium/38/"},{"content":"LeetCode задача 384\nЗадача Реализуйте класс, который принимает массив чисел в конструкторе и предоставляет метод для их случайного перемешивания, а также метод для возвращения исходного массива.\nПодсказки Для создания случайного порядка элементов можно использовать алгоритм Фишера-Йетса или другие методы перемешивания.\nПодход Инициализация: Сохранить исходный массив в переменной класса для дальнейшего использования. reset(): Вернуть исходный массив. shuffle(): Вернуть перемешанный массив. Из всех возможных подходов к решению этой задачи, наиболее простым является использование встроенного метода random.shuffle() из Python стандартной библиотеки для перемешивания массива. В этом случае, вы просто создаете копию исходного массива и применяете к ней метод random.shuffle().\nАлгоритм Сохранить исходный массив в переменной класса. В методе reset() просто вернуть исходный массив. В методе shuffle() создать копию исходного массива, перемешать её и вернуть. Решение import random class Solution: def __init__(self, nums): self.original = nums def reset(self): return self.original def shuffle(self): shuffled = self.original.copy() # создаем копию исходного массива random.shuffle(shuffled) # перемешиваем копию return shuffled ","description":"LeetCode 384. Перемешивание массива. Разбор задачи.","title":"384. Shuffle an Array","uri":"/en/tracks/algorithms-101/leetcode/medium/384/"},{"content":"LeetCode задача 387\nЗадача Дана строка s. Найдите первый уникальный символ в строке и верните его индекс. Если такого символа нет, верните -1.\nПодсказки Использование хеш-таблицы может ускорить процесс поиска уникальных символов.\nПодход Инициализация: Создайте хеш-таблицу для хранения частоты каждого символа в строке. Первый проход: Пройдите по строке и заполните хеш-таблицу. Второй проход: Пройдите по строке второй раз и проверьте частоту каждого символа в хеш-таблице. Первый символ с частотой 1 будет ответом. Этот подход прост для понимания и реализации. Он требует двух проходов по строке, но временная сложность остается линейной.\nАлгоритм Создайте хеш-таблицу для хранения частот символов. Пройдите по строке, заполняя хеш-таблицу. Пройдите по строке второй раз, и для каждого символа проверьте его частоту в хеш-таблице. Верните индекс первого символа с частотой 1. Решение def firstUniqChar(s: str) -\u003e int: # Хеш-таблица для хранения частот символов char_count = {} # Первый проход: заполнение хеш-таблицы for char in s: char_count[char] = char_count.get(char, 0) + 1 # Второй проход: проверка частоты символов for index, char in enumerate(s): if char_count[char] == 1: return index return -1 ","description":"LeetCode 387. Первый уникальный символ в строке. Разбор задачи.","title":"387. First Unique Character in a String","uri":"/en/tracks/algorithms-101/leetcode/medium/387/"},{"content":"LeetCode problem 389\nProblem Statement Given two strings s and t, the string t is generated by shuffling the characters of s and adding one additional character at a random position. The task is to identify and return that extra character.\nNaive Solution A naive solution would involve comparing the characters in both strings one by one to detect the extra character in t. This method is not efficient as it could take a linear amount of time for strings of considerable lengths.\nHints \u0026 Tips Counting occurrences of characters can help detect discrepancies. The collections.Counter class is a handy tool in Python for counting elements in a collection. Approach We can utilize Python’s collections.Counter to help us find the difference between the two strings. The Counter allows us to quickly count the occurrences of each character in the string s. We then iterate over the string t and decrement the count for each character encountered. The character that results in a count of -1 is the one that was added to t.\nSteps Create a Counter for the string s. Iterate over each character c in string t. Decrement the count for character c in the Counter. If the count for any character becomes -1, that character is the one added to string t. Return the character found in the previous step. Solution from collections import Counter class Solution: def findTheDifference(self, s: str, t: str) -\u003e str: count = Counter(s) for c in t: count[c] -= 1 if count[c] == -1: return c ","description":"Detailed explanation and Python solution for LeetCode problem 389. Find the Difference using the `collections.Counter`.","title":"389. Find the Difference","uri":"/en/tracks/algorithms-101/leetcode/easy/389/"},{"content":"LeetCode problem 392\nProblem Statement Given two strings s and t, you need to determine if s is a subsequence of t. To be a subsequence, you can remove characters from t without reordering to form s.\nNaive Solution The naive approach would be to generate all subsequences of string t and then check if string s is one of them. However, generating all subsequences of t can be computationally expensive especially when the length of t is large.\nHints \u0026 Tips Understanding the nature of the problem is vital. This problem can be visualized as two pointers moving through both strings. If characters match, move both pointers. If not, only move the pointer in t.\nApproach To determine if s is a subsequence of t, we can use a two-pointer technique.\nBegin by initializing two pointers at the start of s and t. Move through t, looking for a match with the current character of s. If you find a match, move to the next character in s. If you reach the end of s while doing this, it means s is a subsequence of t. Steps Initialize two pointers i and j to 0. i points to characters in s while j points to characters in t. Traverse through t using the pointer j. When s[i] is equal to t[j], increment i. If i becomes equal to the length of s, return True since it means all characters of s are present in t in order. If the loop completes and i is not equal to the length of s, return False. Solution def isSubsequence(s, t): # Initialize two pointers at the start of the strings. i, j = 0, 0 while j \u003c len(t): # If the current characters match, move to the next character in s. if i \u003c len(s) and s[i] == t[j]: i += 1 j += 1 # If all characters in s were found in t, return True. return i == len(s) ","description":"Exploring whether one string is a subsequence of another.","title":"392. Is Subsequence","uri":"/en/tracks/algorithms-101/leetcode/easy/392/"},{"content":"LeetCode problem\nProblem Statement Given an encoded string, the task is to decode it to produce a string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times.\nNaive Solution A naive approach would be to repeatedly look for a pattern in the string where there is a number followed by square brackets. For each such pattern found, replace it with the string inside the square brackets repeated ‘k’ times. This would work but might not be the most efficient solution, especially for nested brackets.\nHints \u0026 Tips The problem can be approached using a stack data structure. When we encounter a number, we can store it. When we encounter an open bracket, we push what we have onto the stack and reset our current string and count. When we encounter a closing bracket, we can pop from the stack and multiply our current string the required number of times. Approach The ideal approach to solve this problem is using a stack. The reason a stack works perfectly here is that the decoding needs to be done from the inside out whenever we encounter nested brackets.\nSteps Initialize an empty stack. Iterate over each character in the input string. If the current character is a digit, store it until we get the complete number. If the current character is an open bracket, push the current string and number to the stack and reset them. If it’s a closing bracket, pop the string and number from the stack and append the current string repeated ’number’ times to the popped string. This becomes our new current string. If it’s a letter, simply append it to the current string. Once the iteration is over, the current string contains the decoded string. Solution def decodeString(s: str) -\u003e str: stack = [] curr_str = '' curr_num = '' for char in s: if char.isdigit(): curr_num += char elif char == \"[\": stack.append((curr_str, int(curr_num))) curr_str = '' curr_num = '' elif char == \"]\": prev_str, num = stack.pop() curr_str = prev_str + num * curr_str else: curr_str += char return curr_str ","description":"Understanding and solving the \"Decode String\" problem.","title":"394. Decode String","uri":"/en/tracks/algorithms-101/leetcode/medium/394/"},{"content":"LeetCode задача 4\nЗадача Даны два отсортированных массива nums1 и nums2 размера m и n соответственно. Найти медиану двух отсортированных массивов.\nПодсказки Чтобы найти медиану, нужно сначала объединить два массива и отсортировать их. После этого медиана будет либо средним элементом, если общее количество элементов нечетное, либо средним значением двух центральных элементов, если общее количество элементов четное.\nПодход Мы можем объединить два массива в один большой отсортированный массив и найти медиану этого массива. Этот подход не самый эффективный, но он прост и понятен.\nАлгоритм Объедините два массива. Отсортируйте объединенный массив. Найдите медиану отсортированного массива.\nРешение def findMedianSortedArrays(nums1, nums2): # Шаг 1: Объединение двух массивов merged = nums1 + nums2 # Шаг 2: Сортировка объединенного массива merged.sort() # Шаг 3: Поиск медианы n = len(merged) middle = n // 2 # Если n четное if n % 2 == 0: return (merged[middle - 1] + merged[middle]) / 2 # Если n нечетное else: return merged[middle] ","description":"LeetCode 4. Найти медиану двух отсортированных массивов. Разбор задачи.","title":"4. Median of Two Sorted Arrays","uri":"/en/tracks/algorithms-101/leetcode/hard/4/"},{"content":"LeetCode problem 404\nConsider using a depth-first search (DFS) approach\nThe strategy is to recursively traverse the tree, and at each node, check if it has a left child that is a leaf. If it is, we add its value to the sum. We continue traversing until all nodes are visited.\nApproach Define a helper function dfs(node) that will traverse the tree: Check if the current node is None; if yes, return 0. Check if the left child of the node is a leaf (i.e., has no left or right child). If it is, add its value to the sum. Recursively call the helper for the left and right children of the current node. Return the sum of values from the left and right child calls plus the leaf node value if applicable. Call this dfs function starting from the root of the tree. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumOfLeftLeaves(root): def dfs(node): if not node: return 0 sum = 0 if node.left and not node.left.left and not node.left.right: sum += node.left.val sum += dfs(node.left) sum += dfs(node.right) return sum return dfs(root) class Solution: sum = 0 def sumOfLeftLeaves(self, root: Optional[TreeNode]) -\u003e int: def dfs(root, is_left=False): if not root: return 0 if is_left: if not root.left and not root.right: self.sum += root.val dfs(root.left, True) dfs(root.right) dfs(root) return self.sum class Solution: def sumOfLeftLeaves(self, root: TreeNode) -\u003e int: if root is None: return 0 res = 0 if root.left and root.left.left is None and root.left.right is None: res += root.left.val res += self.sumOfLeftLeaves(root.left) res += self.sumOfLeftLeaves(root.right) return res ","description":"404. Sum of Left Leaves","title":"404. Sum of Left Leaves","uri":"/en/tracks/algorithms-101/leetcode/easy/404/"},{"content":"LeetCode problem 41\nHow to place each number in its ‘correct’ position if we ignore the space constraint. How can this idea be adapted to use constant space?\nUse the array itself to record the presence of integers by placing each number in its “natural” position. For example, if 1 is in the array, place it at index 0, if 2 is there, place it at index 1, and so on. This way, the first place where its number doesn’t match its index, the missing number is index + 1.\nApproach Ignore Non-Positive and Large Numbers: First, ignore any non-positive numbers and numbers larger than n (array’s size), as they don’t help in finding the first missing positive. Place Each Number in Its Correct Position: Iterate through the array, for each number num in nums, swap it with the number at index = num - 1 if it’s not already in the correct position. Continue this process until every number is either in its correct position or cannot be placed (e.g., because it’s out of the range [1, n]). Find the First Missing Positive: After reordering, iterate through the array again. The first index i where nums[i] != i + 1 indicates that i + 1 is the missing number. class Solution: def firstMissingPositive(self, nums: List[int]) -\u003e int: n = len(nums) for i in range(n): while 1 \u003c= nums[i] \u003c= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1 class Solution: def firstMissingPositive(self, nums: List[int]) -\u003e int: def swap(i, j): nums[i], nums[j] = nums[j], nums[i] n = len(nums) for i in range(n): while 1 \u003c= nums[i] \u003c= n and nums[i] != nums[nums[i] - 1]: swap(i, nums[i] - 1) for i in range(n): if i + 1 != nums[i]: return i + 1 return n + 1 Cyclic Sort pattern\n","description":"41. First Missing Positive","title":"41. First Missing Positive","uri":"/en/tracks/algorithms-101/leetcode/hard/41/"},{"content":"LeetCode задача 42\nЗадача Дан массив неотрицательных целых чисел, представляющих собой карту высот, где ширина каждой стойки равна 1. Вычислите, сколько воды может удерживать этот массив после дождя.\nПодсказки Мы можем решить эту задачу, двигаясь от краев массива к его центру, отслеживая текущую максимальную высоту с обеих сторон.\nПодход Простой и понятный способ решения этой задачи - пройтись по массиву и для каждого элемента вычислить, сколько воды он может удержать.\nАлгоритм Инициализируем переменную для хранения общего объема воды, который может быть удержан. Пройдемся по массиву, для каждого элемента: Найдем максимальную высоту слева и справа от текущего элемента. Объем воды, который может быть удержан над этим элементом, равен минимальному значению из этих двух максимальных высот, минус высота самого элемента. Добавим этот объем к общему объему. Решение def trap(height): n = len(height) # Инициализируем переменную для хранения общего объема воды total_water = 0 for i in range(n): # Находим максимальную высоту слева от i max_left = max(height[:i + 1]) # Находим максимальную высоту справа от i max_right = max(height[i:]) # Объем воды для текущего элемента water = min(max_left, max_right) - height[i] # Добавляем этот объем к общему объему total_water += water return total_water ","description":"LeetCode 42. Сколько воды может удержать массив после дождя. Разбор задачи.","title":"42. Trapping Rain Water","uri":"/en/tracks/algorithms-101/leetcode/hard/42/"},{"content":"LeetCode задача 437\nЗадача Дан корень бинарного дерева и целое число targetSum. Верните количество путей, где сумма значений вдоль пути равна targetSum.\nПуть не обязан начинаться или заканчиваться на корне или листе, но он должен идти вниз (т.е. только от родительских узлов к дочерним).\nПодсказки Нам необходимо рассмотреть все возможные пути от каждого узла, идущие вниз. Это можно сделать, рекурсивно обходя дерево и считая количество путей для каждого узла.\nПодход Рассмотрим решение с применением рекурсивного обхода дерева, начиная с корня. При этом на каждом уровне рекурсии мы проверяем, есть ли путь от текущего узла, сумма которого равна targetSum.\nЧасть 1: Обновлять корневой узел на каждом уровне рекурсии\nПод текущим узлом будем иметь ввиду корневой узел (root).\nНапример, при дереве с узлами: [10,5,-3,3,2,null,11,3,-2,null,1] и targetSum=8\nИтого каждый узел будет в какой-то момент корневым узлом.\nТекущий корневой узел (root) = 10.\nМы обходим все возможные отрезки от текущего\nСверяем суммы этих отрезков с targetSum :\n([10], 8) ([10, 5], 8) ([10, 5, 3], 8) ([10, 5, 3, 3], 8) ([10, 5, 3, -2], 8) ([10, 5, 2], 8) ([10, 5, 2, 1], 8) ([10, 3], 8) ... После того как рассмотрели все возможные отрезки от текущего root=10, мы идем рассматривать все возможные отрезки от нового root.\nНовые root становятся root.left и root.right.\nТогда следующая итерация будет выглядеть следующим образом:\nТекущий корневой узел (root) = 5.\n([5], 8) ([5, 3], 8) !! нашли один отрезок ([5, 3, 3], 8) ... Часть 2: Правильный подсчет сумм от корня дерева до текущего узла\nКогда корневой узел был 10, мы должны были ничего предпринимать.\nНо когда во время рекурсии корневой узел будет на уровень меньше, например 5, функция должна понимать, что сумму текущего отрезка и всех его дочерних нужно считать от нового корня дерева, т.е. от 5, и так далее.\nНапример: текущий корень 10, а узел 3, т.е. мы должны посчитать равен ли отрезок [10,5,3] целевому числу 8.\nДля этого узел 3 должен знать значения, которые были до него.\nРешение:\nфункция с данным узлом может принимать сумму отрезка, пройденного до него после этого функция считает равна ли сумма значению до текущего узла и значение самого узла целевому числу targetSum. В данном случае [10,5,3] сумма до текущего узла равна $10+5=15$. Если $15+3 == 8$, то текущий отрезок подходит.\nАлгоритм / Абстрактный алгоритм Обходим дерево, начиная с корня дерева. Для каждого узла, проверяем существует ли путь от этого узла, сумма которого равна targetSum, перебирая все возможные дочерние пути. Рекурсивно выполняем шаги 1 и 2 для всех дочерних узлов. Решение # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def pathSum(self, root, targetSum): if not root: return 0 def dfs(node, current_path_sum): if not node: return 0 count = 0 current_path_sum += node.val if current_path_sum == targetSum: # Равна ли текущая сумма целевому значению count += 1 count += dfs(node.left, current_path_sum) # Считаем пути для левого count += dfs(node.right, current_path_sum) # и правого дочернего узла return count root_count = dfs(root, 0) # Считаем все отрезки для текущего корня дерева left_count = self.pathSum(root.left, targetSum) # новый корневой узел (левый right_count = self.pathSum(root.right, targetSum) # и правый return root_count + left_count + right_count ","description":"LeetCode 437. Найти количество всех путей в бинарном дереве, которые суммируются в определенное число. Разбор задачи.","title":"437. Path Sum III","uri":"/en/tracks/algorithms-101/leetcode/medium/437/"},{"content":"LeetCode problem 442\nThe key idea to solve this problem is to use the fact that all integers are within the range [1, n] and use the indices of the array itself to mark the occurrence of an element. When an element is seen for the first time, you mark the element at the index corresponding to that element (considering 1-based indexing). If you encounter the same element again, you will find that its corresponding index is already marked, indicating a duplicate.\nApproach Marking Strategy: Iterate over the array, and for each element nums[i], mark the element at the index abs(nums[i]) - 1 as negative if it’s not already negative. The presence of a negative value at index i indicates that i + 1 has been seen before. Identify Duplicates: While marking, if you find that the element at index abs(nums[i]) - 1 is already negative, it means abs(nums[i]) is a duplicate. Collect Duplicates: Add abs(nums[i]) to the result list when you identify a duplicate. class Solution: def findDuplicates(self, nums: List[int]) -\u003e List[int]: duplicates = [] for num in nums: if nums[abs(num) - 1] \u003c 0: duplicates.append(abs(num)) else: nums[abs(num) - 1] *= -1 return duplicates Point Marking: We use the sign of elements at specific indices to mark the presence of numbers. If an element’s corresponding index is already negative, it indicates a duplicate. Absolute Values: Always consider the absolute value of the current element when determining the index to mark, since some numbers may have already been marked negative. Duplicates List: By only adding numbers to the duplicates list when we encounter a negative mark for their corresponding index, we ensure that each duplicate is only added once. For the array [4,3,2,7,8,2,3,1], it’s like saying:\n“4 says go to house 4 and mark it.” “3 says go to house 3 and mark it.” … When “2” is encountered again, it says, “Go to house 2,” but it’s already marked, so “2” is a duplicate. Pattern Hash numbers\nCyclic Sort pattern, where elements are placed in their correct positions based on their values, allowing us to identify anomalies (like duplicates or missing numbers) through the positions of elements.\n","description":"442. Find All Duplicates in an Array","title":"442. Find All Duplicates in an Array","uri":"/en/tracks/algorithms-101/leetcode/medium/442/"},{"content":"LeetCode problem\nProblem Statement Given a list of characters, chars, you are required to compress the list using the following algorithm:\nStart with an empty string, s. For each group of consecutive repeating characters in chars: If the group’s length is 1, append the character to s. Otherwise, append the character followed by the group’s length. The compressed string s should be stored back in the chars list. The length of the group that is 10 or longer will be split into multiple characters in chars.\nAfter modifying the input list, return the new length of the list.\nNaive Solution A simple approach would be to iterate over the chars list and, for each character, start another loop that counts the number of repeated characters. This would give us both the character and its count. We can then modify the list in place with this information. However, this would involve nested loops leading to a higher time complexity.\nApproach A more efficient approach would be to use a read and write pointer technique:\nInitialize two pointers read and write at the start of the list. While read hasn’t reached the end of the list: Count how many times the character at the read pointer is consecutively repeated. Write the character and its count (if greater than 1) at the write pointer location. Steps Initialize read and write pointers to 0. While read is less than the length of chars: Store the current character. Count its consecutive repetitions and move the read pointer accordingly. Write the character at the write pointer location. If the count is greater than 1, write the count’s digits individually. Move the write pointer. Solution def compress(self, chars): read, write = 0, 0 # Continue while there are characters left to read. while read \u003c len(chars): # Store the current character. current_char = chars[read] count = 0 # for each new character group # Count consecutive repetitions of the current character. while read \u003c len(chars) and chars[read] == current_char: read += 1 count += 1 # Write the character to the current write pointer position. chars[write] = current_char write += 1 # If the character was repeated more than once, # write the count of repetitions next to it. if count \u003e 1: for digit in str(count): # Convert count to its string representation chars[write] = digit # Write each digit of the count write += 1 return write ","description":"443. String Compression","title":"443. String Compression","uri":"/en/tracks/algorithms-101/leetcode/medium/443/"},{"content":"LeetCode problem 452\nConsider sorting the balloons based on their ending coordinates and focus on how the end of one balloon overlaps with the start of another.\nThe key to solving this problem is to realize that the fewer arrows we need, the more balloons we need to overlap with each arrow. By sorting the balloons by their end points, we ensure that we are always considering the next balloon that finishes earliest. This approach minimizes the number of arrows by maximizing the overlap between balloons.\nApproach Sort the balloons by their ending coordinates. Initialize an arrow_count to 1 and record the end of the first balloon as the end of the current arrow’s range. Iterate through the sorted balloons. For each balloon: If the balloon starts after the current arrow’s end, it means a new arrow is needed. Increment arrow_count and update end to the current balloon’s end. If the balloon is within the range of the current arrow (start ≤ end), continue, as the current arrow can burst this balloon as well. Return the arrow_count. class Solution: def findMinArrowShots(self, points: List[List[int]]) -\u003e int: if not points: return 0 points.sort(key=lambda x: x[1]) # Sort the balloons by their end points arrow_count = 1 arrow_end = points[0][1] for x_start, x_end in points: # If the current balloon starts after the end of the arrow's range, # need another arrow. if x_start \u003e arrow_end: arrow_count += 1 arrow_end = x_end return arrow_count class Solution: def findMinArrowShots(self, points: List[List[int]]) -\u003e int: res = 0 last = -inf for a, b in sorted(points, key=lambda x: x[1]): if a \u003e last: res += 1 last = b return res ","description":"452. Minimum Number of Arrows to Burst Balloons","title":"452. Minimum Number of Arrows to Burst Balloons","uri":"/en/tracks/algorithms-101/leetcode/medium/452/"},{"content":"LeetCode задача 454\nЗадача Даны четыре списка A, B, C, D целых чисел. Вычислите, сколько существует таких кортежей (i, j, k, l), что ( A[i] + B[j] + C[k] + D[l] = 0 ).\nПодсказки Используйте хэш-таблицу для ускорения решения.\nПодход Создание хэш-таблицы: Сначала создайте хэш-таблицу, которая будет хранить суммы пар чисел из массивов A и B. Подсчет сумм: Для каждой пары (i, j) из A и B, увеличьте соответствующий элемент хэш-таблицы на 1. Поиск в хэш-таблице: Для каждой пары (k, l) из C и D, проверьте, существует ли -(C[k] + D[l]) в хэш-таблице. Если да, увеличьте счетчик на соответствующее значение из хэш-таблицы. Возврат результата: Верните значение счетчика. Этот метод является простым и эффективным с точки зрения времени.\nАлгоритм Инициализируйте counter = 0 и хэш-таблицу sums. Посчитайте суммы для всех пар (i, j) из A и B и сохраните их в sums. Переберите все пары (k, l) из C и D и проверьте наличие -(C[k] + D[l]) в sums. Решение from collections import defaultdict def fourSumCount(A, B, C, D): counter = 0 sums = defaultdict(int) # Считаем суммы для всех пар из A и B for i in A: for j in B: sums[i + j] += 1 # Проверяем наличие -(C[k] + D[l]) в хэш-таблице for k in C: for l in D: if -(k + l) in sums: counter += sums[-(k + l)] return counter ","description":"LeetCode 454. Четыре числа, которые суммируются в ноль. Разбор задачи.","title":"454. 4Sum II","uri":"/en/tracks/algorithms-101/leetcode/medium/454/"},{"content":"LeetCode problem\nGiven an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\nExample 1:\nInput: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] Example 2:\nInput: nums = [0,1] Output: [[0,1],[1,0]] Example 3:\nInput: nums = [1] Output: [[1]] Idea:\nDraw a decigion tree Fix when branch is ready to return Implementation:\nRecursive: Go through every value in nums Pop value call perm() with updated nums from each call(step) append ‘poped’ value from step 2 class Solution: def permute(self, nums: List[int]) -\u003e List[List[int]]: result_permutation = [] if len(nums) == 1: # base case return [nums[:]] for _ in nums: tmp_removed = nums.pop(0) # remove current element before next step permutations = self.permute(nums) for perm in permutations: perm.append(tmp_removed) nums.append(tmp_removed) result_permutation.extend(permutations) return result_permutation Resources https://www.youtube.com/watch?v=s7AvT7cGdSo https://walkccc.me/LeetCode/problems/0046/ ","description":"LeetCode 46. Permutations","title":"46. Permutations","uri":"/en/tracks/algorithms-101/leetcode/medium/46/"},{"content":"LeetCode problem 48\nYou are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\nExample 1:\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [[7,4,1],[8,5,2],[9,6,3]] Example 2:\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] Idea class Solution: def rotate(self, matrix: List[List[int]]) -\u003e None: \"\"\" Do not return anything, modify matrix in-place instead. \"\"\" l = 0 r = len(matrix) - 1 while l \u003c r: for i in range(r-l): # for not only \"corners\" t = l b = r top_left = matrix[t][l + i] matrix[t][l + i] = matrix[b - i][l] # top left=bottom left matrix[b - i][l] = matrix[b][r - i] # bottom left=bottom right matrix[b][r - i] = matrix[t+i][r] # bottom right=top right matrix[t + i][r] = top_left # top right=top left l += 1 r -= 1 Approach 2: Reverse class Solution: def rotate(self, matrix: List[List[int]]) -\u003e None: matrix.reverse() for i in range(len(matrix)): for j in range(i + 1, len(matrix)): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] Resources https://www.youtube.com/watch?v=fMSJSS7eO1w https://walkccc.me/LeetCode/problems/0048/ ","description":"LeetCode 48. Rotate Image","title":"48. Rotate Image","uri":"/en/tracks/algorithms-101/leetcode/medium/48/"},{"content":"LeetCode problem\nGiven an array of strings strs, group the anagrams together. You can return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\nExample 1:\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"] Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]] Example 2:\nInput: strs = [\"\"] Output: [[\"\"]] Example 3:\nInput: strs = [\"a\"] Output: [[\"a\"]] Idea:\nclass Solution: def groupAnagrams(self, strs: List[str]) -\u003e List[List[str]]: dd = {} for s in strs: s_sort = \"\".join(sorted(s)) values = dd.get(s_sort, []) values.append(s) dd[s_sort] = values return dd.values() Approach 2:\nIntuition:\nTwo strings are anagrams if and only if their character counts (respective number of occurrences of each character) are the same.\nAlgorithm:\nWe can transform each string s into a character count, count\\text{count}count, consisting of 26 non-negative integers representing the number of a’s, b’s, z’s, etc. We use these counts as the basis for our hash map.\nIn python, the representation will be a tuple of the counts. For example, abbccc will be (1, 2, 3, 0, 0, ..., 0), where again there are 26 entries total.\nclass Solution: def groupAnagrams(strs): res = collections.defaultdict(list) for s in strs: count = [0] * 26 for c in s: count[ord(c) - ord('a')] += 1 res[tuple(count)].append(s) return res.values() Resources LeetCode expl ","description":"LeetCode 49. Group Anagrams","title":"49. Group Anagrams","uri":"/en/tracks/algorithms-101/leetcode/medium/49/"},{"content":"LeetCode problem\nGiven a string s, return the longest palindromic substring in s.\nA string is called a palindrome string if the reverse of that string is the same as the original string.\nExample 1:\nInput: s = \"babad\" Output: \"bab\" Explanation: \"aba\" is also a valid answer. Example 2:\nInput: s = \"cbbd\" Output: \"bb\" First accepted Hints How can we reuse a previously computed palindrome to compute a larger palindrome?\nHow can we reuse a previously computed palindrome to compute a larger palindrome?\nComplexity based hint: If we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation.\nIdea:\nWe start at index = 0 and iterate through all values until n. At each index we call the function getPalindrome that will check the values to the left and right of the provided indices. It will continue to do so until the longest palindrome within the given range is found.\nLink to diagram\nclass Solution: def longestPalindrome(self, s: str) -\u003e str: def getPalindrome(left, right): while(left \u003e= 0 and right \u003c len(s) and s[left] == s[right]): left -= 1 right += 1 return left+1, right-1 pal_left = 0 pal_right = 0 len_max = 1 for i in range(len(s)): left, right = getPalindrome(i, i) pal_len= right - left + 1 if pal_len \u003e len_max: pal_left = left pal_right = right len_max = pal_len left, right = getPalindrome(i, i+1) pal_len = right - left + 1 if pal_len \u003e len_max: pal_left = left pal_right = right len_max = pal_len return s[pal_left:pal_right+1] Better solution Manacher’s algorithm There is an O(n) algorithm called Manacher’s algorithm.\nclass Solution: def longestPalindrome(self, s: str) -\u003e str: # @ and $ signs are sentinels appended to each end to avoid bounds checking t = '#'.join('@' + s + '$') n = len(t) # t[i - maxExtends[i]..i) == # t[i + 1..i + maxExtends[i]] maxExtends = [0] * n center = 0 for i in range(1, n - 1): rightBoundary = center + maxExtends[center] mirrorIndex = center - (i - center) maxExtends[i] = rightBoundary \u003e i and \\ min(rightBoundary - i, maxExtends[mirrorIndex]) # Attempt to expand palindrome centered at i while t[i + 1 + maxExtends[i]] == t[i - 1 - maxExtends[i]]: maxExtends[i] += 1 # If palindrome centered at i expand past rightBoundary, # adjust center based on expanded palindrome. if i + maxExtends[i] \u003e rightBoundary: center = i # Find the maxExtend and bestCenter maxExtend, bestCenter = max((extend, i) for i, extend in enumerate(maxExtends)) return s[(bestCenter - maxExtend) // 2:(bestCenter + maxExtend) // 2] Resources Manacher’s algorithm Errichto:LeetCode problem Longest Palindromic Substring (two solutions) https://redquark.org/leetcode/0005-longest-palindromic-substring/ RU\nРазбор задачи с интервью. Литкод 5. Longest Palindromic Substring Алгоритмика: Алгоритм Манакера Википедия:Алгоритм Манакера ","description":"LeetCode 5. Longest Palindromic Substring | Python solution and explanation","title":"5. Longest Palindromic Substring","uri":"/en/tracks/algorithms-101/leetcode/medium/5/"},{"content":"LeetCode problem\nImplement pow(x, n), which calculates x raised to the power n (i.e., x^n).\nExample 1:\nInput: x = 2.00000, n = 10 Output: 1024.00000 Example 2:\nInput: x = 2.10000, n = 3 Output: 9.26100 Example 3:\nInput: x = 2.00000, n = -2 Output: 0.25000 Explanation: 2-2 = 1/22 = 1/4 = 0.25 Approach 1:\nclass Solution: def myPow(self, x: float, n: int) -\u003e float: return x ** n Approach 2:\nRecursive\nclass Solution: def myPow(self, x, n): if not n: return 1 if n \u003c 0: return 1 / self.myPow(x, -n) if n % 2: return x * self.myPow(x, n-1) return self.myPow(x * x, n/2) Approach 3:\nclass Solution: def myPow(self, x, n): if n \u003c 0: x = 1 / x n = -n pow = 1 while n: if n \u0026 1: pow *= x x *= x n \u003e\u003e= 1 return pow ","description":"LeetCode 50. Pow(x, n)","title":"50. Pow(x, n)","uri":"/en/tracks/algorithms-101/leetcode/medium/50/"},{"content":"LeetCode problem\nGiven an integer array nums, find the subarray which has the largest sum and return its sum.\nExample 1:\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Example 2:\nInput: nums = [1] Output: 1 Example 3:\nInput: nums = [5,4,-1,7,8] Output: 23 Approach 1:\nclass Solution: def maxSubArray(self, nums: List[int]) -\u003e int: max_ = nums[0] max2 = nums[0] if len(nums) == 1: return max_ for i in range(1, len(nums)): max_ = max(nums[i], nums[i] + max_) max2 = max(max_, max2) return max2 ","description":"LeetCode 53. Maximum Subarray","title":"53. Maximum Subarray","uri":"/en/tracks/algorithms-101/leetcode/medium/53/"},{"content":"LeetCode problem\nYou are given an integer array nums. You are initially positioned at the array’s first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.\nExample 1:\nInput: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2:\nInput: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. Approach 1:\nIdea: go forward on each step and mark next cell if can achieve it.\nclass Solution: def canJump(self, nums: List[int]) -\u003e bool: last_i = len(nums) if last_i == 1: return True nn = [0] * last_i nn[0] = nums[0] for i in range(last_i): el = nums[i] if el or nn[i+1]: for j in range(el): nn[i+j+1] = el if nn[last_i - 1]: return True else: return False return False Approach 2:\nGoing forwards. m tells the maximum index we can reach so far.\nclass Solution: def canJump(self, nums): m = 0 for i, n in enumerate(nums): if i \u003e m: return False m = max(m, i + n) return True class Solution: def canJump(self, nums: List[int]) -\u003e bool: i = 0 m = 0 while i \u003c len(nums) and i \u003c= m: m = max(m, i + nums[i]) i += 1 return i == len(nums) ","description":"LeetCode 55. Jump Game","title":"55. Jump Game","uri":"/en/tracks/algorithms-101/leetcode/medium/55/"},{"content":"LeetCode problem\nGiven an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\nExample 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. Example 2:\nInput: intervals = [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping. Approach 1:\nclass Solution: def merge(self, intervals: List[List[int]]) -\u003e List[List[int]]: intervals.sort() res = [intervals[0]] for ir in range(1, len(intervals)): if intervals[ir][0] \u003e= res[-1][0] and intervals[ir][0] \u003c= res[-1][1]: # [1,3],[2,6] res[-1][0] = min(intervals[ir][0], res[-1][0]) res[-1][1] = max(intervals[ir][1], res[-1][1]) elif res[-1][0] \u003e= intervals[ir][0] and res[-1][0] \u003c= intervals[ir][1]: # [1,3],[0,4] res[-1][0] = min(intervals[ir][0], res[-1][0]) res[-1][1] = max(intervals[ir][1], res[-1][1]) else: res.append(intervals[ir]) return res Approach 2:\nclass Solution: def merge(self, intervals: List[List[int]]) -\u003e List[List[int]]: res = [] for interval in sorted(intervals): if not res or res[-1][1] \u003c interval[0]: res.append(interval) else: res[-1][1] = max(res[-1][1], interval[1]) return res ","description":"LeetCode 56. Merge Intervals","title":"56. Merge Intervals","uri":"/en/tracks/algorithms-101/leetcode/medium/56/"},{"content":"LeetCode problem 57\nclass Solution: def insert(self, intervals: List[List[int]], newInterval: List[int]) -\u003e List[List[int]]: res = [] i = -1 for i, (x, y) in enumerate(intervals): if y \u003c newInterval[0]: res.append([x, y]) elif newInterval[1] \u003c x: i -= 1 break else: newInterval[0] = min(newInterval[0], x) newInterval[1] = max(newInterval[1], y) return res + [newInterval] + intervals[i+1:] ","description":"57. Insert Interval","title":"57. Insert Interval","uri":"/en/tracks/algorithms-101/leetcode/medium/57/"},{"content":"LeetCode problem 58\nclass Solution: def lengthOfLastWord(self, s: str) -\u003e int: i = len(s) - 1 while i \u003e= 0 and s[i] == ' ': i -= 1 j = i while j \u003e= 0 and s[j] != ' ': j -= 1 return i - j class Solution: def lengthOfLastWord(self, s: str) -\u003e int: ar = s.split() return len(ar[-1]) ","description":"58. Length of Last Word","title":"58. Length of Last Word","uri":"/en/tracks/algorithms-101/leetcode/easy/58/"},{"content":"LeetCode problem 605\nIn this problem, we are given a flowerbed represented by an integer array flowerbed, where 0 represents an empty plot and 1 represents a plot with a flower.\nWe need to determine if we can plant n new flowers in the flowerbed without violating the rule that no two adjacent plots can have flowers.\nNaive Solution To solve this problem, we can use a greedy approach. We iterate through the flowerbed and check each plot. If a plot is empty and its adjacent plots are also empty, we can plant a flower in that plot.\nWe repeat this process until we have planted all n flowers or we have checked all plots in the flowerbed.\nApproach To solve this problem, we will define a helper function check_neighbors that checks if a plot can be planted with a flower and updates the flowerbed and n accordingly.\nSteps Initialize a variable i to iterate through the flowerbed. For each plot in the flowerbed: 2.1. If the current plot is empty and its previous plot is also empty (i.e., flowerbed[i-1] == 0), call the check_neighbors function. 2.2. Otherwise, if the current plot is empty and its next plot is also empty (i.e., flowerbed[i+1] == 0), call the check_neighbors function. Return True if n is less than or equal to 0 (i.e., all flowers have been planted), otherwise return False. Solution def canPlaceFlowers(flowerbed, n): def check_neighbors(n): if i \u003c len(flowerbed) - 1: if flowerbed[i+1] == 0: flowerbed[i] = 1 n -= 1 else: flowerbed[i] = 1 n -= 1 return n for i in range(len(flowerbed)): if flowerbed[i] == 0: if i \u003e 0: if flowerbed[i-1] == 0: n = check_neighbors(n) else: n = check_neighbors(n) return n \u003c= 0 ","description":"An easy yet interesting problem in which we must determine whether we can plant a certain number of flowers in a flowerbed without violating the no-adjacent-flowers rule.","title":"605. Can Place Flowers","uri":"/en/tracks/algorithms-101/leetcode/easy/605/"},{"content":"LeetCode problem\nThere is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 10^9.\nExample 1:\nInput: m = 3, n = 7 Output: 28 Example 2:\nInput: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -\u003e Down -\u003e Down 2. Down -\u003e Down -\u003e Right 3. Down -\u003e Right -\u003e Down Approach 1:\nLeetCode Submission\nclass Solution: def uniquePaths(self, m: int, n: int) -\u003e int: if m == 1 or n == 1: return 1 matrix = [ [1 for j in range(n)] for i in range(m)] for i in range(1, m): for j in range(1, n): max_above = 0 max_left = 1 if i \u003e 0: max_above = matrix[i-1][j] if j \u003e 0: max_left = matrix[i][j-1] matrix[i][j] = max_above + max_left m = matrix[i][j] return m class Solution: def uniquePaths(self, m: int, n: int) -\u003e int: matrix = [[1] * n for _ in range(m)] for i in range(1, m): for j in range(1, n): matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1] return matrix[-1][-1] ","description":"LeetCode 62. Unique Paths","title":"62. Unique Paths","uri":"/en/tracks/algorithms-101/leetcode/medium/62/"},{"content":"LeetCode problem 621\nIdea Think about how you can arrange the tasks with the highest frequency to minimize the idle times.\nThe key to solving this problem is to focus on how to efficiently arrange tasks with the highest frequency. We can calculate the frequency of each task and start scheduling the most frequent tasks first, inserting idle slots if needed. The maximum number of idle slots is determined by the frequency of the most frequent task.\nApproach\nApproach Count Frequencies: Calculate the frequency of each task. Max Frequency Task: Identify the task with the maximum frequency. This task will dictate the minimum time required to complete all tasks considering the cooling period. Calculate Idle Slots: Calculate the number of idle slots needed by subtracting the number of tasks from the maximum slots needed. Reduce Idle Slots: Iterate over the frequencies of tasks to reduce the number of idle slots by placing other tasks in these slots. Calculate Total Time: The total time required is the sum of all tasks and any remaining idle slots. Solution from collections import Counter class Solution: def leastInterval(self, tasks: List[str], n: int) -\u003e int: task_counts = Counter(tasks) max_freq = max(task_counts.values()) max_freq_tasks = sum(freq == max_freq for freq in task_counts.values()) part_count = max_freq - 1 part_length = n - (max_freq_tasks - 1) empty_slots = part_count * part_length available_tasks = len(tasks) - max_freq * max_freq_tasks idles = max(0, empty_slots - available_tasks) return len(tasks) + idles ","description":"LeetCode 621. Task Scheduler. Python Solution","title":"621. Task Scheduler","uri":"/en/tracks/algorithms-101/leetcode/medium/621/"},{"content":"LeetCode problem 623\nUse a breadth-first traversal to reach the specific depth, then insert the new nodes. Consider special handling for adding a new root.\nTo insert a new row, traverse the tree to the specified depth, then adjust the parent-child relationships to include the new nodes. If inserting at depth 1, modify the root directly. Otherwise, modify the children of the nodes at depth d-1.\nApproach If depth is 1, create a new root and assign the original root as its left child. Use a breadth-first search (BFS) to reach level depth-1: Use a queue to hold nodes and their current depth. For each node at depth d-1, insert new nodes as its left and right children. Adjust pointers to connect the new nodes with the subtree of their new children. # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def addOneRow(root, val, depth): if depth == 1: newNode = TreeNode(val) newNode.left = root return newNode queue = [(root, 1)] while queue: current, current_depth = queue.pop(0) if current_depth == depth - 1: left_child = TreeNode(val, left=current.left, right=None) right_child = TreeNode(val, left=None, right=current.right) current.left = left_child current.right = right_child else: if current.left: queue.append((current.left, current_depth + 1)) if current.right: queue.append((current.right, current_depth + 1)) return root class Solution: def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -\u003e Optional[TreeNode]: if depth == 1: return TreeNode(val, root) q = deque([root]) i = 0 while q: i += 1 for _ in range(len(q)): node = q.popleft() if node.left: q.append(node.left) if node.right: q.append(node.right) if i == depth - 1: node.left = TreeNode(val, node.left, None) node.right = TreeNode(val, None, node.right) return root ","description":"623. Add One Row to Tree","title":"623. Add One Row to Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/623/"},{"content":"LeetCode problem\nProblem Statement Given an integer array nums consisting of n elements and an integer k, find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. The result must be accurate up to a decimal point of 10^(-5).\nNaive Solution A straightforward approach would be to calculate the average for every possible subarray of length k. For each starting point, sum the next k numbers and determine the average. This will take O(n*k) time which is not efficient for large values of n and k.\nHints \u0026 Tips One way to improve the naive solution is by observing the overlapping computations. As we move from one subarray to the next, we are recalculating the sum for mostly the same numbers except for the first and the last numbers. This observation points towards the sliding window technique which can be very efficient for such problems.\nApproach We use the sliding window technique. The idea is to maintain a window of size k and slide it across the array. The sliding window technique is particularly useful in problems where the array input and the window size remain static, but the starting point of the sliding window moves.\nSteps Calculate the sum of the first k numbers. Slide the window by one position at a time. For every slide, subtract the number that is left behind and add the new number that comes into the window. This will give the sum for the next window of k numbers. Keep track of the maximum sum as we slide the window. Solution def findMaxAverage(nums, k): # Calculate the sum of the first k numbers window_sum = sum(nums[:k]) max_sum = window_sum for i in range(len(nums) - k): window_sum = window_sum - nums[i] + nums[i+k] max_sum = max(max_sum, window_sum) return max_sum / k ","description":"An in-depth understanding of the problem 643. Maximum Average Subarray I from LeetCode and its solution.","title":"643. Maximum Average Subarray I","uri":"/en/tracks/algorithms-101/leetcode/easy/643/"},{"content":"LeetCode problem 649\nIdea Think about how the bans affect the sequence of senators and how you can simulate the rounds efficiently.\nThe core idea is to simulate the banning process round by round, keeping track of which senators are available to ban others. A queue can efficiently manage this process. Radiant senators and Dire senators can be handled separately to easily manage the bans they are going to perform.\nApproach Use two queues to represent the indices of Radiant and Dire senators, respectively. Iterate through the initial string, adding the index of each senator to their respective party’s queue. While both parties have members left, simulate each round of bans. Compare the front of each queue: The senator with the lower index (i.e., gets to act first) bans the other. Remove the banned senator’s index from their queue. The senator that performed the ban gets re-added to the end of their queue with an index adjusted to simulate the circular arrangement. Continue until one of the queues is empty, declaring the party with remaining senators as the winner. Solution from collections import deque def predictPartyVictory(senate: str) -\u003e str: radiant = deque() dire = deque() for i, s in enumerate(senate): if s == 'R': radiant.append(i) else: dire.append(i) n = len(senate) while radiant and dire: r = radiant.popleft() d = dire.popleft() if r \u003c d: radiant.append(r + n) else: dire.append(d + n) return \"Radiant\" if radiant else \"Dire\" ","description":"LeetCode 649. Python Solution Dota2 Senate.","title":"649. Dota2 Senate","uri":"/en/tracks/algorithms-101/leetcode/medium/649/"},{"content":"LeetCode problem\nYou are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0’s.\nIncrement the large integer by one and return the resulting array of digits.\nExample 1:\nInput: digits = [1,2,3] Output: [1,2,4] Explanation: The array represents the integer 123. Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4]. Example 2:\nInput: digits = [4,3,2,1] Output: [4,3,2,2] Explanation: The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322. Thus, the result should be [4,3,2,2]. First accepted class Solution: def plusOne(self, digits: List[int]) -\u003e List[int]: i = len(digits) - 1 while i \u003e= 0 and digits[i] == 9: digits[i] = 0 i -= 1 if i \u003c 0: return [1] + digits digits[i] = digits[i] + 1 return digits ","description":"LeetCode 66. Plus One","title":"66. Plus One","uri":"/en/tracks/algorithms-101/leetcode/easy/66/"},{"content":"LeetCode problem\nGiven a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\nFor example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\nExample 1:\nInput: x = 4 Output: 2 Explanation: The square root of 4 is 2, so we return 2. Example 2:\nInput: x = 8 Output: 2 Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned. First accepted class Solution: def mySqrt(self, x: int, div=2) -\u003e int: s = x // div s1 = (s + div) // 2 if s1 * s1 \u003e x: s1 = self.mySqrt(x, s1) return s1 else: return s1 ","description":"LeetCode 69. Sqrt(x)","title":"69. Sqrt(x)","uri":"/en/tracks/algorithms-101/leetcode/easy/69/"},{"content":"LeetCode problem\nGiven a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\nExample 1:\nInput: x = 123 Output: 321\nExample 2:\nInput: x = -123 Output: -321\nExample 3:\nInput: x = 120 Output: 21\nFirst accepted Idea:\nConvert number to int Remove minus if exist (or convert module of number) reverse class Solution: def reverse(self, x: int) -\u003e int: reversed_int = [] str_int = str(x) if x \u003c 0: str_int = str_int[1:] for i in reversed(range(len(str_int))): reversed_int.append(str_int[i]) res = int(''.join(reversed_int)) if x \u003c 0: res = -res return res if (res \u003e= -2147483648 and res \u003c= 2147483647) else 0 Better solution class Solution: def reverse(self, x: int) -\u003e int: s = str(abs(x)) rev = int(s[::-1]) if rev \u003e 2147483647: return 0 return rev if x \u003e 0 else (rev * -1) ","description":"LeetCode 7. Reverse Integer","title":"7. Reverse Integer","uri":"/en/tracks/algorithms-101/leetcode/medium/7/"},{"content":"LeetCode problem\nYou are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nExample 1:\nInput: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Example 2:\nInput: n = 3 Output: 3 Explanation: There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step First accepted Idea:\nTried to calculate by hand. There is a sequence Fibonacci here\nclass Solution: def climbStairs(self, n: int) -\u003e int: if n == 1: return 1 if n == 2: return 2 prev1 = 1 prev2 = 2 current = 2 while n \u003e 2: current = prev1 + prev2 prev1 = prev2 prev2 = current n -= 1 return current ","description":"LeetCode 70. Climbing Stairs","title":"70. Climbing Stairs","uri":"/en/tracks/algorithms-101/leetcode/easy/70/"},{"content":"LeetCode problem 713\nclass Solution: def numSubarrayProductLessThanK(self, nums: List[int], k: int) -\u003e int: res, s, j = 0, 1, 0 for i, v in enumerate(nums): s *= v while j \u003c= i and s \u003e= k: s //= nums[j] j += 1 res += i - j + 1 return res ","description":"713. Subarray Product Less Than K","title":"713. Subarray Product Less Than K","uri":"/en/tracks/algorithms-101/leetcode/medium/713/"},{"content":"LeetCode problem\nProblem Statement Given an array of integers nums, the task is to calculate the pivot index of this array. The pivot index is defined as the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index’s right. If no such index exists, return -1.\nNaive Solution A naive approach would be to iterate over each index and for each index, calculate the sum of elements to the left and right of the index. If the sums are equal, return the index. However, this approach has a time complexity of O(n^2) which makes it inefficient for larger inputs.\nHints \u0026 Tips A more optimized solution would use the prefix and suffix sum concept. Prefix sum is the sum of all elements to the left of the index, and suffix sum is the sum of all elements to the right of the index. We can calculate these sums in O(n) time and use them to find the pivot index.\nApproach We will calculate the total sum of the array first.\nThen, we will initialize a variable left_sum to keep track of the sum of elements to the left of the current index.\nAs we iterate over each index, we will update the total sum by subtracting the current element, which will give us the right sum. We will then check if left_sum is equal to the right sum (total sum - left_sum - current element).\nIf they are equal, we return the index.\nAfter checking, we will update the left_sum by adding the current element.\nSteps Calculate the total sum of the array. Initialize a variable left_sum to 0. Iterate over each index in the array. Update the total sum by subtracting the current element. Check if left_sum is equal to the right sum (total sum - left_sum - current element). If true, return the index. Update the left_sum by adding the current element. If no pivot index is found, return -1. Solution def pivotIndex(nums): total_sum = sum(nums) left_sum = 0 for i, num in enumerate(nums): total_sum -= num if left_sum == total_sum: return i left_sum += num return -1 ","description":"724. Find Pivot Index","title":"724. Find Pivot Index","uri":"/en/tracks/algorithms-101/leetcode/easy/724/"},{"content":"LeetCode problem 725\nProblem Statement The problem asks you to divide a given singly linked list into k different parts such that the sizes of these parts are as nearly equal as possible. The parts should appear in the same order as in the original list, and earlier parts should not be smaller than later parts.\nNaive Solution A naive approach would involve counting the length of the list and then traversing the list multiple times to create each part. While this would solve the problem, it isn’t the most efficient way.\nHints \u0026 Tips You can use pointers and mathematical calculations to accomplish the task in a more efficient manner.\nApproach To solve this problem, you first need to calculate the length of the original list. Once you have the length, you can divide it by k to find the “base size” of each part. The remainder of the division will help you distribute the “extra” nodes among the first few parts.\nSteps Count the total number of nodes in the list. Call it n. Calculate the base length of each part as batch_len = n // k and find the number of “extra nodes” as extra_nodes = n % k. Initialize an array arr to store the head node of each part. Loop through k times to create k parts. Use the base length and distribute the extra nodes as you go. Debugging Step-by-Step Start with current = head. Loop from 1 to k: Store current as the head of the new part. Traverse the list for batch_len nodes. If extra_nodes \u003e 0, traverse one more node and decrement extra_nodes. Cut the list to start a new part and store the old part in arr. Solution # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def splitListToParts(self, head: Optional[ListNode], k: int) -\u003e List[Optional[ListNode]]: # get linked list length n = 0 current = head while current: n += 1 current = current.next # get batch length batch_len = n // k extra_nodes = n % k # generate k batches arr = [] current = head for _ in range(k): batch = current # define head of current batch extra_one = 1 if extra_nodes \u003e 0 else 0 for i in range(batch_len + extra_one -1): if current: current = current.next if current: # switch, cut current batch, get head of next batch next_batch = current.next current.next = None # cut current batch from next current = next_batch arr.append(batch) extra_nodes -= 1 return arr ","description":"Detailed explanation for solving the LeetCode 725. Split Linked List in Parts problem.","title":"725. Split Linked List in Parts","uri":"/en/tracks/algorithms-101/leetcode/medium/725/"},{"content":"LeetCode problem\nGiven an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0’s.\nYou must do it in place.\nExample 1:\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]] Output: [[1,0,1],[0,0,0],[1,0,1]] Example 2:\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]] Approach 1:\nIdea:\nLeetCode Submission\nclass Solution: def setZeroes(self, matrix: List[List[int]]) -\u003e None: rows = len(matrix) cols = len(matrix[0]) # 1. Check first row/column for zero's first_row_has_zero = 0 in matrix[0] first_col_has_zero = 0 in list(zip(*matrix))[0] # 2. Check other cells in `matrix` and save info in the 1st row/col if cell has zero's for i in range(1, rows): for j in range(1, cols): if matrix[i][j] == 0: matrix[0][j] = 0 # 1st row matrix[i][0] = 0 # 1st col # 3. Loop again through first row/column and overwrite cells according to the data from 1st row/column # except the 1st row/col for i in range(1, rows): for j in range(1, cols): if matrix[0][j] == 0 or matrix[i][0] == 0: matrix[i][j] = 0 # Fill 0s for the 1st row if needed if first_row_has_zero: matrix[0] = [0] * cols # Fill 0s for the 1st col if needed if first_col_has_zero: for row in matrix: row[0] = 0 ","description":"LeetCode 73. Set Matrix Zeroes","title":"73. Set Matrix Zeroes","uri":"/en/tracks/algorithms-101/leetcode/medium/73/"},{"content":"LeetCode problem\nProblem Statement Imagine a row of asteroids moving in space. Each asteroid has a size (given by its absolute value) and a direction it’s moving in (given by its sign: positive for right, negative for left). All asteroids move at the same speed. Your task is to determine the final state of the asteroids after all collisions have been resolved.\nTwo important points to note:\nWhen two asteroids of different directions meet, the smaller one explodes. If they are of the same size, both explode. Two asteroids moving in the same direction will never meet and thus, never explode each other. Naive Solution One straightforward approach would be to iterate through the array repeatedly. During each iteration, whenever you find two consecutive asteroids moving towards each other (i.e., a positive value followed by a negative value), remove the smaller one (or both if they are of the same size). Keep iterating until no such pairs are found. However, this approach can be very inefficient, especially for larger arrays.\nHints \u0026 Tips To solve this problem more efficiently, consider using a data structure that allows us to easily handle the asteroids in the order they are encountered, but can also backtrack when necessary. This hints at using a stack.\nApproach Use a stack to simulate the asteroid collisions:\nTraverse the list of asteroids. If the asteroid is moving right (positive value), push it onto the stack. If the asteroid is moving left (negative value), then: While the top of the stack is positive and less than the absolute value of the current asteroid, pop elements from the stack (indicating that the asteroids have collided and exploded). If the stack is empty or the top is negative, push the current asteroid onto the stack. If the top of the stack is a positive number greater than the absolute value of the current asteroid, just ignore the current asteroid (it has exploded). If the top of the stack has the same value as the absolute value of the current asteroid, pop the top (both asteroids have exploded). Steps Initialize an empty stack. Traverse the asteroid array. For each asteroid: If it’s positive, push it onto the stack. If it’s negative: While the stack isn’t empty and the top of the stack is positive and less than the absolute value of the current asteroid, pop the stack. If the stack is empty or the top is negative, push the current asteroid. If the top of the stack is positive and has the same value as the absolute value of the current asteroid, pop the stack and continue. Solution def asteroidCollision(asteroids): stack = [] for asteroid in asteroids: if asteroid \u003e 0: stack.append(asteroid) else: while stack and stack[-1] \u003e 0 and stack[-1] \u003c -asteroid: stack.pop() if not stack or stack[-1] \u003c 0: stack.append(asteroid) elif stack[-1] == -asteroid: stack.pop() return stack ","description":"A detailed guide to understanding and solving the \"Asteroid Collision\" problem from LeetCode.","title":"735. Asteroid Collision","uri":"/en/tracks/algorithms-101/leetcode/medium/735/"},{"content":"LeetCode problem\nThis problem is also known as the Dutch National Flag problem. One solution is to use three pointers to partition the array into three sections: red, white, and blue.\nHere’s the algorithm:\nInitialize three pointers: left, mid, and right. Initialize left to 0, mid to 0, and right to n-1, where n is the length of the input array. While mid is less than or equal to right: If nums[mid] is 0, swap nums[mid] with nums[left], increment mid and left. If nums[mid] is 1, increment mid. If nums[mid] is 2, swap nums[mid] with nums[right], decrement right. Return the sorted array. class Solution: def sortColors(self, nums: List[int]) -\u003e None: \"\"\" Do not return anything, modify nums in-place instead. \"\"\" l, m, r = 0, 0, len(nums) - 1 while m \u003c= r: if nums[m] == 0: nums[m], nums[l] = nums[l], nums[m] l += 1 m += 1 elif nums[m] == 1: m += 1 else: nums[m], nums[r] = nums[r], nums[m] r -= 1 ","description":"LeetCode 75. Sort Colors","title":"75. Sort Colors","uri":"/en/tracks/algorithms-101/leetcode/medium/75/"},{"content":"LeetCode problem\nIn this solution, we start with an empty list in the results array.\nFor each element in the nums array, we append that element to all of the subsets in the results array to create new subsets, and then add these new subsets to the results array.\nBy doing this for all elements in nums, we generate all possible subsets.\nclass Solution: def subsets(self, nums: List[int]) -\u003e List[List[int]]: res = [[]] for i in nums: for j in range(len(res)): cur = [] cur.append(i) cur.extend(res[j]) res.append(cur) return res Approach 2:\nclass Solution: def subsets(self, nums: List[int]) -\u003e List[List[int]]: res = [] def dfs(start: int, path: List[int]) -\u003e None: res.append(path) for i in range(start, len(nums)): dfs(i + 1, path + [nums[i]]) dfs(0, []) return res This is a recursive solution that uses a depth-first search (DFS) approach to generate all possible subsets of the input list nums. The function takes two parameters start and path, where\nstart represents the starting index of the current subset path represents the current subset being constructed. The base case of the recursion is when start is greater than or equal to the length of nums, at which point the current path is added to the final result res.\nFor each recursive call, the function iterates through the remaining elements of nums starting at index start, and appends each element to the path list. Then, the function recursively calls itself with the next index i+1 as the new starting point for the next subset, and the updated path list.\nAs the recursion returns, each subset is added to the res list, and the path list is updated by removing the last element that was added in the previous recursive call.\nFinally, the function is initialized with an empty path list and a starting index start of 0, and the final res list is returned after all subsets have been generated.\nLeetCode Editorial:\nEditorial\nApproach 1: Cascading\nApproach 2: Backtracking Approach 3: Lexicographic (Binary Sorted) Subsets ","description":"LeetCode 78. Subsets","title":"78. Subsets","uri":"/en/tracks/algorithms-101/leetcode/medium/78/"},{"content":"LeetCode problem 791\nclass Solution: def customSortString(self, order: str, s: str) -\u003e str: cnt = Counter(s) res = [] for c in order: res.append(c * cnt[c]) cnt[c] = 0 for c, v in cnt.items(): res.append(c * v) return ''.join(res) ","description":"791. Custom Sort String","title":"791. Custom Sort String","uri":"/en/tracks/algorithms-101/leetcode/medium/791/"},{"content":"LeetCode problem 799\nProblem Statement You are tasked with modeling a champagne tower. Glasses are stacked in a pyramid, with each row having one more glass than the previous. When champagne is poured into the top glass and it overflows, the overflowed champagne is split equally between the two glasses below. The objective is to determine how full a specified glass will be after pouring a given amount of champagne.\nNaive Solution One could imagine a simulation, where we pour champagne into the top glass and then, glass-by-glass, simulate the overflow until we reach the desired glass. This approach, though conceptually simple, is computationally expensive and will not scale efficiently.\nHints \u0026 Tips Utilizing a Dynamic Programming approach allows for efficient computation. The key realization is that each glass only receives overflow from the glass directly above and the glass above and to the left. Therefore, by working row-by-row, we can calculate the overflow for each glass efficiently.\nApproach To solve this problem efficiently, we can use a bottom-up dynamic programming approach. Imagine you’re looking at the champagne tower from the top. Each glass receives champagne from the one(s) above it. The relationship between glasses can be broken down as follows:\nParent-Child Relationship: Each glass has a direct influence on the two glasses directly below it (child glasses). If a glass has an excess amount of champagne, it distributes this excess equally to its two child glasses.\nCalculating Overflow: For any glass (starting from top), if the amount of champagne in it exceeds its capacity (which is 1 unit), then the overflow is given by (amount - 1) / 2. This is because each glass can hold up to 1 unit of champagne, and any excess will be split equally between its two child glasses.\nPropagation: We start our simulation from the top of the tower. After pouring the champagne into the top glass, we calculate its overflow and propagate this overflow to its child glasses. We continue this process row by row until we have processed the entire tower or until we have processed up to the row of our query. This propagation ensures that every glass in the tower has the correct amount of champagne accounting for all the overflow from the glasses above it.\nEfficiency: By using a 2D array to simulate the tower and processing each glass only once, we can calculate the amount of champagne in the queried glass in an efficient manner. This avoids the need for complex simulations or recursive calculations.\nSteps Initialize the Tower: Create a 2D array representing the glasses. Pour the given amount into the top glass: [[poured], [0,0], [0,0,0], ...] Simulate the Pour: For each glass, calculate how much overflows, and distribute this overflow to the glasses below. Return the Result: After completing the simulation, return the amount in the specified glass. If it’s more than 1 (the capacity of a glass), return 1. Solution def champagneTower(poured, query_row, query_glass): tower = [[0] * k for k in range(1, query_row + 3)] # query_row + 3 for children update tower[0][0] = poured for row in range(query_row + 1): for col in range(row + 1): overflow = (tower[row][col] - 1.0) / 2.0 if overflow \u003e 0: # update children tower[row + 1][col] += overflow tower[row + 1][col + 1] += overflow return min(1, tower[query_row][query_glass]) Your browser does not support the video tag. LeetCode 799 Solution ","description":"Understanding and solving the 799. Champagne Tower problem using Dynamic Programming.","title":"799. Champagne Tower","uri":"/en/tracks/algorithms-101/leetcode/medium/799/"},{"content":"LeetCode problem\n// .js /** * @param {string} s * @return {number} */ var myAtoi = function(s) { let res = 0; let num = parseInt(s); if(num \u003e= 2147483648){ res = 2147483647; } else if (num \u003c= -2147483648){ res = -2147483648; } else if (isNaN(num)) { res = 0; } else { res = num; } return res; }; ","description":"LeetCode 8. String to Integer (atoi)","title":"8. String to Integer (atoi)","uri":"/en/tracks/algorithms-101/leetcode/medium/8/"},{"content":"LeetCode problem 847\nProblem Statement Given an undirected, connected graph of n nodes labeled from 0 to n - 1. An array graph is provided where graph[i] is a list of all the nodes connected with node i by an edge. The objective is to determine the length of the shortest path that visits every node.\nIt’s permissible to start and stop at any node, revisit nodes multiple times, and reuse edges.\nNaive Solution A naive approach would be to attempt all possible paths (brute force) until all nodes are visited. This would involve significant computational power and time, especially for larger graphs.\nHints \u0026 Tips State Compression: The visited state of nodes can be represented using binary numbers. Breadth-First Search: BFS can be used to explore the graph systematically. Approach Instead of the brute force approach, a more refined BFS can be applied. The BFS is enhanced using two techniques:\nState Compression: Rather than tracking visited nodes for each path with a set or list, represent them with a binary number. This efficient way compresses the state and avoids redundancy. Double-ended Queue: An efficient way to explore BFS paths using deque which allows operations from both ends. Steps Use BFS for exploration. Encode the visited state of nodes with binary numbers. Utilize a double-ended queue storing the nodes, their states, and steps taken. The ultimate goal is to discover a state that represents all nodes being visited. Solution from collections import deque def shortestPathLength(graph): n = len(graph) final_state = (1 \u003c\u003c n) - 1 # This mask checks if all nodes are visited visited = set() # To track visited (node, state) pairs queue = deque() # Double-ended queue for BFS # Start BFS from every node for i in range(n): state = 1 \u003c\u003c i queue.append((i, state, 0)) visited.add((i, state)) while queue: node, state, steps = queue.popleft() if state == final_state: # If all nodes are visited in the current state, return steps return steps for neighbor in graph[node]: # Check neighbors and add new states to the queue new_state = state | (1 \u003c\u003c neighbor) if (neighbor, new_state) not in visited: visited.add((neighbor, new_state)) queue.append((neighbor, new_state, steps + 1)) return -1 ","description":"This article aims to explain the problem of finding the shortest path to visit all nodes in an undirected, connected graph.","title":"847. Shortest Path Visiting All Nodes","uri":"/en/tracks/algorithms-101/leetcode/hard/847/"},{"content":"LeetCode problem\nFirst accepted class Solution: def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -\u003e None: \"\"\" Do not return anything, modify nums1 in-place instead. \"\"\" i = len(nums1) - n for j in nums2: nums1[i] = j i += 1 nums1.sort() ","description":"LeetCode 88. Merge Sorted Array","title":"88. Merge Sorted Array","uri":"/en/tracks/algorithms-101/leetcode/easy/88/"},{"content":"LeetCode problem 880\nProblem Statement Given an encoded string s, the encoded string is transformed into a tape based on the following criteria:\nWhen a letter is encountered, it’s written on the tape. When a digit d is encountered, the current content of the tape is repeated d - 1 more times. You are required to find and return the kth letter (1-indexed) on the decoded tape.\nNaive Solution A straightforward solution would involve constructing the entire decoded tape and then simply accessing the kth character. However, this is impractical given the constraints, as the size of the decoded string can become extremely large.\nHints \u0026 Tips We can work backward from the desired index k. It is possible to determine the sequence of characters without decoding the entire string. Approach Instead of trying to build the entire string, which might be vast, we can work in reverse. Given an index k, we can backtrack through the original encoded string to determine which character would be at that position in the decoded string.\nSteps Iterate over the encoded string to determine the length of the decoded string. Work backward: If the current character is a digit, reduce the size of the decoded string by dividing it by the digit and also adjust the k value. If the current character is a letter, reduce the size of the decoded string by 1. If k is equal to the size of the decoded string or k is 0, return the current character. Solution def decodeAtIndex(self, s: str, k: int) -\u003e str: size = 0 # Calculate the length of the decoded string for ch in s: if ch.isdigit(): size *= int(ch) else: size += 1 for ch in reversed(s): # Work backward through the encoded string k %= size if k == 0 and ch.isalpha(): return ch if ch.isdigit(): # Adjust the size based on the current character size /= int(ch) else: size -= 1 ","description":"Detailed explanation and Python solution for LeetCode problem 880. Decoded String at Index.","title":"880. Decoded String at Index","uri":"/en/tracks/algorithms-101/leetcode/medium/880/"},{"content":"LeetCode problem 9. Palindrome Number\nProblem Statement Determine whether an integer is a palindrome without converting it to a string.\nNaive Solution A straightforward solution might be to convert the integer to a string and check if it reads the same both ways. However, this challenge encourages solving it without such conversion.\nHints \u0026 Tips By reversing the number and comparing it to the original, you can determine if it’s a palindrome.\nApproach Instead of converting the number to a string, we can reverse its digits using mathematical operations and then compare the reversed number to the original number.\nSteps If the number is negative, it’s not a palindrome. Initialize a Variable for the Reversed Number: We’ll be constructing this number step-by-step. Reversing the Number: This is achieved by repeatedly taking the last digit of the number and adding it to a running total after shifting the current digits of the running total. For instance, if you have the number 123, you’ll first take 3, then 2, and finally 1, to construct the reversed number as 321. Comparison: If the reversed number equals the original number, then it’s a palindrome. Solution def isPalindrome(x: int) -\u003e bool: # Negative numbers cannot be palindromes if x \u003c 0: return False # Initialize a reversed number starting at 0 reversed_num = 0 # Use a temporary variable to avoid modifying the original number temp = x # Reverse the number while temp: # Extract the last digit of the current number last_digit = temp % 10 # 12345 % 10 =\u003e 5 # Shift the current digits of reversed_num and add the last digit of temp reversed_num = reversed_num * 10 + last_digit # Remove the last digit from temp temp //= 10 # 12345 // 10 =\u003e 1234 # Compare the reversed number to the original return reversed_num == x ","description":"An introductory guide to understanding and determining if a number is a palindrome.","title":"9. Palindrome Number","uri":"/en/tracks/algorithms-101/leetcode/easy/9/"},{"content":"LeetCode задача 92\nЗадача Дан односвязный список и два целых числа left и right, где left \u003c= right. Задача заключается в том, чтобы перевернуть узлы списка с позиции left до right\nТ.е. если список 1-2-3-4-5-6-7-8-9, left=2, right=7, то итоговый список будет 1-7-6-5-4-3-2-8-9.\nПодсказки Для решения задачи удобно использовать два указателя: один для сохранения начальной позиции участка, который нужно перевернуть, и второй для выполнения самого разворота.\nПодход Основная идея решения заключается в использовании двух указателей: одного для начала подсписка, который нужно перевернуть, и второго для его конца. После этого, можно перевернуть этот подсписок “на лету”, обновляя ссылки между узлами.\nАлгоритм Основная логика разворота заключается в следующих действиях:\nОпределяем узел next как следующий узел от current. Обновляем указатель current.next, чтобы он указывал на узел после узла next. Обновляем указатель next.next, чтобы он указывал на узел, на который указывает prev.next. Обновляем указатель prev.next, чтобы он указывал на узел next. Решение # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseBetween(self, head, left, right): # Создаем новый узел reversed = ListNode(0) reversed.next = head prev = reversed # Пройдем до узла, предшествующего левой границе for _ in range(left - 1): prev = prev.next current = prev.next for _ in range(right-left): # 1-\u003e2-\u003e3-\u003e4, current = 2 # rule: # 1. next should look to current (prev.next) # for this need to switch links in proper order # 2. current.next should look to next.next # 3. prev.next should look to next # 4. next.next (3) should look to current (prev.next) # prev.next instead of current because of avoid cycle # define next next = current.next #1 (3-\u003e4), need 2\u003c-3 # switch links current.next = next.next #2 next.next = prev.next #4 prev.next = next #3 return reversed.next ","description":"LeetCode 92. Обращение подсписка односвязного списка. Разбор задачи.","title":"92. Reverse Linked List II","uri":"/en/tracks/algorithms-101/leetcode/medium/92/"},{"content":"LeetCode problem 926\nclass Solution: def minFlipsMonoIncr(self, s: str) -\u003e int: n = len(s) presum = [0] * (n + 1) for i, c in enumerate(s): presum[i + 1] = presum[i] + int(c) res = presum[-1] for i in range(n): res = min(res, presum[i] + n - i - (presum[-1] - presum[i])) return res ","description":"Flip String to Monotone Increasing","title":"926. Flip String to Monotone Increasing","uri":"/en/tracks/algorithms-101/leetcode/medium/926/"},{"content":"LeetCode problem 930\nclass Solution: def numSubarraysWithSum(self, nums: List[int], goal: int) -\u003e int: i1 = i2 = s1 = s2 = j = 0 res = 0 n = len(nums) while j \u003c n: s1 += nums[j] s2 += nums[j] while i1 \u003c= j and s1 \u003e goal: s1 -= nums[i1] i1 += 1 while i2 \u003c= j and s2 \u003e= goal: s2 -= nums[i2] i2 += 1 res += i2 - i1 j += 1 return res ","description":"Binary Subarrays With Sum","title":"930. Binary Subarrays With Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/930/"},{"content":"LeetCode problem 931\nclass Solution: def minFallingPathSum(self, matrix: List[List[int]]) -\u003e int: n = len(matrix) f = [0] * n for row in matrix: g = [0] * n for j, x in enumerate(row): l, r = max(0, j - 1), min(n, j + 2) g[j] = min(f[l:r]) + x f = g return min(f) ","description":"Minimum Falling Path Sum","title":"931. Minimum Falling Path Sum","uri":"/en/tracks/algorithms-101/leetcode/medium/931/"},{"content":"LeetCode problem 932\nclass Solution: def beautifulArray(self, n: int) -\u003e List[int]: if n == 1: return [1] left = self.beautifulArray((n + 1) \u003e\u003e 1) right = self.beautifulArray(n \u003e\u003e 1) left = [x * 2 - 1 for x in left] right = [x * 2 for x in right] return left + right ","description":"Beautiful Array","title":"932. Beautiful Array","uri":"/en/tracks/algorithms-101/leetcode/medium/932/"},{"content":"LeetCode задача 933\nЗадача Реализуйте класс RecentCounter для подсчета вызовов ping за последние 3000 миллисекунд.\nТ.е. для вызова t=100, нужно подсчитать количество таких вызовов, время которых меньше t-3000 и учесть сам вызов.\nПодход В данной задаче нужно отслеживать количество вызовов ping за последние 3000 миллисекунд.\nМожно использовать очередь для хранения времени вызовов ping. При каждом новом вызове будем добавлять текущее время в конец очереди и удалять из начала все времена, которые не попадают в интервал последних 3000 миллисекунд.\nТаким образом, размер очереди в любой момент времени будет равен числу вызовов ping за последние 3000 миллисекунд.\nАлгоритм Инициализация: создать пустую очередь для хранения времени вызовов ping. При каждом вызове ping(t): Добавить t в конец очереди. Удалить из начала очереди все элементы, меньшие чем t - 3000. Вернуть размер очереди. Решение from collections import deque class RecentCounter: def __init__(self): self.queue = deque() def ping(self, t: int) -\u003e int: self.queue.append(t) while self.queue[0] \u003c t - 3000: self.queue.popleft() return len(self.queue) ","description":"LeetCode 933. Реализация счетчика для подсчета вызовов в последние 3000 миллисекунд. Разбор задачи.","title":"933. Number of Recent Calls","uri":"/en/tracks/algorithms-101/leetcode/easy/933/"},{"content":"LeetCode problem 934\nclass Solution: def shortestBridge(self, grid: List[List[int]]) -\u003e int: def dfs(i, j): q.append((i, j)) grid[i][j] = 2 for a, b in pairwise(dirs): x, y = i + a, j + b if 0 \u003c= x \u003c n and 0 \u003c= y \u003c n and grid[x][y] == 1: dfs(x, y) n = len(grid) dirs = (-1, 0, 1, 0, -1) q = deque() i, j = next((i, j) for i in range(n) for j in range(n) if grid[i][j]) dfs(i, j) res = 0 while 1: for _ in range(len(q)): i, j = q.popleft() for a, b in pairwise(dirs): x, y = i + a, j + b if 0 \u003c= x \u003c n and 0 \u003c= y \u003c n: if grid[x][y] == 1: return res if grid[x][y] == 0: grid[x][y] = 2 q.append((x, y)) res += 1 ","description":"Shortest Bridge","title":"934. Shortest Bridge","uri":"/en/tracks/algorithms-101/leetcode/medium/934/"},{"content":"LeetCode problem 935\nclass Solution: def knightDialer(self, n: int) -\u003e int: if n == 1: return 10 f = [1] * 10 for _ in range(n - 1): t = [0] * 10 t[0] = f[4] + f[6] t[1] = f[6] + f[8] t[2] = f[7] + f[9] t[3] = f[4] + f[8] t[4] = f[0] + f[3] + f[9] t[6] = f[0] + f[1] + f[7] t[7] = f[2] + f[6] t[8] = f[1] + f[3] t[9] = f[2] + f[4] f = t return sum(t) % (10**9 + 7) ","description":"Knight Dialer","title":"935. Knight Dialer","uri":"/en/tracks/algorithms-101/leetcode/medium/935/"},{"content":"LeetCode problem\nGiven the root of a binary tree, return the inorder traversal of its nodes' values.\nExample 1:\nInput: root = [1,null,2,3] Output: [1,3,2] Example 2:\nInput: root = [] Output: [] Example 3:\nInput: root = [1] Output: [1] Thoughts Don’t understand what needed. Why:\n1-null-2-3 becomes 1-3-2 [1,2,5,7,8,9,10] becomes [7,2,8,1,9,5,10] In 1-null-2-3 1 becomes the first because we loop to its left node which is null, then come back and first value here is 1.\nFirst accepted # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def inorderTraversal(self, root: Optional[TreeNode]) -\u003e List[int]: # add all left, then add right def get_child(head): if head: get_child(head.left) result.append(head.val) get_child(head.right) result = [] get_child(root) return result Better solution Morris Traversal\nResources LeetCode explanation ","description":"LeetCode 94. Binary Tree Inorder Traversal","title":"94. Binary Tree Inorder Traversal","uri":"/en/tracks/algorithms-101/leetcode/easy/94/"},{"content":"LeetCode problem 948\nclass Solution: def bagOfTokensScore(self, tokens: List[int], power: int) -\u003e int: tokens.sort() i, j = 0, len(tokens) - 1 res = t = 0 while i \u003c= j: if power \u003e= tokens[i]: power -= tokens[i] i, t = i + 1, t + 1 res = max(res, t) elif t: power += tokens[j] j, t = j - 1, t - 1 else: break return res ","description":"Bag of Tokens","title":"948. Bag of Tokens","uri":"/en/tracks/algorithms-101/leetcode/medium/948/"},{"content":"LeetCode problem 949\nclass Solution: def largestTimeFromDigits(self, arr: List[int]) -\u003e str: res = -1 for i in range(4): for j in range(4): for k in range(4): if i != j and i != k and j != k: h = arr[i] * 10 + arr[j] m = arr[k] * 10 + arr[6 - i - j - k] if h \u003c 24 and m \u003c 60: res = max(res, h * 60 + m) return '' if res \u003c 0 else f'{res // 60:02}:{res % 60:02}' ","description":"Largest Time for Given Digits","title":"949. Largest Time for Given Digits","uri":"/en/tracks/algorithms-101/leetcode/medium/949/"},{"content":"LeetCode problem 950\nclass Solution: def deckRevealedIncreasing(self, deck: List[int]) -\u003e List[int]: q = deque() for v in sorted(deck, reverse=True): if q: q.appendleft(q.pop()) q.appendleft(v) return list(q) ","description":"Reveal Cards In Increasing Order","title":"950. Reveal Cards In Increasing Order","uri":"/en/tracks/algorithms-101/leetcode/medium/950/"},{"content":"LeetCode problem 951\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def flipEquiv(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -\u003e bool: def dfs(root1, root2): if root1 == root2 or (root1 is None and root2 is None): return True if root1 is None or root2 is None or root1.val != root2.val: return False return (dfs(root1.left, root2.left) and dfs(root1.right, root2.right)) or ( dfs(root1.left, root2.right) and dfs(root1.right, root2.left) ) return dfs(root1, root2) ","description":"Flip Equivalent Binary Trees","title":"951. Flip Equivalent Binary Trees","uri":"/en/tracks/algorithms-101/leetcode/medium/951/"},{"content":"LeetCode problem 954\nclass Solution: def canReorderDoubled(self, arr: List[int]) -\u003e bool: freq = Counter(arr) if freq[0] \u0026 1: return False for x in sorted(freq, key=abs): if freq[x \u003c\u003c 1] \u003c freq[x]: return False freq[x \u003c\u003c 1] -= freq[x] return True ","description":"Array of Doubled Pairs","title":"954. Array of Doubled Pairs","uri":"/en/tracks/algorithms-101/leetcode/medium/954/"},{"content":"LeetCode problem 958\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isCompleteTree(self, root: TreeNode) -\u003e bool: q = deque([root]) while q: node = q.popleft() if node is None: break q.append(node.left) q.append(node.right) return all(node is None for node in q) ","description":"Check Completeness of a Binary Tree","title":"958. Check Completeness of a Binary Tree","uri":"/en/tracks/algorithms-101/leetcode/medium/958/"},{"content":"LeetCode problem 959\nclass Solution: def regionsBySlashes(self, grid: List[str]) -\u003e int: def find(x): if p[x] != x: p[x] = find(p[x]) return p[x] def union(a, b): pa = find(a) pb = find(b) if pa != pb: p[pa] = pb nonlocal size size -= 1 n = len(grid) size = n * n * 4 p = list(range(size)) for i, row in enumerate(grid): for j, v in enumerate(row): k = i * n + j if i \u003c n - 1: union(4 * k + 2, (k + n) * 4) if j \u003c n - 1: union(4 * k + 1, (k + 1) * 4 + 3) if v == '/': union(4 * k, 4 * k + 3) union(4 * k + 1, 4 * k + 2) elif v == '\\\\': union(4 * k, 4 * k + 1) union(4 * k + 2, 4 * k + 3) else: union(4 * k, 4 * k + 1) union(4 * k + 1, 4 * k + 2) union(4 * k + 2, 4 * k + 3) return size ","description":"Regions Cut By Slashes","title":"959. Regions Cut By Slashes","uri":"/en/tracks/algorithms-101/leetcode/medium/959/"},{"content":"LeetCode problem 962\nclass Solution: def maxWidthRamp(self, nums: List[int]) -\u003e int: stk = [] for i, v in enumerate(nums): if not stk or nums[stk[-1]] \u003e v: stk.append(i) res = 0 for i in range(len(nums) - 1, -1, -1): while stk and nums[stk[-1]] \u003c= nums[i]: res = max(res, i - stk.pop()) if not stk: break return res ","description":"Maximum Width Ramp","title":"962. Maximum Width Ramp","uri":"/en/tracks/algorithms-101/leetcode/medium/962/"},{"content":"LeetCode problem 963\nclass Solution: def minAreaFreeRect(self, points: List[List[int]]) -\u003e float: s = {(x, y) for x, y in points} n = len(points) res = inf for i in range(n): x1, y1 = points[i] for j in range(n): if j != i: x2, y2 = points[j] for k in range(j + 1, n): if k != i: x3, y3 = points[k] x4 = x2 - x1 + x3 y4 = y2 - y1 + y3 if (x4, y4) in s: v21 = (x2 - x1, y2 - y1) v31 = (x3 - x1, y3 - y1) if v21[0] * v31[0] + v21[1] * v31[1] == 0: w = sqrt(v21[0] ** 2 + v21[1] ** 2) h = sqrt(v31[0] ** 2 + v31[1] ** 2) res = min(res, w * h) return 0 if res == inf else res ","description":"Minimum Area Rectangle II","title":"963. Minimum Area Rectangle II","uri":"/en/tracks/algorithms-101/leetcode/medium/963/"},{"content":"LeetCode problem 966\nclass Solution: def spellchecker(self, wordlist: List[str], queries: List[str]) -\u003e List[str]: def f(w): t = [] for c in w: t.append(\"*\" if c in \"aeiou\" else c) return \"\".join(t) s = set(wordlist) low, pat = {}, {} for w in wordlist: t = w.lower() low.setdefault(t, w) pat.setdefault(f(t), w) res = [] for q in queries: if q in s: res.append(q) continue q = q.lower() if q in low: res.append(low[q]) continue q = f(q) if q in pat: res.append(pat[q]) continue res.append(\"\") return res ","description":"Vowel Spellchecker","title":"966. Vowel Spellchecker","uri":"/en/tracks/algorithms-101/leetcode/medium/966/"},{"content":"LeetCode problem 967\nclass Solution: def numsSameConsecDiff(self, n: int, k: int) -\u003e List[int]: res = [] def dfs(n, k, t): if n == 0: res.append(t) return last = t % 10 if last + k \u003c= 9: dfs(n - 1, k, t * 10 + last + k) if last - k \u003e= 0 and k != 0: dfs(n - 1, k, t * 10 + last - k) for i in range(1, 10): dfs(n - 1, k, i) return res ","description":"Numbers With Same Consecutive Differences","title":"967. Numbers With Same Consecutive Differences","uri":"/en/tracks/algorithms-101/leetcode/medium/967/"},{"content":"LeetCode problem 969\nclass Solution: def pancakeSort(self, arr: List[int]) -\u003e List[int]: def reverse(arr, j): i = 0 while i \u003c j: arr[i], arr[j] = arr[j], arr[i] i, j = i + 1, j - 1 n = len(arr) res = [] for i in range(n - 1, 0, -1): j = i while j \u003e 0 and arr[j] != i + 1: j -= 1 if j \u003c i: if j \u003e 0: res.append(j + 1) reverse(arr, j) res.append(i + 1) reverse(arr, i) return res ","description":"Pancake Sorting","title":"969. Pancake Sorting","uri":"/en/tracks/algorithms-101/leetcode/medium/969/"},{"content":"LeetCode problem 970\nclass Solution: def powerfulIntegers(self, x: int, y: int, bound: int) -\u003e List[int]: res = set() a = 1 while a \u003c= bound: b = 1 while a + b \u003c= bound: res.add(a + b) b *= y if y == 1: break if x == 1: break a *= x return list(res) ","description":"Powerful Integers","title":"970. Powerful Integers","uri":"/en/tracks/algorithms-101/leetcode/medium/970/"},{"content":"LeetCode problem 988\nUse a depth-first search (DFS) approach to traverse from leaves to the root, collecting characters, and keep track of the smallest string found.\nTackle by recursively exploring each path from the root to the leaves, collecting the string formed by node values in reverse (from leaf to root). At each leaf node, compare the formed string with the current smallest and update if the new one is smaller.\nApproach Create a recursive function dfs(node, path) that navigates through the tree: The path argument accumulates characters from the current node to the root. At each leaf node (node with no children), update the smallest string. Recursively visit left and right children if they exist. Start the DFS with the root node and an empty path. After traversing the entire tree, the smallest string will be the result. # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def smallestFromLeaf(self, root: Optional[TreeNode]) -\u003e str: def dfs(node, path): nonlocal smallest if node: # Prepend current char to the path path = chr(node.val + 97) + path if not node.left and not node.right: # Leaf node if not smallest or path \u003c smallest: smallest = path dfs(node.left, path) dfs(node.right, path) smallest = None dfs(root, \"\") return smallest ","description":"988. Smallest String Starting From Leaf","title":"988. Smallest String Starting From Leaf","uri":"/en/tracks/algorithms-101/leetcode/medium/988/"},{"content":"LeetCode problem 992\nUsing the sliding window technique to keep track of the different integers within a window. Adjust the window’s size to always contain exactly k different integers.\nThe idea is to transform the problem into finding the number of subarrays with at most k different integers and subtract the number of subarrays with at most k-1 different integers from it.\nApproach At Most K: Implement a function helper(nums, k) that returns the number of subarrays with at most k different integers. Utilize helper function for the Solution: The number of subarrays with exactly k different integers is helper(nums, k) - helper(nums, k-1). Implement helper: Use a sliding window technique to expand the window to include as many elements as long as there are at most k different ones. Shrink the window from the left when the condition is violated. Keep track of the count of each integer in the current window using a hash map. class Solution: def subarraysWithKDistinct(self, nums: List[int], k: int) -\u003e int: def helper(nums, k): # at most k count = {} res = i = 0 for j in range(len(nums)): if nums[j] not in count: k -= 1 count[nums[j]] = 0 count[nums[j]] += 1 while k \u003c 0: count[nums[i]] -= 1 if count[nums[i]] == 0: k += 1 del count[nums[i]] i += 1 res += j - i + 1 return res return helper(nums, k) - helper(nums, k-1) Pattern This problem follows the Sliding Window pattern, where a window of elements is expanded and shrunk based on certain conditions. The sliding window technique is commonly used to solve problems related to contiguous subarrays or substrings, particularly when you need to track or calculate something among all possible subarrays or substrings of a certain size or condition.\n","description":"992. Subarrays with K Different Integers","title":"992. Subarrays with K Different Integers","uri":"/en/tracks/algorithms-101/leetcode/hard/992/"},{"content":"Step 1: Generate an SSH Key on EC2 To securely authenticate with GitHub, generate an SSH key on your EC2 instance.\nConnect to your EC2 instance via SSH:\nssh ec2-user@your-ec2-public-ip Generate an SSH key:\nssh-keygen -t rsa -b 4096 -C \"your-email@example.com\" Press Enter to save the key in the default location (~/.ssh/id_rsa). Set a passphrase or leave it empty. Start the SSH agent and add the key:\neval \"$(ssh-agent -s)\" ssh-add ~/.ssh/id_rsa Step 2: Add the SSH Key to GitHub Display the public key:\ncat ~/.ssh/id_rsa.pub Copy the output and add it to GitHub:\nGo to GitHub → Settings → SSH and GPG keys link Click New SSH key. Paste the key and save. Step 3: Test SSH Connection to GitHub Verify that the connection is successful:\nssh -T git@github.com Expected output:\nHi your-github-username! You've successfully authenticated, but GitHub does not provide shell access. Step 4: Clone a Private Repository Now that authentication is set up, clone the private repository:\ngit clone git@github.com:your-username/private-repo.git Replace your-username and private-repo with the actual repository details.\nStep 5: Configure Git (Optional) To avoid re-entering your username and email, configure Git globally:\ngit config --global user.name \"Your Name\" git config --global user.email \"your-email@example.com\" Alternative: Using a Personal Access Token If you prefer HTTPS authentication instead of SSH:\nGenerate a Personal Access Token (PAT) on GitHub:\nGo to GitHub → Settings → Developer Settings → Personal Access Tokens. Generate a token with repo permissions. Use the token instead of a password:\ngit clone https://your-username:your-token@github.com/your-username/private-repo.git ","description":"Step-by-step guide to accessing private GitHub repositories from an EC2 instance.","title":"Access Private GitHub Repositories on an EC2 Server","uri":"/en/posts/github-private-repo-access/"},{"content":"Initial I had the need to implement search functionality on my site. Content on is in different languages.\nThe goal is to impelemnt search for all pages and separate search results for each and every language.\nHow it works Hugo generates the search index. In this case it means that we get json file with every static page on the site.\nTo make search works we need to create index. lunr.js takes care of it.\nClient send query -\u003e our script “tries to find” in the index\nRender the results\nThis is how the logic looks like:\nImplementation Create search form Create popup modal where will render search results Connect Lunr.js script Generate pages data Connect search/result forms with lunr.js search TL;DR Files to change/create:\n1. `/layouts/partials/header.html` \u003cform id=\"search\"\u003e \u003cinput type=\"text\" type=\"search\" id=\"search-input\"\u003e \u003c/form\u003e 2. `/layouts/partials/components/search-list-popup.html` \u003cdiv id=\"search-result\" tabindex=\"-1\" class=\"overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 max-w-xs \" hidden\u003e \u003cdiv class=\"relative p-4 w-full max-w-xs h-full md:h-auto\"\u003e \u003cdiv class=\"relative bg-white rounded-lg shadow dark:bg-gray-700\"\u003e \u003cdiv class=\"p-6\"\u003e \u003ch3\u003eSearch results\u003c/h3\u003e \u003cdiv id=\"search-results\" class=\"prose\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e 3. `/layouts/partials/footer.html` ... {{ $languageMode := .Site.Language }} \u003cscript src=\"https://unpkg.com/lunr/lunr.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"/js/search.js?1\" languageMode={{ $languageMode }} \u003e\u003c/script\u003e {{ partial \"components/search-list-popup.html\" . }} ... 4. `/layouts/_default/index.json` [ {{- range $index, $page := .Site.RegularPages.ByTitle -}} {{- if gt $index 0 -}} , {{- end -}} {{- $entry := dict \"uri\" $page.RelPermalink \"title\" $page.Title -}} {{- $entry = merge $entry (dict \"description\" .Description) -}} {{- $entry = merge $entry (dict \"content\" (.Plain | htmlUnescape)) -}} {{- $entry | jsonify -}} {{- end -}} ] 5. `config.yaml` # config.yaml # need for search popup service / creates search.json index fo lunr.js outputFormats: SearchIndex: baseName: search mediaType: application/json outputs: home: - HTML - RSS - SearchIndex 6. `static/js/search.js` const languageMode = window.document.currentScript.getAttribute('languageMode'); const MAX_SEARCH_RESULTS = 10 let searchIndex = {} let pagesStore = {} // Need to create ONLY once , maybe before push | during build const createIndex = (documents) =\u003e { searchIndex = lunr(function () { this.field(\"title\"); this.field(\"content\"); this.field(\"description\"); this.field(\"uri\"); this.ref('uri') documents.forEach(function (doc) { pagesStore[doc['uri']] = doc['title'] this.add(doc) }, this) }) } const loadIndexData = () =\u003e { const url = `/${languageMode}/search.json`; var xmlhttp = new XMLHttpRequest(); xmlhttp.onreadystatechange = function () { if (this.readyState == 4 \u0026\u0026 this.status == 200) { const pages_content = JSON.parse(this.responseText); createIndex(pages_content) } }; xmlhttp.open(\"GET\", url, true); xmlhttp.send(); } const search = (text) =\u003e { let result = searchIndex.search(text) return result } const hideSearchResults = (event, divBlock) =\u003e { event.preventDefault() if (!divBlock.contains(event.target)) { divBlock.style.display = 'none'; divBlock.setAttribute('class', 'hidden') } } // TODO refactor const renderSearchResults = (results) =\u003e { const searchResultsViewBlock = document.getElementById('search-result') // hide on move mouse from results block document.addEventListener('mouseup', (e) =\u003e hideSearchResults(e, searchResultsViewBlock)); const searchResultsDiv = document.getElementById('search-results') searchResultsDiv.innerHTML = '' searchResultsViewBlock.style.display = 'initial'; searchResultsViewBlock.removeAttribute('hidden') const resultsBlock = document.createElement('ul') for (let post of results) { const url = post['ref'] const title = pagesStore[url] let commentBlock = document.createElement('li') let link = document.createElement('a',) let linkText = document.createTextNode(title); link.appendChild(linkText) link.href = url commentBlock.appendChild(link) resultsBlock.appendChild(commentBlock) } searchResultsDiv.appendChild(resultsBlock) } const searchFormObserver = () =\u003e { var form = document.getElementById(\"search\"); var input = document.getElementById(\"search-input\"); form.addEventListener(\"submit\", function (event) { event.preventDefault(); var term = input.value.trim(); if (!term) { return } const search_results = search(term, languageMode); renderSearchResults(search_results.slice(0, MAX_SEARCH_RESULTS)) }, false); } // create indexes loadIndexData() searchFormObserver() Search form I am going to add search form to the header part. For thios purpose edit header.html file in the path /layouts/partials/header.html\nSet form id: search. By this id script can find this form\nMinimal form for work:\n\u003cform id=\"search\"\u003e \u003cinput type=\"text\" type=\"search\" id=\"search-input\"\u003e \u003c/form\u003e I use Tailwind, so this is how my form looks like:\n\u003cdiv class=\"relative pt-4 md:pt-0\"\u003e \u003cform id=\"search\" class=\"flex items-center\"\u003e \u003clabel for=\"search-input\" class=\"sr-only\"\u003eSearch\u003c/label\u003e \u003cdiv class=\"relative w-full\"\u003e \u003cinput type=\"text\" type=\"search\" id=\"search-input\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"Search\" required\u003e \u003c/div\u003e \u003c/form\u003e \u003c/div\u003e Modal with results By default this modal window is hidden. So don’t need to add this to any page. But need to add somewhere.\n1. Create .html component\npath: /layouts/partials/components/search-list-popup.html\nFor modal block to show or hide I use id: search-result\nFor block with search results id is: search-results\nContent:\n\u003cdiv id=\"search-result\" tabindex=\"-1\" class=\"overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 max-w-xs \" hidden\u003e \u003cdiv class=\"relative p-4 w-full max-w-xs h-full md:h-auto\"\u003e \u003cdiv class=\"relative bg-white rounded-lg shadow dark:bg-gray-700\"\u003e \u003cdiv class=\"p-6\"\u003e \u003ch3\u003eSearch results\u003c/h3\u003e \u003cdiv id=\"search-results\" class=\"prose\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e 2. Add component to the site\nAdd this component to the footer. File path: /layouts/partials/footer.html\n... {{ partial \"components/search-list-popup.html\" . }} ... Connect Lunr.js Add link to this script to the footer template too\nPart of the footer template:\n... \u003cscript src=\"https://unpkg.com/lunr/lunr.min.js\"\u003e\u003c/script\u003e {{ partial \"components/search-list-popup.html\" . }} ... Generate pages data Hugo can generate the search index the same way it generates RSS feeds for example, it’s just another output format.\n1. Generate script\nThis generator is for multilingual site\nCreates json in each language catalog in format:\n[{\"title\":\"title01\",...}] Fepends on fileds inckluded in the layout /layouts/_default/index.json\nCreate file /layouts/_default/index.json\n[ {{- range $index, $page := .Site.RegularPages.ByTitle -}} {{- if $page.IsTranslated -}} {{ if gt (index $page.Translations 0).WordCount 0 }} {{ range .Translations }} {{- if gt $translatedCount 0 -}} , {{- end -}} {{- $entry := dict \"uri\" .RelPermalink \"title\" .Title -}} {{- $entry = merge $entry (dict \"description\" .Description) -}} {{- $entry = merge $entry (dict \"content\" (.Plain | htmlUnescape)) -}} {{- $entry | jsonify -}} {{ $translatedCount = add $translatedCount 1 }} {{ end}} {{ end }} {{- end -}} {{- end -}} ] Creates search.json file with page indexes in /public/search.json\n2. Set index file path\nUpdate config.yaml file:\n# config.yaml # need for search popup service / creates search.json index fo lunr.js outputFormats: SearchIndex: baseName: search mediaType: application/json outputs: home: - HTML - RSS - SearchIndex Connect search/result forms with lunr.js search Create file in the path: static/js/search.js\nconst languageMode = window.document.currentScript.getAttribute('languageMode'); const MAX_SEARCH_RESULTS = 10 let searchIndex = {} let pagesStore = {} // Need to create ONLY once , maybe before push | during build const createIndex = (documents) =\u003e { searchIndex = lunr(function () { this.field(\"title\"); this.field(\"content\"); this.field(\"description\"); this.field(\"uri\"); this.ref('uri') documents.forEach(function (doc) { pagesStore[doc['uri']] = doc['title'] this.add(doc) }, this) }) } const loadIndexData = () =\u003e { const url = `/${languageMode}/search.json`; var xmlhttp = new XMLHttpRequest(); xmlhttp.onreadystatechange = function () { if (this.readyState == 4 \u0026\u0026 this.status == 200) { const pages_content = JSON.parse(this.responseText); createIndex(pages_content) } }; xmlhttp.open(\"GET\", url, true); xmlhttp.send(); } const search = (text) =\u003e { let result = searchIndex.search(text) return result } const hideSearchResults = (event, divBlock) =\u003e { event.preventDefault() if (!divBlock.contains(event.target)) { divBlock.style.display = 'none'; divBlock.setAttribute('class', 'hidden') } } // TODO refactor const renderSearchResults = (results) =\u003e { const searchResultsViewBlock = document.getElementById('search-result') // hide on move mouse from results block document.addEventListener('mouseup', (e) =\u003e hideSearchResults(e, searchResultsViewBlock)); const searchResultsDiv = document.getElementById('search-results') searchResultsDiv.innerHTML = '' searchResultsViewBlock.style.display = 'initial'; searchResultsViewBlock.removeAttribute('hidden') const resultsBlock = document.createElement('ul') for (let post of results) { const url = post['ref'] const title = pagesStore[url] let commentBlock = document.createElement('li') let link = document.createElement('a',) let linkText = document.createTextNode(title); link.appendChild(linkText) link.href = url commentBlock.appendChild(link) resultsBlock.appendChild(commentBlock) } searchResultsDiv.appendChild(resultsBlock) } const searchFormObserver = () =\u003e { var form = document.getElementById(\"search\"); var input = document.getElementById(\"search-input\"); form.addEventListener(\"submit\", function (event) { event.preventDefault(); var term = input.value.trim(); if (!term) { return } const search_results = search(term, languageMode); renderSearchResults(search_results.slice(0, MAX_SEARCH_RESULTS)) }, false); } // create indexes loadIndexData() searchFormObserver() Next need to add this file to the site: /layouts/partials/footer.html\nNow footer looks like this:\n... {{ $languageMode := .Site.Language }} \u003cscript src=\"https://unpkg.com/lunr/lunr.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"/js/search.js?1\" languageMode={{ $languageMode }} \u003e\u003c/script\u003e {{ partial \"components/search-list-popup.html\" . }} ... ","description":"Make your multilingual Hugo static site searchable with a client-side search index","title":"Add search to Hugo multilingual static site with Lunr","uri":"/en/posts/hugo-add-search-lunr-popup/"},{"content":"","description":"AI generated","title":"AI generated","uri":"/en/photos/ai/"},{"content":" colorful abstract splashes floating around forming the loose shape of a gato, in the style of realistic anamorphic art, digital art wonders, flickr, bold yet graceful, colorful explosions, vivid realism, colorful curves colorful abstract splashes floating around forming the loose shape of a tree, in the style of realistic anamorphic art, digital art wonders, flickr, bold yet graceful, colorful explosions, vivid realism, colorful curves colorful abstract splashes floating around forming the loose shape of a rose, in the style of realistic anamorphic art, digital art wonders, flickr, bold yet graceful, colorful explosions, vivid realism, colorful curves colorful abstract splashes floating around forming the loose shape of a protea, in the style of realistic anamorphic art, digital art wonders, flickr, bold yet graceful, colorful explosions, vivid realism, colorful curves ","description":"AI Midjourney generated","title":"AI Midjourney generated","uri":"/en/photos/midjourney/"},{"content":"Intro Big-O Cheat Sheet Sort Insertion sort sorts an array by continuously picking an element, starting from the second element, and inserting it in its correct position in the sorted part of the array to its left. It does this by shifting larger elements one position ahead of their current position, making room for the new element.\ndef insertion_sort(array): for i in range(1, len(array)): value = array[i] while i \u003e 0 and array[i - 1] \u003e value: array[i] = array[i - 1] i -= 1 array[i] = value return array Selection sort works by repeatedly finding the minimum element from the unsorted part of the array and swapping it with the first unsorted element. It continues this process until the whole array is sorted, hence effectively moving the smallest unsorted element to its correct position in each iteration.\ndef selection_sort(array): for i in range(len(array) - 1): min_value = i for j in range(i + 1, len(array)): if array[j] \u003c array[min_value]: min_value = j temp = array[min_value] array[min_value] = array[i] array[i] = temp return array Merge sort sorts an array by dividing it into two halves, recursively sorting those halves, and then merging them back together in sorted order.\nIf the array has more than one element, find the middle of the array. Divide the array into two halves using the middle index: the left half (left_half) and the right half (right_half). Recursively sort both halves by calling merge_sort on left_half and right_half. Merge the sorted halves back into the original array. The merge operation walks through left_half and right_half, and at each step, it copies the smaller element from either left_half or right_half into the original array. If there are any remaining elements in left_half or right_half after one has been fully copied back into the array, those elements are copied over. This happens because those remaining elements are guaranteed to be larger than all elements already copied back into the array. First more simple example of merging already sorted two arrays:\nMerge sorted arrays:\ndef merge(left_ar, right_ar): res = [] left_index, right_index = 0 while left_index \u003c len(left_ar) and right_index \u003c len(right_ar): if left_ar[left_index] \u003c right_ar[right_index]: res.append(left_ar[left_index]) left_index += 1 else: res.append(right_ar[right_index]) right_index += 1 res += left_ar[left_index:] + right_ar[right_index:] def merge_sort(array): mid = len(array) / 2 left_ar = array[:mid] right_ar = array[mid:] return merge(left_ar, right_ar) Sort array:\ndef merge_sort(array): if len(array) \u003e 1: # Only sort if array is larger than 1 mid = len(array) // 2 # middle of the array # Split the array into two halves left_half = array[:mid] right_half = array[mid:] # Recursively sort both halves merge_sort(left_half) merge_sort(right_half) left_index = right_index = merged_index = 0 # Merge sorted halves back into the original array while left_index \u003c len(left_half) and right_index \u003c len(right_half): if left_half[left_index] \u003c= right_half[right_index]: array[merged_index] = left_half[left_index] left_index += 1 else: array[merged_index] = right_half[right_index] right_index += 1 merged_index += 1 # If any elements left in either half, append them to the array while left_index \u003c len(left_half): array[merged_index] = left_half[left_index] left_index += 1 merged_index += 1 while right_index \u003c len(right_half): array[merged_index] = right_half[right_index] right_index += 1 merged_index += 1 Your browser does not support the video tag. Merge Sort Your browser does not support the video tag. Merge Sort Binary Search Binary search template def find_target(nums, target): left = 0 right = len(nums) - 1 while left \u003c= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[mid] \u003c target: left = mid + 1 else: right = mid - 1 return -1 Python build-in module\nfrom bisect import bisect_left sorted_fruits = ['apple', 'banana', 'orange', 'plum'] bisect_left(sorted_fruits, 'kiwi') \u003e\u003e 2 Sliding Window Usage: Use when need to handle the input data in specific window size.\nExample: Sliding window technique to find the largest sum of 4 consecutive numbers. Template:\nwhile j \u003c size: # Calculation's happen's here # ... if condition \u003c k: j+=1 elif condition == k: # res \u003c-- calculation j+=1 elif condition \u003e k: while condition \u003e k: i+=1 # remove calculation for i j+=1 return res Examples\nProblem: Find the largest sum of k consecutive entries, given an array of size n.\nAdd the first k components together and save the result in the currentSum variable. Because this is the first sum, it is also the current maximum; thus, save it in the variable maximumSum. As the window size is ww, we move the window one place to the right and compute the sum of the items in the window. Update the maximum if the currentSum is greater than the maximumSum, and repeat step 2. def max_sum(arr, k): n = len(arr) # length of the array if n \u003c k: # length of array must be greater window size print(\"Invalid\") return -1 # sum of first k elements window_sum = sum(arr[:k]) max_sum = window_sum # remove the first element of previous # window and add the last element of # the current window to calculate the # the sums of remaining windows for i in range(n - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(window_sum, max_sum) return max_sum arr = [16, 12, 9, 19, 11, 8] k = 3 print(max_sum(arr, k)) Problem: Find duplicates within a range k in an array\nInput: nums = [5, 6, 8, 2, 4, 6, 9] k = 2 Ouput: False def get_duplicates(nums, k): d = {} count = 0 for i in range(len(nums)): if nums[i] in d and i - d[nums[i]] \u003c= k: return True else: d[nums[i]] = i return False Problem/solution examples Article on LeetCode Practice questions Two Pointers A classic way of writing a two-pointer sliding window. The right pointer keeps moving to the right until it cannot move to the right (the specific conditions depend on the topic). When the right pointer reaches the far right, start to move the left pointer to release the left boundary of the window.\nUsage: Use two pointers to iterate the input data. Generally, both pointers move in the opposite direction at a constant interval.\nPractice questions Two pointers intro Two-Pass Approach The two-pass approach is a common algorithmic pattern used to solve problems by going through the data twice. In the first pass, you gather some information that you’ll use in the second pass to solve the problem. Here is an explanation of the two-pass approach with two examples.\nFirst Pass: Gather Information\nThe first pass is used to collect some information from the data that will be useful to solve the problem. This could involve counting the occurrence of items, finding the maximum or minimum value, or performing some other calculation that will help in the second pass. Second Pass: Solve the Problem\nUsing the information gathered in the first pass, you can now go through the data again to solve the problem. Let’s go through two examples to understand this approach better.\nExample 1: Finding the Relative Rank of Scores\nYou have a list of scores and you want to find out the relative rank of each score in descending order.\nFirst Pass: Sort the list in descending order. Second Pass: Create a new list with the rank of each score in the original list. scores = [95, 85, 90, 100] sorted_scores = sorted(scores, reverse=True) ranking = {score: i + 1 for i, score in enumerate(sorted_scores)} for score in scores: print(\"Score:\", score, \"Rank:\", ranking[score]) Output:\nScore: 95 Rank: 2 Score: 85 Rank: 4 Score: 90 Rank: 3 Score: 100 Rank: 1 Example 2: Find if there’s a pair of numbers in an array that add up to a target value\nFirst Pass: Create a diccionario that keeps track of the occurrence of each number in the list. Second Pass: For each number in the array, check if there is another number in the diccionario that adds up to the target value. nums = [2, 3, 7, 11, 15] target = 9 counter = {} for num in nums: counter[num] = counter.get(num, 0) + 1 for num in nums: diff = target - num if diff in counter: if diff != num or counter[num] \u003e 1: print(\"Pair:\", (num, diff)) break Output:\nPair: (2, 7) In both examples, the first pass through the data gathered information that was then used in the second pass to solve the problem.\nPrefix Sums Usage: The prefix sums algorithm is a powerful technique that can simplify problems that require frequent computation of sums over subarrays or subtrees.\nThe idea behind the prefix sums algorithm is to preprocess an array of numbers such that you can efficiently answer queries about the sum of elements in a given subarray.\nImagine you’re given an array of numbers, and you want to know the sum of numbers between the indices i and j (inclusive). If you sum up the numbers every time you receive such a query, your solution will be slow. This is where prefix sums come into play.\nAbstract Example\nConsider an array arr:\narr = [a, b, c, d, e] The prefix sum array prefix_arr, for the above array would be:\nprefix_arr = [a, a+b, a+b+c, a+b+c+d, a+b+c+d+e] arr = [1, 3, 4, 8, 6, 1, 4, 2] prefix_arr = [1, 4, 8, 16, 22, 23, 27, 29] Now, to find the sum between indices i and j (inclusive) in array arr, you can simply take:\nprefix_arr[j] - prefix_arr[i-1] (Note: If i=0, then it’s just prefix_arr[j])\nExample: Prefix Sums on an Array\ndef prefix_sums(arr): n = len(arr) prefix_arr = [0] * (n) prefix_arr[0] = arr[0] for i in range(1, n): prefix_arr[i] = prefix_arr[i-1] + arr[i] return prefix_arr # Using the prefix sum array def sum_from_i_to_j(prefix_arr, i, j): if i == 0: return prefix_arr[j] return prefix_arr[j] - prefix_arr[i-1] arr = [2, 3, 7, 1, 5] prefix_arr = prefix_sums(arr) print(sum_from_i_to_j(prefix_arr, 1, 3)) # Output: 11 Python Example: Prefix Sums on a TreeNode\nFirstly, let’s define a binary tree:\nclass TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right Now, we’ll modify the tree such that each node will contain the sum of all nodes in its left subtree plus its own value:\ndef prefix_sum_tree(node): if not node: return 0 left_sum = prefix_sum_tree(node.left) # Store prefix sum in the node's value node.value += left_sum prefix_sum_tree(node.right) return node.value + (node.right.value if node.right else 0) # Example root = TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(8)) prefix_sum_tree(root) For the above example, the left child of the root (i.e., the node with value 3) will be updated to 8 (2 + 3 + 4), since 2 and 4 are the left children’s values.\nDynamic programming (DP) Breadth First Search (BFS) BFS on Tree:\nfrom collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bfs_tree(root): queue = deque([root]) while queue: node = queue.popleft() print(node.val, end=' ') if node.left: queue.append(node.left) if node.right: queue.append(node.right) root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) bfs_tree(root) BFS on Graph:\nfrom collections import defaultdict, deque class Graph: def __init__(self): self.graph = defaultdict(list) def add_edge(self, u, v): self.graph[u].append(v) def bfs(self, start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: print(node, end=' ') visited.add(node) for neighbor in self.graph[node]: if neighbor not in visited: queue.append(neighbor) g = Graph() g.add_edge(0, 1) g.add_edge(0, 2) g.add_edge(1, 2) g.add_edge(2, 0) g.add_edge(2, 3) g.add_edge(3, 3) g.bfs(2) Depth-first search (DFS) DFS on Tree:\ndef dfs(root, target): if root is None: return None if root.val == target: return root left = dfs(root.left, target) if left is not None: return left return dfs(root.right, target) DFS on Graph:\ndef dfs(root, visited): for neighbor in get_neighbors(root): if neighbor in visited: continue visited.add(neighbor) dfs(neighbor, visited) DFS on two-dimensional array:\nLet’s imagine you have a big maze made of walls and corridors, and you want to find a way from the entrance to the exit. You can put a robot at the entrance, and you want to tell the robot what to do to find the exit.\nThe first thing you might tell the robot is to always go as far as it can in one direction before turning. This is what depth-first search does.\nThe robot starts at the entrance and goes as far as it can down the first corridor it finds.\nIf it comes to a dead end, it goes back to the last intersection it passed and tries the next corridor. If it comes to the exit, it stops and says “I found the exit!”. Example:\n# Define the maze as a two-dimensional array maze = [ ['.', '.', '#', '#', '#', '#', '#', '#'], ['#', '.', '.', '.', '#', '.', '.', '#'], ['#', '.', '#', '.', '#', '.', '.', '#'], ['#', '.', '.', '.', '.', '#', '.', '#'], ['#', '#', '#', '#', '.', '#', '.', '#'], ['#', '.', '.', '.', '.', '.', '.', '#'], ['#', '.', '#', '#', '#', '#', '.', '.'], ['#', '#', '#', '#', '#', '#', '#', '.'], ] # Define the starting point and the destination start = (0, 0) end = (len(maze)-1, len(maze[0])-1) # Define a function to find the exit using depth-first search def dfs(current, visited): # Mark the current cell as visited visited.add(current) # Base case: If we've reached the destination, return True # or other condition if current == end: return True # Try all possible directions from the current cell for delta in [(0, 1), (1, 0), (0, -1), (-1, 0)]: next_cell = (current[0] + delta[0], current[1] + delta[1]) if is_valid_cell(next_cell) and next_cell not in visited: if dfs(next_cell, visited): return **True** # If we couldn't find the exit from this cell, backtrack to the previous cell return False # Call the depth-first search function with the starting point and an empty set of visited cells visited = set() if dfs(start, visited): print(\"I found the exit!\") else: print(\"I couldn't find the exit.\") Base template:\ndef dfs(matrix, row, col, visited): # Check if the current cell is out of bounds or has already been visited if ( row \u003c 0 or row \u003e= len(matrix) or col \u003c 0 or col \u003e= len(matrix[0]) or visited[row][col]: ) return # Mark the current cell as visited visited[row][col] = True # Define the possible directions to move (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Iterate through the directions and call DFS recursively on neighboring cells for step_row, step_col in directions: new_row, new_col = row + step_row, step_col + dc dfs(matrix, new_row, new_col, visited) Backtracking Based on Depth-first search (DFS)\nUsage:\nFinding all permutations, combinations, subsets and solving sudoku are classic combinatorial problems.\nImagine you are trying to solve a puzzle, like a Sudoku. When you are solving a puzzle, sometimes you reach a point where you can’t make any more progress using the current path. That’s when you need to backtrack.\nBacktracking is a general algorithmic technique that is used to find all (or some) solutions to a problem by incrementally building candidates, and checking if the candidate is feasible or not. If the candidate is not feasible, the algorithm goes back (backtracks) to the previous step and tries again with a different candidate. The process continues until a solution is found, or all candidates have been tried.\nBacktracking is an algorithmic technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time.\nBacktracking algorithm is derived from the Recursion algorithm, with the option to revert if a recursive solution fails, i.e. in case a solution fails, the program traces back to the moment where it failed and builds on another solution. So basically it tries out all the possible solutions and finds the correct one.\nBacktracking == DFS on a tree\nHowto:\nBacktracking is drawing tree When drawing the tree, bear in mind: how do we know if we have reached a solution? how do we branch (generate possible children)? Example:\nLet’s say we want to generate all possible combinations of 1, 2, and 3 of length 2. The possible combinations are: (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2).\nThis process generates all possible combinations of length k:\ndef backtrack(nums, path, res, k): # nums: the list of available numbers # path: the current path of selected numbers # res: the list of all valid combinations # k: the length of each combination if len(path) == k: # base case res.append(path[:]) return for i in range(len(nums)): path.append(nums[i]) backtrack(nums[:i] + nums[i+1:], path, res, k) path.pop() nums = [1, 2, 3] k = 2 res = [] backtrack(nums, [], res, k) print(res) # [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] Algorithm:\nWe start with an empty path and empty result list. We loop through the available numbers (1, 2, 3) and add the first number to the path. We make a recursive call to backtrack with the remaining numbers (2, 3) and a path that includes the first number (e.g., [1]). This adds all possible combinations of length k-1 with the first number. After the recursive call, we remove the first number from the path. We repeat this process for the other available numbers, generating all possible combinations of length k. When we reach the base case (len(path) == k), we add the current path to the result list. We return the result list of all possible combinations. The base case is when the length of the path is equal to k. At this point, we add the current path to the result list and return.\nThe recursive case involves looping through the available numbers, adding the current number to the path, making a recursive call with the remaining numbers, and removing the current number from the path after the recursive call.\npath:\nIn the backtrack function, path refers to the list of numbers that have been selected so far to form a valid combination.\nInitially, path is an empty list []. In each recursive call, a number from nums is selected and added to path.\nFor example, if nums = [1, 2, 3] and the current path is [1], the function will call backtrack([2, 3], [1], res, k) to consider all possible combinations with 1 in the first position, followed by all possible combinations of length k-1 of [2, 3] in the second position.\nOnce all possible combinations with 1 in the first position have been explored, the number 1 will be removed from path, and the function will try the next number from nums, which in this case is 2. The function continues in this way until all valid combinations of length k have been found and added to the res list.\nProblem examples:\nLeetCode 17. Letter Combinations of a Phone Number [LeetCode 22. Generate Parentheses] [LeetCode 46. Permutations] Example of LeetCode 78 problem:\nAlgorithm:\nWe define a backtrack function named backtrack(first, curr) which takes the index of first element to add and a current combination as arguments.\nIf the current combination is done, we add the combination to the final output.\nOtherwise, we iterate over the indexes i from first to the length of the entire sequence n.\nAdd integer nums[i] into the current combination curr. Proceed to add more integers into the combination: backtrack(i + 1, curr). Backtrack by removing nums[i] from curr. class Solution: def subsets(self, nums: List[int]) -\u003e List[List[int]]: def backtrack(first = 0, curr = []): # if the combination is done if len(curr) == k: output.append(curr[:]) return for i in range(first, n): # add nums[i] into the current combination curr.append(nums[i]) # use next integers to complete the combination backtrack(i + 1, curr) # backtrack curr.pop() output = [] n = len(nums) for k in range(n + 1): backtrack() return output # [ [], # [1], [3], [4], # [1, 3], [1, 4], [3, 4], # [1, 3, 4] # ] Trie class TrieNode: def __init__(self): self.children = {} self.is_end = False class Trie: def insert(self, word: str) -\u003e None: current_node = self.root for char in word: if char not in current_node.children: new_node = TrieNode() current_node.children[char] = new_node current_node = new_node else: current_node = current_node.children[char] current_node.is_end = True def search(self, word: str) -\u003e bool: current_node = self.root for char in word: if char not in current_node.children: return False current_node = current_node.children[char] return current_node.is_end def startsWith(self, prefix: str) -\u003e bool: current_node = self.root for char in prefix: if char not in current_node.children: return False current_node = current_node.children[char] return True Dutch National Flag problem The Dutch National Flag problem is a sorting problem that asks us to sort an array of colors, like a bunch of different colored socks. We want to put all the socks of the same color together in the array.\nThe colors in this problem are represented by numbers. We use the numbers 0, 1, and 2 to represent the colors red, white, and blue. So, we have an array of numbers, and we want to sort them in such a way that all the 0's are at the beginning of the array, then all the 1's, and finally all the 2's are at the end.\nFor example, if we have an array [2, 0, 2, 1, 1, 0], we want to sort it so that it becomes [0, 0, 1, 1, 2, 2].\nOne way to solve this problem is to use a technique called the Dutch National Flag algorithm. The idea behind this algorithm is to use three pointers: a low pointer, a mid pointer, and a high pointer.\nThe low pointer starts at the beginning of the array, the high pointer starts at the end of the array, and the mid pointer starts at the beginning of the array.\nWe then iterate through the array with the mid pointer.\nIf the value at the mid pointer is 0, we swap it with the value at the low pointer and increment both pointers. - If the value at the mid pointer is 1, we leave it where it is and just increment the mid pointer. If the value at the mid pointer is 2, we swap it with the value at the high pointer and decrement the high pointer. We keep doing this until the mid pointer passes the high pointer, at which point the array is sorted.\nSo, in our sock example, we start with the low pointer at the beginning of the array, the mid pointer also at the beginning of the array, and the high pointer at the end of the array. Then, we iterate through the array with the mid pointer, swapping socks as needed until the array is sorted by color.\nResources https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/ https://algo.monster/templates https://interviewnoodle.com/grokking-leetcode-a-smarter-way-to-prepare-for-coding-interviews-e86d5c9fe4e1 data structures Competitive Programming Library Algorithms for Competitive Programming Solutions to Introduction to Algorithms Third Edition ","description":"LeetCode Cookbook - Algorithms","title":"Algorithms","uri":"/en/tracks/algorithms-101/algorithms/"},{"content":"About Documentation User Guide API Gateway provides the opportunity to create and expand your own REST and WebSocket APIs at any size.\nAPI endpoints can be cached to accommodate for frequent similar requests.\nUse Cases Build a network for micros­ervices archit­ectures.\nAmazon CloudWatch metrics - Collects near-real-time metrics Examples: 4XXError (client-side errors), 5XXError(server-side errors), CacheHitCount Amazon CloudWatch Logs - Debug issues related to request execution AWS CloudTrail - Record of actions taken by a user, role, or an AWS service in API Gateway AWS X-Ray - Trace your request across different AWS Services Digests Concepts REST API, HTTP API, WebSocket API\nDeployment - point-in-time snapshot of your API Gateway API\nEndpoint - https://api-id.execute-api.region-id.amazonaws.com\nEdge-optimized Private Regional Stage - A logical reference to a lifecycle state of your API. Route - URL path, Latency based routing, Integration - Lambda, HTTP, Private VPC, CORS Import/Export - Open API AM User should have permission to enable logging Amazon API Gateway is an AWS service for creating, publishing, maintaining, monitoring, and securing REST, HTTP, and WebSocket APIs at any scale.\nStage variables are name-value pairs that you can define as configuration attributes associated with a deployment stage of a REST API. The act like environment variables and can be used in your API setup and mapping templates.\nWith deployment stages in API Gateway you can manage multiple release stages for each API, such as: alpha, beta, and production. Using stage variables you can configure an API deployment stage to interact with different backend endpoints.\nWhen you build an API Gateway API with standard Lambda integration using the API Gateway console, the console automatically adds the required permissions. However, when you set up a stage variable to call a Lambda function through our API, you must manually add these permissions.\nIntegration timeout for AWS, Lambda, Lambda proxy, HTTP, HTTP proxy - 50 ms to 29 seconds\nYou can enable API caching to cache your endpoint’s responses, this reduces the number of calls made to your endpoint and improves the latency of requests to your API\nAWS Gateway Integration types:\nAWS_ Proxy - lambda proxy integration HTTP - http custom integration HTTP_PROXY - http proxy Practice Creating a RESTful API Using Amazon API Gateway Questions Q1 You are developing an API in Amazon API Gateway that several mobile applications will use to interface with a back end service in AWS being written by another developer. You can use a(n)____ integration for your API methods to develop and test your client applications before the other developer has completed work on the back end.\nA) HTTP proxy B) mock C) AWS service proxy D) Lambda function Explanation http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-method-settings-console.html\nAmazon API Gateway supports mock integrations for API methods.\nB\nQ2 A developer is designing a web application that allows the users to post comments and receive in a real-time feedback.\nWhich architectures meet these requirements? (Select TWO.)\nCreate an AWS AppSync schema and corresponding APIs. Use an Amazon DynamoDB table as the data store. Create a WebSocket API in Amazon API Gateway. Use an AWS Lambda function as the backend and an Amazon DynamoDB table as the data store Create an AWS Elastic Beanstalk application backed by an Amazon RDS database. Configure the application to allow long-lived TCP/IP sockets. Create a GraphQL endpoint in Amazon API Gateway. Use an Amazon DynamoDB table as the data store. Enable WebSocket on Amazon CloudFront. Use an AWS Lambda function as the origin and an Amazon Aurora DB cluster as the data store Explanation AWS AppSync simplifies application development by letting users create a flexible API to securely access, manipulate, and combine data from one or more data sources. AWS AppSync is a managed service that uses GraphQL to make it easy for applications to get the exact data they need.\nAWS AppSync allows users to build scalable applications, including those requiring real-time updates, on a range of data sources, including Amazon DynamoDB. In Amazon API Gateway, users can create a WebSocket API as a stateful frontend for an AWS service (such as AWS Lambda or DynamoDB) or for an HTTP endpoint.\nThe WebSocket API invokes the backend based on the content of the messages it receives from client applications. Unlike a REST API, which receives and responds to requests, a WebSocket API supports two-way communication between client applications and the backend.\n1, 2\nQ3 A company is providing services to many downstream consumers. Each consumer may connect to one or more services. This has resulted in complex architecture that is difficult to manage and does not scale well. The company needs a single interface to manage these services to consumers\nWhich AWS service should be used to refactor this architecture?\nAWS X-Ray Amazon SQS AWS Lambda Amazon API Gateway Explanation 4\nQ4 Veronika is writing a REST service that will add items to a shopping list. The service is built on Amazon API Gateway with AWS Lambda integrations. The shopping list stems are sent as query string parameters in the method request.\nHow should Veronika convert the query string parameters to arguments for the Lambda function?\nEnable request validation Include the Amazon Resource Name (ARN) of the Lambda function Change the integration type Create a mapping template Explanation API Gateway mapping template\n4\nQ5 A developer is designing a full-stack serverless application. Files for the website are stored in an Amazon S3 bucket. AWS Lambda functions that use Amazon API Gateway endpoints return results from an Amazon DynamoDB table. The developer must create a solution that securely provides registration and authentication for the application while minimizing the amount of configuration.\nWhich solution meets these requirements?\nCreate an Amazon Cognito user pool and an app client. Configure the app client to use the user pool and provide the hosted web UI provided for sign-up and sign-in. Configure an Amazon Cognito identity pool. Map the users with IAM roles that are configured to access the S3 bucket that stores the website. Configure and launch an Amazon EC2 instance to set up an identity provider with an Amazon Cognito user pool. Configure the user pool to provide the hosted web UI for sign-up and sign-in. Create an IAM policy that allows access to the website that is stored in the S3 bucket. Attach the policy to an IAM group. Add IAM users to the group. Explanation 2\nQ6 A company has moved a legacy on-premises application to AWS by performing a lift and shift. The application exposes a REST API that can be used to retrieve billing information. The application is running on a single Amazon EC2 instance. The application code cannot support concurrent invocations. Many clients access the API, and the company adds new clients all the time.\nA developer is concerned that the application might become overwhelmed by too many requests. The developer needs to limit the number of requests to the API for all current and future clients. The developer must not change the API, the application, or the client code.\nWhat should the developer do to meet these requirements?\nPlace the API behind an Amazon API Gateway API. Set the server-side throttling limits. Place the API behind a Network Load Balancer. Set the target group throttling limits. Place the API behind an Application Load Balancer. Set the target group throttling limits. Place the API behind an Amazon API Gateway API. Set the per-client throttling limits. Explanation 4\n","description":"Create, maintain, and secure APIs at any scale with Amazon API Gateway","title":"API Gateway","uri":"/en/tracks/aws-certified-developer-associate/api-gateway/"},{"content":"Lab Automating Code Reviews with Amazon CodeGuru Associating Amazon CodeGuru with a CodeCommit Repository 1. Navigate to the Amazon CodeCommit console.\n2. Click java-web-app:\n3. Notice that at the moment, only a README file has been committed to the master branch. Next, you’ll associate CodeGuru with this repository, so that CodeGuru can begin to analyze the code therein.\n4. Go to the CodeGuru dashboard.\n5. Click Associate Repository and run analysis:\n6. Select AWS CodeCommit as the provider, choose java-web-app from the repository dropdown, enter _master_into Source branch and click Associate:\nIn roughly one minute, you’ll see that CodeGuru has associated with your repository:\nTriggering an Amazon CodeGuru Review 1. Navigate to :8080 in your browser.\nNote: This is the IP of an EC2 instance that can be found in the EC2 console.\n2. Click the file icon in the top left to open the file tree:\nNote: During the creation of this lab, two things were performed automatically. One is that the CodeCommit repository you visited earlier was cloned to the directory you’re looking at in the IDE now. Another is that the framework for a Java web app was added in addition to the single README you saw. This is so that you can see the benefits of CodeGuru without having to work heavily with code.\nIn this lab step, you’ll push all the new code to the nearly-empty Code Commit repository, to trigger a CodeGuru review.\n3. Open the terminal in your IDE:\n4. In the terminal, add the new files to a Git branch, and commit and push the changes:\ncd /cloudacademy/lab git add . git checkout -b trigger_branch git commit -m \"trigger a CodeGuru analysis by pushing Java code\" git push origin trigger_branch This will create a Git commit that includes all the Java files in a branch called trigger_branch, so that you can make a pull request in CodeCommit. Since CodeGuru analyses are triggered by pull requests, this is what will trigger a CodeGuru analysis.\n5. Back on the CodeCommit dashboard, click Create pull request:\n6. Set the Destination to master and the source to trigger_branch and click Compare:\n7. Type Trigger a CodeGuru Reviewer Analysis into the Title field and click Create pull request:\nThis will create a pull request and trigger a CodeGuru review.\nViewing Amazon CodeGuru Comments 1. If you weren’t automatically brought to the pull request details page after creating your pull request, click Pull Requests beneath Repositories on the left side of the page:\n2. Click the only available pull request:\n3. Notice the section mentioning CodeGuru Reviewer:\nThis section will display in each pull request made in any repository associated with CodeGuru. As of the time this lab was released, CodeGuru is still in preview. As the section on your pull request details tab mentions, because it’s in preview mode, CodeGuru can take a while to process a pull request. There isn’t a way to track its progress, and you currently won’t be alerted when that processing begins or finishes.\n4. Select the Changes tab:\n5. In the Go to file filter, enter dockerservlet and click the result to navigate to the file:\nYou may need to scroll down the page to find the DockerServlet.java file changes. This file is known to have CodeGuru Reviewer comments that usually appear a few minutes after creating the pull request.\n6. Scroll down to line 60 to see an example of a comment from CodeGuru Reviewer (If you don’t see any comment you may try refreshing the page every minute until one appears):\nYou can then make updates as you see fit, and submit more pull requests to see if you’ve addressed CodeGuru’s suggestions.\n","description":"","title":"Automating Code Reviews with Amazon CodeGuru","uri":"/en/tracks/aws-certified-developer-associate/codeguru/automating-code-reviews-amazon-codeguru/"},{"content":"About The Average True Range (ATR) is a technical analysis indicator that measures market volatility by decomposing the entire range of an asset price for that period. It was developed by J. Welles Wilder Jr. and introduced in his book “New Concepts in Technical Trading Systems” in 1978.\nCalculating Formula ATR is calculated based on the true range (TR), which is the maximum of the following:\nCurrent High less the current Low Absolute value of (Current High less the previous Close) Absolute value of (Current Low less the previous Close) The ATR is then the moving average over a given period of the TR.\nATR = Average(TR, N)\nFor the first calculation of the ATR, it’s simply the average of the TR over a specified period. But for subsequent calculations, it’s the average of the previous ATR value and the current TR.\nPros and Cons Pros:\nATR does not provide a directional bias, it purely measures volatility. It can be used in all markets such as stocks, forex, commodities etc. ATR adapts to changing market conditions, increasing during market turbulence and decreasing in calm markets. Cons:\nATR does not indicate price direction, only volatility. During periods of rapid price changes, ATR may experience sharp increases, reflecting the inherent volatility in the price series. Example of signals ATR does not provide trading signals like other oscillators such as RSI or MACD. It provides a gauge of market volatility which can assist in stop loss placement or determining trade size.\nTrue Positive:\nIn a trending market, ATR can help a trader place their stop loss further away during high volatility periods and closer during low volatility periods, reducing the likelihood of being stopped out prematurely.\nFalse Positive:\nIn a ranging market, a sudden price breakout can cause a sharp increase in ATR, possibly leading to an unnecessarily wide stop loss if the breakout turns out to be a false one.\nUse in Real Trading In real trading, ATR can be used in conjunction with other indicators for better signal confirmation. For example, ATR can be used with a trend following system to manage stop losses. As ATR increases, your stop loss can be placed further from your entry point allowing for market volatility.\nPython Implementation Click here to view this notebook in full screen ","description":"ATR Trading Indicator","title":"Average True Range (ATR) - Volatility Indicator","uri":"/en/posts/trading-indicators/atr/"},{"content":"Preface For Amplify project I use eu-west region github repo has to be ready private or public New project goto https://eu-west-1.console.aws.amazon.com/amplify/home?region=eu-west-1#/\nNew app → Host web app → Github\nAdd access to github repo Select repository Come back to Amplify and try again to choose repo Click Next\nUpdate amplify.yml for node.js project\nversion: 1 frontend: phases: preBuild: commands: - yarn install build: commands: - yarn run build artifacts: baseDirectory: build files: - '**/*' cache: paths: - node_modules/**/* Next → Save and deploy Amplify starts to build project and generates project url.\nOnce build done you can open project.\n","description":"AWS Amplify - Initial setup with Github","title":"AWS Amplify - project setup with Github","uri":"/en/posts/cloud-exam-quizz/amplify-setup-project/"},{"content":"You can use any custom domain with Amplify and no need register it with AWS Route53.\nI am adding domain at the setup app stage. Another way is from console.\nClick Domain management. or\nAdd domain Write domain name -\u003e Configure domain -\u003e Save Nest starts SSL configuration process. Amplify provides with DNS data that you need to write in the domain register account. Once SSL creation starts you can get domain data\nAction -\u003e View DNS records\nCopy provided data (DNS records) and then set it in the domain registrar panel. Go to domain registrar Set dns servers to default In my case panel looks like this: Save Go to amplify and check for updates. Amplify checks DNS server and if everything is correct (CNAME set) it will proceed to the next step. SSL configuration passed, waiting up to 30 min for domain activation\nOnce done we can check url: https://cloud-exam-prepare.com Check url: cloud-exam-prepare.com\nResources:\nhttps://docs.aws.amazon.com/amplify/latest/userguide/to-add-a-custom-domain-managed-by-a-third-party-dns-provider.html ","description":"Set custom domain on AWS Amplify","title":"AWS Amplify - Set custom domain","uri":"/en/posts/cloud-exam-quizz/amplify-custom-domain/"},{"content":"Rename all files in current directory / Remove prefix #!/bin/bash REMOVE_PREFIX=$1 files=(*) for file in \"${files[@]}\" do if [[ $file == *\"${REMOVE_PREFIX}\"* ]]; then # Remove everything before and including the \"№\" symbol new_file=${file##*\"${REMOVE_PREFIX}\"} mv \"$file\" \"$new_file\" echo \"Renamed $file to $new_file\" fi done $ ./rename_files.sh abc renamed file abc123.txt -\u003e 123.txt Add substring to filename #!/bin/bash DIR=\"/path/to/folder\" cd \"$DIR\" # Rename all .png files and add \".ru\" before .png for file in *.png; do base=$(basename \"$file\" .png) mv \"$file\" \"${base}.ru.png\" done Git Push/Pull for all repos in path git pull files=(*) #!/bin/bash # For every item in the current directory for d in */; do cd \"$d\" if [[ -d \".git\" ]]; then echo $d git pull fi cd .. done git push #!/bin/bash # For every item in the current directory for d in */; do cd \"$d\" if [[ -d \".git\" ]]; then echo $d git add . git commit -m \"Auto apply\" # black . # python formatter # git add . # git commit -m \"[chore] formatter\" git push fi cd .. done git untrack #!/bin/bash items_to_untrack=(\".idea\" \".vscode\" \".DS_Store\" \"__pycache__\" \"node_modules\" \".env\" \".serverless\") # For every item in the current directory for d in */; do echo $d cd \"$d\" # Iterate over each item to untrack for item in \"${items_to_untrack[@]}\"; do # If the item exists if [[ -e \"$item\" ]]; then # Untrack the item git rm -r --cached \"$item\" fi done cd .. done ","description":"Handy collection of Bash code snippets in this tutorial, perfect for mastering Linux programming tasks. Learn to rename files by a pattern, perform Git operations across multiple repositories, and untrack specific items in your Git setup.","title":"Bash code snippets","uri":"/en/posts/bash-snippets/"},{"content":"$0 - The Name of the Script $0 represents the name of the Bash script as it was called.\nIf you execute a script with bash myscript.sh, then within myscript.sh, $0 will be myscript.sh.\n$1, $2, $3, … - Positional Parameters These variables correspond to the arguments passed to the script. $1 is the first argument, $2 is the second, and so on.\nIn the command bash myscript.sh arg1 arg2, $1 equals arg1, and $2 equals arg2.\n$! - PID of the Last Background Process This holds the process ID of the most recent background process. It’s particularly useful in managing parallel processing in scripts.\n$# - Number of Parameters $# provides the count of arguments passed to the script, enabling scripts to adapt based on the number of inputs.\n$* and $@ - All Positional Parameters Both $* and $@ expand to all positional parameters, but they behave differently when quoted. \"${*}\" merges all parameters into a single string, while \"${@}\" treats each as a separate word.\n$? - Exit Status of the Last Command The exit status of the most recently executed command is stored in $?, where 0 typically signifies success.\nSpecial Cases $$ is the PID of the script itself. $- shows the current options set for the shell dirname Strips the last component from a file path.\nIf you have a file path /home/user/documents/report.txt, the dirname command will extract and return /home/user/documents, which is the directory part of the path.\ndirname can be especially useful in scripting when you need to perform operations relative to the location of a script or file.\n","description":"A comprehensive guide to special variables in Bash, including $0, $1, $!, and more, essential for effective script writing.","title":"Bash Special Variables $! $0 $? $$","uri":"/en/posts/bash-variables/"},{"content":"1. What is a Binary Tree?\nA binary tree is a data structure in which each node has at most two children, which are referred to as the left child and the right child.\n2. Representing a Binary Tree in Python\nTo represent a binary tree in Python, we can create a class called Node to represent each node in the tree. Each node will have a value and references to its left and right children.\nIf a node doesn’t have a left or right child, the reference will be set to None. Here’s an example implementation:\nclass Node: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right On this step None will look like this:\n3. Adding Nodes to a Binary Tree\nOnce we have a representation of a node, we can start adding nodes to the tree to create the structure of the binary tree.\nTo add a node, we need to find the correct position in the tree where the new node should be added. This is typically done by starting at the root node and comparing the value of the new node to the value of the current node.\nIf the new node’s value is less than the current node’s value, we move to the left child. If the new node’s value is greater than the current node’s value, we move to the right child. We repeat this process until we find a position where there is no left or right child (i.e., the current node is a leaf node), and we can add the new node there.\nHere’s an example implementation of a function to add a node to a binary tree:\ndef insert(root, value): if root is None: return Node(value) # basicaly create a new root Node if value \u003c root.value: root.left = insert(root.left, value) else: root.right = insert(root.right, value) return root Visualize Binary Tree\n4. Full Binary Tree Class\nclass Node: def __init__(self, value): self.value = value self.left = None self.right = None def insert(self, value): if self.value: if value \u003c self.value: if self.left is None: self.left = Node(value) else: self.left.insert(value) else: if self.right is None: self.right = Node(value) else: self.right.insert(value) else: self.value = value def search(self, value): if value \u003c self.value: if self.left is None: return False else: return self.left.search(value) elif value \u003e self.value: if self.right is None: return False else: return self.right.search(value) else: return True def remove(self, value, parent=None): if value \u003c self.value: if self.left: self.left.remove(value, self) elif value \u003e self.value: if self.right: self.right.remove(value, self) else: if self.left is None and self.right is None: if parent: if parent.left == self: parent.left = None else: parent.right = None else: self.value = None elif self.left and self.right is None: if parent: if parent.left == self: parent.left = self.left else: parent.right = self.left else: self.value = self.left.value self.right = self.left.right self.left = self.left.left elif self.right and self.left is None: if parent: if parent.left == self: parent.left = self.right else: parent.right = self.right else: self.value = self.right.value self.left = self.right.left self.right = self.right.right else: min_larger_node = self.right while min_larger_node.left: min_larger_node = min_larger_node.left self.value = min_larger_node.value if self.right == min_larger_node: self.right = min_larger_node.right else: min_larger_node.parent.left = min_larger_node.right Links Visualize Binary Tree ","description":"Binary Tree","title":"Binary Tree","uri":"/en/tracks/algorithms-101/data-structures/binary-tree/"},{"content":"About Bollinger Bands is a technical indicator developed by John Bollinger in the 1980s. It provides a relative definition of high and low prices of a market instrument by creating a band of two standard deviations from a simple moving average (SMA).\nCalculating Formula Bollinger Bands consist of three lines:\nMiddle Line: 20-day simple moving average (SMA) Upper Band: 20-day SMA + (2 * 20-day standard deviation of price) Lower Band: 20-day SMA - (2 * 20-day standard deviation of price) The standard deviation measures how spread out the prices or returns of an asset are on average. It’s the most common way to gauge market volatility.\nPros and Cons Pros:\nBollinger Bands adjust themselves to market conditions. They can be used in all markets like stocks, forex, commodities, etc. The bands can provide signals for potential overbuying and overselling scenarios. Cons:\nDuring a strong trend, the price can remain at the extremes (upper or lower band) for a long time, leading to many false sell or buy signals. As a lagging indicator, Bollinger Bands might send a late signal, causing the trader to miss a big part of the trend. Example of signals Bollinger Bands are often used to identify potential buy and sell signals.\nBuy Signal: A common strategy is to buy when the price touches the lower Bollinger Band and exit when the price touches the moving average in the center of the bands.\nSell Signal: Conversely, a sell signal is present when the price touches the upper Bollinger Band and exit the position when it touches the moving average.\nTrue Positive:\nIn a ranging market, prices tend to bounce between the upper and lower band, correctly indicating good points to buy and sell.\nFalse Positive:\nIn a trending market, the price can touch the upper band (in an uptrend) or the lower band (in a downtrend) for extended periods, leading to potentially poor buy or sell signals.\nUse in Real Trading Bollinger Bands can be combined with other indicators for better signal confirmation.\nFor example, using it in conjunction with the RSI could help traders avoid false signals. When the price touches the upper band and the RSI indicates overbought conditions, there might be a good chance the price will decrease, indicating a sell signal.\nPython Implementation Click here to view this notebook in full screen ","description":"Bollinger Bands Trading Indicator","title":"Bollinger Bands - Volatility and Price Level Indicator","uri":"/en/posts/trading-indicators/bollinger_bands/"},{"content":"\nBrewMate is a macOS GUI application that makes it easy to search for, install, and uninstall Homebrew casks. You can also see the top downloaded casks for the last month.\nInstall Download the latest DMG file from the releases page or from sourceforge.net Double-click the DMG file to open it. Drag the BrewMate app to your Applications folder. Launch BrewMate from your Applications folder. or\nbrew install romankurnovskii/cask/brewmate --cask or\nbrew tap romankurnovskii/cask brew update brew install brewmate --cask FAQ Is this app free? Yes, the app is free to download and use.\nWhat operating systems does this app support? This app is designed for macOS, and it supports macOS 10.15 (Catalina) and newer versions.\n","description":"Homebrew GUI Apps Manager","title":"BrewMate","uri":"/en/apps/brewmate/"},{"content":"Lab Monitor Like a DevOps Pro: Build A Log Aggregation System in AWS Navigating to Your Cloud’s Lambda Function 1. In the AWS Management Console search bar, enter Cloud Formation, and click the CloudFormation result under Services:\nThis will bring you to the CloudFormation Stacks table.\nThere will be one stack named cloudacademylabs in the table with a Status of CREATE_COMPLETE.\nNote: If the stack hasn’t reached the Statusof CREATE_COMPLETE, try refreshing the page after a minute. It only takes a minute for the stack to fully create.\n2. To view details of the stack, under Stack name, click the cloudacademylabs link.\n3. Click the Resources tab:\nYour Physical IDs will be different than in the supplied image. Note in the Typecolumn that a DynamoDB Table, a Lambda Function, and IAMresources to grant the Lambda access to the DynamoDB Table have all been created. You will be querying the DynamoDB table via Lambda function invocations to create CloudWatch Logs, that will be aggregated and searchable via a user interface (UI).\n4. Click on the Outputs tab, and open the DynamoLambdaConsoleLink link in the Value column:\nThis takes you to the Lambda function Console.\nCreating Some Logs Using AWS Lambda 1. Briefly look around the Lambda function console:\nThe Designergives a visual representation of the AWS resources that trigger the function (there are none in this case), and the AWS resources the function has access to (CloudWatch Logs, and DynamoDB). The actual code that is executed by the function is farther down in the Function codesection. You don’t need to worry about the actual implementation details of the function for this Lab.\n2. To configure a test event to trigger the function, scroll down to the Code source section and click Test:\n3. In the Configure test event form, enter the following values before scrolling to the bottom and click Save:\nEvent name:TestPutEvent Enter the following in the code editor at the bottom of the form: Copy code\n{ \"fn\": \"PUT\", \"data\": { \"id\": \"12345\", \"name\": \"foobar\" } } The PUT object event will update the DynamoDB database with an object with the given id.\n4. To run your function with your test event, click Test again:\nAfter a few seconds, in the code editor, a tab called Execution results will load:\nThe function succeeded and the Function Logsarea displays the logs that were generated and automatically sent to CloudWatch Logs by AWS Lambda.\n5. To view the Amazon CloudWatch logs, click the Monitor tab, and then click View logs in CloudWatch:\nNote: The Lab’s CloudFormation stack outputs also include a link to the Log Group if you need to access it at a later time.\nManually Viewing Logs in Amazon CloudWatch 1. Observe the Log Streams in the CloudWatch log group for the Lambda function you invoked:\nThe rows in the table are different Log Streams for the log group.\nEach log stream corresponds to log events from the same source. AWS Lambda creates a new log event for every Lambda invocation. However, it is possible to have multiple log streams for a single Lambda function since the log stream corresponds to the container actually running the function.\nBehind the scenes, a Lambda is run in a container. After a period of inactivity, the container is unloaded and the following requests will be served by a new container, thus creating a new log stream. Depending on how many times you invoked the test command in the previous step, you will see one or more rows in the log stream.\n2. Click on the latest Log Stream.\nThe log stream is a record of event Messages ordered in Time:\n3. Enter _PUT_into the Filter eventssearch bar and click enter:\n4. Click the triangle to expand the event that matches the filter.\nYou will see the JSON formatted message:\nThe outermost data attribute wraps the test event you configured.\n5. Click custom to display the custom time range filter available in CloudWatch Logs:\nObserve the time-based options in the dialog box that displays:\nThe filter by text and by time capabilities are the tools that are available for sifting through logs in CloudWatch Logs. The text filters support some forms of conditions that can be expressed through a syntax specific to CloudWatch. These capabilities are handy, but you will see that there are more powerful tools available for log aggregation and retrieval.\nLaunching the OpenSearch Domain The first thing you need is an Amazon OpenSearch cluster/domain. Using the Amazon OpenSearch Service has the following benefits:\nIt’s distributed and resilient It supports aggregations It supports free-text search It’s managed and takes care of most of the operational complexities of operating a cluster In 2021 AWS renamed Amazon ElasticSearch Service to Amazon OpenSearch Service. You may see references to ElasticSearch in the Amazon Management Console. You should assume that ElasticSearch and OpenSearch refer to the same AWS service.\nThe following diagram illustrates the overall design of the AWS Lab environment and the part that you are building in this lab step is highlighted in the lower-left corner in the AWS cloud:\n1. In the search bar at the top, enter OpenSearch, and under Services, click the Amazon OpenSearch Service result:\n2. To begin creating your cluster, on the right-hand side of the welcome page, click Create domain:\nThe terms OpenSearch domain and an OpenSearch cluster can be used almost interchangeably. The former is the logical search resource, and the latter is the actual servers that are launched to create a domain.\nThe Create domain form will load.\n3. In the Name section, in the Domain name textbox, enter ca-labs-domain-###, replacing ### with some random numbers:\n4. In the Deployment type section, select the following:\nDeployment type: Select Development and testing Version: Select 6.8under ElasticSearch In this short-lived lab, you are using a Development and testing deployment because it allows public access and reliability isn’t a concern. In a production environment, you will want to use a Production deployment to get the full availability benefits and meet security requirements.\n5. In the Auto-Tune section, select Disable.\nIn this short-lived lab, Auto-Tune is not necessary.\n6. In the Data nodes section, enter and select the following and leave remaining defaults:\nInstance type: Select t3.small.search Number of nodes: Enter 1 The storage type values correspond to the storage types available for Amazon EC2 instances.\nWhen deploying a cluster that uses multiple nodes, you can specify that the nodes are deployed in two or three availability zones. Deploying in multiple availability zones makes the cluster highly available and more reliable in the case of failures of outages.\n7. Scroll down to the Network section, and select Public access:\nIn this lab, you are creating a publicly available Amazon OpenSearch Service cluster for convenience. Be aware that you can also deploy a cluster into an Amazon Virtual Private Cloud (VPC) and receive the network isolation and security advantages of using a VPC.\n8. In the Fine-grained access controlsection, uncheck the Enable fine-grained access controlbox.\n9. In a new browser tab, enter the following URL:\nhttps://checkip.amazonaws.com/\nYou will see an IP address displayed. This is the public IPv4 address of your internet connection. You will use this IP address to restrict access to your Amazon OpenSearch Service cluster.\n10. Scroll down to the Access Policy section and under Domain access policy, select Configure domain level access policy:\nYou will see a policy editor form display with the tabs Visual editor and JSON.\n11. In the Visual editor tab, enter and select the following:\nType: Select IPv4 address Principal: Enter the IP address you saw on the Check IP Page Action: Select Allow You are specifying an access policy that allows access to the cluster from your IP address. In a non-lab environment, you could deploy the cluster into an Amazon VPC and configure private or public access using a VPC’s networking features.\n12. To finish creating your cluster, scroll to the bottom and click Create:\nA page displaying details of your cluster will load and you will see a green notification that you have successfully created a cluster.\n13. In the General information section, observe the Domain status:\nAWS is setting up and deploying your cluster. This process can take up to 15 or 30 minutes to complete.\n12. To see the latest status of your Amazon OpenSearch Service cluster, refresh the page in your browser.\nRefresh the page for your domain periodically to check if it has finished deploying.\nWhilst waiting for the domain to finish provisioning, feel free to consult the Amazon OpenSearch Service Developer Guide to learn more about the OpenSearch service.\nWhen the cluster has been provisioned you will see the Domain status change to Active:\nSending CloudWatch Logs to OpenSearch 1. In the AWS Management Console search bar, enter CloudWatch, and click the CloudWatch result under Services:\n2. In the left-hand menu, under Logs, click on Log groups:\n3. Select the log group beginning with /aws/lambda/cloudacademylabs-DynamoLambda-:\nNext, you will create a subscription filter to send the log data to your ElasticSearch domain.\n4. Click Actions, in the menu that opens, under Subscription filters, click Create Amazon OpenSearch Service subscription filter:\nThe Create Amazon OpenSearch Service subscription filter form will load.\n5. In the Choose destination section, select the following:\nSelect account: Ensure This accountis selected Amazon OpenSearch Service cluster: Select the cluster you created previously After selecting the Amazon OpenSearchService cluster, the Lambda function section will appear.\n6. In the Lambda IAM Execution Role drop-down select LambdaElasticSearch:\n7. In the Configure log format and filters section enter the following:\nLog Format: Select Amazon Lambda Subscription filter name: ca-lab-filter The default Subscription Filter Pattern matches the timestamp, request_id, and event JSON. The Test Patternbutton is available to see which events match the pattern.\n8. To start sending the logs to ElasticSearch, at the bottom, click Start streaming:\nMomentarily, you will see a notification that the subscription filter has been created and logs are being streamed to OpenSearch:\nDiscovering and Searching Events 1. Navigate back to the Lambda function you invoked earlier and click the Test button a few times to submit more PUT events:\n2. Click the arrow on the Test button and click Configure test event:\n3. In the Configure test eventsform, click the radio button for Create new test event and enter the following non-default values:\nEvent name:TestGetEvent Enter the following in the code editor at the bottom of the form: { \"fn\": \"GET\", \"id\": \"12345\" } You will submit more test events of a different type - GET operations on the object that was PUT in the database. This gives two different event types to look at in Kibana (the Log Aggregation UI).\n4. Click Save.\n5. Click Test several times to make GET events.\n6. Return to the Amazon OpenSearch Search Console for the domain you created and click the link under Kibana URL:\n7. In the Add Data to Kibana section, on the right-hand side under Use Elasticsearch data, click Connect to your Elasticsearch index:\nThe log data is stored in OpenSearch, but you need to tell Kibana which index to use for discovering the data.\n8. In the Create an index patternwizard, enter the following value and click Next step:\nIndex pattern: cwl-* The pattern will match the daily CloudWatch Logs (cwl) indices that are created in Amazon OpenSearch.\n9. In the second step, enter the following value and click Create index pattern:\nIndex pattern: Select @timestamp The Time filter field name allows Kibana to determine which attribute represents the timestamp of each event. The confirmation page displays all of the fields in the log data index:\nNow that the index settings for Kibana are configured, you can begin using the Log Aggregation system!\n10. Click Discover in the sidebar menu on the left of the page.\n11. Explore the Discover interface:\nYou see some events and a graph. These are your aggregated log events! The system is online! Notice the search bar up top. It is initially empty so all log events will show up. But what if you only want to see the PUT events for objects containing 12345?\n12. Enter PUT 12345 in the search bar and press enter:\nThe matching terms in the event show up highlighted, and the bar graph updates to show only the count of PUT 12345 events that you made by clicking Test in the Lambda interface.\n13. Click on the timestamp range in the upper-right corner to display the time filter:\nJust as with CloudWatch Logs, you can filter the logs by time. However, in Kibana you can also drag on the bar chart to select a time range visually: Visualizing Aggregated Events 1. Click Visualize in the Kibana sidebar menu.\n2. Click Create a visualization:\n3. Select Areachart visualization:\n4. In the From a New Search, Select Indexarea, click on the *cwl- **index name:\nIf you had any saved searches in the system, you could use them to make this Visualization from this step.\nOn the left-hand side, the visualization configuration tools will appear:\n5. Enter the following values in the visualization configuration:\nSelect buckets type: X-Axis Aggregation: Date Histogram (to track log trends over time) Field: @timestamp Interval: Auto To make the graph more interesting, you will split the PUTs and GETs and display each stacked in on the chart with different colors. This requires a sub-buckets.\n6. Click Add sub-buckets below the rest of the X-Axis settings, and enter the following values:\nSelect buckets type: Split Series Sub Aggregation: Terms (Terms splits the data based on the unique values of a field) Field: $event.data.fn.keyword (The test requests used the fn key for request type, which maps to the $event.data.fn.keyword field in OpenSearch) 7. Click the play button to apply the changes and produce the visualization:\nIt will look something like the image below, with two regions in an area graph corresponding to GET and PUT event count over time:\nTo use the visualization in a Dashboard in the next step, you need to save the visualization.\n8. Click Save in the top toolbar:\n9. Enter PUTs and GETs Over Time in the Save Visualization field, and click Save:\nCreating a Kibana Dashboard 1. Click on Dashboard in the sidebar menu.\n2. Click Create a dashboard:\n3. Click Add to add saved visualizations to the dashboard:\n4. Select the PUT and GETs Over Time visualization:\nThe visualization is added to the dashboard, but the size may not be what you like. You can adjust the size of the visualization by dragging the arrow in the lower-right corner:\n5. Click Save and enter the following values before clicking the revealed Savebutton:\nTitle: Log Dashboard Description: Lambda API Logs You’ve done it! The Dashboard will always contain the up-to-date statistics for your GET and PUT events that run through the Lambda function:\n6. Return to the Lambda console and create as many test events as you want.\n7. Refresh the Kibana dashboard and see the new requests in the visualization:\nYou can also configure Auto-refresh to avoid having to refresh the view:\n","description":"Will create a distributed, scalable log aggregation system within AWS running on Amazon OpenSearch Service. This Log Aggregation System will ingest as much of your CloudWatch log stream events as you want, events generated from AWS EC2 Instances, Lambda functions, Databases, and anything else you want to submit log events from.","title":"Build A Log Aggregation System in AWS","uri":"/en/tracks/aws-certified-developer-associate/opensearch-service/build-log-aggregation-system/"},{"content":"","description":"Certificates","title":"Certificates","uri":"/en/posts/certificates/"},{"content":"Changing the Metadata of an Amazon S3 Object Introduction Each object in Amazon S3 has a set of key/value pairs representing its metadata. There are two types of metadata: “System metadata” (for example, Content-Type and Content-Length) and custom “User metadata”. User metadata is stored with the object and returned with it.\nAs an example, you might have your own taxonomy for various images, such as “logo”, “screenshot”, “diagram”, “flowchart” and so on. In this lab step, you will change the Content-Type of your image to “text/plain”. You will also create custom user metadata.\nNote: With the new Amazon S3 UI you can set the metadata as part of the upload process, or add it later.\nInstructions Return to the cloudfolder/ and delete the cloudacademy-logo.png from your Amazon S3 bucket by checking the checkbox and clicking Delete: The Delete objects form page will load. Because a deleted object is not retrievable, AWS asks you to confirm that you want to delete the object before deletion.\nIn the textbox at the bottom of the page, enter permanently delete and click Delete objects:\nTo return to the bucket object view, at the top-right, click Close.\nClick Upload, then Add files and browse to the logo file (or drag-and-drop it into the Upload wizard) in order to upload it again.\nNear the bottom of the page, expand the Properties section:\nScroll down to the Metadata section and click Add metadata:\nA row of form elements will appear.\nEnter the following: Type: Select System defined Key: Select Content-Type Value: Enter text/plain The drop-down list contains the System metadata that you can set.\nIn this lab, you have set the content type to text/plain as an example to see how to add metadata to an object when uploading to Amazon S3.\nNext you will add custom user metadata. User metadata must be prefaced with “x-amz-meta-”. The remaining instructions will add a custom user type for imagetype, and imagestatus.\nClick Add metadata again to add another row.\nEnter the following to define custom metadata:\nType: Select User defined Key: Enter imagetype after x-amz-meta Value: Enter logo You have added two metadata key-value pairs to the object you are going to upload. One system metadata and one user-defined.\nAt the bottom of the page, click Upload:\nTo exit the upload form, at the top-right, click Close.\nIn the Objects table click the cloudacademy-logo.png object:\nScroll down to the Metadata section and observe the key-value pairs you added:\nThis is also where you can add, remove, and edit metadata after you have uploaded objects to Amazon S3.\n","description":"Changing the Metadata of an Amazon S3 Object","title":"Change metadata of S3 Object","uri":"/en/tracks/aws-certified-developer-associate/s3/how-to-change-metadata-s3/"},{"content":"Display Chart.js diagrams/blocks\nSources\n","description":"Hugo chart.js shortcode","title":"chart","uri":"/en/posts/hugo-shortcode-examples/chart/"},{"content":"Goal: Check if you are ready to pass the Cloud exam\nThe application calculates progress after each answered question. Ability to answer at least one question and get a comment at the same time. No need to pass all questions before. It is convenient to spend 20 min a day Works from web/tablet/mobile Link: https://github.com/romankurnovskii/cloud-exam-prepare\n","description":"Check if you are ready to pass Cloud exam","title":"Cloud exam Quizz","uri":"/en/apps/cloud-exam-quizz/"},{"content":"Release notes example Changed\nfeat(exports): export mergeConfig #5151 Fixed\nfix(CancelledError): include config #4922 fix(general): removing multiple/trailing/leading whitespace #5022 fix(headers): decompression for responses without Content-Length header #5306 fix(webWorker): exception to sending form data in web worker #5139 Refactors\nrefactor(types): AxiosProgressEvent.event type to any #5308 refactor(types): add missing types for static AxiosError.from method #4956 Chores\nchore(docs): remove README link to non-existent upgrade guide #5307 chore(docs): typo in issue template name #5159 Common used\nbuild: Changes that affect the build system or external dependencies (e.g., updates to package.json, pom.xml, build.gradle, Dockerfile, etc.) chore: Regular maintenance tasks and changes that don’t modify the source code or the test suite (e.g., updating build tasks, package manager config, etc.) ci: Changes to Continuous Integration configuration files and scripts (e.g., changes in Jenkinsfile, Travis CI configuration, CircleCI, etc.) docs: Changes only affecting documentation (e.g., changes in README, API docs, comment blocks, etc.) feat: Introducing a new feature to your application. fix: A bug fix in your application code. perf: Performance improvements to your code (e.g., optimizing algorithms, improving efficiency, etc.) refactor: Changes in the code that neither fix a bug nor add a feature; typically, these changes improve code readability or structure. revert: If you are reverting a previous commit. style: Changes to the coding style (e.g., changes in whitespace, formatting, missing semi-colons, etc.) that do not affect the meaning of the code. test: Adding or updating tests, covering new or existing functionality. Code format Detailed description in git commits style Python style JavaScript style ","description":"Code style notes","title":"Code style notes","uri":"/en/posts/code-style/"},{"content":"About AWS CodeArtifact is a fully managed artifact repository service that makes it easy for organizations of any size to securely store, publish, and share software packages used in their software development process.\nDocumentation User Guide CodeAr­tifact is a secure storage, publishing, and sharing of software code packages used in a development process organisation’s software development. CodeAr­tifact makes it easy for small organisations to store, publish, and share software packages.\nCodeArtifact can be configured to automatically fetch software packages and dependencies from public artifact repositories.\nCodeArtifact works with commonly used package managers and build tools like Maven, Gradle, npm, yarn, twine, pip, and NuGet making it easy to integrate into existing development workflows.\nPrice Pay only for what you use – the size of the artifacts stored, the number of requests made, and the amount of data transferred out of an AWS Region. CodeArtifact includes a monthly free tier for storage and requests\nCurrent price\nUse Cases Type: Developer Tools\nAlternatives JFrog Artifactory Docker hub Sonatype Nexus Platform Helm Azure DevOps Services Github Usage aws codeartifact list-domains --region us-east-1 Practice Getting started using the console\n","description":"Amazon CodeArtifact","title":"CodeArtifact","uri":"/en/tracks/aws-certified-developer-associate/codeartifact/"},{"content":"About CodeBuild is a fully managed service that assembles source code, runs unit tests, \u0026 also generates artefacts ready to deploy.\nDocumentation User Guide CodeBuild is a code creation service that also produces code artefacts upon request.\nCodeBuild is an alternative to other build tools such as Jenkins.\nCodeBuild is integrated with KMS for encryption of build artifacts, IAM for build permissions, VPC for network security, and CloudTrail for logging API calls.\nCodeBuild is a fully managed build service to compile source code, run unit tests and produce artifacts that are ready for deployment. Not the best fit for serverless template deployment or serverless application initialization.\nbuildspec.yml Build instructions can be defined in the code (buildspec.yml).\nCodeBuild Local Build In case you need to do deep troubleshooting beyond analyzing log files.\nCan run CodeBuild locally on your computer using Docker.\nLeverages the CodeBuild agent.\nPrice Current price\nYou pay based on the time it takes to complete the builds.\nLab cicd-aws-code-services Chapters:\nLogging in to the Amazon Web Services Console Creating an AWS CodeCommit Repository Committing Code to Your AWS CodeCommit Repository Building and Testing with AWS CodeBuild Deploying with AWS CodeDeploy Automating Your Deployment with AWS CodePipeline Following the Continuous Deployment Pipeline Recovering Automatically from a Failed Deployment Using AWS CodeDeploy Blue/Green Deployments in Your Pipeline Questions Q1 You are creating a few test functions to demonstrate the ease of developing serverless applications. You want to use the command line to deploy AWS Lambda functions, an Amazon API Gateway, and Amazon DynamoDB tables.\nWhat is the easiest way to develop these simple applications?\nInstall AWS SAM CLI and run “sam init [options]” with the templates’ data. Use AWS step function visual workflow and insert your templates in the states Save your template in the Serverless Application Repository and use AWS SAM Explanation AWS SAM - AWS Serverless Application Model\nhttps://aws.amazon.com/serverless/sam/\n1\n","description":"Amazon CodeBuild - Build and test code with continuous scaling. Pay only for the build time you use.","title":"CodeBuild","uri":"/en/tracks/aws-certified-developer-associate/codebuild/"},{"content":"About CodeDeploy is a fully managed deployment service that automates software deploy­ments to a variety of compute services such as EC2, Fargate, Lambda, \u0026 on-pre­mises servers\nDocumentation User Guide CodeDeploy can also deploy a serverless Lambda function.\nCodeDeploy can be connected to CodePipeline and use artifacts from there.\nPlatforms Need to choose the compute platform:\nEC2/On-premises. AWS Lambda. Amazon ECS. AppSpec File The application specification file (AppSpec file) is a YAML-formatted, or JSON-formatted file used by CodeDeploy to manage a deployment.\nThe AppSpec file defines the deployment actions you want AWS CodeDeploy to execute.\nDeployment types In-place deployment (EC2 only)\nBlue/green deployments:\nAWS Lambda: Traffic is shifted from one version of a Lambda function to a new version of the same Lambda function.\nAmazon ECS: Traffic is shifted from a task set in your Amazon ECS service to an updated, replacement task set in the same Amazon ECS service.\nEC2/On-Premises: Traffic is shifted from one set of instances in the original environment to a replacement set of instances.\nPrice Current price\nUse Cases Type: Developer Tools\nPractice Continuous Integration and Deployment with AWS Code Services Questions Q1 What will happen if you delete an unused custom deployment configuration in AWS CodeDeploy?\nYou will no longer be able to associate the deleted deployment configuration with new deployments and new deployment groups. Nothing will happen, as the custom deployment configuration was unused. All deployment groups associated with the custom deployment configuration will also be deleted. All deployments associated with the custom deployment configuration will be terminated. Explanation https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-delete.html\nCan delete only if unused.\n1\nQ2 What happens when you delete a deployment group with the AWS CLI in AWS CodeDeploy?\nAll details associated with that deployment group will be moved from AWS CodeDeploy to AWS OpsWorks. The instances used in the deployment group will change. All details associated with that deployment group will also be deleted from AWS CodeDeploy. The instances that were participating in the deployment group will run once again. Explanation https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-groups-delete.html\nIf you delete a deployment group, all details associated with that deployment group will also be deleted from CodeDeploy. The instances used in the deployment group will remain unchanged. This action cannot be undone.\n3\n","description":"Amazon CodeDeploy - Automate code deployments to maintain application uptime","title":"CodeDeploy","uri":"/en/tracks/aws-certified-developer-associate/codedeploy/"},{"content":"About AWS CodePipeline is a fully managed continuous delivery service that helps you automate your release pipelines for fast and reliable application and infrastructure updates.\nDocumentation User Guide CodePipeline automates the build, test, and deploy phases of your release process every time there is a code change, based on the release model you define.\nYou can easily integrate AWS CodePipeline with third-party services such as GitHub or with your own custom plugin. With AWS CodePipeline, you only pay for what you use.\nAlternatives Bamboo. CircleCI. Jenkins. Travis CI. GitLab. TeamCity. Azure DevOps Server. Google Cloud Build. Terminology Pipelines\nA workflow that describes how software changes go through the release process.\nArtifacts\nFiles or changes that will be worked on by the actions and stages in the pipeline. Each pipeline stage can create “artifacts”. Artifacts are passed, stored in Amazon S3, and then passed on to the next stage. Stages\nPipelines are broken up into stages, e.g., build stage, deployment stage. Each stage can have sequential actions and or parallel actions. Stage examples would be build, test, deploy, load test etc. Manual approval can be defined at any stage. Actions\nStages contain at least one action, these actions take some action on artifacts and will have artifacts as either an input, and output, or both.\nTransitions\nThe progressing from one stage to another inside of a pipeline.\nPrice Current price\nQuestions Q1 You are configuring a Jenkins project that is installed on an Amazon EC2 instance running a Windows operating system. You want this Jenkins project to integrate with AWS CodePipeline.\nWhich actions should you take to make this function perform correctly? (2 answers)\nRestart all Amazon EC2 instances that are running a Windows operating system. Provide the IAM user credentials to integrate AWS CodePipeline. Fill out the required fields for your proxy host. Modify the PATH variable to include the directory where you installed Jenkins on all Amazon EC2 instance that are running a Windows operating system. Explanation https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-four-stage-pipeline.html\n2, 3\n","description":"Amazon CodePipeline Automate continuous delivery pipelines for fast and reliable updates","title":"CodePipeline","uri":"/en/tracks/aws-certified-developer-associate/codepipeline/"},{"content":"About Amazon Cognito - Simple and Secure User Sign-Up, Sign-In, and Access Control\nDocumentation User Guide Amazon Cognito lets you add user sign-up, sign-in, and access control to your web and mobile apps quickly and easily. Amazon Cognito scales to millions of users and supports sign-in with social identity providers, such as Apple, Facebook, Google, and Amazon, and enterprise identity providers via SAML 2.0 and OpenID Connect.\nUsers can sign in directly with a user name and password, or through a third party such as Facebook, Amazon, or Google.\nAlternatives Auth0 Microsoft Azure Active Directory OneLogin Google Cloud Identity Platform IBM Security Verify Keycloak Terminology Credentials: The temporary security credentials, which include an access key ID, a secret access key, and a security token.\nAssumedRoleUser: The ARN and the assumed role ID, which are identifiers for the temporary security credentials that you can programatically refer to.\nPrice Pay only for what you use. First 50,000 (monthly active users (MAUs) - Free.\nCurrent price\nUse Cases Type: Identity \u0026 access management\nSame type services: Identity \u0026 Access Management (IAM), Single Sign-On, Cognito, Directory Service, Resource Access Manager, Organisations\nWorkflow The process of authenticating a user with Cognito is as follows:\nThe user signs in with a Web ID provider (Google, Facebook, Amazon, etc.) The Web ID provider returns a JWT token to the user The user application makes an STS API call: sts assume-role-with-web-identity STS returns an API response with the temporary credentials The user application now has AWS access e.g. for S3, DynamoDB, etc. Practice Manage Authentication with Amazon Cognito\nQuestions Q1 You are deploying Multi-Factor Authentication (MFA) on Amazon Cognito. You have set the verification message to be by SMS. However, during testing, you do not receive the MFA SMS on your device.\nWhat action will best solve this issue?\nUse AWS Lambda to send the time-based one-time password by SMS Increase the complexity of the password Create and assign a role with a policy that enables Cognito to send SMS messages to users Create and assign a role with a policy that enables Cognito to send Email messages to users Explanation https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html\n3\nQ2 A developer is adding sign-up and sign-in functionality to an application. The application is required to make an API call to a custom analytics solution to log user sign-in events\nWhich combination of actions should the developer take to satisfy these requirements? (Select TWO.)\nUse Amazon Cognito to provide the sign-up and sign-in functionality Use AWS IAM to provide the sign-up and sign-in functionality Configure an AWS Config rule to make the API call triggered by the post-authentication event Invoke an Amazon API Gateway method to make the API call triggered by the post-authentication event Execute an AWS Lambda function to make the API call triggered by the post-authentication event Explanation Amazon Cognito adds user sign-up, sign-in, and access control to web and mobile applications quickly and easily. Users can also create an AWS Lambda function to make an API call to a custom analytics solution and then trigger that function with an Amazon Cognito post authentication trigger.\n1, 5\n","description":"Amazon Cognito","title":"Cognito","uri":"/en/tracks/aws-certified-developer-associate/cognito/"},{"content":"","description":"Monitors date expiration of access and id tokens provided by Amazon Cognito. Refreshes when expired.","title":"cognito-token-observer","uri":"/en/apps/npm/cognito-token-observer/"},{"content":"Practice Lab link Creating an Amazon S3 Bucket for a Static Website 1. In the AWS Management Console search bar, enter S3, and click the S3 result under Services:\nYou will be placed in the Amazon S3 console.\n2. To start creating a new Amazon S3 bucket, in the top-right, click Create bucket:\nThe Amazon S3 bucket creation form will load.\n3. Under General configuration, enter the following:\nBucket name: Enter calabs-bucket-\u003cUniqueNumber\u003e(Append a unique number to the end of calabs-bucket-) Region: Ensure US West (Oregon) us-west-2 is selected You have added a unique number to the bucket name because Amazon S3 bucket names must be unique regardless of the AWS region in which the bucket is created.\nA bucket name must also be DNS compliant. Here are some of the rules it must adhere to:\nThey must be at least 3 and no more than 63 characters long. They may contain lowercase letters, numbers, periods, and/or hyphens. Each label must start and end with a lowercase letter or a number. They cannot be formatted as an IP address (for example, 192.168.1.1). The following are examples of valid bucket names:\ncalabs-bucket-1 cloudacademybucket cloudacademy.bucket calabs.1 ca-labs-bucket Make a note of the name of your bucket, you will use it later.\n4. Make sure to select ACLs Enabled:\n5. In the Block Public Access section, un-check the Block all public access check-box:\n6. To acknowledge that you want to make this bucket publicly accessible, check I acknowledge that the current settings might result in this bucket and the objects within becoming public:\n7. To finish creating your Amazon S3 bucket, scroll to the bottom of the form and click Create bucket:\nNote: If you see an error because your bucket name is not unique, append a different unique number to the bucket name. For example, change “calabs-bucket” to “calabs-bucket-1” (or a unique number/character string) and click Create bucket again.\nThe Buckets list page will load and you will see a notification that your bucket has been created:\nNext, you will enable static website hosting for your bucket.\n8. In the list, click the name of your bucket:\nYou will see an overview of your Amazon S3 bucket, and a row of tabs with Objects selected.\n9. In the row of tabs under Bucket overview, click Properties:\nThe Properties tab allows you to enable and disable various Amazon S3 bucket features, including:\nBucket Versioning: Old versions can be kept when objects are updated Default encryption: A bucket can be configured to encrypt all objects by default Server access logging: Web-server style access logs can be enabled Requester pays: When enabled, the entity downloading data from this bucket will pay data transfer costs incurred 10. Scroll to the bottom of the Properties page and in the Static website hosting section, on the right, click Edit:\nThe Edit static website hosting form will load.\n11. In the Static website hosting field, select Enable:\nThe form will expand to reveal more configuration options.\n12. Enter the following, leaving all other fields at their defaults:\nIndex document: Enter index.html Error document: Enter error/index.html 13. To finish enabling static website hosting, scroll to the bottom, and click Save changes:\nThe bucket overview page will load and you’ll see a notification that you have successfully enabled static website hosting:\nYour S3 bucket is ready to host content.\nNext, you will create a bucket policy that will apply to all objects uploaded to your bucket.\n14. In the row of tabs, click Permissions:\n15. Scroll down to the Bucket policy section, and on the right, click Edit.\nThe Edit bucket policy form will load.\nAmazon S3 bucket policies are defined in JavaScript Object Notation, commonly referred to as JSON.\n16. In the Policy editor, copy and paste the following and replace YOUR_BUCKET_NAME with the name of your S3 bucket:\n{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"AddPerm\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::YOUR_BUCKET_NAME/*\" } ] } This policy will allow public access to all objects in your S3 bucket.\nThis is a permissive policy. In a non-lab environment, security concerns may require you to implement a more restrictive policy. To learn more about bucket policies, visit the AWS Policies and Permissions in Amazon S3 documentation.\n17. To save your bucket policy, at the bottom of the page, click Save changes.\nThe bucket overview page will load and you will see a notification that the policy has been edited.\nNext, you will download a basic website from a public GitHub repository and load it into your S3 bucket.\n18. To download a zip file containing a basic website, click here.\nThis is an example website provided by CloudAcademy that is suitable for static website hosting.\n19. Extract the zip to your local file system.\nExact instructions will vary depending on your operating system and browser. In most browsers, you can click the downloaded file and a file extraction utility will open.\n20. In the row of tabs, click Objects.\n21. To begin uploading the website to your Amazon S3 bucket, scroll down and click Upload:\nThe Upload form will load.\n22. In the Files and folders section, click Add files:\nA file picker will open.\n23. Using the file picker, select all files and folders from inside the zip file you downloaded and extracted earlier.\nIf your extraction utility extracted the files to a folder called static-website-example-master, ensure you upload all the files and folders inside it but not the static-website-example-master folder itself. To be able to access the website, the index.html file must be at the top-level of your Amazon S3 bucket.\nYou may find it easier to drag and drop the files and folders onto the Upload page instead of using the file picker.\nYou may also see a browser confirmation dialog asking you to confirm you want to upload the files.\nOnce selected, the files and folders from the zip file will appear in the Files and folders section.\n24. Scroll to the bottom of the page and click Upload.\nYou will see a blue notification displaying the progress of the upload, and when complete you will see a green Upload succeeded notification.\n25. To exit the Upload form, on the right, click Close.\nThe bucket overview page will load.\nYour Objects section should look similar to:\nNext, you will test that your website is accessible.\n26. To retrieve the endpoint for your bucket, click the Properties tab, scroll to the bottom, and click the copy icon next to the Bucket website endpoint:\n27. Paste the endpoint into the address bar of a new browser tab.\nYou will see a website load that looks like this:\nThis website is being served by your Amazon S3 bucket.\nCreating an Amazon CloudFront Distribution for the Static Website 1. In the AWS Management Console search bar, enter CloudFront, and click the CloudFront result under Services:\nThe Amazon CloudFront console will load.\n2. To start creating a distribution, click Create a CloudFront Distribution:\n3. Under Origin, in the Origin Domain text-box, enter the Amazon S3 static website hosting endpoint that you created earlier:\n4. Scroll down to theSettings settings, in the Default Root Object text-box, enter index.html:\nYou are setting this field because Amazon CloudFront doesn’t always transparently relay requests to the origin. If you did not set a default root object on the distribution you would see an AccessDenied error when you access the CloudFront distribution’s domain later in this lab step.\nTo learn more, see the How CloudFront Works if You Don’t Define a Root Object section of the AWS developer guide for Specifying a Default Root Object.\n5. Leave all other settings at their default values, scroll to the bottom, and click Create Distribution.\nThe CloudFront distribution list page will load and you will see your distribution listed.\nYou will see the Last Modified of your distribution is Deploying:\nIt can take up to 15 minutes to deploy a new Amazon CloudFront distribution. Once complete, the Status will change to Enabled.\nThere are two main types of origin that Amazon CloudFront supports, Amazon S3 buckets, and custom origins. A custom origin could be a website being served by an EC2 instance, or it could be a web server outside of AWS. To learn more while your CloudFront distribution is deploying, visit the AWS Using Amazon S3 Origins, MediaPackage Channels, and Custom Origins for Web Distributions page.\nOnce your deployment is complete, continue with the instructions.\n6. To view details of your distribution, click the random alphanumeric ID:\nNote: Your ID will be different.\n7. Copy the value of the Distribution Domain Name field:\n8. Paste the domain name into the address bar of a new browser tab.\nYou will see the website that you uploaded to your Amazon S3 bucket display:\nYou are accessing the website through your Amazon CloudFront distribution.\nNote: The instructions below are optional. Perform them if there is enough time left in the lab.\n9. On the website, click through and visit the different pages a few times to generate traffic.\nIf you have a different web browser available, try accessing the site in the other browser.\n","description":"Configuring a Static Website With S3 And CloudFront","title":"Configuring a Static Website With S3 And CloudFront","uri":"/en/tracks/aws-certified-developer-associate/cloudfront/configuring-static-website-s3-and-cloudfront/"},{"content":"Creating a Folder inside an Amazon S3 Bucket Introduction The AWS S3 console allows you to create folders for grouping objects. This can be a very helpful organizational tool. However, in Amazon S3, buckets and objects are the primary resources. A folder simply becomes a prefix for object key names that are virtually archived into it.\nInstructions Return to the Buckets menu by clicking here, and click on the calabs-bucket you created earlier. (Reminder: Your bucket name will differ slightly.)\nClick Create folder:\nIn the Folder name textbox, enter cloudfolder:\nScroll to the bottom and click Create folder:\nThe folder is created inside your S3 bucket:\n","description":"Create a Folder inside an Amazon S3 Bucket","title":"Create a folder inside S3 Bucket","uri":"/en/tracks/aws-certified-developer-associate/s3/create-folder-s3/"},{"content":"Practice Creating Classic Load Balancer Planning the Classic Load Balancer When you connected to the AWS account provided in the former step, you had a few things that were already deployed. This is the current infrastructure that was already deployed for you:\nYou already have a VPC with some subnets and 2 EC2 instances running inside the VPC in different Availability Zones. Both instances are inside the same Security Group called , which is allowing HTTP access from port 80 to anywhere (0.0.0.0/0). Each EC2 instance is running the same web application. We want to configure an LB to create a central point of access to our application, and we also want to configure our architecture in a way that users can only access the application through the ELB.\nIn the end, we should have a solution similar to this one:\nTo do that we will have to create and configure a Classic Load Balancer, and properly configure the needed Security Groups to make sure that our application will work as expected.\nCreating a Classic Load Balancer and Registering EC2 Instances A Classic Load Balancer allows traffic to be balanced across many Amazon EC2 instances, it performs this balancing at the request and connection level.\n1. In the AWS Management Console search bar, enter EC2, and click the EC2 result under Services:\n2. In the left-hand menu, under Load Balancing, click Load Balancers:\n3. To start creating your classic load balancer, click Create Load Balancer:\nThree tiles will be displayed detailing the different types of load balancer supported by Amazon EC2.\n4. At the bottom of the page, click Classic Load Balancer:\n5. In the Classic Load Balancer tile, click Create:\nA multi-step wizard will open allowing you to configure and customize your load balancer.\n6. Under Basic Configuration, enter the following values:\nLoad Balancer name: Enter classic-elb Enable advanced VPC configuration: checked Be aware there are limitations on the name field, only the characters a-z, A-Z, 0-9 and hyphens are allowed.\nCreate LB Inside lets you select which VPC you want the load balancer to be created in, leave this at the default.\nThe Create an internal load balancer option determines whether the load balancer can accept public internet traffic or not. If checked, the load balancer will have a private IP address and will only be able to accept traffic from another source inside the VPC.\nThe default Listener Configuration, listening on port eighty (HTTP), is all that is required for this lab.\n7. Under Select Subnets, click the plus icon next to each subnet.\nAs you click for each subnet, it will move from the Available subnets table, to the Selected subnets table:\nAn Availability Zone, often referred to as an AZ, helps make your infrastructure more reliable. You can think of each zone as a separate data center (in many cases they are exactly that), they are guaranteed to have redundant power, networking, and connectivity within an AWS region.\nTo learn more about regions, availability zones, and redundancy in AWS, visit the documentation here.\nEach subnet is mapped to one availability zone. It’s important to configure the selected subnets correctly. If a subnet containing an EC2 instance is not selected, the load balancer will not be able to communicate with that EC2 instance.\n8. To move to the next step of the wizard, click Next: Assign Security Groups:\n9. In the form, enter and select the following values:\nAssign a security group: Select Create a new security group Security group name: Enter elb-sg Description: Enter Security group for the classic load balancer You will see a default security group rule allowing traffic on port eighty.\n10. In the default security group rule, in the Source drop-down, select Anywhere:\n11. To advance to the next page of the wizard, click Next: Configure Security Settings:\nThis wizard step display’s a warning that your load balancer isn’t configured to use HTTPS or SSL.\nIt’s strongly recommended that you always enable encrypted traffic on your load balancers for security reasons. Configuring SSL is beyond the scope of this lab. If you would like to learn more about SSL and load balancing, it’s covered in the Using Elastic Load Balancing \u0026 EC2 Auto Scaling to Support AWS Workloads course.\n12. To move to the next wizard step, click Next: Configure Health Check:\n13. In the Ping Path field, replace the contents with /:\nBy default, the fields on this page specify that the health check will be performed using the HTTP protocol on port eighty. This means the load balancer will assume an instance is healthy when the instance returns a 200 OK response.\nThe Advanced Details allow you to further customize different aspects of the health check:\nResponse Timeout: How long to the load balancer should wait for a response from the EC2 instance. Interval: Amount of time between health checks. Unhealthy threshold: The number of consecutive failed healthy checks that must occur before the load balancer declares the EC2 instance unhealthy. Healthy threshold: The number of consecutive health checks that must occur before declaring an EC2 instance healthy. To learn more about Elastic Load Balancing health checks, see the AWS documentation here.\n14. To move to the next wizard step, click Next: Add EC2 Instances:\nThis step of the wizard displays the EC2 instances that currently exist and can be added to the load balancer:\n15. Select the instances named web-node:\nTake a look at the configuration options on this page:\nCross-Zone Load Balancing ensures that your LB distributes incoming requests evenly across all instances in its enabled Availability Zones. This means that the LB will ignore the default of round-robin and will also take into consideration the Availability Zone in which the instance is running. This reduces the need to maintain equivalent numbers of instances in each enabled Availability Zone and improves your application’s ability to handle the loss of one or more instances.\nConnection Draining is used to ensure that a Classic Load Balancer stops sending requests to instances that are de-registering or unhealthy while keeping the existing connections open.\nLeave these options at their defaults.\n16. To advance to the next wizard step, click Next: Add Tags:\nIn a non-lab environment, it is best practice to add tags to resources you create. Tags help make managing, organizing, and filtering resources in AWS easier.\nTo read more about tagging resources in AWS, see this document from AWS.\n17. To proceed to the review step, click Review and Create:\nThis page allows you to review the load balancing settings you have configured:\n18. To create your load balancer, click Create:\nYou will see a notification that your load balancer has been successfully created:\n19. To return to the EC2 management console, click Close:\nConfiguring Security Groups for Load Balanced EC2 Instances 1. In the list of load balancers, ensure your load balancer is selected:\nYou will see some tabs beneath the list and the Description tab will be selected.\nThis tab shows general information about your load balancer.\n2. To view information about instances registered with this load balancer, click the Instances tab:\nYou will see the instances and availability zones listed:\nThe instances will have a status of InService. This means the load balancer is performing successful health checks on the instances.\nNote: If you see the Status as OutOfService then the instances are still be registered. Wait a minute or two and then click the refresh icon in the top-right corner.\n3. To see the DNS of your load balancer, click the Description tab.\n4. Copy the domain name from the value of the DNS name field:\nWarning: Don’t include the (A Record) part of the value when copying.\n5. In a new browser tab, paste the domain name, and press enter.\nYou will see an instance Id displayed:\nNote: Your instance Id will be different.\nAn application has been pre-installed on the EC2 instances that will respond to web requests with the instance Id of the instance serving the request.\nTo see the Id of the other EC2 instance, refresh the page. If the Id doesn’t change, you may need to open an incognito or private browsing tab and visit the DNS name again.\nSeeing the Id change shows that the load balancer is working as expected, routing traffic to both registered instances.\nLeave this tab open and remember this is the tab for the load balancer, you will use it again later in the lab step.\n6. In the left-hand menu, under Instances, click Instances:\nYou will see two instances named web-node with a status of Running:\n7. Select one of the instances:\nYou will see tabs displayed below the list of instances.\n8. In the Details tab, in the Public IPv4 DNS field, click the copy icon:\nThe public DNS name of the EC2 has been copied to your clipboard.\n9. In a new browser tab, paste the DNS name and press enter.\nYou will see an instance Id displayed again.\nHowever, this time, because you are accessing the instance directly if you refresh or visit the DNS name in an incognito or private browsing tab, the Id won’t change.\nNote that you are accessing the instance directly, this is allowed by the security group associated with the EC2 instances. Allowing load-balanced instances to be publicly accessible is a bad security practice, and there is rarely a good reason for it.\nIn the rest of this lab step, you will modify the EC2 instance’s security group to only allow traffic from the load balancer.\nLeave this browser tab open and remember this is the tab for an EC2 instance, you will use this tab again later.\nNavigate to Load Balancers in the EC2 Management Console. 11. Ensure the classic-elb load balancer is selected.\n12. In the Description tab, scroll down to the Security section:\nThis is the security group you configured when you created the load balancer.\n13. In the left-hand menu, under Network \u0026 Security, click Security Groups:\nYou will see a list of security groups:\n14. Select the SG which has the Group Name starting with cloudacademylabs- .\nThis is the security group of the EC2 instances.\nYou will see tabs displayed beneath the list.\n15. In the row of tabs, click Inbound rules:\n16. To modify the rules of this security group, click Edit inbound rules:\nYou want to allow only connections coming from the load balancer to the instances, however, the balancer doesn’t have a particular IP address associated with it so you can’t specify an IP address here. Instead, you will restrict the access by using the security group you created for the balancer.\nYou will change the current rule to deny access to anywhere and allow it only to members of the load balancer’s security group.\n17. Delete the existing rule, and create a new one whose Type is HTTP. In the Source drop-down, ensure Custom is selected and in the box next to it, select elb-sg:\n18. To save your changes, in the bottom-right, click Save rules:\nWith your rule saved, reload the browser tab with the DNS of the load balancer.\nThis will continue to work, you will see an instance Id displayed.\n19. Reload the browser tab with the DNS of an instance in the address bar:\nThe exact behavior will vary depending upon your web browser.\nMost likely you see the loading symbol in the browser tab spinning indefinitely:\nIf you wait long enough, your browser will report that it timed out trying to reach the instance:\nChecking Your Load Balancer’s Behavior During Instance Failures Navigate to Instances in the EC2 Management Console. You will see two instances named web-node listed.\n2. To stop an instance, right-click one of them.\n3. In the menu that appears, click Instance state, and then click Stop instance:\nYou will see a dialog box asking you to confirm that you want to stop the instance.\n4. To confirm, click Stop:\nThe instance’s Instance state column will change to Stopping. A few moments later you will see it changed to Stopped:\nStopping the instance will make it fail your load balancer’s health checks.\nNavigate to Load Balancers in the EC2 Management Console. 6. Ensure the classic-elb load balancer is selected.\n7. In the row of tabs below the load balancer list, click Instances:\nLook at the Status column in the instances table, one of the instances will still be InService, and the other will be OutOfService:\nThis means that there is only one instance serving the application, and therefore all the requests will be forwarded to the same instance.\nYou can test this behavior by clicking on the Description tab and accessing the DNS nameof the load balancer in a new browser tab. Your request will be served by the instance that you didn’t stop.\nLeave the browser tab with the load balancer’s DNS name open. You will test it again after starting the stopped instance.\n8. To start the stopped instance, in the left-hand menu, under Instances, click Instances:\n9. Right-click the stopped instance.\n10. Click Instance state, and click Start instance:\nNote: You can also access this menu using the Actions button in the top-right.\nThe Instance state column will change to Pending, and a few moments later, to Running.\nTest accessing the load balancer by it’s DNS name again. This time, you will see that both instances are serving requests.\nNote: You may need to open the load balancer’s domain name in an incognito or private browsing tab to see both instance Ids.\nMonitoring your Classic Load Balancer Navigate to Load Balancers in the EC2 Management Console. 2. In the list of load balancers, ensure the classic-elb load balancer is selected, and click the Monitoring tab:\nYou will see a number of graphs of different CloudWatch metrics.\nThe Elastic Load Balancing (ELB) service reports metrics to CloudWatch only when requests are flowing through the load balancer. If there are requests flowing through the load balancer, the load balancing service measures and sends its metrics in sixty-second intervals. If there are no requests flowing through the load balancer, or no data for a metric, the metric is not reported.\nThere are a few metrics related to a Classic Load Balancer, and most are self-explanatory if you are familiar with HTTP requests. If some of them are unfamiliar to you, visit the Amazon AWS documentation to read more.\nThe metrics called HealthyHostCount, and UnHealthyHostCountwill count the number of Healthy and Unhealthy instances respectively. These metrics can be useful for you to identify a major problem in your AWS account. A healthy instance is one that is passing the health checks performed by the load balancer.\nYou could use CloudWatch Alarms to notify you when you have less than 2 instances running your application, though to be clear this is not a general rule: the number of instances that might identify a problem will vary depending on your environment.\nAlso notice that in these metrics, there is no way of seeing the Availability Zone to which the Healthy/Unhealthy instance belongs. In our lab, we stopped an instance for a few minutes, therefore you should be able to see something like this:\nIf the Healthy Hosts metric reaches zero, that means that people won’t see anything when accessing your load balancer, and it is probable that you have a big problem in your infrastructure.\nThe Average Latency metric might be useful to identify potential issues in your setup. Maybe everything is working in your application, but you notice an increase in this metric. If you haven’t changed anything in your application, that can be a potential issue - maybe you haven’t provisioned enough EC2 instances, or you even have lots of instances but they don’t have enough power to serve your increasing traffic.\nThe other metrics can be very useful for troubleshooting specific scenarios and will vary depending on your setup.\n","description":"tutorial how to create AWS Classic Load Balancer","title":"Create Classic Load Balancer","uri":"/en/tracks/aws-certified-developer-associate/elasticloadbalancing/create-amazon-load-balancing/"},{"content":"Creating an Amazon S3 Bucket Introduction You can create an Amazon S3 bucket using the AWS Management Console. As with many other AWS services, you can use the AWS API or CLI (command-line interface) as well.\nIn this lab step, you will create a new Amazon S3 bucket.\nInstructions In the AWS Management Console search bar, enter S3, and click the S3 result under Services: You will be placed in the S3 console.\nFrom the S3 console, click the orange Create Bucket button: Enter a unique Bucket name on the Name and region screen of the wizard: Region: US West (Oregon) (This should be set for you. If not, please select this region.) **Important!**Bucket names must be globally unique, regardless of the AWS region in which you create the bucket. Buckets must also be DNS-compliant.\nThe rules for DNS-compliant bucket names are:\nBucket names must be at least 3 and no more than 63 characters long. Bucket names can contain lowercase letters, numbers, periods, and/or hyphens. Each label must start and end with a lowercase letter or a number. Bucket names must not be formatted as an IP address (for example, 192.168.1.1). The following examples are valid bucket names: calabs-bucket-1, cloudacademybucket , cloudacademy.bucket , calabs.1 or ca-labs-bucket.\nTroubleshooting Tip: If you receive an error because your bucket name is not unique, append a unique number to the bucket name in order to guarantee its uniqueness:\nFor example, change “calabs-bucket” to “calabs-bucket-1” (or a unique number/character string) and try again.\nLeave the Block public access (bucket settings) at the default values: No changes are needed. This is where you can set public access permissions.\n5. Click on Create bucket:\nA page with a table listing buckets will load and you will see a green notification that your bucket was created successfully.\nIn the Buckets table, click the name of your bucket in the Name column: A page will load with a row of tabs at the top.\nTo see details and options for your bucket, click on the Properties: This page allows you to configure your Amazon S3 bucket in many different ways. No changes are needed in this lab at this time.\nFeel free to look at the other tabs and see the configuration options that are available.\n","description":"Create an Amazon S3 Bucket","title":"Create S3 Bucket","uri":"/en/tracks/aws-certified-developer-associate/s3/create-s3-bucket/"},{"content":"The journey towards creating a light trading bot framework begins with a simple, intuitive graphical user interface (GUI). For this venture, I have chosen to rely on Python’s built-in Tkinter library to provide the fundamental building blocks for my GUI.\nEmbracing Simplicity The initial goal is to keep the GUI as straightforward as possible, focusing on the core functionalities required for a trading bot. The main elements incorporated are:\nStart/Stop Buttons: These allow the user to control the operation of the bot. Strategy Selection: An option to switch between different trading strategies. Market Price Stream: A live feed displaying the current market prices. Harnessing the Power of Tkinter Tkinter, being a standard Python interface to the Tk GUI toolkit, offers the simplicity and versatility needed for this project. It provides an array of widgets and methods to create and manage the GUI with relative ease.\nObserver Pattern To handle specific requests from the GUI and manage updates, I’ll be integrating the observer pattern into the framework. This design pattern promotes a well-organized, flexible structure that will prove invaluable as the project progresses.\nMoving Forward This is just the beginning. The GUI, while a crucial component, is merely the first step in the development of this lightweight trading bot framework. I’m looking forward to the journey ahead, as we dive deeper into the implementation and further enhance the features of the bot.\nThis is how this template looks like now:\n","description":"Creating a GUI for a Trading Bot","title":"Creating a GUI for a Trading Bot","uri":"/en/stories/003-trading-bot-gui-init-tkinter/"},{"content":"Deleting an Amazon S3 Bucket Introduction You can delete an Amazon S3 bucket using the S3 console. You will delete all objects within the bucket as well.\nInstructions In the AWS Management Console search bar, enter S3, and click the S3 result under Services: From the top level of the S3 console, notice the Delete button is not actionable.\n2. Check the name of your bucket to select it:\nWith the bucket selected, click Empty: The Empty bucket form page will load.\nIt’s not possible to delete a bucket that contains objects.\nTo confirm that you want to delete all objects in this bucket, in the textbox at the bottom, enter permanently delete and click Empty:\nTo exit the empty bucket page, at the top-right, click Exit:\nYou will be returned to the Buckets page.\nTo delete your bucket, select it in the list, and click Delete\nTo confirm that you want to delete the bucket, in the textbox, enter the name of your bucket:\nClick Delete bucket to delete the bucket.\nWarning: Make sure to delete all the files/folders inside the bucket before deleting it, otherwise AWS won’t allow you to delete the S3 bucket.\nImportant! Notice the message from AWS: “Amazon S3 buckets are unique. If you delete this bucket, you may lose the bucket name to another AWS user.”\nIf retaining the bucket name is important to you, consider using the Empty bucket feature and not actually deleting the bucket.\n","description":"Delete an Amazon S3 Bucket","title":"Delete S3 Bucket","uri":"/en/tracks/aws-certified-developer-associate/s3/delete-from-s3/"},{"content":"Web Create IB notification Login to https://www.interactivebrokers.co.uk/portal/#/ Click Deposit Click Use a new deposit method if no one exist Bank Wire -\u003e Get instructions Account Number: Bank account number\nNext you get Bank Wire Instructions These data you need to make a payment from Discount bank\nSend money from Discount bank Login start.telebank.co.il Click: ביצוע העברה\nFill the form\nClick המשך and proceed ","description":"Deposit Interactive Brokers from Israel Discount bank","title":"Deposit Interactive Brokers from Israel Discount bank","uri":"/en/posts/interactivebrokers-deposit/"},{"content":"Lab Develop and Deploy an Application with AWS CodeStar Creating an AWS CodeStar Project 1. In the AWS Management Console search bar, enter CodeStar, and click the CodeStar result under Services:\n2. On the welcome page, click Create project.\nTake a moment to see all of the different templates available in AWS CodeStar.\n3. Check the following boxes on the left filter bar to narrow down the listed templates:\nAWS services: EC2 Application category: Web application Programming languages: Node.js The choice of Application categoryand Programming language will be driven by the requirements of your project and skills available to you. The choice of AWS services may not be as easy. Some guidelines for choosing between the alternatives are:\nAWS Elastic Beanstalk: A good choice for a fully managed application environment running on EC2 servers. This option allows you to stay focused on your code. Amazon EC2: Preferable when you want to host the application on servers that you manage yourself, including on-premise servers. AWS Lambda: Choose this option if you want to run a serverless application. 4. Select the Express.jsproject template:\nExpress.js is a popular Node.js web application framework.\n5. In the next step of the Create project wizard, enter the following:\nProject name: ca-app-\u003cUnique_String\u003e (Replace \u003cUnique_String\u003e with a 6 characters. The name must be unique for the region because of AWS CodeCommit repository name restrictions) Project ID: Accept the default value The instructions in this Lab use ca-app for the project name, but you should use a different name or the project creation may fail if it is already in use.\n6. Make sure that CodeCommit is selected under Project repository:\nYou will see the EC2 Configuration section of the form.\n7. Ensure the following values are selected:\nInstance type: t2.micro(default value) VPC: Select the non-default VPC (The VPC without “(Default)”),or the VPC with only two subnets if there is no (Default) label Subnet: Select the subnet in the us-west-2a availability zone If you can’t see which subnet is in us-west-2a hover your mouse over each subnet.\n8. Click Next and thenCreate Project:\nConnecting to the Virtual Machine using EC2 Instance Connect 1. In the AWS Management Console search bar, enter EC2, and click the EC2 result under Services:\n2. To see available instances, click Instances in the left-hand menu:\nThe instances list page will open, and you will see an instance named cloudacademylabs:\nIf you don’t see a running instance then the lab environment is still loading. Wait until the Instance state is Running.\n3. Right-click the cloudacademylabs instance, and click Connect:\nThe Connect to your instance form will load.\n4. In the form, ensure the EC2 Instance Connect tab is selected:\nYou will see the instance’s Instance ID and Public IP address displayed.\n5. In the User name textbox, enter ec2-user:\nNote: Ensure there is no space after ec2-user or connect will fail.\n6. To open a browser-based shell, click Connect:\nIf you see an error it’s likely that the environment hasn’t finished setting up. Check for Setup completed at the top-left corner of the lab and try connecting again:\nA browser-based shell will open in a new window ready for you to use.\nKeep this window open, you will use it in later lab steps.\nYou can also connect to the instance using your preferred SSH client and the PPK (Windows) or PEM (Mac/Linux) key files in the Credentials section of this lab.\nTouring the AWS CodeStar Project Website 1. Observe the tiles that are included in your Dashboard:\nIDE: References for how to get started with a variety of integrated development environments (IDEs) under Access your project code. You will simply use the EC2 instance to edit the code interact with CodeCommit in this lab.\nRepository: You can see the main details related to the code repository here. The most recent code commits for the selected branch:\nThe View commits button opens the detailed view list of the commits. Currently, there is only a master branch and the initial commit to display. The committer, AWS CodeStar, made the initial commit during the project creation. Each commit also includes a button on the right to view the code changes in AWS CodeCommit. You will look at the code in a future Lab Step.\nPipeline: This shows a graphical representation of the release pipeline for your project:\nAny time you commit a code change to the master branch, the pipeline will automatically deploy your application. As your application grows and the requirements for your release pipeline change, you can modify the pipeline by clicking Edit. For example, you may want to add an automated test stage, invoke an AWS Lambda function, or modify the deployment group to deploy to an Auto Scaling group. The Release changebutton can be used to force a deployment of the latest commit. That can be useful if you modify the pipeline or something went wrong with the release. If something does go wrong with a pipeline stage, you will see the bar on the left turn red.\nMonitoring: This shows the CPUUtilization and other metrics of the EC2 instance where your application is deployed.\nIssues: This Lab doesn’t include a JIRA project, but for projects requiring issue tracking you can find link to JIRA from here.\n3. Click View application in the upper-right to view the application included in the template:\nDepending on your time of day, the background will change. You will commit a code change later to modify the appearance of the application.\n4. Look at the Project resources tab under the Overview.\nThe most interesting thing to see here is the list of all the Project Resources created by the project template:\nAWS CodeStar saved you a lot of time compared to manually configuring everything that is included. Notice that AWS CloudFormation includes a stack resource. That is how AWS CodeStar works behind the scenes. Each project template creates a stack in AWS CloudFormation. Of course, you don’t need to know any of the details. AWS CodeStar does everything for you so you can focus on development.\nIf you need to delete an AWS CodeStar project, you can do so from the CodeStar project page. You will be given a choice of keeping the associated resources or also deleting the associated resources.\nDeveloping Your AWS CodeStar Project 1. In the AWS Management Console search bar, enter IAM, and click the IAM result under Services:\n2. Click on Users in the left navigation panel.\n3. In the Users table, click on student.\nNote: You will see error messages. This is normal. You only have the permissions required to complete the Lab.\n4. Click on the Security credentials tab.\n5. Scroll down to the HTTPS Git credentials for AWS CodeCommit section, and click Generate credentials:\nThis will show a pop-up dialog showing you your credentials.\n6. Click Download credentials:\nYour browser will download a file containing a username and password. Keep this file, you will use the credentials to connect to your AWS CodeStar repository.\n7. Return to your AWS CodeStar project’s Repository tab and click HTTPS under Clone repository:\nThis copies the HTTPS url of the CodeCommit repository to your clipboard.\n8. Paste the repository into the file with your code repository credentials.\nYou will use this URL later to access your repository.\n9. Return to the SSH shell connected to the dev-instance EC2 instance and enter cd to ensure you are in your home directory of /home/ec2-user.\nRefresh the instance connect browser tab if the session has expired.\n10. To tell Git to cache your credentials for a few hours, enter the following command:\ngit config --global credential.helper 'cache --timeout=10800' 11. Tell Git your user name:\ngit config --global user.name \"student\" This name will show up on the commits in your project dashboard.\n12. To clone your AWS CodeStar project repository, enter:\ngit clone \u003cYOUR_PROJECT_REPOSITORY_URL\u003e Replace \u003cYOUR_PROJECT_REPOSITORY_URL\u003e with the URL you copied in a previous instruction.\nYour URL will be similar to https://git-codecommit.us-west-2.amazonaws.com/v1/repos/ca-app.\n13. When prompted, enter the Username and Password you saved in a text file earlier in this Lab Step.\nTip: The password generated by AWS is long and it is easy to make a typo when entering it. To avoid errors copy and paste the password.\n14. Change the repository directory name to ca-app:\nmv ca-app-\u003cUnique_string\u003e ca-app Note: Change ca-app-\u003cUnique_string\u003e to the name of your repository.\nThis won’t change the repository name. It will only simplify the instructions at the command-line by not having to enter your unique string following ca-app in this and later Lab Steps.\n15. Change into the directory:\ncd ca-app 16. Enter ls to get a quick overview of the project structure.\nThere are several files:\napp.js: JavaScript file that starts the server appspec.yml: Configuration file that instructs AWS CodeDeploy what steps to perform to deploy your application package.json: Metadata and dependencies related to your project README.md: Text file explaining the project template There is no need to get into the details of the file contents at this time. However, it is good to know that the appspec.yml file specifies scripts that run during the deployment of your application. The scripts are contained in one of the two project directories:\npublic: Static assets used for your application scripts: Scripts executed by AWS CodeDeploy during the deployment of your application Now you can get the server running on your development machine.\n17. Install the project dependencies using Node package manager (npm) and start the Node.js server:\nnpm install node app.js While the server is running you won’t be able to enter new commands. That won’t be a problem. Now you can test that the development server is serving the application.\nNavigate to Instances in the EC2 service in the AWS Console. 19. Select the instance named cloudacademylabs:\nIn the Description tab, you will see a field called Public DNS (IPv4).\n20. To copy the public DNS, click the click the copy icon under Public IPv4 DNS:\n21. Open a new browser taband paste the public DNS and append :3000 to the end and press enter:\nNow that you verified the application works on the development machine, you can make some code changes.\n22. Return to the SSH shell and press Ctrl+C to kill the running Node.js server.\n23. Enter the following multiline command at the shell prompt to update a file in the project:\necho 'var idx = Math.floor(new Date().getHours()); var body = document.getElementsByTagName(\"body\")[0]; var idxStep = 1; var refreshRate = 1000; function adjustIdx() { if (idx \u003c= 0) { // Start increasing idx idxStep = 1; } else if (idx \u003e= 23) { // Start decreasing idx idxStep = -1; } idx += idxStep; body.className = \"heaven-\" + idx; } body.className = \"heaven-\" + idx; setInterval(adjustIdx, refreshRate);' \u003e public/js/set-background.js 24. Test the changes by running the server again with node app.js and refresh the browser tab with your development application.\nYou will see a similar page as the previous one, but the color will change roughly once a second.\n25. Stop the Node.js server with Ctrl+C.\n26. View the local repository status:\ngit status This tells you that you are on the master branch and working from the initial code commit. The output also shows the set-background.js file was modified. You need to add the file to stage it before committing.\n27. Add the modified file to the staged changes in the commit:\ngit add public/js/set-background.js 28. Commit the staged changes to the local repository and add a short message about the changes:\ngit commit -m \"animation\" 29. Push the changes in your local repository to the remote AWS CodeStar project repository so they are synchronized:\ngit push Now that you have made a change to your code, you will see how the changes are deployed in the next Lab Step.\nSummary In this Lab Step, you committed a code change to your AWS CodeStar project repository. You created the required credentials and tested the application on your development server.\nDeploying Your AWS CodeStar Project 1. Return to your AWS CodeStar project view.\nThere are a few things to notice since you were here last:\nYour commit is now visible in the Repository\u003e Most recent committile Your Monitoring \u003e CPUUtilization tile might show some spikes if your application has already been deployed Your Pipeline tab may show one of the pipeline stages In progress or you may see a recent timestamp inside each stage box telling you the new version has been deployed. If you missed the release flowing through the stages of the pipeline, click Release change and click Continue in the pop-up.\n2. To inspect the code, in the Repository tab, click the most recent Commit ID:\nYour commit Id will be different.\n3. Look at the code changes:\nAdditions appear in green and removals would appear in red, if any were present. This is an easy way to keep track of what is happening to the code in your AWS CodeStar project.\n4. Navigate back to the Pipeline tab. Click on AWS Code Deploy under Deploy:\nThis opens your application in AWS CodeDeploy:\nYou can see the Deployment Groups created for deploying your application. In this case there will be just one with a Nameending in -Env. The Statuscolumn will tell you if your last deployment Succeededor failed. The time of the Last attempted deployment and Last successful deployment are also recorded.\n5. Click the name of your deployment group beginning with ca-app:\nNotice that by default Rollback enabled is false. That means if your deployment fails, AWS CodeDeploy will not attempt to deploy the last successful version. That is something you might consider changing when you use AWS CodeStar for one of your projects.\n6. Scroll down the page and inspect the Deployment group deployment history section.\nEach deployment that was attempted to be deployed is recorded here along with a link to where the artifacts are located on Amazon S3.\n7. Click on the most recent deployment in the Deployment Id column:\nYour deployment will have a different deployment id.\nThis opens a page with details of the most recent deployment:\nDeployment status: shows the state of the deployment operation Deployment details: shows information similar to what you saw on the AWS CodeDeploy application page Revision details: shows information about the revision deployed, including the location in AWS S3 Deployment lifecycle events: tells you the start and end times as well as the Durationof the deployment 8. To view the deployment life-cycle events, click View events down the bottom:\n9. To view the events, scroll down to the event list:\nYou will see events similar to the above.\nIn case of a failed deployment, one of the events will record the failure and provide a link under the Logs column to investigate the command and logs related to the failure. If you recall, the appspec.yml file in the code project was used to instruct AWS CodeDeploy on how to deploy your application. Your project provides different scripts to run for some of the events listed in the table.\n10. Finally, return to the AWS CodeStar and click View application.\nYou will see the latest version of your application including the animation commit deployed and available to the world.\nManaging Your AWS CodeStar Project Team 1. Return to your AWS CodeStar project’s Overview and click on Add team members:\n2. Click on the Userdrop-down menu and click on Logan.\n3. Set the team member values for Logan to:\nEmail address: test@cloudacademy.com Project Role: Contributor Remote Access: Checked (This allows the team member to upload an SSH public key to connect to EC2 instances) The difference between the default Project Roles is:\nViewer: Access to the project dashboard and able to view a few project resources Contributor: Everything Viewer can access plus view, modify, and access all project resources Owner: Everything Contributor has plus adding and removing team members, and deleting the project 4. Click Add team member:\nAfter adding a team member, you will be asked to create a profile for yourself.\n5. In the Create user profile form, enter the following values before clicking Create user profile:\nDisplay name: student Email address: student@cloudacademy.com You will see Logan and studentappear in the Team memberslist.\n6. Click Add team member and select Bessie from the drop-down menu.\n7. Enter the following values and click Add:\nEmail address: bessie@cloudacademy.com Project Role: Viewer Remote Access: Unchecked Now you can briefly experience the differences between the project roles.\n8. At the top of this Lab page, click on the Open Environment button.\nThis will sign you out of the student user and allow you to sign in as a different user.\n9. Log in to AWS using the team member in the viewer role:\nUser Name: Bessie Password: Lab-Viewer1 Navigate to AWS CodeStar in the AWS Console. 11. Click on your project name.\nObserve that the viewer role has access to view the same tabs as your student user.\n13. Click on the Repository \u003e Commit ID and see that a viewer is allowed to view code changes.\n14. Return to the project Pipeline section and click Release change, then Release.\nYou will receive an error message stating that you are not authorized to perform that action:\n15. At the top of this Lab page, click on the Open Environment button and sign in again with the following credentials:\nUser Name: Logan Password: Lab-Contributor1 The user Logan is in the contributor role, which has additional permissions than the viewer role.\n16. Click Release change, then Continue.\nThe contributor has permission to perform this action:\n17. Click Team in the left sidebar.\nNotice that you can only remove yourself from the team and not other members. That is a distinction between the contributor and owner roles.\n18. One last time, in the lab, click on the Open Environment button and sign in with the student credentials given in the Credentialssection of the Lab.\nCleaning Up Your AWS CodeStar Project 1. Return to your AWS CodeStar project dashboard and click on Settings:\n2. Click Delete project.\n3. Enter delete in the pop-up dialog:\n4. Click Delete:\nIn a few seconds you will return to the AWS CodeStar start page and all of the resources in the project will begin terminating.\n","description":"Develop and Deploy an Application with AWS CodeStar","title":"Develop and Deploy an Application with AWS CodeStar","uri":"/en/tracks/aws-certified-developer-associate/codestar/develop-and-deploy-app-with-codestar/"},{"content":"Despite their similar names, these structures serve different purposes, and understanding their differences is crucial to utilizing them effectively.\nTree A tree data structure is a collection of entities, called nodes, connected by edges.\nEach node contains a value, and a list of references to its child nodes. The first node of the tree is called the root. If we visualize it, a tree data structure resembles an inverted tree, with the root at the top and the leaves (nodes without children) at the bottom.\nTrees are hierarchical, non-linear data structures.\nThey are excellent for representing relationships between objects, and their operations usually have a logarithmic time complexity, making them efficient for search operations.\nLet’s create a simple binary tree in Python, where each node can have at most two children:\nclass Node: def __init__(self, data): self.data = data self.left = None self.right = None root = Node(1) root.left = Node(2) root.right = Node(3) Here, we have a tree with the root node storing the value 1. The root node has two children: the left child stores the value 2, and the right child stores the value 3.\nTrie A trie, also known as a prefix tree, is a type of tree that specializes in managing sequences, typically strings. In a trie, every node (except the root) corresponds to a character or a string, and each path down the tree can represent a word or a prefix.\nThe key characteristic of tries is that they provide a fast retrieval of data. They can check if a word or prefix exists in a dataset in O(M) time, where M is the length of the word.\nHere’s a simple Python example of a trie data structure:\nclass TrieNode: def __init__(self): self.children = {} self.end_of_string = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for ch in word: if ch not in node.children: node.children[ch] = TrieNode() node = node.children[ch] node.end_of_string = True In this example, each node in the trie has a dictionary called children to keep references to its child nodes. The end_of_string flag helps determine if the current concatenation of characters forms a valid word.\nTries vs Trees Despite their shared properties (being tree-based structures), tries and trees are designed for different use cases.\nData Storage: A general-purpose tree can store any data type—numbers, strings, objects, whereas a trie is specifically used for storing sequences, like strings or arrays.\nNode Value: In a tree, each node holds a value. In a trie, nodes themselves don’t hold a value—instead, the value is the path from the root to that node.\nEfficiency: Tries are incredibly efficient when it comes to searching for a word or prefix in a dictionary. Trees, on the other hand, are more efficient for a wide range of operations, like searching, inserting, and deleting arbitrary values.\nMemory Usage: Tries can use more memory because of references in each node, especially when dealing with a large alphabet. Each node in a trie maintains a collection (often a dictionary or array) of all its child nodes. However, in a binary tree, each node only needs to keep a reference to at most two child nodes.\nLookup Time: Tries have a faster lookup time for certain tasks. For instance, finding a word in a trie takes O(M) time, where M is the length of the word. For a balanced binary search tree, the time complexity would be O(log N), where N is the number of elements in the tree.\n","description":"Difference between Tries and Trees?","title":"Difference between Tries and Trees?","uri":"/en/posts/tree-vs-trie-data-structures/"},{"content":" Docs EN | RU Posts EN | RU ","description":"","title":"Docs","uri":"/en/tracks/archive/"},{"content":"About AWS EC2 AWS EC2 User Guide Amazon Elastic Compute Cloud (EC2) - one of the most popular AWS services.\nAllows:\nto run different types of cloud instances and pay-per-use models. to control computing resources at the operating system level working in an Amazon computing environment. Digest EC2 \u0026 EBS EC2 (Elastic Compute Cloud) Instance EBS (Elastic Block Store) - Persistent storage volume AMI (Amazon Machine Image) - Packages OS and additional installations in a reusable template Instance and Instance Types: General Purpose (t-type and m-type), Compute Optimized(c-type), GPU Graphics, GPU Compute, Memory Optimized(r, × and z-type), and Storage Optimized(d, h and i-type) Purchasing Options: On Demand, Reserved, Scheduled, Spot, Dedicated Instance and Dedicated Host Spot: Partial hours are not billed if terminated by AWS EC2 Secure login information for your instances using key pairs Placement group: Cluster and Spread For root:\nGeneral purpose SSD (balances price \u0026 performance) Provisioned OPS SD (Highest performance for mission critical low-latency or high throughput workloads) Magnetic HDD (previous generation) For other:\nThroughput Provisioned HDD (low cost for frequently accessed, throughput intensive workloads) Cold HDD (lowest cost for less frequently workloads) Instance Store - temporary storage volume in which data is deleted when you STOP or TERMINATE your instance Price Pricing models:\nOn Demand - pay a fixed rate by the hour/second with no commitment. You can provision and terminate it at any given time. Reserved - you get capacity reservation, basically purchase an instance for a fixed time of period. The longer, the cheaper. Spot - Enables you to bid whatever price you want for instances or pay the spot price. Dedicated Hosts - physical EC2 server dedicated for your use. Current price\nPractice TL;DR Choose a region close to you Go to EC2 service Click on “Instances” in the menu and click on “Launch instances” Choose image: Amazon Linux 2 Choose instance type: t2.micro Make sure “Delete on Termination” is checked in the storage section Under the “User data” field the following: yum update -y yum install -y httpd systemctl start httpd systemctl enable httpd echo \"\u003ch1\u003eHello from web!\u003c/h1\u003e\" \u003e /var/www/html/index.html Add tags with the following keys and values: key “Type” and the value “web” key “Name” and the value “web-1” In the security group section, add a rule to accept HTTP traffic (TCP) on port 80 from anywhere Click on “Review” and then click on “Launch” after reviewing. If you don’t have a key pair, create one and download it. Now HTTP traffic (port 80) should be accepted from anywhere Create an EC2 Instance Go to EC2 page -\u003e Launch Instance\nEC2 image Choose the image we want Create keys Let’s create a key to use to connect to the instance externally\nEnter any name you want. Leave all other parameters by default\nAfter the key is created it will start automatic downloading. You need it to connect to EC2 from your local terminal\nNetwork Settings Under Network Settings I leave Allow SSH traffic from\nCreate Click Launch Instance\nThe Instance has been created and is available for connection\nConnecting to EC2 from the terminal Connect to EC2 from a local terminal\nLet’s move previously created and downloaded mykey key to home folder of current user and give permissions to file CHMOD 400\ncd ~ cd Downloads/ mv mykey.pem $HOME cd .. chmod 400 mykey.pem To connect, we need a public iPv4 address. Find it on the instance page\nConnect with the command ssh.\nssh -i mykey.pem ec2-user@52.24.109.78 Questions Q1 A company is migrating a legacy application to Amazon EC2. The application uses a username and password stored in the source code to connect to a MySQL database. The database will be migrated to an Amazon RDS for MySQL DB instance. As part of the migration, the company wants to implement a secure way to store and automatically rotate the database credentials.\nWhich approach meets these requirements?\nStore the database credentials in environment variables in an Amazon Machine Image (AMI). Rotate the credentials by replacing the AMI. Store the database credentials in AWS Systems Manager Parameter Store. Configure Parameter Store to automatically rotate the credentials. Store the database credentials in environment variables on the EC2 instances. Rotate the credentials by relaunching the EC2 instances. Store the database credentials in AWS Secrets Manager. Configure Secrets Manager to automatically rotate the credentials Explanation AWS Secrets Manager\nSecrets Manager offers secret rotation\n4\nQ2 An organization needs to provision a new Amazon EC2 instance with a persistent block storage volume to migrate data from its on-premises network to AWS. The required maximum performance for the storage volume is 64,000 IOPS.\nIn this scenario, which of the following can be used to fulfill this requirement?\nDirectly attach multiple Instance Store volumes in an EC2 instance to deliver maximum IOPS performance. Launch a Nitro-based EC2 instance and attach a Provisioned IOPS SSD EBS volume (io1) with 64,000 IOPS. Launch an Amazon EFS file system and mount it to a Nitro-based Amazon EC2 instance and set the performance mode to Max I/O. Launch any type of Amazon EC2 instance and attach a Provisioned IOPS SSD EBS volume (io1) with 64,000 IOPS. Explanation An Amazon EBS volume is a durable, block-level storage device that you can attach to your instances. After you attach a volume to an instance, you can use it as you would use a physical hard drive. EBS volumes are flexible.\nThe AWS Nitro System is the underlying platform for the latest generation of EC2 instances that enables AWS to innovate faster, further reduce the cost of the customers, and deliver added benefits like increased security and new instance types.\nAmazon EBS is a persistent block storage volume. It can persist independently from the life of an instance. Since the scenario requires you to have an EBS volume with up to 64,000 IOPS, you have to launch a Nitro-based EC2 instance.\nAmazon EBS volume types\n2\nQ3 A Database Specialist manages an EBS-Optimized Amazon RDS for MySQL DB instance with Provisioned IOPS storage. The users recently raised a database IO latency issue during peak hours when it was always under a heavy workload. Upon review, the Specialist noticed that the RDS DB instance was barely using the maximum IOPS configured but was fully utilizing the maximum bandwidth for the required throughput. CloudWatch metrics showed that CPU and Memory utilization were at optimum levels.\nWhich action should the Database Specialist take to fix the performance issue?\nChange the underlying EBS storage type of the instance to General Purpose (SSD). Modify the DB instance to an EBS-Optimized instance class with higher maximum bandwidth. Disable EBS optimization on the MySQL DB instance to allow higher maximum bandwidth. Modify the DB instance to increase the size and corresponding Provisioned IOPS allocated to the storage. Explanation Amazon RDS volumes are built using Amazon EBS volumes, except for Amazon Aurora, which uses an SSD-backed virtualized storage layer purpose-built for database workloads. RDS currently supports both magnetic and SSD-based storage volume types. There are two supported Amazon EBS SSD-based storage types, Provisioned IOPS (called io1) and General Purpose (called gp2).\nProvisioned IOPS storage is a storage type that delivers predictable performance and consistently low latency. If your workload is I/O constrained, using Provisioned IOPS SSD storage can increase the number of I/O requests that the system can process concurrently.\nProvisioned IOPS SSD storage provides a way to reserve I/O capacity by specifying IOPS. However, as with any other system capacity attribute, its maximum throughput under load is constrained by the resource that is consumed first. That resource might be network bandwidth, CPU, memory, or database internal resources.\nEBS–optimized instances deliver dedicated bandwidth to Amazon EBS. When attached to an EBS–optimized instance, Provisioned IOPS SSD (io1) volumes are designed to achieve their provisioned performance, 99.9% of the time. Choose an EBS–optimized instance that provides more dedicated Amazon EBS throughput than your application needs; otherwise, the connection between Amazon EBS and Amazon EC2 can become a performance bottleneck.\n2\nQ4 A developer deployed an application to an Amazon EC2 instance. The application needs to know the public IPv4 address of the instance.\nHow can the application find this information?\nQuery the instance metadata from http://169.254.169.254/latest/meta-data/. Query the instance user data from http://169.254.169.254/latest/user-data/. Query the Amazon Machine Image (AMI) information from http://169.254 169.254/latest/meta-data/ami/. Check the hosts file of the operating system. Explanation 1\nQ5 You are configuring a Jenkins project that is installed on an Amazon EC2 instance running a Windows operating system. You want this Jenkins project to integrate with AWS CodePipeline.\nWhich actions should you take to make this function perform correctly? (2 answers)\nRestart all Amazon EC2 instances that are running a Windows operating system. Provide the IAM user credentials to integrate AWS CodePipeline. Fill out the required fields for your proxy host. Modify the PATH variable to include the directory where you installed Jenkins on all Amazon EC2 instance that are running a Windows operating system. Explanation https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-four-stage-pipeline.html\n2, 3\nResources EC2 Linux Hands-On Lab EB FAQ EC2 Digest EB Digest Community posts https://dev.to/romankurnovskii/aws-ec2-cheat-sheet-2mhp ","description":"A step-by-step guide to Amazon EC2","title":"EC2","uri":"/en/tracks/aws-certified-developer-associate/ec2/"},{"content":"Step 1: Launch an EC2 Instance Go to the AWS Console → Navigate to EC2. Click Launch Instance. Choose an AMI (e.g., Amazon Linux, Ubuntu). Select an instance type (e.g., t2.micro for free tier). Configure instance details (default settings are fine). Add storage (default 8GB is sufficient, adjust as needed). Configure security groups: Allow SSH (port 22) from My IP (recommended). Add rules for other services (e.g., HTTP, HTTPS) if needed. Choose or create a key pair (important for SSH access). Click Launch. Step 2: Connect to EC2 via SSH Using a .pem Key (Linux/macOS) Move the key to a secure location:\nmv ~/Downloads/my-key.pem ~/.ssh/ Set permissions:\nchmod 400 ~/.ssh/my-key.pem Connect: ssh -i ~/.ssh/my-key.pem admin@your-ec2-public-ip # ssh -i ~/.ssh/my-key.pem admin@52.31.239.202 Replace ec2-user/admin with ubuntu for Ubuntu AMIs. Replace your-ec2-public-ip with the instance’s public IP. Using PuTTY (Windows) Convert .pem to .ppk using PuTTYgen. Open PuTTY. Under Session, enter your-ec2-public-ip in Host Name. Go to SSH → Auth, load the .ppk file. Click Open. Step 3: Configure Automatic SSH Login Method 1: Add Key to SSH Agent (Recommended) Start the SSH agent (if required):\neval \"$(ssh-agent -s)\" Add the key:\nssh-add ~/.ssh/my-key.pem Now, connect with:\nssh admin@your-ec2-public-ip Method 2: Add Key to SSH Config File Open (or create) the SSH config file:\nnano ~/.ssh/config Add the following:\nHost my-ec2 HostName your-ec2-public-ip User ec2-user IdentityFile ~/.ssh/my-key.pem Save and exit (CTRL+X, then Y, then ENTER).\nNow, connect easily with:\nssh my-ec2 Connected Once connected:\nDebian initial Setup Ubuntu initial Setup ","description":"Step-by-step guide to setting up an EC2 instance and connecting via SSH.","title":"EC2 Initial Setup and SSH Connection","uri":"/en/posts/linux/ec2-initial-setup/"},{"content":"About AWS Elastic Beanstalk AWS Elastic Beanstalk is an easy-to-use service for deploying and scaling web applications and services developed with Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker on familiar servers such as Apache, Nginx, Passenger, and IIS.\nDeploying new application versions to existing resources in AWS Elastic Beanstalk happens much faster (typically under a minute) and once again is mostly dependent on the size of the new application version.\nDigest When you want to use new run time capabilities with elastic bean stalk, it is better to use blue-green deployment Security group will not be removed when removing the stack with elastic bean stalk For long running tasks - Use Elastic Beanstalk worker environment to process the tasks asynchronously Launch configuration is used for modifying instance type, key pair, elastic block storage and other settings that can be configured only when launching the instance Rolling with Additional Batch and Immutable both involve provisioning new servers to ensure capacity is not reduced. All At Once means the application will be offline for the duration of the update. Performing a Rolling Update without an additional batch of servers means a reduction in capacity. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deploy-existing-version.html For Blue green deployment - Use Elastic beanstalk swap URL feature or route 53 with weighted routing policies You create your own Elastic Beanstalk platform using Packer, which is an open-source tool for creating machine images for many platforms, including AMIs for use with Amazon Elastic Compute Cloud (Amazon EC2). Price There is no additional charge for AWS Elastic Beanstalk. Only the AWS resources required to store and run applications are charged.\nConcepts AWS doc Applications An application is a collection of different elements, such as environments, environment configurations, and application versions.\nYou can have multiple application versions held within an application.\nApplication Version An application version is a very specific reference to a section of deployable code. The application version will point typically to simple storage service (S3) where the deployable code may reside.\nEnvironment Configurations An environment configuration is a collection of parameters and settings that dictate how an environment will have its resources provisioned by Elastic Beanstalk and how these resources will behave.\nEnvironment An environment refers to an application version that has been deployed on AWS resources. These resources are configured and provisioned by AWS Elastic Beanstalk. At this stage the application is deployed as a solution and becomes operational within your environment.\nThe “environment” is comprised of ALL the resources created by Elastic Beanstalk and not just an EC2 instance with your uploaded code.\nEnvironment Tier Reflects on how Elastic Beanstalk provisions resources based on what the application is designed to do. If the application manages and handles HTTP requests, then the app will be run in a web server environment.\nConfiguration Template This is the template that provides the baseline for creating a new, unique, environment configuration.\nPlatform Culmination of components in which you can build your application upon using Elastic Beanstalk. These are comprised of the OS of the instance, the programming language, the server type (web or application), and components of Elastic Beanstalk\nDeployment policies All at once – deploys the new version to all instances simultaneously and will be out of service for a short time. Rolling – deploys the new version in batches. Rolling with additional batch – deploys the new version in batches, but first launch a new batch of instances. Immutable – deploys the new version to a new set of instances. Traffic splitting – deploys the new version to a new set of instances and temporarily split incoming client traffic. Practice Controlled deployment with AWS Elastic Beanstalk Lab Controlled deployment with AWS Elastic Beanstalk\nIn this lab, we will deploy several application version updates in a load-balanced, auto-scaling environment.\nThe first update is deployed using a simple deployment. The second update is deployed using a `blue-green’ deployment, where a separate environment is created to run the new version of the application, and the DNS switch switches incoming traffic to the new environment.\nThe final deployment architecture will look like this\nLoading the application In this review, I’m using the code that Cloudacademy provided me, but I have a ready-made launch script that you can download from Elastic Beanstalk: download\nCreate Go to Elastic Beanstalk page and click Create Application.\nSet Name Specify a name for the new application Choose platform Under Platform choose the desired platform of the application. In our case - Node.js. Download source code Under Source code origin specify the version of the application and download the archive with the application. Example\nApplication Configuration Change the preset Configuration to Custom configuration:\nClick Edit under Rolling updates and deployments\nIn the default configuration, updates are distributed to all instances at the same time. This leads to application downtime, which is unacceptable for production environments.\nWe will set Rolling and Batch size to 30%\nNetwork Back in the main application form, click Edit in the Network configuration.\nOn the Modify network form, configure the following values, then Save.\nVPC: Select VPC with CIDR block 10.0.0.0/16. This will not be the default VPC. Load balancer settings: Load balancer subnets: Select subnets with CIDR blocks 10.0.100.0/24(us-west-2a)and 10.0.101.0/24 (us-west-2b). These are public subnets. The application load balancer requires at least two subnets in different availability zones Instance settings: * Instance subnets: Select a subnet with CIDR block 10.0.1.0/24. This is a private subnet.\nConfirmation Press Create app.\nThe app creation process takes from 5 minutes.\nThen go to Dasboard This concludes the loading phase of the app in Elastic Beanstalk. Next, let’s break down how to switch the downloading of the new version of the application to the clients.\nDownloading version 2 of the app Downloading version 2.0 Press Upload and deploy and download the updated code. For example, you can change the text in the same source code for comparison.\nSpecify new version and publication settings Version comparison Now we can compare both versions by following the links. In my case the applications look like this\nChanging the url of the apps Now let’s swap the apps around. So that a user who previously went to one address will now see the 2nd version of the app.\nUnder Actions, click on Swap environment URLs and then select the app you want to swap\nRemoving Elastic Beanstalk resources Elastic Beanstalk runs EC2 instances as well as other services to deploy applications. But you can remove all services from a single window.\ngo to the Applications section Select an application.f Click on Actions -\u003e Terminate environment Translated with \u003cwww.DeepL.com/Translator\u003e (free version) Questions Q1 You are building a web application that will run in an AWS ElasticBeanstalk environment. You need to add and configure an Amazon ElastiCache cluster into the environment immediately after the application is deployed.\nWhat is the most efficient method to ensure that the cluster is deployed immediately after the EB application is deployed?\nUse the AWS Management Console to create and configure the cluster. Create a cron job to schedule the cluster deployment using the aws cloudformation deploy command Create a configuration file with the .config extension and place it into the .ebextensions folder in the application package. Build an AWS Lambda function that polls to the ElasticBeanstalk environment deployments and create and configure the Amazon ElastiCache cluster. Explanation [AWS Secrets Manager](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-resources.html)\n3\nQ2 Emily is building a web application using AWS ElasticBeanstalk. The application uses static images like icons, buttons and logos. Emily is looking for a way to serve these static images in a performant way that will not disrupt user sessions.\nWhich of the following options would meet this requirement?\nUse an Amazon Elastic File System (EFS) volume to serve the static image files. Configure the AWS ElasticBeanstalk proxy server to serve the static image files. Use an Amazon S3 bucket to serve the static image files. Use an Amazon Elastic Block Store (EBS) volume to serve the static image files. Explanation https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-staticfiles.html\nAn Amazon S3 bucket would work, but the AWS ElasticBeanstalk proxy server would need to route the requests to the static files to a different place anytime they need to be shown.\n2\nQ3 An online shopping platform has been deployed to AWS using Elastic Beanstalk. They simply uploaded their Node.js application, and Elastic Beanstalk automatically handles the details of capacity provisioning, load balancing, scaling, and application health monitoring. Since the entire deployment process is automated, the DevOps team is not sure where to get the application log files of their shopping platform.\nIn Elastic Beanstalk, where does it store the application files and server log files?\nApplication files are stored in S3. The server log files can only be stored in the attached EBS volumes of the EC2 instances, which were launched by AWS Elastic Beanstalk. Application files are stored in S3. The server log files can be stored directly in Glacier or in CloudWatch Logs. Application files are stored in S3. The server log files can be optionally stored in CloudTrail or in CloudWatch Logs. Application files are stored in S3. The server log files can also optionally be stored in S3 or in CloudWatch Logs. Explanation AWS Elastic Beanstalk stores your application files and optionally, server log files in Amazon S3. If you are using the AWS Management Console, the AWS Toolkit for Visual Studio, or AWS Toolkit for Eclipse, an Amazon S3 bucket will be created in your account and the files you upload will be automatically copied from your local client to Amazon S3.\nOptionally, you may configure Elastic Beanstalk to copy your server log files every hour to Amazon S3. You do this by editing the environment configuration settings.\nWith CloudWatch Logs, you can monitor and archive your Elastic Beanstalk application, system, and custom log files from Amazon EC2 instances of your environments. You can also configure alarms that make it easier for you to react to specific log stream events that your metric filters extract.\nThe CloudWatch Logs agent installed on each Amazon EC2 instance in your environment publishes metric data points to the CloudWatch service for each log group you configure.\nEach log group applies its own filter patterns to determine what log stream events to send to CloudWatch as data points. Log streams that belong to the same log group share the same retention, monitoring, and access control settings. You can configure Elastic Beanstalk to automatically stream logs to the CloudWatch service.\nThe option that says: Application files are stored in S3. The server log files can be optionally stored in CloudTrail or in CloudWatch Logs is incorrect because the server log files can optionally be stored in either S3 or CloudWatch Logs, but not directly to CloudTrail as this service is primarily used for auditing API calls.\n4\nQ4 A former colleague reached out to you for consultation. He uploads a Django project in Elastic Beanstalk through CLI using instructions he read in a blog post, but for some reason he could not create the environment he needs for his project. He encounters an error message saying “The instance profile aws-elasticbeanstalk-ec2-role associated with the environment does not exist.”\nWhat are the possible causes of this issue? (Select TWO.)\nHe selected the wrong platform for the Django code. Elastic Beanstalk CLI did not create one because your IAM role has no permission to create roles. Instance profile container for the role needs to be manually replaced every time a new environment is launched. You have not associated an Elastic Beanstalk role to your CLI. IAM role already exists but has insufficient permissions that Elastic Beanstalk needs. Explanation AWS EB CLI cannot create the instance profile for your beanstalk environment if your IAM role has no access to creating roles.\nThis error is also thrown when the instance profile has insufficient or outdates policies that beanstalk needs to function. More details on this can be seen on the references provided.\n2, 5\nResources https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/tutorials.html Tutorials and samples Community posts https://dev.to/romankurnovskii/todo-aws-aws-elastic-beanstalk-cheat-sheet-1718 https://dev.to/romankurnovskii/aws-elastic-beanstalk-top-questions-certified-developer-exam-478g ","description":"AWS Elastic Beanstalk","title":"Elastic Beanstalk","uri":"/en/tracks/aws-certified-developer-associate/elasticbeanstalk/"},{"content":"About Amazon Elastic Container Registry (Amazon ECR) - Fully managed container registry offering high-performance hosting, so you can reliably deploy application images and artifacts anywhere\nDocumentation User Guide Hosted private Docker registry\nAlternatives Docker Hub JFrog Artifactory Azure Container Registry Harbor Google Container Registry Red Hat Quay JFrog Container Registry Price Current price\nUse Cases Store, encrypt, and manage container images\nManage software vulnerabilities Streamline your deployment workloads Manage image lifecycle policies Type: Containers\nSame type services: Elastic Container Service (ECS), Elastic Container Registry (ECR), Elastic Kubernetes Service (EKS), Fargate\nPractice This commands returns the command to execute to be able to login to ECR:\nLogin\nget-login-password:aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com Create a repository:\naws ecr create-repository \\ --repository-name hello-repository \\ --image-scanning-configuration scanOnPush=true \\ --region region Tag image\ndocker tag hello-world:latest aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository Push\ndocker push aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository Pull\ndocker pull aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository:latest Delete an image\naws ecr batch-delete-image \\ --repository-name hello-repository \\ --image-ids imageTag=latest \\ --region region Delete a repository\naws ecr delete-repository \\ --repository-name hello-repository \\ --force \\ --region region Labs:\nUse AWS Fargate for Serverless Deployment of Container Applications Quick start: Publishing to Amazon ECR Public using the AWS CLI Notes:\nIf you get a 503 Service Temporarily Unavailable error, try again after 30 seconds to let the load balancer finish adding the task to the target group. ","description":"Run highly secure, reliable, and scalable containers","title":"Elastic Container Registry","uri":"/en/tracks/aws-certified-developer-associate/ecr/"},{"content":"About Documentation User Guide Highly secure, reliable, \u0026 scalable way to run contai­ners\nAlternatives Google Container Engine (GKE) Azure Container Service IBM Bluemix Container Service Jelastic Multi-Cloud PaaS Terminology Amazon ECS Term Definition Cluster Logical Grouping of EC2 Instances Container Instance EC2 instance running the ECS agent Task Definition Blueprint that describes how a docker container should launch Task A running container using settings in a Task Definition Service Defines long running tasks – can control task count with Auto Scaling and attach an ELB Digest Microservices are built in multiple programming languages Containers simplify deployment of microservices: Step 1 : Create a self contained Docker image Application Runtime (JDK or Python), Application code and Dependencies Step 2 : Run it as a container any where Local machine OR Corporate data center OR Cloud Use On-Demand instances or Spot instances Launch type: EC2 or Fargate Data volumes attached to containers Deployment type: Rolling update Blue/green deployment (powered by AWS CodeDeploy) Task Placement Strategies: binpack - Leave least amount of unused CPU or memory. Minimizes number of container instances in use random - Random task placement spread - Based on specified values: Host (instanceId) (OR) Availability Zone(attribute:ecs.availability-zone) (Alowed) Combine strategies and prioritize How do you manage 100s of containers? ECS - Fully managed service for container orchestration Step 1 : Create a Cluster (Group of one or more EC2 instances) Step 2: Deploy your microservice containers AWS Fargate: Serverless ECS. DON’T worry about EC2 instances. Cloud Neutral: Kubernetes AWS - AWS Elastic Kubernetes Service (EKS) Load balancing: Performed using Application Load Balancers Dynamic host port mapping: Multiple tasks from the same service are allowed per EC2 (container) instance Path-based routing: Multiple services can use the same listener port on same ALB and be routed based on path (\u003cwww.myapp.com/microservice-a\u003e and \u003cwww.myapp.com/microservice-b\u003e) Price Current price\nUse Cases Type: Containers\nSame type services: Elastic Container Service (ECS), Elastic Container Registry (ECR), Elastic Kubernetes Service (EKS), Fargate\nBest practice:\n10 Microservices =\u003e 10 Task Definitions =\u003e 10 Task IAM Roles with individual permissions needed by each microservice ECS vs EKS Amazon also provides the Elastic Container Service for Kubernetes (Amazon EKS) which can be used to deploy, manage, and scale containerized applications using Kubernetes on AWS.\nAmazon ECS Amazon EKS Managed, highly available, highly scalable container platform Managed, highly available, highly scalable container platform AWS-specific platform that supports Docker Containers Compatible with upstream Kubernetes so it’s easy to lift and shift from other Kubernetes deployments Considered simpler and easier to use Considered more feature-rich and complex with a steep learning curve Leverages AWS services like Route 53, ALB, and CloudWatch A hosted Kubernetes platform that handles many things internally “Tasks” are instances of containers that are run on underlying compute but more of less isolated “Pods” are containers collocated with one another and can have shared access to each other Limited extensibility Extensible via a wide variety of third-party and community add-ons. Questions Q1 You are asked to establish a baseline for normal Amazon ECS performance in your environment by measuring performance at various times and under different load conditions. To establish a baseline, Amazon recommends that you should at a minimum monitor the CPU and ____ for your Amazon ECS clusters and the CPU and ____ metrics for your Amazon ECS services.\nmemory reservation and utilization; concurrent connections memory utilization; memory reservation and utilization concurrent connections; memory reservation and utilization memory reservation and utilization; memory utilization Explanation https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_monitoring.html\n1, 2\n","description":"Run highly secure, reliable, and scalable containers","title":"Elastic Container Service","uri":"/en/tracks/aws-certified-developer-associate/ecs/"},{"content":"About Kubernetes (K8) Docker Container/Cluster management\nRun highly secure, reliable, and scalable containers\nDocumentation User Guide Alternatives Red Hat OpenShift Container Platform Azure Kubernetes Service (AKS) Rancher Google Kubernetes Engine (GKE) Oracle Cloud Infrastructure Container Engine for Kubernetes Mirantis Kubernetes Engine (formerly Docker Enterprise) Kubernetes Cloud Foundry Price Current price\nUse Cases Build and run web applications Deploy across hybrid environments Model machine learning (ML) workflows ECS vs EKS Amazon provides the Elastic Container Service for Kubernetes (Amazon EKS) which can be used to deploy, manage, and scale containerized applications using Kubernetes on AWS.\nAmazon ECS Amazon EKS Managed, highly available, highly scalable container platform Managed, highly available, highly scalable container platform AWS-specific platform that supports Docker Containers Compatible with upstream Kubernetes so it’s easy to lift and shift from other Kubernetes deployments Considered simpler and easier to use Considered more feature-rich and complex with a steep learning curve Leverages AWS services like Route 53, ALB, and CloudWatch A hosted Kubernetes platform that handles many things internally “Tasks” are instances of containers that are run on underlying compute but more of less isolated “Pods” are containers collocated with one another and can have shared access to each other Limited extensibility Extensible via a wide variety of third-party and community add-ons. Practice Building a Cloud Native Application\n","description":"Amazon Elastic Kubernetes Service","title":"Elastic Kubernetes Service","uri":"/en/tracks/aws-certified-developer-associate/eks/"},{"content":"About Documentation User Guide Amazon Elasticache is a fully managed Redis or Memcached in-memory data store.\nIt’s great for use cases like two-tier web applications where the most frequently accesses data is stored in ElastiCache so response time is optimal.\nYou can use ElastiCache for caching, which accelerates application and database performance, or as a primary data store for use cases that don’t require durability like session stores, gaming leaderboards, streaming, and analytics.\nCompatible with Redis and Memcached\nPrice Current price\nUse Cases Type: In-memory\nUse Case Benefit Web session store In cases with load-balanced web servers, store web session information in Redis so if a server is lost, the session info is not lost, and another web server can pick it up Database caching Use Memcached in front of AWS RDS to cache popular queries to offload work from RDS and return results faster to users Leaderboards Use Redis to provide a live leaderboard for millions of users of your mobile app Streaming data dashboards Provide a landing spot for streaming sensor data on the factory floor, providing live real-time dashboard displays Caching Engines Memcached Redis Simple, no-frills You need encryption You need to elasticity (scale out and in) You need HIPAA compliance You need to run multiple CPU cores and threads Support for clustering You need to cache objects (e.g. database queries) You need complex data types You need HA (replication Backup and restore features Pub/Sub capability Multi-AZ with Auto-Failover Non persistent. No backups Multi-node for partitioning of data (sharding) Memcached ElastiCache manages Memcached nodes as a pool that can grow and shrink (similar to an EC2 Auto Scaling group); individual nodes are expendable and non-persistent.\nMemcached provides a simple caching solution that best supports object caching and lets you scale out horizontally. Ideal for offloading a DB’s contents into a cache.\nRedis ElastiCache manages Redis more as a relational database, i.e. Redis clusters are managed as persistent, stateful entities that include using multi-AZ redundancy for handling failover (similar to RDS).\nRedis supports complex data structures, hence would be ideal in cases where sorting and ranking datasets in memory are important (e.g. such as in leaderboards for games).\nCaching Strategies Lazy Loading The data that is read from the DB is stored in the cache. The data can become stale The data becomes stale because there are no updates to the cache when data is changed in the database Only cache data when it is requested. Cache miss penalty on initial request. Chance to produce stale data; can be mitigated by setting a TTL. Shorter TTL = less stale data.\nWrite-Through The data is added/updated into the cache everytime the data is written to the DB (no stale data) Because the data in the cache is updated every time it’s written to the database, the data in the cache is always current. Every database write will write to the cache as well. Data is never stale however there will be alot more operations to perform; and these resources are wasted if most of the data is never used.\nSession Store Stores temporary session data in cache (with TTL) - Time to Live. Data expires after the given time Practice Configuring a Lambda function to access Amazon ElastiCache in an Amazon VPC\nQuestions Q1 What is one reason that AWS does not recommend that you configure your ElastiCache so that it can be accessed from outside AWS?\nThe metrics reported by CloudWatch are more difficult to report. Security concerns and network latency over the public internet. The ElastiCache cluster becomes more prone to failures. The performance of the ElastiCache cluster is no longer controllable. Explanation Elasticache is a service designed to be used internally to your VPC. External access is discouraged due to the latency of Internet traffic and security concerns. However, if external access to Elasticache is required for test or development purposes, it can be done through a VPN.\n2\nQ2 You are building a web application that will run in an AWS ElasticBeanstalk environment. You need to add and configure an Amazon ElastiCache cluster into the environment immediately after the application is deployed.\nWhat is the most efficient method to ensure that the cluster is deployed immediately after the EB application is deployed?\nUse the AWS Management Console to create and configure the cluster. Create a cron job to schedule the cluster deployment using the aws cloudformation deploy command Create a configuration file with the .config extension and place it into the .ebextensions folder in the application package. Build an AWS Lambda function that polls to the ElasticBeanstalk environment deployments and create and configure the Amazon ElastiCache cluster. Explanation [AWS Secrets Manager](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-resources.html)\n3\n","description":"Amazon ElastiCache","title":"ElastiCache","uri":"/en/tracks/aws-certified-developer-associate/elasticache/"},{"content":"About Unlike the SMA, the EMA gives more weight to recent data, making it quicker to respond to price changes.\nCalculating Formula EMA = (Close - Previous EMA) * Multiplier + Previous EMA\nWhere:\nClose: the closing price for a given period (Price today/now). Here close prices is for example N: the period of the EMA. Multiplier: 2 / (N + 1) Previous EMA is the EMA of the previous period. The EMA for the first period is just the Close price.\nBut for subsequent periods, it’s calculated as follows:\nEMA = (Close - Previous EMA) * Multiplier + Previous EMA EMA[i] = (Close[i] - EMA[i-1]) * 2/(N+1) + EMA[i-1] However, the EMA’s calculation is slightly more complex for the initial period because there is no previous EMA. In this case, we use the SMA as the first EMA:\nEMA(first period) = SMA Example:\nLet’s calculate a 5-minute EMA at Minute 6 with the following market data:\nMinute Open High Low Close EMA 1 $10.0 $11.0 $9.5 $10.0 - 2 $10.1 $12.1 $10.0 $12.0 - 3 $12.2 $15.2 $12.0 $15.0 - 4 $15.1 $15.1 $13.9 $14.0 - 5 $14.1 $16.1 $14.0 $16.0 13.4(SMA) 6 $16.1 $16.1 $14.9 $15.0 15.67 7 $15.1 $17.1 $15.0 $17.0 … 8 $17.1 $17.1 $15.9 $16.0 … 9 $16.1 $18.1 $16.0 $18.0 … Can be calculated from first price\nHere, N = 5, so Multiplier = 2 / (5 + 1) = 0.33.\nSMA(5) = (10.0 + 12.0 + 15.0 + 14.0 + 16.0) / 5 = 13.4 This value becomes the first EMA (EMA[5]). Now, to calculate the EMA for the 6th minute, we use the EMA formula: EMA[6] = (Close[6] - EMA[5]) * multiplier + EMA[5] = (15.0 - 13.4) * 0.33 + 13.4 = 14.13 Pros and Cons Pros:\nMore responsive: By giving more weight to recent prices, the EMA can adapt faster to price changes. Combines trend and momentum: The EMA not only captures the overall trend but also shows the asset’s momentum. Often used for High frequency trading. Cons:\nMore prone to false signals: The sensitivity of the EMA can sometimes lead to false signals, especially in volatile markets. Complex calculation: Compared to the SMA, the EMA’s calculation is slightly more complex, especially for longer periods. Example of signals Like the SMA, traders often use two EMAs: a short-term one and a long-term one. When the short-term EMA crosses above the long-term EMA, it’s a bullish (buy) signal, and when it crosses below, it’s a bearish (sell) signal.\nTrue Positive:\nIn minute 7, the short EMA crosses above the long EMA, which is a buy signal. The price then goes up, confirming this was a correct signal.\nIn a stable uptrend, the short-term EMA might cross above the long-term EMA, correctly suggesting that it’s a good time to enter a long position.\nFalse Positive:\nIn minute 11, the short EMA dips below the long EMA, suggesting a sell signal. However, the price increases in the next minute, making this a false signal.\nIn a volatile market, the price might swing up and down sharply, causing the short-term EMA to cross the long-term EMA back and forth, generating multiple buy and sell signals that could be misleading.\nUse in Real Trading In real trading, EMA can be used in combination with other indicators such as MACD (Moving Average Convergence Divergence) or Bollinger Bands.\nFor instance, a trader might look for the short-term EMA to cross above the long-term EMA and the MACD to cross above its signal line as a confirmation for a long position.\nPython Implementation Click here to view this notebook in full screen ","description":"EMA Trading indicator","title":"EMA - Exponential Moving Average","uri":"/en/posts/trading-indicators/ema/"},{"content":"Lab Encrypting S3 Objects Using SSE-KMS Creating a Customer Master Key (CMK) 1. In the AWS Management Console search bar, enter KMS, and click the KMS result under Services:\n2. Select Customer managed****keys in the left pane of the KMS console.\nWarning: Cloud Academy cleans up the lab environment for you after a lab is completed or terminated. As a precaution, AWS prevents keys from being deleted immediately. Rather, they are queued for deletion, and an expiration period is set (of 7-30 days). For this reason, you may see residual keys from other students within the last week. For this reason, you may need to append a unique number to the Alias field in the next instruction.\n3. Click Create Key, then expand Advanced Optionsand set the following values:\nKey type: Symmetric(Symmetric keys are suitable for most data encryption applications. The same key is used for both encrypt and decrypt operations with symmetric key algorithms.) Key usage: Encrypt and decrypt Advanced options: Key Material Origin: Leave as KMS (default). AWS will generate the key material for encryption. Note that another common use case is for customers to generate their own keys, and have AWS keep a back up encrypted copy and help manage them with KMS. Regionality:Single-Region key 4. Click Next to advance to the Add Labels page of the wizard.\n5. Set the following values before clicking Next (leave the default values for other fields)\nAlias: calabs-CMK-key(Append a unique number to the key’s Alias if needed to be unique. For example, calabs-CMK-key2.) Description: 6. Click Next to advance to Define Key Administrative Permissions and leave the default values.\nAdministrative permissions allow users and roles to administer CMKs but not to perform cryptographic operations. In production environments, this is sometimes used to easily grant limited access to other users. The Allow key administrators to delete this keycheckbox makes it explicit if deleting keys is allowed, since the key can’t be recovered once deleted, making recovery of encrypted data impossible. Note that key deletion is not immediate and first enters into a pending state before the key is deleted. The delete operation can be canceled while in the pending state.\nThese settings generate a key policy. The default policy allows IAM policies to grant access the key, which is why you don’t require selecting your student user as an administrator. The lab IAM policy of your student user allows you to perform the required actions of the lab.\n7. Click Next to advance to Define Key Usage Permissions.\nUsage permissions grant access to perform cryptographic operations such as encrypting and decrypting. Enterprises usually have different permissions for administrators and users, hence the wizard walks you through defining both.\nNotice that you can grant access to the key so other AWS accounts can use it for encryption/decryption.\n8. Click Nextto preview the key policy and then click Finish when ready. The CMK is created.\n9. Confirm the key created correctly and that the Status is Enabled:\nEncrypting S3 Data using Server-Side Encryption with KMS Managed Keys (SSE-KMS) You will upload a file and encrypt it using SSE-KMS in this lab step.\n1. In the AWS Management Console search bar, enter S3, and click the S3 result under Services:\n2. Click the name of the bucket the Cloud Academy lab environment created for you (name begins with cloudacademylabs-ssekms):\n3. Click Upload.\n4. Click Add files and select a small file, or download this sample file and select it.\n5. Expand the Properties tab and scroll until the Server-side encryption settings.\n6. Check the Specify an encryption key checkbox.\n7. Check the AWS Key Management Service key (SSE-KMS) checkbox and then the Choose from your AWS KMS keys checkbox:\n8. Choose the AWS KMS key you previously generated:\n9. Click on Upload.\n10. Click Close and then click the name of the object to open its properties panel:\nYou can verify the object is encrypted using SSE-KMS by checking that the Encryption field is AWS-KMS.\nEnforcing S3 Encryption Using Bucket Policies 1. In the S3 bucket console, click the Permissions tab followed by Bucket Policy to open the Bucket policy editor:\nBucket policies are IAM policies applied to a bucket rather than to a user or role as is conventionally done with IAM policies. Similar to how a key policy applied to the CMK. These are examples of resource-based policies in AWS.\n2. Paste the following bucket policy into the policy editor:\n{ \"Version\": \"2012-10-17\", \"Id\": \"RequireSSEKMS\", \"Statement\": [ { \"Sid\": \"DenyUploadIfNotSSEKMSEncrypted\", \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": \"s3:PutObject\", \"Resource\": \"arn:aws:s3:::\u003cYour_Bucket_Name\u003e/*\", \"Condition\": { \"StringNotEquals\": { \"s3:x-amz-server-side-encryption\": \"aws:kms\" } } } ] } This policy denies (\"Effect\": \"Deny\") all users’ (\"Principal\": \"*\") uploads (\"Action\": \"s3:PutObject\") to the bucket (\"Resource\": \"arn:aws:s3:::\u003cYour_Bucket_Name\u003e/*\") if the s3:x-amz-server-side-encryption is not set to aws:kms, which corresponds to SSE-KMS. The lab provides you with the policy but you could recreate it using the policy generator linked to beneath the policy editor.\n3. Replace \u003cYour_Bucket_Name\u003e with the name of your lab bucket (it begins with cloudacademylabs-ssekms- and can be copied from the S3 console):\n4. Click Save changes to save the policy and have it start being enforced.\n5. Click the Objectstab followed by Upload.\n6. Click Add files and select a small file, or download this sample file and select it.\n7. Click Upload and observe the image does not appear in the bucket contents table.\nClicking upload without configuring any properties of the object uses the default of no encryption.\nYou can see the upload Failed.\n8. Retry the upload but this time use the Set properties step to configure Encryptionto AWS KMS master-key using your CMK.\nThe upload now succeeds since the bucket policy condition is satisfied:\nThe policy does not require the use of your CMK however, so the default S3 KMS key in the region is also allowed. You can change the policy condition to enforce a specific CMK is used.\n","description":"How to encrypt S3 Objects Using SSE-KMS","title":"Encrypting S3 Objects Using SSE-KMS","uri":"/en/tracks/aws-certified-developer-associate/kms/encrypting-s3-objects-using-sse-kms/"},{"content":"Abstraction Today worked on refining some abstraction level in framework. The main objective of today’s work was to enhance the abstraction in the classes and improve the overall code structure.\nThe goal was to make the code more adaptable and easier to maintain.\nFor example, instead of having Binance hardcoded in the from_binance_order method, now use the Exchanges enum, which makes the code more versatile and ready for additional exchanges in the future.\ndef from_binance_order(binance_order: BinanceOrder): exchange = Exchanges.BINANCE ... Orders Orders are at the heart of any trading bot, and handling them efficiently is crucial for the bot’s performance. In the Order class, I added the side property to capture whether the order is a buy or sell order, and also refined the Order creation method to accept side and order_type as arguments.\nImplemented a new method, update, in the Order class. This function checks if the incoming order is an instance of the Order class and updates specific fields based on certain conditions.\ndef update(self, other_order): if not isinstance(other_order, Order): raise ValueError(\"The given object is not an instance of Order\") # update only specific fields if other_order.time_to_cancel: self.time_to_cancel = other_order.time_to_cancel if other_order.status != OrderStatus.NEW: self.status = other_order.status Async One of the major changes made was to the way I handle async operations. In the Exchange class, the methods on_new_order_request and on_cancel_order_request were updated to run in separate tasks. This change helps in improving the overall efficiency of the bot as multiple tasks can run concurrently without blocking the main event loop.\nasyncio.create_task( self._exchange.on_new_order_request(order_request, **kwargs) ) Summury Today’s changes focused on enhancing the bot’s framework by making it more abstract, improving order handling, and making async operations more efficient.\n","description":"In this part of our trading bot series, we dive into the importance of enhancing abstraction in code structure, efficient order handling, and the implementation of asynchronous operations for optimized performance.","title":"Enhancing Trading Bot with Abstraction and Async Management","uri":"/en/stories/004-trading-bot-refactor-orders/"},{"content":"About EventB­ridge is a serverless event bus that makes it easy to connect applic­ations together using data from apps, integrated SaaS apps, \u0026 AWS services.\nDocumentation User Guide EventB­ridge is a low-cost alternative to building a new backend infrastructure for every new app. With Serverless EventB­ridge, you can connect your existing apps with a few lines of code. You don’t have to build a new backend for every new app you want to connect to.\nYou can use existing infrastructure as a provider of event data, and connect your apps using Serverless EventB­ridge.\nAlternatives Azure Service Bus TIBCO Cloud Integration (including BusinessWorks and Scribe) IBM App Connect Google Cloud Pub/Sub Apache Camel Peregrine Connect Software AG webMethods IBM Cloud Pak for Integration Price Current price\nUse Cases Type: Applic­ation integr­ation\nSame type services: SNS, SQS, AppSync, EventBridge\nRe-architect for speed Extend functionality via SaaS integrations Monitoring and Auditing Customize SaaS with AI/ML EventBridge vs Amazon SNS In comparison with Amazon SNS, EventBridge:\nIntegrates with more AWS services than SNS Supports registering message schemas Has sophisticated third-party integrations available Supports transforming event messages before sending them You should choose to use Amazon EventBridge over Amazon SNS when the system you are building is expected to:\nSupport significant asynchronous functionality Grow significantly in terms of both usage and complexity Have changing requirements over time Have components built by different teams that interact Need support for disparate event sources and targets Amazon EventBridge vs CloudWatch Events Amazon EventBridge extends CloudWatch Events - Build event-driven architectures Original goal with CloudWatch Events was to help with monitoring usecases specific to AWS services. React to events from Your Applications, AWS services and Partner Services Example: EC2 status change, change in your application or SaaS partner application Event Targets can be a Lambda function, an SNS Topic, an SQS queues etc Rules map events to targets (Make sure that IAM Roles have permissions) Event buses receive the events: Default event bus (for AWS services) Custom event bus (custom applications) Partner event bus (partner applications) Over time, Amazon EventBridge will replace Amazon CloudWatch Events Practice Processing File Uploads Asynchronously with Amazon EventBridge\nQuestions Q1 A food delivery company is building a feature that requests reviews from customers after their orders are delivered. The solution should be a short-running process that can message customers simultaneously at various contact points including email, text, and mobile push notifications.\nWhich approach best meets these requirements?\nUse EventBridge with Kinesis Data Streams to send messages. Use a Step Function to send SQS messages. Use a Lambda function to send SNS messages. Use AWS Batch and SNS to send messages. Explanation https://docs.aws.amazon.com/sns/latest/dg/welcome.html\n3\n","description":"Amazon EventBridge - Build event-driven applications at scale across AWS, existing systems, or SaaS apps","title":"EventBridge","uri":"/en/tracks/aws-certified-developer-associate/eventbridge/"},{"content":"Lab Fan-Out Orders using Amazon SNS and SQS Creating an Amazon SNS Topic and Amazon SQS Queues Here’s a diagram of what you will build and configure in this lab step:\nIn the search bar at the top, enter SNS and under Services, click the Simple Notification Service result: In the Create topic card on the right, in the Topic name textbox, enter new-orders and click Next step: The Create topic form will load.\nBy default, the Type of topic selected will be Standard. This is the most scalable topic type. The cost of this scalability is that message order and exactly-once delivery attempts can not be guaranteed.\nIf you are building a solution requires strict message ordering and exactly-once message delivery, you should use a FIFO type topic.\nStandard is fine for this lab.\nClick the black triangle next to Access policy - optional to expand the section: In the Access policy section, under Define who can publish messages to the topic, select Everyone: Under Define who can subscribe to this topic, select Everyone: You are using a permissive access policy to save time and because the focus of this lab is on demonstrating the fan-out scenario.\nIn a non-lab environment, you should carefully consider the access policy required and make sure if conforms with your company or organization’s security requirements.\nScroll to the bottom of the page, and click Create topic: You will see a page load displaying details of your newly created topic:\nIn the order processing system your are building, this Amazon SNS topic is where orders are published to. In a non-lab environment it would most likely be a web application or other application that accepts orders that will publish messages to this topic.\nNext, you will create two queues using Amazon Simple Queue Service and subscribe them to your Amazon SNS topic.\nOpen a new tab by right-clicking the AWS icon in the top-left and selecting Open in new tab. Note: The above instruction may vary slightly depending upon the web browser you are using.\nIn the search bar at the top, enter SQS, and under Services, click the Simple Queue Service result: In the middle right of the screen, in the Get started card, click Create queue: The Create queue form will open.\nIn the Name textbox, enter orders-for-inventory: Scroll down to the bottom, click Create queue: You will see a web page load showing you details of your newly created Amazon SQS queue:\nYou will now create a second Amazon SQS queue for analytics.\nTo navigate to the Queues list page, at the top-left, click Queues: On the right-hand side, click Create queue.\nRepeat the queue creation process, only this time enter orders-for-analytics as the Name of the queue.\nReturn to the Queues list page by clicking Queues in the top-left.\nYou will see the two queues you have created:\nClick the radio button for the orders-for-analytics queue.\nOn the right-hand side, click Actions and click Subscribe to Amazon SNS topic:\nThe Subscribe to Amazon SNS topic form will load.\nIn the Choose a topic drop down, select the topic ending with new-orders: This is the Amazon SNS topic you created earlier.\nClick Save to finish subscribing this queue to your topic.\nAt the top-left, click Queues again.\nRepeat the topic subscription process for your orders-for-inventory Amazon SQS queue.\nYou now have both of your Amazon SQS queues subscribed to your Amazon SNS topic. Any messages published to the topic will fan-out to both queues.\nConnecting to the Virtual Machine using EC2 Instance Connect 1. In the AWS Management Console search bar, enter EC2, and click the EC2 result under Services:\n2. To see available instances, click Instances in the left-hand menu:\nThe instances list page will open, and you will see an instance named cloudacademylabs:\nIf you don’t see a running instance then the lab environment is still loading. Wait until the Instance state is Running.\n3. Right-click the cloudacademylabs instance, and click Connect:\nThe Connect to your instance form will load.\n4. In the form, ensure the EC2 Instance Connect tab is selected:\nYou will see the instance’s Instance ID and Public IP address displayed.\n5. In the User name textbox, enter ec2-user:\nNote: Ensure there is no space after ec2-user or connect will fail.\n6. To open a browser-based shell, click Connect:\nIf you see an error it’s likely that the environment hasn’t finished setting up. Check for Setup completed at the top-left corner of the lab and try connecting again:\nA browser-based shell will open in a new window ready for you to use.\nKeep this window open, you will use it in later lab steps.\nYou can also connect to the instance using your preferred SSH client and the PPK (Windows) or PEM (Mac/Linux) key files in the Credentials section of this lab.\nPublishing and Processing Messages In the terminal, enter the following command: aws sns list-topics You will see one topic displayed:\nNote: Your TopicArn will have a different account identifier.\nBy default, the AWS command-line interface tool uses the JSON format for responses. This response contains an array of Topics with one element. The element consists of a TopicArn.\nArn is short for Amazon Resource Name. An ARN is used to uniquely identify resources in AWS.\nIn this lab, the EC2 instance has been configured with an IAM role that has permissions to interact with Amazon SNS topics and Amazon SQS queues.\nStore the value of the TopicArn attribute in a shell variable (topic_arn): topic_arn=$(aws sns list-topics --query 'Topics[0].TopicArn' --output text) The above command uses the --query option to select only the value of the TopicArn and the --output option is used to specify plaintext format which removes the quotation marks from the value.\nTo publish a message, enter the following, utilizing the ARN you stored in the topic_arn shell variable: aws sns publish \\ --topic-arn $topic_arn \\ --message \"1 x Widget @ 21.99 USD\\n2 x Widget Cables @ 5.99 USD\" In response, you will see a MessageId:\nNote: Your message identifier will be different.\nYou have successfully published an order message to your Amazon Simple Notification Service topic.\nIn this lab, you are using the AWS command-line interface tool to simulate an application publishing an order message.\nIn a non-lab environment, the message could be published by a web application that accepts orders from customers.\nTo list Amazon Simple Queue Service queues, enter the following command: aws sqs list-queues You will see a JSON response:\nThe queues that you created earlier are listed.\nStore each of the QueueUrls in shell variables: analytics_queue_url=$(aws sqs list-queues --query 'QueueUrls[0]' --output text) inventory_queue_url=$(aws sqs list-queues --query 'QueueUrls[1]' --output text) To retrieve a message from the orders-for-analytics queue, enter the following command, utilizing the analytics queue URL you stored previously: aws sqs receive-message \\ --queue-url $analytics_queue_url You will see a JSON response containing an array with one Message:\nThe response contains the following fields:\nBody: A JSON representation of the message ReceiptHandle: You are required to supply this to delete a message after processing MD5OfBody: An MD5 hash of the message body MessageId: The message identifier that Amazon SNS saw when pushing the message to the queues Note that this is not the same as the MessageId that Amazon SNS returned to you when you published to the topic Repeat the previous instruction, using the orders-for-inventory queue but store the message response in a shell variable (for use later) and output the shell variable (using Python’s JSON tool to pretty print it): inventory_message=$(aws sqs receive-message --queue-url $inventory_queue_url) echo $inventory_message | python -m json.tool You will see the same message displayed again.\nThe message you published to the Amazon SNS topic has been sent to the Amazon SQS queues you subscribed the topic. This is an example of fanning out a message to multiple receivers.\nIn a non-lab environment, you could have worker applications constantly running and asking the Amazon SQS queues for more messages. One worker may be updating an inventory database for the order, whilst another worker could be recording the order details in a data lake for future analysis.\nUsing Amazon SNS and Amazon SQS like this allows you to build scalable systems that are decoupled and resilient. If a worker went offline, messages would queue up in the Amazon SQS queues. When the worker is available again, it can pick up new messages where it left off.\nYou can also have multiple worker applications, to help ensure there’s no downtime in message processing.\nAfter successfully processing a message, a worker application should delete the message to prevent it from being processed again.\nStore the value of the ReceiptHandle attribute in a shell variable: receipt_handle=$(echo $inventory_message | python -m json.tool | grep ReceiptHandle | cut -d\\\" -f 4) To delete a message, enter the following command for the orders-for-inventory queue: aws sqs delete-message \\ --queue-url $inventory_queue_url \\ --receipt-handle $receipt_handle Return to your browser tab with the Amazon SQS management console open. Note: If the SQS management console appears to only have one SQS queue, click the refresh button above the table:\nThe correct number of SQS queues will be displayed after a refresh.\nNavigate to the Queues list and click the orders-for-inventory queue.\nIn the top-right, click Send and receive messages:\nVerify that in that Receive messages section, under Messages available, it says 0. This is the queue you deleted a message for, simulating a long-running background application that receives an Amazon SQS message and then deletes the message after processing.\nRepeat the last three instructions for the orders-for-analytics queue and verify Messages available is 1: This is the queue you did not delete the message for. The message is still available to be picked up for processing by an application receiving messages from the queue.\n","description":"Fan-Out Orders using Amazon SNS and SQS","title":"Fan-Out Orders using Amazon SNS and SQS","uri":"/en/tracks/aws-certified-developer-associate/sqs/fan-out-orders-with-sns-sqs/"},{"content":"About Serverless version of ECS.\nServerless compute for contai­ners.\nAWS Fargate is a serverless, pay-as-you-go compute engine that lets you focus on building applications without managing servers.\nDeploy and manage your applications, not infrastructure. Fargate removes the operational overhead of scaling, patching, securing, and managing servers.\nCompatible with both Amazon Elastic Container Service (ECS) and Amazon Elastic Kubernetes Service (EKS).\nDocumentation User Guide Alternatives Google Kubernetes Engine (GKE) Red Hat OpenShift Container Platform Azure Kubernetes Service (AKS) Rancher Azure Container Instances Cloud Foundry Oracle Cloud Infrastructure Container Engine for Kubernetes Price Current price\nUse Cases Web apps, APIs, and microservices Run and scale container workloads Support AI and ML training applications Type: Containers\nSame type services: Elastic Container Service (ECS), Elastic Container Registry (ECR), Elastic Kubernetes Service (EKS), Fargate\nQuestions Q1 How AWS Fargate different from AWS ECS?\nExplanation In AWS ECS, you manage the infrastructure - you need to provision and configure the EC2 instances. While in AWS Fargate, you don’t provision or manage the infrastructure, you simply focus on launching Docker containers. You can think of it as the serverless version of AWS ECS.\n","description":"Serverless compute for containers","title":"Fargate","uri":"/en/tracks/aws-certified-developer-associate/fargate/"},{"content":"About AWS Fault Injection Simulator (FIS) is a fully managed service for running fault injection experiments on AWS that makes it easier to improve an application’s performance, observability, and resiliency.\nDocumentation User Guide Price Current price\nWith AWS FIS, you pay only for what you use. There are no upfront costs or minimum fees. You are charged based on the duration that an action is active. The AWS FIS price is $0.10 per action-minute.\nTerminology and Concepts Everything starts with an experiment template. The experiment template defines the targets that participate in the experiment. Supported targets are:\nEC2 Instances EKS node groups RDS clusters \u0026 instances IAM roles The actions define the injected faults. You can run actions in parallel or sequence.\nSome action examples:\nAWS API level errors for the EC2 service Stop/reboot/terminate EC2 instances Run SSM commands on EC2 instances to stress CPU or memory, add network latency, or kill a process Reboot RDS instance Failover RDS cluster Drain ECS container instance Terminate EKS node group instance Use Cases Periodic Game Days Continuous Delivery Pipeline Integration Practice Test instance stop and start using\nQuestions Q1 What is Chaos Engineering?\nExplanation Chaos engineering is the process of stressing an application in testing or production environments by creating disruptive events, such as server outages or API throttling, observing how the system responds, and implementing improvements.\nChaos engineering helps teams create the real-world conditions needed to uncover the hidden issues, monitoring blind spots, and performance bottlenecks that are difficult to find in distributed systems.\nIt starts with analyzing the steady-state behavior, building an experiment hypothesis (e.g., terminating x number of instances will lead to x% more retries), executing the experiment by injecting fault actions, monitoring roll back conditions, and addressing the weaknesses.\n","description":"Improve resiliency and performance with controlled experiments with AWS Fault Injection Simulator","title":"Fault Injection Simulator","uri":"/en/tracks/aws-certified-developer-associate/fis/"},{"content":"Commits More info about commits style\nGithub Actions Submodules Sync name: 'Submodules Sync' on: schedule: - cron: \"0 * * * *\" jobs: sync: runs-on: ubuntu-latest steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v2 with: submodules: true - name: Pull \u0026 update submodules recursively run: | git pull --recurse-submodules git submodule update --remote --recursive - name: Commit \u0026 push changes run: | git config --global user.name 'Git bot' git config --global user.email 'bot@noreply.github.com' git commit -am \"Auto updated submodule references\" \u0026\u0026 git push || echo \"No changes to commit\" Free space in git repo Download BFG\nor\nwget https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar Remove history files bigger than 100Kb:\n```sh cd repo java -jar bfg-1.14.0.jar --strip-blobs-bigger-than 100K . git reflog expire --expire=now --all \u0026\u0026 git gc --prune=now --aggressive ``` Removing an entire commit Replace “SHA” with the reference you want to get rid of. The “^” in that command is literal.\n```sh git rebase -p --onto SHA^ SHA ``` We want to remove commits 2 \u0026 4 from the repo. (Higher the the number newer the commit; 0 is the oldest commit and 4 is the latest commit)\ncommit 0 : b3d92c5 commit 1 : 2c6a45b commit 2 : \u003cany_hash\u003e commit 3 : 77b9b82 commit 4 : \u003cany_hash\u003e Note: You need to have admin rights over the repo since you are using --hard and -f.\ngit checkout b3d92c5 Checkout the last usable commit. git checkout -b repair Create a new branch to work on. git cherry-pick 77b9b82 Run through commit 3. git cherry-pick 2c6a45b Run through commit 1. git checkout master Checkout master. git reset --hard b3d92c5 Reset master to last usable commit. git merge repair Merge our new branch onto master. git push -f origin master Push master to the remote repo. If didn’t publish changes, to remove the latest commit, do:\ngit rebase -i HEAD~\u003cnumber of commits to go back\u003e git rebase -i \u003cCommitId\u003e~1 git reset --hard HEAD^ git reset --hard commitId git rebase -i HEAD~5 If already published to-be-deleted commit:\ngit revert HEAD\nCleanups git stash clear git reflog expire --expire-unreachable=now --all git fsck --full git fsck --unreachable # Will show you the list of what will be deleted git gc --prune=now # Cleanup unnecessary files and optimize the local repository Common git commands git rev-list --all --count # count commits git clean -fd # To remove all untracked (non-git) files and folders! Resources Git commits style On undoing, fixing, or removing commits in git Truncating git history clean unused branches ","description":"Git snippets","title":"Git snippets","uri":"/en/posts/git-snippets/"},{"content":"Granting Public Access to an Amazon S3 Object Introduction All uploaded files are private by default and can only be viewed, edited, or downloaded by you. In order to illustrate this point, complete the instructions below.\nNote: The terms “file” and “object” are often used interchangeably when discussing Amazon S3. Technically, Amazon S3 is an object-store. It is not a block storage device and does not contain a file system as your local computer does. However, files such as images, movies, and sound clips are often uploaded from your file system to Amazon S3.\nInstructions 1. Click on the object you just uploaded to the S3 bucket.\nTake a look at the Object overview section:\nUnder Object URL, right-click the link and open the URL in a new browser tab: You will see an XML (eXtensible Markup Language) response telling you that access is denied for this object:\nNote: The response may appear differently depending upon your web browser.\nLeave the browser tab open. You will return to it shortly.\nTo allow public access to objects, you need to disable the default safety guards that prevent them from being made publicly accessible.\nTo return to the bucket view, at the top of the page, click the name of your bucket in the bread crumb trail:\nClick the Permissions tab and click Edit in the Block public access section:\nUncheck all of the options to allow all kinds of public access:\nYou should carefully consider anytime you allow public access to S3 buckets. AWS has implemented these security features to help prevent data breaches. For this lab, there is no sensitive data and you do want to allow public access.\nPoorly managed Amazon S3 permissions have been a contributing factor to many unauthorized data access events. AWS is making sure you understand the implications of allowing public access to an Amazon S3 bucket.\nAt the bottom of the page, click Save changes: A confirmation dialog box will appear.\nEnter confirm in the confirmation dialog box and click Confirm: You will see a green notification that the public access settings have been edited.\nTurning off Block all public access does not automatically make objects in an Amazon S3 bucket public. There are several ways of of explicitly granting public access including:\nBucket policies IAM policies Access control lists Pre-signed URLs In this lab, you will use a bucket policy to grant public access to your Amazon S3 bucket.\nScroll down to the Bucket policy section and click Edit: The Edit bucket policy page will load. Here you can specify a JSON (JavaScript Object Notation) policy to control access to your Amazon S3 bucket.\nReplace the contents of the Policy editor with the following: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": [ \"s3:GetObject\" ], \"Effect\": \"Allow\", \"Resource\": \"BUCKET_ARN/*\", \"Principal\": \"*\" } ] } This is a permissive policy that allows GetObject access to anyone. More restrictive policies are possible such as\nRestricting access to specific principals Allow cross AWS account access Using conditions to restrict access to a specific IP address Notice the Resource is currently “BUCKET_ARN/*\", which is causing an error. We need to replace this with the ARN of the bucket we created:\nClick the copy icon under Bucket ARNand replace BUCKET_ARN in the value of the Resource key with the ARN you just copied : Note: Ensure that you preserve the /* at the end of the value. This means that the policy will apply to all objects inside the bucket recursively. Public access won’t be granted if this is not present.\nAt the bottom of the page, click Save changes: You will see a green notification that the bucket policy was edited.\nReturn to the browser tab where access was denied and fresh the browser tab. You will see the response change from “Access Denied” to the logo:\n","description":"Grant Public Access to an Amazon S3 Object","title":"Grant public access to S3 Object","uri":"/en/tracks/aws-certified-developer-associate/s3/grant-access-s3/"},{"content":"function addCopyButtonToCodeBlocks() { // Get all code blocks with a class of \"language-*\" const codeBlocks = document.querySelectorAll('code[class^=\"language-\"]'); // For each code block, add a copy button inside the block codeBlocks.forEach(codeBlock =\u003e { // Create the copy button element const copyButton = document.createElement('button'); copyButton.classList.add('copy-code-button'); copyButton.innerHTML = '\u003ci class=\"far fa-copy\"\u003e\u003c/i\u003e'; // Add a click event listener to the copy button copyButton.addEventListener('click', () =\u003e { // Copy the code inside the code block to the clipboard const codeToCopy = codeBlock.innerText; navigator.clipboard.writeText(codeToCopy); // Update the copy button text to indicate that the code has been copied copyButton.innerHTML = '\u003ci class=\"fas fa-check\"\u003e\u003c/i\u003e'; setTimeout(() =\u003e { copyButton.innerHTML = '\u003ci class=\"far fa-copy\"\u003e\u003c/i\u003e'; }, 1500); }); // Add the copy button to the code block codeBlock.parentNode.insertBefore(copyButton, codeBlock); }); } ","description":"Learn how to quickly add a copy button to code highlight blocks in Hugo to make it easier for users to share code snippets on your site.","title":"How to add copy code button on HUGO highligh code block","uri":"/en/posts/hugo-add-copy-button-on-highlight-block/"},{"content":"We can use recursion. Use Object.assign() and an empty object ({}) to create a shallow clone of the original. Use Object.keys() and Array.prototype.forEach() to determine which key-value pairs need to be deep cloned.\nconst deepClone = obj =\u003e { let clone = Object.assign({}, obj); Object.keys(clone).forEach( key =\u003e (clone[key] = typeof obj[key] === 'object' ? deepClone(obj[key]) : obj[key]) ); return Array.isArray(obj) \u0026\u0026 obj.length ? (clone.length = obj.length) \u0026\u0026 Array.from(clone) : Array.isArray(obj) ? Array.from(obj) : clone; }; const a = { foo: 'bar', obj: { a: 1, b: 2 } }; const b = deepClone(a); // a !== b, a.obj !== b.obj ","description":"How to create a deep clone of an object in JavaScript","title":"How to create a deep clone of an object in JavaScript","uri":"/en/posts/howto-create-deepclone-js/"},{"content":"In this step-by-step tutorial, we’ll create a simple React-Electron application from scratch. Electron is a framework that allows you to build cross-platform desktop applications using web technologies such as HTML, CSS, and JavaScript. React is a popular JavaScript library for building user interfaces.\nI use this clean template as a boilerplate for my projects.\nTLDR Go to repo electron-react-template click Use this template to create a new repo and start coding. Prerequisites Before starting this tutorial, make sure you have the following tools installed on your system:\nNode.js (version 12 or newer) npm or yarn (npm is bundled with Node.js, and yarn can be installed separately) A code editor (e.g., Visual Studio Code) Step 1: Set up the project structure Create a new directory for your project and navigate to it in your terminal:\nmkdir react-electron-app cd react-electron-app Next, create the following directories and files to set up the project structure:\nmkdir -p src electron public touch src/App.tsx src/index.tsx electron/main.ts touch public/index.html Your project should now have the following structure:\nreact-electron-app ├── electron │ └── main.ts ├── public │ └── index.html └── src ├── App.tsx └── index.tsx Step 2: Initialize the project Run the following command in the terminal to initialize the project with a package.json file:\nnpm init -y Step 3: Install dependencies Install the necessary dependencies for the project:\nnpm install --save react react-dom typescript electron npm install --save-dev concurrently electron-builder electron-is-dev wait-on cross-env Step 4: Configure TypeScript Create a tsconfig.json file in the root of the project:\ntouch tsconfig.json Add the following content to the tsconfig.json file:\n{ \"compilerOptions\": { \"target\": \"ES2023\", \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"], \"allowJs\": true, \"skipLibCheck\": true, \"esModuleInterop\": true, \"allowSyntheticDefaultImports\": true, \"strict\": true, \"forceConsistentCasingInFileNames\": true, \"noFallthroughCasesInSwitch\": true, \"module\": \"esnext\", \"moduleResolution\": \"node\", \"resolveJsonModule\": true, \"isolatedModules\": true, \"noEmit\": true, \"jsx\": \"react-jsx\" }, \"include\": [\"src\"] } Step 5: Set up the React app Replace the contents of src/App.tsx with the following code:\nfunction App() { return ( \u003cdiv className='App'\u003e \u003cp\u003e Hello World! \u003c/p\u003e \u003c/div\u003e ); } export default App; Replace the contents of src/index.tsx with the following code:\nimport React from 'react'; import ReactDOM from 'react-dom'; import App from './App'; ReactDOM.render( \u003cReact.StrictMode\u003e \u003cApp /\u003e \u003c/React.StrictMode\u003e, document.getElementById('root') ); Replace the contents of public/index.html with the following code:\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eReact-Electron App\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"root\"\u003e\u003c/div\u003e \u003c/body\u003e \u003c/html\u003e Step 6: Set up the Electron main process Replace the contents of electron/main.ts with the following code:\nimport { app, BrowserWindow } from 'electron'; import * as path from 'path'; import * as isDev from 'electron-is-dev'; function createWindow() { const win = new BrowserWindow({ width: 800, height: 600, webPreferences: { nodeIntegration: true, }, }); win.loadURL( isDev ? 'http://localhost:3000' : `file://${path.join(__dirname, '../build/index.html')}` ); win.webContents.openDevTools(); } app.whenReady().then(createWindow); app.on('window-all-closed', () =\u003e { if (process.platform !== 'darwin') { app.quit(); } }); app.on('activate', () =\u003e { if (BrowserWindow.getAllWindows().length === 0) { createWindow(); } }); Step 7: Configure scripts in package.json Open your package.json file and update the scripts section to include the following:\n\"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"eject\": \"react-scripts eject\", \"electron:dev\": \"concurrently \\\"cross-env BROWSER=none yarn start\\\" \\\"wait-on http://127.0.0.1:3000 \u0026\u0026 tsc -p electron -w\\\" \\\"wait-on http://127.0.0.1:3000 \u0026\u0026 tsc -p electron \u0026\u0026 electron .\\\"\", \"electron:build\": \"yarn build \u0026\u0026 tsc -p electron \u0026\u0026 electron-builder\", \"electron:dist\": \"yarn build \u0026\u0026 tsc -p electron \u0026\u0026 electron-builder --mac --dir\" } These scripts will allow you to run the React app in development mode, build the app for production, and package the Electron app for distribution.\nStep 8: Run the application You’re now ready to run your React-Electron application in development mode. In the terminal, run:\nnpm run electron:dev This command will start the React development server, compile the Electron main process, and launch the Electron app. You should see a new window with your “Hello World!” message displayed.\n","description":"How to Create a React-Electron Typescript Application From Scratch in 2023","title":"How to Create a React-Electron Application From Scratch","uri":"/en/posts/howto-create-react-electron-app-ts/"},{"content":"How to Create Interactive Financial Charts using Tkinter and Plotly Data visualization is an integral part of data analysis. Python, with its strong set of libraries, has emerged as a go-to language for data visualization. In this tutorial, we will create an application that generates and displays interactive financial charts using Tkinter and Plotly.\nPrerequisites Before we get started, ensure you have the following installed on your machine:\nPython 3.6 or newer Dash, Plotly’s Python framework for building analytical web applications. Tkinter, Python’s standard GUI package. You can install Dash using pip:\npip install dash plotly Step 1: Python Script Imports import tkinter as tk import threading import webbrowser import random import plotly.graph_objs as go import dash_html_components as html from dash import Dash, dcc from dash.dependencies import Output, Input Step 2: Creating a Dash Application Thread We’ll be running the Dash application in a separate thread. This allows the Tkinter GUI and Dash app to run simultaneously. To do this, we create a new DashThread class that inherits from Python’s threading.Thread:\nclass DashThread(threading.Thread): def __init__(self, data_list): threading.Thread.__init__(self) self.data_list = data_list self.app = Dash(__name__) # Initialize an empty graph self.app.layout = html.Div( [ dcc.Graph(id=\"live-graph\", animate=True), dcc.Interval( id=\"graph-update\", interval=1 * 1000, ), ] ) @self.app.callback( Output(\"live-graph\", \"figure\"), [Input(\"graph-update\", \"n_intervals\")] ) def update_graph(n): data = [ go.Scatter( x=list(range(len(self.data_list[symbol]))), y=self.data_list[symbol], mode=\"lines+markers\", name=symbol, ) for symbol in self.data_list.keys() ] fig = go.Figure(data=data) # Update x-axis range to show last 120 data points fig.update_xaxes(range=[max(0, n - 120), n]) return fig def run(self): self.app.run_server(debug=False) Step 3: Creating the Main Application Class The App class will initialize the Tkinter window and generate random prices for each of the financial symbols:\nclass App: def __init__(self, root): self.root = root self.data_list = {\"ETHUSDT\": [], \"BTCUSD\": [], \"BNBUSDT\": []} # Start the Dash application in a separate thread dash_thread = DashThread(self.data_list) dash_thread.start() # Open Dash app in web browser webbrowser.open(\"http://localhost:8050\") # Start the price generation in tkinter after Dash app is launched self.root.after(1000, self.generate_prices) def generate_prices(self): for symbol in self.data_list.keys(): new_price = random.randint(1, 100) # Generate random price self.data_list[symbol].append(new_price) # Store the price in list # Schedule the function to run again after 1 second self.root.after(1000, self.generate_prices) Step 4: Running the Application Finally, we create a Tkinter root window, instantiate the App class, and start the Tkinter event loop:\nif __name__ == \"__main__\": root = tk.Tk() app = App(root) root.mainloop() Conclusion You’ve successfully created an application that generates and displays interactive financial charts using Tkinter and Plotly. This project can be extended with real-time data feeds and additional interactive features to fit your needs. Happy coding!\n","description":"This tutorial guides you step-by-step to create an application with interactive financial charts using Tkinter and Plotly.","title":"How to Create Interactive Financial Charts using Tkinter and Plotly","uri":"/en/posts/howto-tkinter-interactive-plotly-chart/"},{"content":"TL;DR git clone https://github.com/romankurnovskii/kali-shortcuts.git cd kali-shortcuts chmod +x disable_ipv6.sh sudo ./disable_ipv6.sh Edit sysctl Configuration In the terminal, type sudo vi /etc/sysctl.conf and press Enter. This opens the sysctl.conf file in the text editor with root privileges. Add IPv6 Disable Lines At the end of the file, add the following lines: net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 net.ipv6.conf.lo.disable_ipv6 = 1 These lines will disable IPv6 on all network interfaces, including the loopback interface.\nSave and Exit Save /etc/sysctl.conf and exit text editor Apply Changes To apply the changes without rebooting, run `sudo sysctl -p`` in the terminal. This will reload the sysctl configuration with your changes. Verify Changes (Optional) To confirm that IPv6 is disabled, you can run `cat /proc/sys/net/ipv6/conf/all/disable_ipv6``. If it returns 1, then IPv6 has been successfully disabled.\nReboot (Optional) While the sysctl -p command applies changes immediately, it’s a good idea to reboot your system to ensure that the changes persist after a restart. You can reboot by typing sudo reboot in the terminal.\nTroubleshooting Linux can’t add IPv6 to interface tun0 Can happen when trying to connect through OpenVPN.\nIn the client file .ovpn add lines:\npull-filter ignore \"ifconfig-ipv6\" pull-filter ignore \"route-ipv6\" ","description":"How to disable IPv6 on Debian/Kali Linux","title":"How to disable IPv6 on Debian/Kali Linux","uri":"/en/posts/linux/howto-disable-ipv6-on-debian/"},{"content":"Red Hat Enterprise Linux 9 (RHEL 9), codenamed Plow, has gone public (GA). Red Hat announced it on May 18, 2022. It replaced the beta version, which had been in existence since November 3, 2021.\nRHEL 9 is the first few releases in the Red Hat family. It is the first major release since IBM acquired Red Hat in July 2019, and the first major release since abandoning the CentOS project in favor of CentOS Stream, which is now RHEL’s predecessor.\nRHEL 9 is the latest major version of RHEL and comes with a 5.14 kernel, lots of new software packages and a host of improvements. It emphasizes security, stability, flexibility and reliability.\nDescription RHEL 9 ships with new versions of software including Python 3.9. Node.JS 16, GCC 11, Perl 5.32, Ruby 3.0, PHP 8.0, and many more.\nPreparing for installation Registration on the Red Hat portal Red Hat Developer Subscription is a free Red Hat Developer Program offer designed for individual developers who want to take full advantage of Red Hat Enterprise Linux.\nIt gives developers access to all versions of Red Hat Enterprise Linux, as well as other Red Hat products such as add-ons, software updates and security bugs.\nFirst of all, make sure you have an active Red Hat account. If you don’t already have an account, go to the Red Hat Customer Portal, click on “Register” and fill out your information to create a Red Hat account. Downloading the installation image After creating a Red Hat account, you can start downloading RHEL 9. To download Red Hat Enterprise Linux 9 absolutely free, go to Red Hat Developer Portal and log in with your account credentials. Then go to the download RHEL 9 page and click on the download button shown below.\nI’m using a MacBook M1, so I download the RHEL 9 image for the M1 processor aarch64 Virtual machine I use the free UTM virtual machine as a virtual machine to install RHEL 9. You can install using Homebrew by running the command brew install --cask utm.\nInstalling Red Hat Enterprise Linux 9 Setting up the UTM virtual machine In UTM click Create a New Virtual Machine -\u003e Virtualize Choose the downloaded RHEL 9 image and click Continue. Main Setup Menu The marked fields need to be filled in\nCreate Root Password User Creation. Create the user you want to log in with. Connect to Red Hat. Here we will use the account created above.\nHere you will enter your account data and click Register. Press Done\nUnder Installation Destination choose your default drive.\nWe can now continue with the installation. A Begin installation button will appear on the main screen\nAfter installation is complete, we will have to reboot the system. Sometimes rebooting will unload the installation image again. It’s necessary to either disable the disk in the installer setup or reboot the UTM.\nRunning Red Hat Enterprise Linux 9 Enter your password and see the RHEL 9 desktop To access the applications, click the Activities button in the upper left corner\nConfiguring Red Hat Enterprise Linux 9 Checking the ROOT user In a Linux system users belong to different groups which have certain rights. If during the installation process we did not check the checkbox to make the user an administrator, by default he will not be able to install some system programs.\nExit and log in as root (the same user we created earlier on the main screen). Press Log out Now log in as root. The user may not be listed. Press Not listed and enter the account data. Open terminal and check Configuring system settings Button to minimize the application The first thing that seems unusual about using the GUI is that there are no buttons to minimize windows Install the necessary package\nyum install gnome-tweaks -y After installation, the Tweaks application will appear. Find it by searching.\nThere are many other tweaks in the app as well. We will show you the minimize buttons for the applications.\nLet’s go to Windows titlebars and set the Maximize, Minimize options\nUser access to install applications To avoid constantly switching to a root user to install applications, we can give the normal user access to install applications. We will continue to do this as root. Open /etc/sudoers and add the user\nsudo vi /etc/sudoers Add user data to the end of the file. My user name: rhel-user\nrhel-user ALL= NOPASSWD: /usr/sbin/synaptic, /usr/bin/software-center, /usr/bin/apt-get, /usr/bin/dnf Let’s install Visual Studio Code as a normal user Installation consists of the following steps:\nadding the desired repository. Rights to add the repository (changing the files in the directory is still only for root user) Downloading and installing. First step is done as root user Go to https://code.visualstudio.com/docs/setup/linux\nCopy the code and run it in the terminal\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc sudo sh -c 'echo -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" \u003e /etc/yum.repos.d/vscode.repo' Switch to user rhel-user. This can also be done in the terminal. Updating the repositories Install VSCode su rhel-user dnf check-update sudo dnf install code References https://developers.redhat.com/products/rhel/getting-started https://www.redhat.com/sysadmin/install-linux-rhel-9 ","description":"How to Download and Install Linux RHEL 9 for Free","title":"How to Download and Install Linux RHEL 9 for Free","uri":"/en/posts/howto-install-rhel-9-free/"},{"content":"In this post, we’ll dive deeper into the process of creating, structuring, and publishing a JavaScript package to the npm registry. We’ll use the repository https://github.com/romankurnovskii/npm-js-package-template as a reference for this guide.\nTLDR Open template: https://github.com/romankurnovskii/npm-js-package-template Click Use this template Create repo from this template. git clone new repo update code src/index.ts, src/bin.ts How to check if bin script works from terminal:\nnpm link \u0026\u0026 npm link mypackage mypackage Publish:\nnpm run prepublishOnly npm publish Folder Structure Let’s go through the folder structure of the repository:\n.eslintignore .eslintrc.json .gitattributes .gitignore .npmrc .prettierrc ├── .github │ ├── dependabot.yml │ └── workflows │ ├── create-release.yml │ └── test-environments.yml ├── CHANGELOG.md ├── LICENSE ├── README.md ├── jestconfig.json ├── package.json ├── src | ├── bin.js | └── index.js └── tests └── index.test.js File Descriptions .github/dependabot.yml: This file configures Dependabot for your project. Dependabot will automatically create pull requests to update your npm dependencies and GitHub Actions workflows as specified in the file. .github/workflows/create-release.yml: This GitHub Actions workflow is triggered when you push to the main branch or create a release. It builds, tests, and releases your package. The workflow is configured to create a release with the version specified in package.json. .github/workflows/test-environments.yml: This GitHub Actions workflow is triggered when you push to the main branch or create a pull request. It sets up a matrix of Node.js versions (14, 16, 18) and runs the build and test steps for each version. This ensures your package works correctly across different Node.js environments. .eslintignore: Specifies the files and directories that should be ignored by ESLint. .eslintrc.json: Configuration file for ESLint, a popular linting tool for JavaScript. .gitattributes: Specifies the attributes for paths in the repository. .gitignore: Specifies the files and directories that should be ignored by Git. .npmrc: Configuration file for npm, the package manager for JavaScript. .prettierrc: Configuration file for Prettier, a popular code formatter for JavaScript. CHANGELOG.md: A file that lists the notable changes made to the project. LICENSE: The license file for the project, in this case, the MIT License. README.md: The main documentation file for the project. jestconfig.json: Configuration file for Jest, a popular testing framework for JavaScript. package.json: Lists the project’s metadata, dependencies, and scripts. src/bin.js: The main entry point for the command line interface (CLI) of the package. src/index.js: The main entry point for the package when imported as a module. tests/index.test.js: The test file for the package, containing test cases for the package’s functions. Publish to NPM Before you publish the package, make sure you have followed these steps:\nUpdate the package.json file with the correct name, version, description, and other metadata.\nEnsure your code is in the src folder, and the main entry points are src/index.js (for modules) and src/bin.js (for CLI).\nUpdate the test cases in the tests folder.\nAfter making all the necessary updates to your package, such as updating the README.md, package.json, and other files as needed, ensure that you’ve built the package by running:\nnpm run build Before publishing, you should test your package and ensure that all tests pass: npm test Also, make sure your code is properly formatted and follows the linting rules: npm run prettier npm run lint If there are any linting issues, you can try to automatically fix them using: npm run lint:fix Once everything is set up and ready, you can publish your package to the npm registry by running: npm run prepublishOnly npm publish This will build, test, and format your code, ensuring that your package is ready for publishing. Once published, your package will be available for others to install and use through the npm registry. ","description":"A detailed guide on how to create, structure, and publish a JavaScript package to the npm registry","title":"How to publish JavaScript package to npm registry","uri":"/en/posts/howto-publish-js-npm-project/"},{"content":" Open template: https://github.com/romankurnovskii/npm-typescript-package-template Click Use this template Create repo from this template. git clone new repo update code src/index.ts, src/bin.ts How to check if bin script works from terminal:\nnpm link \u0026\u0026 npm link mypackage mypackage Publish:\nnpm run prepublishOnly npm publish ","description":"How to publish typescript package to npm registry","title":"How to publish typescript package to npm registry","uri":"/en/posts/howto-publish-ts-npm-project/"},{"content":"Learn different ways to rename files in Python using the os and pathlib modules.\nos.rename Rename files with os\nYou can use\nos.rename(old_name, new_name) For example we can combine it with os.path.splitext() to get the base name and file extension, and then combine it to a new name:\nimport os for file in os.listdir(): name, ext = os.path.splitext(file) new_name = f\"{name}_new{ext}\" os.rename(file, new_name) pathlib Rename files with pathlib\nThe same could be achieved with the pathlib module and\nPath.rename(new_name) With a Path object we can access .stem and .suffix:\nfrom pathlib import Path for file in os.listdir(): f = Path(file) new_name = f\"{f.stem}_new{f.suffix}\" f.rename(new_name) shutil.move The shutil module offers a number of high-level operations on files and collections of files. In particular, functions are provided which support file copying and removal. For operations on individual files, see also the os module.\nimport shutil old_source = '/Users/r/Desktop/old_source.txt' new_source = '/Users/r/Desktop/new_source.txt' newFileName = shutil.move(old_source, new_source) print(\"New file:\", newFileName) # New file: /Users/r/Desktop/new_source.txt ","description":"How to rename files in Python","title":"How to rename files in Python","uri":"/en/posts/howto-rename-files-in-python/"},{"content":"Jupyter notebooks are a fantastic tool for data scientists and programmers, allowing you to write code, visualize results, and write documentation all in one place. Hugo is a powerful and flexible static site generator that’s great for blogging and building websites. But what if you want to share your Jupyter notebooks on your Hugo website?\nThis step-by-step guide will walk you through how to render Jupyter notebooks in Hugo using a custom shortcode and automate the process using GitHub Actions.\nPrerequisites Before you start, make sure you have:\nA Hugo website up and running. Jupyter installed on your machine. A GitHub account. Basic knowledge of Hugo, Jupyter, and GitHub Actions. Step 1: Create Your Jupyter Notebook Create a new Jupyter notebook in the static_files/jupyter/ directory of your Hugo website. Write your code and generate the plots or data visualizations you want to include.\nStep 2: Install nbconvert nbconvert is a Python library that allows you to convert Jupyter notebooks to other formats, including HTML, which we’ll need for this guide. Install it with pip:\npip install nbconvert Step 3: Convert cuaderno to HTML # Replace your_notebook.ipynb with the name of your notebook. jupyter nbconvert --to html static_files/jupyter/your_notebook.ipynb Step 4: Create a Custom Shortcode in Hugo Updated version of shortcode you can find in github.\nFirst, create a new file named notebook.html in your theme’s layouts/shortcodes/ directory. Next, copy the code into notebook.html.\nStep 5: Use the notebook Shortcode in Your Page # remove space between “{{” and “}}” { {\u003c notebook \"jupyter/your_notebook\" 1200 \u003e} } Replace your_notebook with the name of your notebook (without the .html extension), and 1200 with the desired height of the iframe in pixels.\nStep 6: Automate the Process with GitHub Actions GitHub Actions can automatically convert your Jupyter notebooks to HTML whenever you push changes to your repository.\nYou can find a sample GitHub Actions workflow in the notebook shortcode’s repository. Copy this workflow into a new file in your repository’s .github/workflows/ directory, and commit and push the changes.\n","description":"Step-by-step guide to rendering Jupyter notebooks in Hugo using a custom shortcode and GitHub Actions.","title":"How to Render Jupyter Notebooks in Hugo with a Custom Shortcode","uri":"/en/posts/howto-render-notebook-in-hugo/"},{"content":"Step 1: Create a SourceForge account Go to the SourceForge website at https://sourceforge.net/ Click on the “Join” button in the top-right corner. Fill in the required fields, such as username, email, and password, then click “Register” You’ll receive a confirmation email from SourceForge. Click on the link provided to confirm your account. Step 2: Start a new project Log in to your SourceForge account. Click on the “Create” button in the top-right corner of the page. Select “Create Your Project Now” from the dropdown menu. Step 3: Configure your project Enter a unique name for your project in the “Project Name” field. This name will also serve as your project’s URL. Provide a Phone number if required. You will get a pin for verification. Next you will see a quick tour that could help you to fulfill all the required fields. Provide a brief description of your project in the “Short Summary” field.\nUpload Project Logo\nClick “Save”.\nFill other fields from left sidebar menu.\nChoose an appropriate “License” for your open-source project from the dropdown menu. If you’re unsure which license to choose, you can refer to the Open Source Initiative’s list of approved licenses (https://opensource.org/licenses). Select the “Programming Language” and “Operating System” that your project is built for. Add any relevant “Tags” to help users find your project. Click the “Create” button at the bottom of the form to create your project. Step 4: Configure your project’s Source Control Management (SCM) SourceForge supports several SCM options, including Git, Mercurial, and Subversion. Choose the one that best suits your needs.\nGo to your project’s main page. Click on the “Buttons \u0026 Badges” link in the left side bar. Click “GitHub Integration”. Enter your GitHub username/repo. Click “Set up” or choose “Set up integration manually”. Step 5: Set up release files (optional) If you want to provide compiled binaries or other release files for users to download, follow these steps:\nGo to your project’s main page. Click on the “Files” tab in the top navigation bar. Click on the “Add Folder” button to create a new folder for your release files (e.g., “v1.0”). Click on the newly created folder and then click the “Upload” button. Select the release files you want to upload, and click “Open” to start the upload process. Summary Now we have a project page on SourceForge.\nHere is a button for download:\n[![Download BrewMate](https://a.fsdn.com/con/app/sf-download-button)](https://sourceforge.net/projects/brewmate/files/latest/download) Project url: https://sourceforge.net/projects/brewmate/\n","description":"Step-by-Step Guide how to upload and manage your open-source application on SourceForge with this detailed, step-by-step guide, ensuring maximum visibility and accessibility for your project.","title":"How to upload an opensource application to SourceForge","uri":"/en/posts/how-to-upload-app-to-sourceforge/"},{"content":"Introduction Hugo by default uses parsing of markdown files. This means that we get the html code as it is written in markdown.\nIn order to understand which images we can enhance, we add a separate tag/key/id to those images\nTools To implement the functionality, we need to:\nWrite/connect a script/handler that will perform the zoomin effect on the images we need Add the necessary metadata to the images, so the script can find them zoomin script To add the ability to zoom on click, we will use the medium-zoom package.\nThis package provides this functionality in a non-loaded, handy style.\nDemo\nScript logic The script finds images with id and so understands to apply the zoomin property to those images\nPossible id:\nzoom-default zoom-margin zoom-background zoom-scrollOffset zoom-trigger zoom-detach zoom-center Connecting the scripts In order for the script to work, we need to connect the logic as well as the handler.\nHugo has a static folder in the root of the project, which can be used to store static files (styles, scripts) and used to connect them to the site. If there is no such folder, you can create one.\nIn the static folder create a folder zoom-image and add two scripts to it\nstatic/js/zoom-image/index.js const zoomDefault = mediumZoom('#zoom-default') const zoomMargin = mediumZoom('#zoom-margin', { margin: 48 }) const zoomBackground = mediumZoom('#zoom-background', { background: '#212530' }) const zoomScrollOffset = mediumZoom('#zoom-scrollOffset', { scrollOffset: 0, background: 'rgba(25, 18, 25, .9)', }) // Trigger the zoom when the button is clicked const zoomToTrigger = mediumZoom('#zoom-trigger') const button = document.querySelector('#button-trigger') button.addEventListener('click', () =\u003e zoomToTrigger.open()) // Detach the zoom after having been zoomed once const zoomToDetach = mediumZoom('#zoom-detach') zoomToDetach.on('closed', () =\u003e zoomToDetach.detach()) // Observe zooms to write the history const observedZooms = [ zoomDefault, zoomMargin, zoomBackground, zoomScrollOffset, zoomToTrigger, zoomToDetach, ] // Log all interactions in the history const history = document.querySelector('#history') observedZooms.forEach(zoom =\u003e { zoom.on('open', event =\u003e { const time = new Date().toLocaleTimeString() history.innerHTML += `\u003cli\u003eImage \"\u003cem\u003e${event.target.alt }\u003c/em\u003e\" was zoomed at ${time}\u003c/li\u003e` }) zoom.on('detach', event =\u003e { const time = new Date().toLocaleTimeString() history.innerHTML += `\u003cli\u003eImage \u003cem\u003e\"${event.target.alt }\"\u003c/em\u003e was detached at ${time}\u003c/li\u003e` }) }) static/js/zoom-image/placeholders.js // Show placeholders for paragraphs const paragraphs = [].slice.call(document.querySelectorAll('p.placeholder')) paragraphs.forEach(paragraph =\u003e { // eslint-disable-next-line no-param-reassign paragraph.innerHTML = paragraph.textContent .split(' ') .filter(text =\u003e text.length \u003e 4) .map(text =\u003e `\u003cspan class=\"placeholder__word\"\u003e${text}\u003c/span\u003e`) .join(' ') }) CDN script You can download the script, or you can upload it\nScript Link\nAdding to template In order for these scripts to work in the website template, they must be connected.\nI use for this the template baseof.html. I simply add links to the scripts in body of the template.\n# baseof.html ... \u003c/footer\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/medium-zoom@1.0.6/dist/medium-zoom.min.js\" defer\u003e\u003c/script\u003e \u003cscript src=\"/js/zoom-image/placeholders.js\" defer\u003e\u003c/script\u003e \u003cscript src=\"/js/zoom-image/index.js\" defer\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e image ID Hugo allows you to change the parsing behavior of markdown files with hooks. You can read more about render-hooks at website.\nIn the *layouts folder.\nLet’s add the file render-image.html to the following path layouts -\u003e _default -\u003e _markup file code:\n\u003cp class=\"md__image\"\u003e \u003cimg src=\"{{ .Destination | safeURL }}\" id=\"zoom-default\" alt=\"{{ .Text }}\" {{ with .Title}} title=\"{{ . }}\" {{ end }} /\u003e \u003c/p\u003e We only added id=\"zoom-default\" to the default code\nResult Your browser does not support the video tag. Process ","description":"Script will zoom in on a picture on click in Hugo","title":"Hugo resize a picture on click","uri":"/en/posts/hugo-add-image-zoomin/"},{"content":"","description":"Create lunr index file for multilingual hugo static site","title":"hugo-lunr-ml","uri":"/en/apps/npm/hugo-lunr-ml/"},{"content":"About IAM - AWS Identity and Access Management\nAWS IAM AWS IAM User Guide AWS Identity and Access Management (IAM) allows to securely control user access to AWS services and resources.\nDesigned for organizations with multiple users or systems that use AWS products such as Amazon EC2, Amazon RDS, and AWS Management Console.\nWith IAM, you can centrally manage users, security credentials such as access keys, and permissions that control user access to AWS resources.\nThere are three ways IAM authenticates a principal:\nUser Name/Password Access Key Access Key/Session Token Digest IAM consists of the following: Users Groups Roles Policy Documents IAM is Global. It doesn’t apply to any specific region. There is no charge to use IAM. IAM is compliant with Payment Card Industry (PCI) Data Security Standard (DSS) The “root account” has complete Admin access. Don’t use “root account” for everyday use. Instead, create users. A new user will have NO permissions by default. Grant least privilege needed for their job. New user will be assigned with password, Access Key ID \u0026 Secret Access Keys. The password will be used to login to AWS management console. Access Key ID \u0026 Secret Access Key will be used to login via the APIs and CLI Always setup MFA on your root account. Use Groups to assign permissions to IAM users Use Roles to Delegate permissions. Role is more secure than creating individual user. Roles gives temporary credentials for access; whereas User has long term credentials. Create and customize password rotation policies Policies can be attached to users, groups and roles. Use AWS defined policies, assign permissions wherever possible. Policy is defined in JSON format and contains version, statements, - effect, action, resource, principal, and condition. STS Security Token Service provides temporary security credentials to the trusted users. STS is global and there is no charge to use it. Digest: https://tutorialsdojo.com/aws-identity-and-access-management-iam/ IAM best practices - Question might ask you to identify best practices among the given choices. https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html Difference between when to use Role and User. IAM Policy Simulator - service for testing and troubleshooting IAM Policies. Details Practice Go to IAM page\nCreating IAM groups On the User Groups page, click Create group\nSpecify the name of the group. Mine is: DevOps. Add permission to view EC2: AmazonEC2ReadOnlyAccess. create The group was created\nCreating IAM users On the Users page, click Create user Type in user name (login) Permissions Add user to the group Tags Skip section or put tags. It is useful and popular to set tags for resources in companies with a lot of connected AWS resources\nLogin/Password At the last step, download the .csv file with login, keys and password. You will need the password later to log in as this user. On this page there is a link to log in. We will use it in the next step Logging in as a new user Checking privileges This user has access to view EC2 instances. Let’s check whether or not the S3 garbage cans have access.\nLet’s try to create an S3 bucket After trying to create a recycle bucket, we get a window indicating no permissions Questions Q1 A client has contracted you to review their existing AWS environment and recommend and implement best practice changes. You begin by reviewing existing users and Identity Access Management. You found out improvements that can be made with the use of the root account and Identity Access Management.\nWhat are the best practice guidelines for use of the root account?\nNever use the root account. Use the root account only to create administrator accounts. Use the root account to create your first IAM user and then lock away the root account. Use the root account to create all other accounts, and share the root account with one backup administrator. Explanation lock-away-credentials 1\nQ2 Your organization has an AWS setup and planning to build Single Sign-On for users to authenticate with on-premise Microsoft Active Directory Federation Services (ADFS) and let users log in to the AWS console using AWS STS Enterprise Identity Federation.\nWhich of the following services do you need to call from AWS STS service after you authenticate with your on-premise?\nAssumeRoleWithSAML GetFederationToken AssumeRoleWithWebIdentity GetCallerIdentity Explanation https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html 1\nQ3 Alice is building a mobile application. She planned to use Multi-Factor Authentication (MFA) when accessing some AWS resources.\nWhich of the following APIs will be leveraged to provide temporary security credentials?\nAssumeRoleWithSAML GetFederationToken GetSessionToken AssumeRoleWithWebIdentity Explanation https://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html\nAssumeRoleWithWebIdentity - does not support MFA\n3\nQ4 A leading insurance firm has several new members in its development team. The solutions architect was instructed to provision access to certain IAM users who perform application development tasks in the VPC.\nThe access should allow the users to create and configure various AWS resources, such as deploying Windows EC2 servers. In addition, the users should be able to see the permissions in AWS Organizations to view information about the user’s organization, including the master account email and organization limitations.\nWhich of the following should the solutions architect implement to follow the standard security advice of granting the least privilege?\nAttach the PowerUserAccess AWS managed policy to the IAM users. Attach the AdministratorAccess AWS managed policy to the IAM users. Create a new IAM role and attach the SystemAdministrator AWS managed policy to it. Assign the IAM Role to the IAM users. Create a new IAM role and attach the AdministratorAccess AWS managed policy to it. Assign the IAM Role to the IAM users. Explanation AWS managed policies for job functions are designed to closely align to common job functions in the IT industry. You can use these policies to easily grant the permissions needed to carry out the tasks expected of someone in a specific job function.\nThese policies consolidate permissions for many services into a single policy that’s easier to work with than having permissions scattered across many policies.\nFor Developer Power Users, you can use the AWS managed policy name: PowerUserAccess if you have users who perform application development tasks. This policy will enable them to create and configure resources and services that support AWS aware application development.\nThe first statement of this policy uses the NotAction element to allow all actions for all AWS services and for all resources except AWS Identity and Access Management and AWS Organizations. The second statement grants IAM permissions to create a service-linked role.\nThis is required by some services that must access resources in another service, such as an Amazon S3 bucket. It also grants Organizations permissions to view information about the user’s organization, including the master account email and organization limitations.\n1\nQ5 A company has 100 AWS accounts that are consolidated using AWS Organizations. The accountants from the finance department log in as IAM users in the TD-Finance AWS account. The finance team members need to read the consolidated billing information in the TD-Master AWS master account that pays the charges of all the member (linked) accounts. The required IAM access to the AWS billing services has already been provisioned in the master account.\nThe Security Officer should ensure that the finance team must not be able to view any other resources in the master account.\nWhich of the following grants the finance team the necessary permissions for the above requirement?\nSet up an IAM group for the finance users in the TD-Finance account then attach a ViewBilling permission and AWS managed ReadOnlyAccess IAM policy to the group. Set up individual IAM users for the finance users in the TD-Master account then attach the AWS managed ReadOnlyAccess IAM policy to the group with cross-account access. Set up an AWS IAM role in the TD-Finance account with the ViewBilling permission then grant the finance users in the TD-Master account the permission to assume that role. Set up an IAM role in the TD-Master account with the ViewBilling permission then grant the finance users in the TD-Finance account the permission to assume the role. Explanation You can use the consolidated billing feature in AWS Organizations to consolidate billing and payment for multiple AWS accounts or multiple Amazon Internet Services Pvt. Ltd (AISPL) accounts. Every organization in AWS Organizations has a master (payer) account that pays the charges of all the member (linked) accounts.\nModifyAccount – Allow or deny IAM users permission to modify Account Settings. ModifyAccount – Allow or deny IAM users permission to modify Account Settings. ModifyBilling – Allow or deny IAM users permission to modify billing settings. ModifyPaymentMethods – Allow or deny IAM users permission to modify payment methods. ViewAccount – Allow or deny IAM users permission to view account settings. ViewBilling – Allow or deny IAM users permission to view billing pages in the console. ViewPaymentMethods – Allow or deny IAM users permission to view payment methods. ViewUsage – Allow or deny IAM users permission to view AWS usage reports. Use policies to grant permissions to perform an operation in AWS. When you use an action in a policy, you usually allow or deny access to the API operation or CLI command with the same name. However, in some cases, a single action controls access to more than one operation.\n4\nResources Security best practices in IAM IAM Hands-On Lab IAM Workshops Security workshop tutorialsdojo digest Community posts https://dev.to/romankurnovskii/aws-iam-cheet-sheet-3if4 ","description":"A step-by-step guide to setting up AWS Identity and Access Management (IAM)","title":"IAM","uri":"/en/tracks/aws-certified-developer-associate/iam/"},{"content":" My image float right, tall Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\nMy image float right Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\nMy image text Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\nMy image float left Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n","description":"Insert resizable image in post","title":"img","uri":"/en/posts/hugo-shortcode-examples/img/"},{"content":"Update and Upgrade Packages apt update apt upgrade -y Setting Up SSH Keys Using SSH keys instead of passwords enhances security.\nOn local machine, generate an SSH key pair (if you don’t already have one):\nssh-keygen -t ed25519 -C \"your_email@example.com\" Next, copy your public SSH key to the new user’s account on your server. You can do this from your local machine:\nssh-copy-id username@your_server_ip # or with provided port ssh-copy-id -p 1234 username@your_server_ip This command uploads your public SSH key and configures the server to recognize it.\nDisabling Password Authentication To prevent SSH login using a username and password, edit the SSH configuration file:\nsudo nano /etc/ssh/sshd_config Find the following lines and modify them as shown:\nPasswordAuthentication no UsePAM no After making these changes, restart the SSH service to apply them:\nsudo systemctl restart sshd ","description":"Initial Setup Guide for Ubuntu 22.04 on a VPS","title":"Initial Setup Guide for Ubuntu 22.04 on a VPS","uri":"/en/posts/linux/ubuntu-server-initial-setup/"},{"content":"Lab Initializing Amazon EC2 Instances with AWS CloudFormation Init Establishing Desired EC2 Instance State with AWS CloudFormation Init 1. In the AWS Console search bar, search for cloudformation and click the CloudFormation result under Services:\n2. Click the Create stack dropdown menu and select With new resources:\n3. In the Create stack form, in the Specify template section, ensure Amazon S3 URLis selected for the Template source.\n4. Paste in the following URL in the Amazon S3 URL field:\nAWSTemplateFormatVersion: '2010-09-09' Description: Provision a Single Amazon EC2 Instance with CFN Helper Scripts Parameters: AmiID: Description: The ID of the AMI. Type: AWS::SSM::Parameter::Value\u003cAWS::EC2::Image::Id\u003e Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 Resources: WebServer: Type: AWS::EC2::Instance Properties: ImageId: !Ref AmiID InstanceType: t3.micro SecurityGroupIds: - !Ref WebServerSecurityGroup UserData: # Update aws-cfn-bootstrap # Run cfn-init to initialize WebServer content # Return cfn-init run result to CloudFormation upon completion Fn::Base64: !Sub | #!/bin/bash -xe yum update -y aws-cfn-bootstrap /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region} /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region} CreationPolicy: ResourceSignal: Count: 1 Timeout: PT5M Metadata: AWS::CloudFormation::Init: config: packages: yum: httpd: [] files: \"/var/www/html/index.html\": content: | \u003ccenter\u003e \u003ch1\u003eCloud Academy EC2 Instance\u003c/h1\u003e \u003ch3\u003eThis content has been initialized with \u003ca href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html\" target=\"_blank\"\u003eAWS CloudFormation Helper Scripts\u003c/a\u003e\u003c/h3\u003e \u003c/center\u003e mode: '000644' services: sysvinit: httpd: enabled: 'true' ensureRunning: 'true' WebServerSecurityGroup: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: SSH and HTTP SecurityGroupIngress: - CidrIp: 0.0.0.0/0 FromPort: 22 IpProtocol: tcp ToPort: 22 - CidrIp: 0.0.0.0/0 FromPort: 80 IpProtocol: tcp ToPort: 80 Outputs: WebServerPublicDNS: Description: Public DNS of EC2 instance Value: !GetAtt WebServer.PublicDnsName The CloudFormation stack template is stored in a public S3 bucket. The EC2 instance resource definition is shown below:\nThe WebServer EC2 instance is defined above. It is a size t3.micro instance that references a WebServerSecurityGroup resource for its security group and the AmiID parameter for its image ID. Both of these referenced configurations are defined elsewhere in the template.\nThe UserData script defined next performs the following tasks once the EC2 instance is created:\nUpdates the aws-cfn-bootstrappackage to retrieve the latest version of the helper scripts Runs the cfn-init helper script to execute the WebServer instance Metadata scripts Runs the cfn-signalhelper script to notify CloudFormation after all the service(s) (Apache in this case) is installed and configured on the EC2 instance Note: The cfn-init helper script is not executed automatically. You must run the cfn-init script within the EC2 instance UserData in order to execute your metadata scripts.\nThe cfn-signal helper script works hand-in-hand with the CreationPolicy configuration. The ResourceSignal property has a Count of 1 and a Timeout of PT5M. This instructs CloudFormation to wait for up to 5 minutes to receive 1 resource signal from the EC2 instance.\nThe cfn-signal helper script call in the UserData uses $? to retrieve the return code of the previous script. If the cfn-init script is successful and the EC2 instance is configured properly, cfn-signal returns a success to CloudFormation which then transitions the EC2 instance to the CREATE_COMPLETEstatus. If the cfn-init script is unsuccessful or the timeout of 5 minutes expires before receiving a signal, then the EC2 instance will be transitioned to a CREATE_FAILEDstatus and the stack deployment will fail.\nThe EC2 instance Metadata configuration is the same as the previous lab step. It defines a AWS::CloudFormation::Init script to install the httpd package using yum, generate an index.html file within /var/www/html/ and start the httpd service to serve the content from the EC2 instance.\n5. Click Nextto continue:\n6. Enter web-server-stack for the Stack name and click Next:\n7. You will not be configuring additional stack options. Scroll to the bottom of the page and click Next.\n8. On the review page, scroll to the bottom and click Create stackto deploy your stack:\nYour stack will begin deploying and you will be brought to the Events page of your web-server-stack:\nThe stack can take up to 3 minutes to deploy successfully.\n9. If the Events section does not automatically refresh after 3 minutes, click the refresh icon:\nThe WebServer instance remains in a CREATE_IN_PROGRESS status until CloudFormation receives a SUCCESS signal from the instance. In the screenshot above, the UniqueId of i-0fd18c8deb52983d5 belongs to the WebServer instance.\nAfter the success signal is received, the WebServer instance is transitioned into the CREATE_COMPLETE status.\nWithout the CloudFormation signal helper script, CloudFormation would have transitioned the EC2 instance to a completed status when the resource was created instead of waiting until the Apache service has been installed and running on the instance.\n10. Click the Outputs tab on the web-server-stack page:\n11. Right-click and open the WebServerPublicDNS URL in a new browser tab:\nThe HTMLpage generated in the cfn-init script is now being served from the Apache server running within your WebServer EC2 instance:\n","description":"Initializing Amazon EC2 Instances with AWS CloudFormation Init","title":"Initializing Amazon EC2 Instances with AWS CloudFormation Init","uri":"/en/tracks/aws-certified-developer-associate/cloudformation/initializing-ec2-with-cloudformation/"},{"content":"Characteristics In a Linux environment, users can be broadly categorized as “interactive” and “non-interactive”. These distinctions stem from how these user accounts interact (or don’t interact) with the system.\nDefinition Interactive Users: These are users who interact directly with the system, usually through a shell. When you log into a computer using SSH or a terminal, you’re operating as an interactive user. Non-Interactive Users: These users are designed to perform specific tasks without direct human intervention. Examples include system accounts running services like apache or mysql. Interaction, Usage, Environment Interaction:\nInteractive: Engages with the system via interfaces like shells. Non-Interactive: Executes tasks automatically, often without a shell or user interface. Usage:\nInteractive: Utilized for general-purpose tasks, from browsing directories to installing software. Non-Interactive: Specific to particular duties, often system-related. Environment:\nInteractive: Has a full user environment. This includes a HOME directory, user-specific settings, etc. Non-Interactive: Limited or no user environment. Typically lacks things like a HOME directory. Creating user When creating users in Linux, there’s often no distinction between interactive and non-interactive users. The difference arises in how the user is utilized. However, for security and operational reasons, non-interactive users might have restricted shells or no shell at all.\nWhy Not Simply Create a User and Use It Non-Interactively?\nEven if a user is created as interactive, it can be used non-interactively. However, for security reasons, services or tasks might be assigned to users with restricted permissions or shells to minimize potential risks.\nPractice Manual Create a file Dockerfile\nFROM ubuntu:20.04 ## Create interactive and non-interactive users RUN useradd interactiveUser \u0026\u0026 \\ useradd -s /sbin/nologin noninteractiveUser Build image\ndocker build -t custom-users-ubuntu . Connect/Switch to each user:\nFor interactiveUser:\n❯ docker run -it custom-users-ubuntu su - interactiveUser su: warning: cannot change directory to /home/interactiveUser: No such file or directory $ $ id uid=1000(interactiveUser) gid=1000(interactiveUser) groups=1000(interactiveUser) For noninteractiveUser (This will not give a shell because of the nologin shell):\n❯ docker run -it custom-users-ubuntu su - noninteractiveUser su: warning: cannot change directory to /home/noninteractiveUser: No such file or directory This account is currently not available. Verify that noninteractiveUser exists:\n❯ docker run -it custom-users-ubuntu bash root@495500b9c069:/## cat /etc/passwd root:x:0:0:root:/root:/bin/bash ... interactiveUser:x:1000:1000::/home/interactiveUser:/bin/sh noninteractiveUser:x:1001:1001::/home/noninteractiveUser:/sbin/nologin Run commands for each user:\nYou’ll find that the interactiveUser can run commands, but the noninteractiveUser cannot due to its restricted shell. Show difference in environments:\n❯ docker run -it custom-users-ubuntu /bin/bash -c \"su - interactiveUser -c env \u003e /tmp/interactiveEnv; su - noninteractiveUser -c env \u003e /tmp/noninteractiveEnv; diff /tmp/interactiveEnv /tmp/noninteractiveEnv\" su: warning: cannot change directory to /home/interactiveUser: No such file or directory su: warning: cannot change directory to /home/noninteractiveUser: No such file or directory 1,8c1 \u003c MAIL=/var/mail/interactiveUser \u003c USER=interactiveUser \u003c HOME=/home/interactiveUser \u003c LOGNAME=interactiveUser \u003c TERM=xterm \u003c PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin \u003c SHELL=/bin/sh \u003c PWD=/ --- \u003e This account is currently not available. ","description":"An in-depth comparison between interactive and non-interactive users in Linux.","title":"Interactive vs. Non-Interactive Users in Linux","uri":"/en/posts/linux-interactive-non-interactive-users/"},{"content":"Lab Introduction to CloudWatch Explore CloudWatch 1. AWS has done an excellent job defining CloudWatch key concepts. Read the abbreviated excerpt from their official documentation below to obtain an understanding of Metrics, Namespaces and Alarms:\nMetrics\nA metric is the fundamental concept in CloudWatch and represents a time-ordered set of data points. These data points can be either your custom metrics or metrics from other services in AWS. You or AWS products publish metric data points into CloudWatch and you retrieve statistics about those data points as an ordered set of time-series data. Metrics exist only in the region in which they are created.\nThink of a metric as a variable to monitor, and the data points represent the values of that variable over time. For example, the CPU usage of a particular Amazon EC2 instance is one metric, and the latency of an Elastic Load Balancing load balancer is another.\nNamespaces\nCloudWatch namespaces are containers for metrics. Metrics in different namespaces are isolated from each other, so that metrics from different applications are not mistakenly aggregated into the same statistics.\nNote: In this lab you will see namespaces that AWS has created for you, and a custom namespace created by the steps performed in this lab.\nAlarms\nYou can use an alarm to automatically initiate actions on your behalf. An alarm watches a single metric over a specified time period, and performs one or more specified actions, based on the value of the metric relative to a threshold over time. The action is a notification sent to an Amazon SNS topic or an Auto Scaling policy. You can also add alarms to dashboards.\nAlarms invoke actions for sustained state changes only. CloudWatch alarms will not invoke actions simply because they are in a particular state. The state must have changed and been maintained for a specified number of periods.\nThe interested student can take a look at the full version of the documentation here. Due to time constraints, you should look at additional documentation once you have completed the lab.\n2. In the AWS Management Console search bar, enter CloudWatch, and click the CloudWatch result under Services:\n3. Click Metrics \u003e All metrics in the left navigation pane. At this point, there are most likely no custom namespaces. But several AWS namespaces may already be established for you. What metrics are listed on the All metricstab depends on a couple of factors:\nHow quickly you arrived at this view after starting your lab. This lab creates an EC2 instance and EBS volume when you start the lab. After a couple of minutes of delay, metrics for the EC2 and EBS namespaces are included. How recently your Cloud Academy AWS account has been used to complete other Cloud Academy labs. If the AWS account you logged in to recently completed other labs, you may see namespace related to metrics collected in those labs. 4. Spend a few minutes to explore what metrics and namespaces look like in the CloudWatch console. Simply select any namespace and then any particular metric. As an example, the EC2 namespace and CPUUtilizationmetric for the HighCPUInstance are selected in the image below:\nNote: The image above is for illustrative purposes only, you do not need to choose the same instance or metric to explore CloudWatch metrics.\nThe longer the instance has been running, the more data points will appear in the graph. By default, EC2 metrics are collected every five minutes. You may need to adjust the displayed timeline to 1 week (1w) or further in the past to see some metrics.\nMonitoring EC2 Instances 1. In the AWS Management Console search bar, enter EC2, and click the EC2 result under Services:\n2. Click Instancesfrom the navigation pane and select the box near the instance name. A wealth of instance information is displayed in the Details tab:\nWhen you started the Lab, Cloud Academy configured the lab environment for you. This includes a medium instance named HighCPUInstance.\nNote: Your information will vary. There is additional instance information not shown in the example above.\n3. Switch to the Monitoring tab and take a look at the standard metrics:\nNote: If you don’t see an instance yet, it’s possible that it’s still provisioning in the background. Refresh the page every minute or so until it appears.\nThese are the standard metrics that CloudWatch monitors for all your EC2 instances. Please refer to the documentation for details. (Due to possible time constraints, please look up additional information in the documentation after completing this lab.)\nYou should be aware that all the metrics in this tab related to Disk (Disk Reads, Disk Read Operations, Disk Writes, Disk Write Operations) pertain to ephemeral storage disks. Those metrics will not represent anything if you have launched an EBS backed instance. To see the metrics related to EBS volumes you need to look elsewhere. Next you will take a look at the metrics of the EBS volume for this particular instance.\nNote: Ephemeral storage is also known as instance storage. It is temporary storage that is added to your instance, unlike EBS which is an attached volume that is permanent in nature.\n4. To enable and disable detailed monitoring, click Manage detailed monitoring:\nThe Detailed monitoring page will open :\nHere you can enable and disable detailed monitoring by checking or unchecking the Enable checkbox followed by clicking Save.\n5. Click Cancel as we will not be enabling detailed monitoring in this lab:\n6. Reselect the HighCPUInstance , click the Storage tab. Scroll down and click on the Volume Id (lower right):\n7. Select the volume and click on the Monitoring tab to see the metrics for this EBS volume:\nAs you can see, Amazon does quite a bit out of the box with respect to monitoring EC2 Instances and EBS volumes. However, you can enable Detailed Monitoring for even more control over the monitoring frequency of EC2 instances. CloudWatch monitors EC2 instances every 5 minutes by default. If you need more frequent monitoring, you can enable CloudWatch’s Detailed Monitoring feature to monitor your instances every minute. You can enable Detailed Monitoring during the instance launch or change it anytime afterwards. Note: Detailed Monitoring does come with an associated cost.\nInstall the EC2 Monitoring Scripts 1. Navigate to EC2 Instances by clicking here.\n2. Click on Launch instances:\n3. In the Application and OS Images section, select the Amazon Linux option under Quick Start:\n4. In the Instance Type section, you should not change any options. Simply make sure the default t2.microis selected:\n5. In the Key pair section, select the keypair:\nNote: Your keypair may differ from the screenshot. Reminder: The PEM or PPK formatted key pair can be downloaded directly from the Your lab data section of the Cloud Academy Lab page at any time.\n6. Scroll down and expand the Advanced details section. Under IAM instance profile, select the IAM role provided. It will have a name that looks similar to cloudacademylabs-EC2MonitoringRole-XXXXXXXXXX :\n7. Scroll down to Detailed CloudWatch monitoring and select Enable:\n8. Scroll down to User data and copy and paste the following bash script code in the User data (As text) field:\nThis is where the magic happens. Next you will insert the code to execute during the instance launch. However, in order to send metrics to CloudWatch, you need to configure some credentials first. You can use either Access Keys or IAM roles for this task. In this Lab, you will follow the best practices and use IAM roles. There is an instance role already created in you account configured with the proper permissions.\nCopy code\n!/bin/bash yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64 wget http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip unzip CloudWatchMonitoringScripts-1.2.2.zip rm CloudWatchMonitoringScripts-1.2.2.zip echo “/1 ** * /aws-scripts-mon/mon-put-instance-data.pl –mem-util –disk-space-util –disk-path=/ –from-cron” \u003e monitoring.txt crontab monitoring.txt rm monitoring.txt\nThis bash script will get executed the first time the instances launches. In summary, the script will:\nInstall Perl libraries Retrieve and install the AWS CloudWatch Monitoring scripts Configure crontab to run the monitoring script every minute 9. In the Summary section, click Launch instance:\nA confirmation page will let you know that your instance is launching:\n10. Click View all instances.\nNotice the Name for the new instance is blank by default. Although not mandatory, it is helpful to have a name. Move your mouse into the blank space in the Name column. It turns to an edit pencil. Use the pencil to change your Instance Name to Monitoring Scripts:\nWait until theInstance State is R****unningfor the new Instance. It typically takes less than one minute for the state to transition fromP****ending to R****unning.\n11. Navigate back to CloudWatch by clicking hereand clickAll metricsfrom the navigation pane. Notice that there is a new namespace called System/LinuxunderCustom namespaces:\nThis name is configured when you send the custom metrics.\nNote: If you don’t see the new Namespace wait a few minutes and refresh the page. CloudWatch takes some time to display the information in the dashboard. Recall that the newly installed monitoring scripts send data every minute based on the crontab configuration setup in the User data bash script for the instance.\n12. Click on the new System/Linux namespace:\nThere are two metrics being monitored by CloudWatch in the custom System/Linux namespace. (Filesystem, InstanceId, MountPath and InstanceId)\n13. Click the metric on the left (Filesystem…), then select the checkbox so the first metric is graphed.\n14. Click Linux System, so the Metrics path is All \u003e Linux System again. Now select the metric on the right (InstanceId) and select its checkbox as well.\n15. Switch to the Graphed metrics tab. If you selected both metrics correctly the tab will include a “(2)” at the end of it indicating how many metrics are graphed. Your graph should look similar to the following:\nIt is simple to customize the display to meet your needs for the metrics displayed.\n16. Click the custom graph period drop-down above the graph display area and select 15from the Minutesrow:\n17. Select the Period drop-down column menu for each metric in the lower Graphed metrics tab and choose 1 Minute:\nYou can now see the highest resolution metrics that are being sent to CloudWatch every minute. (You may need to refresh the chart after setting the new periods)\n18. Select Maximum for the Statisticcolumn. Instead of an average of the datapoints, the maximum will be graphed. (Note: In the lab example it is probably the same since the disk really has not been touched) Your configuration should look like:\nCreating Your First CloudWatch Alarm 1. Navigate to CloudWatch by clicking here, click on Alarms\u003eAll Alarms in the left pane:\nThere are no Alarms configured, so there are no records found. Further, the three types of Alarms are all at zero (0).\nNote: More information on Alarm states will be covered soon.\n2. Click Create Alarm and click Select metric. Select the EC2 namespace:\nMany different metrics are displayed for both the HighCPUInstance and the Monitoring Scripts instances.\n3. Click Per-instance metrics, scroll down and select the metric with HighCPUInstanceunder Instance NameandCPUUtilizationunder Metric Name:\nTip: You may need to use the arrows in the upper right to find the HighCPUInstance on another page. Alternatively, you can make note of the last 3 or 4 characters in the InstanceId from the EC2 console, then enter those in the Search Metrics field. The search applies to all pages of information.\nOnce selected it is graphed immediately. Notice that you could tailor the graph to a specific Time Range (upper-right). For example, the time range can be specified in Relative or Absolute terms.\n4. Click Select metric when ready.\n5. Under Conditions, set the following values leaving the defaults for the rest:\n_Whenever High CPU is…:_Greater/Equal Than…: 50 An alarm watches for a metric to go beyond an allowable value range when monitored over time. If violated the alarm’s state is changed. There are three possibles states for an alarm:\nOK—The metric is within the defined threshold\nIn alarm—The metric is outside of the defined threshold\nInsufficient data—The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state\n6. Click Nextand fill out the form as described:\nAlarm state trigger: In alarm **Select an SNS topic:**Create new topic Insert a valid e-mail and click on Create topic.\n7. Click Next and fill the form as described before clicking Next:\nDefine a unique name: High CPU Alarm description: When CPU utilization \u003e= 50% Tip: Be sure to use your valid email address in the Email list field so you can verify the Alarm later. AWS Simple Notification Service (SNS) is used to send the email when the alarm is triggered. However, you will not need to configure anything in SNS.\n8. Click Create alarm when ready.\n9. Check for an email from AWS Notifications. Open up the email and click the Confirm subscription link:\nYou should receive a subscription confirmation. (For example, a confirmation message from Amazon Simple Notification Service (SNS) in a new browser tab if using a browser-based email client like Gmail.) To summarize, you have created a new alarm, along with a new SNS topic. Since you subscribed to this new SNS topic, every time the state of the alarm switches to ALARM you will receive an email. You may not receive an alarm email if the time it took to confirm the SNS topic subscription took longer than the time it took for the alarm to trigger. Emails will only be sent to subscribers at the time of the alarm transition.\n10. You should be put to the Alarm page:\nNote your Alarm state may differ. For example, you may be in an Insufficient datastate briefly and then transition either to In alarm or OK.\nTroubleshooting Tip: If the state of your alarm does not change to In alarm almost immediately, it is probably because you picked the incorrect instance. The HighCPUInstance is designed to trigger an alarm due to a high CPU utilization metric. The Monitoring Scripts instance is not taxed at all. To remedy the situation you can either create a new alarm with the correct instance, lower the threshold to something artificially low (1), or change the \u003e= to \u003c= (which is not very realistic but will test the alarm).\n11. Click the Alarm. You can see very useful information about the alarm itself. In the Details tab, there is a general overview of the alarm, and in the History tab you can see up to the last 50 states of the alarm:\n12. After an In alarmstate is raised, check for an email titled ALARM: “High CPU Alarm” in US West - Oregon from AWS Notifications.\nAgain, you may not have received an email because the alarm triggers before you had time to subscribe to the notification topic. Don’t worry, in the next Lab Step, you will reuse the topic for another alarm. Because you are already subscribed, you will receive an email. You could also retrigger the alarm by editing the alarm to trigger when CPUUtilization is \u003e= 500 (which can never happen for the single CPU instance). Wait five minutes until the alarm is disabled, then edit the alarm to trigger when CPUUtilization \u003e= 50.\n13. Now move to the History tab:\nYour History is likely similar to the example shown above. The oldest event is the furthest down. In succession, the Alarm was created; the state changed from INSUFFICIENT DATA to ALARM; SNS sent off an email notification.\n15. Spend a few minutes exploring the latest alarm history and try to understand what is going on with each entry. You can see more details for each entry by clicking the date.\nCreate an Alarm using the EC2 console 1. Navigate to EC2 Instances by clicking here.\n2. Select the Monitoring Scripts instance, then switch to the Status Checks tab:\n3. Click Actions\u003e Create Status Check Alarm:\nThis dialog is similar in function to the create alarm wizard you saw in an earlier Lab Step.\n4. For the Alarm notification, select the SNS topic name you set up before.\nOther fields can be kept at their defaults. The Alarm thresholds section uses Status check failed: either to trigger the alarm for either instance or system status check failures:\n5. Click Create when ready. An alarm creation confirmation message is displayed:\nNow you know two different ways to create alarms: one from CloudWatch and the other from the EC2 console. Next, you will learn how to attach EC2 actions to alarms.\n6. Return to the**Alarms by clicking here.**Notice that the first alarm you created is stuck in the In alarm state.\nThe alarm is stuck in the In alarm state because the instance is running an application that consumes 100% of the CPU utilization. Clearly an indicator that something may have gone wrong with the instance. Imagine that you are managing a production environment and you have an instance that is becoming unavailable intermittently because of high CPU utilization. You would like to receive a notification every time the CPU utilization is high, but this can happen anytime, in the middle of the night, or during a weekend or holiday. It would be helpful to have a pre-defined action in this case – at least until you find a definitive solution for the problem.\nTo help you address the scenario, you can set EC2 actions on your alarms.\n8. Select the High CPU alarm and then Actions \u003e Edit:\nTo make your alarm more suitable to the training environment needs, set a new EC2 Action to Reboot this instance whenever the state of this alarm is ALARM.\n9. Click on Next and click on Add EC2 actionunder EC2 action. Select Reboot this instance.\n10. Click Update alarm when ready.\nAlthough the changes have been made to the alarm, the alarm remains in the In alarm state. CloudWatch will only perform actions when the state transitions to the In alarmstate from another state. In the next instruction, you will modify the alarm to quickly have it change to the OKstate and then change it back to return to the In alarmstate.\n11. Select the High CPUAlarm and choose Actions \u003e Edit. Toggle the relationship from \u003e= to \u003c= and click Update alarm:\n12. Refresh the page to ensure the alarm has transitioned to the OKstate. Then toggle the condition back to \u003e= and save the alarm to have it transition to the In alarm state.\n_Note:_The state change may not be immediate and may take up to 2 minutes.\n13. Navigate back to the Instances by clicking here and watch CloudWatch reboot the instance when the Alarm Status changes to In alarm.\nIn case you miss it, you can return to the alarm in CloudWatch and see the Reboot Action listed in the Historysection:\n14. Check your email client and confirm that you received a notification of the alarm:\nSharing CloudWatch Metrics with others 1. Go to CloudWatch by clicking here and click on Metrics\u003e All metrics.\n2. Select an interesting metric, such as the DiskspaceUtilization metric for the Monitoring Scripts instance, and click Actions \u003e Share:\nThis metric can be found underSystem/Linux \u003e Filesystem, InstanceId, MountPath.\n3. In the Share Graph URL dialog, right-click and copy the URL, then Close the dialog:\n4. The URL for the specific graph you were looking at is copied into the clipboard. You can paste it into a test email to confirm this. For example:\nThe URL is quite complex. To confirm that it is indeed correct, test it out in another browser tab.\n5. Open another browser tab. Paste the URL into the address field and refresh your browser. You should see the exact same graph as the one you shared earlier. Notice that you need to be logged into the AWS console in order to view the information referenced by the URL. For security reasons, you can only share URLs with other AWS Identity and Access Management (IAM) users who have the appropriate CloudWatch IAM permissions in your AWS account.\n","description":"Introduction to CloudWatch","title":"Introduction to CloudWatch","uri":"/en/tracks/aws-certified-developer-associate/cloudwatch/introduction-to-cloudwatch/"},{"content":"Lab https://cloudacademy.com/lab/introduction-codecommit/\nCreate a repository 1. In the AWS Management Console search bar, enter CodeCommit, and click the CodeCommit result under Services:\n2. Click Create repository:\n3. In the Create repository form enter the following values accepting the defaults for values not specified:\nRepository name: lab-repository You can leave the Description field empty for this lab. Usually this field would contain a short description of the purpose of the repository. Attaching meaningful descriptions to repositories makes managing large numbers of repositories easier.\n4. Click Create to create the repository.\nCreating credentials to access your repository 1. In the AWS Management Console search bar, enter IAM, and click the IAM result under Services:\n2. Under Access Management, click Users in the left-hand sidebar menu:\n3. In the IAM user list, click student:\n4. Click the Security credentials tab:\n5. Scroll down to the HTTPS Git credentials for AWS CodeCommit section and click Generate credentials:\n6. In the box that opens, click Download credentials:\nYour browser will download a file called credentials.csv.\nKeep these credentials saved, you will use them in later steps.\nAccessing a shell with Git available 1. In the AWS Management Console search bar, enter EC2, and click the EC2 result under Services:\n2. In the left-hand side menu, click Instances:\n3. Select the instance and in the row of buttons above the instance list, click Connect:\n4. In the Connect to instance dialog, ensure EC2 Instance Connect is selected and enter in the User name field:\n5. To open a shell on this instance, click Connect.\nEC2 Instance Connect allows you to connect to the instance over SSH using your web browser. With EC2 Instance Connect a new browser window opens an SSH shell on a Linux host that has git installed.\nKeep this window open, you will use it in later steps.\nAdding files to your repository 1. Navigate to the CodeCommit Console.\n2. In the list of repositories, click lab-repository:\n3. Click Clone URL and select Clone HTTPS in the drop-down menu that opens:\nThe URL of the repository has been copied to your clipboard.\n4. To copy the repository to your Linux host, in your shell, type git clone followed by a space and paste the repository URL:\ngit clone https://git-codecommit.us-west-2.amazonaws.com/v1/repos/lab-repository 5. When prompted, enter the username and password from the credentials file you downloaded in the Creating credentials to access your repository step:\nYou can ignore the warning about cloning an empty repository.\nYou have copied the repository from AWS CodeCommit and stored it locally on the Linux host.\n6. To change to the directory of the repository, enter the cd command:\ncd lab-repository 7. To create a file, enter the following command:\necho \"lab\" \u003e lab.txt With this command you have created a file called lab.txt that can be added to your local repository.\n8. To add the file to your local repository, enter the following commands:\ngit add lab.txt git commit -m \"Lab commit\" In Git terminology, with the first command you are “staging” the file before you commit it. This process enables you to specify which files you want to add to the repository and which ones you want to ignore when committing.\nYou will see output similar to the following:\nYou can ignore the message about your name and email address. Usually when using Git you will configure the name and email address so that your commits are labeled with these details.\nYou have added the lab.txt file to your local copy of the repository on the Linux host.\nPushing your commit to your remote repository 1. In the shell on the Linux host, enter the following command:\ngit push In Git terminology, with this command you are “pushing” your local commit from your “local” repository to the “remote” repository that you “cloned” from.\n2. When prompted, enter the username and password from the credentials file you downloaded in the Creating credentials to access your repository step:\nYou have copied the file from the local repository on the Linux host, to the repository hosted in AWS CodeCommit.\n3. Navigate to the CodeCommit Console.\n4. In the Repositories list click lab-repository:\nYou will see the lab.txt file you pushed in the previous Lab step listed.\n","description":"Tutorial Introduction to CodeCommit","title":"Introduction to CodeCommit","uri":"/en/tracks/aws-certified-developer-associate/codecommit/introduction-codecommit/"},{"content":"Lab\nCreating a DynamoDB Table with a Partition Key 1. From the AWS Management Console, in the search bar at the top, enter DynamoDB, and under Services, click the DynamoDB result:\nThe Amazon DynamoDB product overview page will load.\n2. To start creating a new DyanmoDB table, on the right-hand side, click Create table:\n3. In the Table details section, enter the following:\nTable Name: Partition Key: Enter Name and ensure type is 4. In the Settings section, select Customize settings:\nChoosing this option allows you to specify values for the table’s read and write capacities.\n5. In the Read/write capacity settings section, under Capacity mode, select Provisioned and enter the following:\nRead Capacity: Provisioned capacity units: Write Capacity: Provisioned capacity units: Accept the defaults for all other options on this page.\n6. Scroll to the bottom and click Create table:\nThe Tables list view will load and you will see a notification that your table is being created. After a 30 seconds or so, you will see a success notification:\nCreating a DynamoDB Table with Local and Global Secondary Indexes 1. On the right-hand side of the page, click Create table:\n2. Enter the following in the Table details section:\nTable name: Partition key: Name: Enter Type: Select Sort key: Name: Enter Type: Select 3. In the Settings section, select Customize settings.\n4. Under Read/write capacity settings, ensure Provisioned is selected for Capacity mode, and enter the following:\nRead capacity: Provisioned capacity units: Write capacity: Provisioned capacity units: 5. Scroll down to the Secondary indexes section and click Create local index:\nThe New local secondary index dialog box will appear.\n6. Enter the following to configure your local secondary index:\nSort Key: Name: Enter Type: Select Attribute projections: Select An LSI (Local Secondary Index) has the same partition key as the table’s primary key and will share the provisioned capacity of the table in contrast to global secondary indexes which provision their own capacity.\n7. To finish creating the local secondary index, at the bottom, click Create index:\n8. Scroll to the bottom and click Create table.\nAfter roughly 30 seconds you will the table become active:\nIn contrast to a Local Secondary Index, a Global Secondary Index is an index with a partition and sort key that can be different from those in the table. It is considered “global” because queries on the index can span all of the data in a table, across all partitions.\n9. Click Create table once more to start creating another table.\n10. Enter the following in the Table details section:\nTable Name: Partition key: Name: Enter Type_:_Select Sort key: Name: Enter Type: Select 11. In the Settings section, select Customize settings.\n12. In the Read/write capacity settings section, ensure the Capacity mode is Provisioned, and enter the following:\nRead capacity: Provisioned capacity units: Enter Write capacity: Provisioned capacity units: Enter 13. Scroll down to the Secondary indexes section, and click Create global index:\nThe New global secondary index dialog form will appear.\n14. Enter the following:\nPartition key: Name: Enter Type: Select Sort key: Name: Enter Type: Select Attribute projections: Select 15. To finish creating the global secondary index, at the bottom, click Create index.\n16. Click Create global index again and enter the following:\nPartition key: Name: Enter Type: Select Sort key: Name: Enter Type: Select Attribute projections: Select 17. To finish creating the global secondary index, at the bottom, click Create index.\n18. Scroll to the bottom and click Create table.\nOnce again, you will see your table created after roughly 30 seconds.\nInserting Items Into a DynamoDB Table 1. In the left-hand menu, click Explore items:\n2. In the Tables list, select\nYou will see nothing under Items returned because there are no items stored.\n3. On the right-hand side, click Create item:\nThe Create item form will load and you will see a list of Attributes.\n4. In the Value textbox next to Name - Partition key, enter a name for your forum (can be anything you wish):\n5. To add another attribute for this item, click Add new attribute and select String from the list of types:\n6. In the Attribute name textbox, enter Description and in the Value textbox, enter any value you’d like:\n7. At the bottom, click Create item:\n8. Repeat steps 3-7 three more times so that end up with four entries in the table:\n9. Select the table and click Create Item.\n10. Provide any values you’d like for , and , keeping in mind that the value must match the name of one of your forums.\nNote: is a \" \" table with the Local Secondary Index. For being able to save a item, you have to provide:\n(the table Primary Key) (the table Sort Key) (the Local Secondary Index Sort Key) Note: You will have to click Add new attribute to add the CreationDate attribute and specify a value.\n11. At the bottom, click Create item.\n12. Repeat steps 9-11 three more times until you have four items in the table:\nEditing DynamoDB Table Items 1. On the Explore items page, select the table:\n2. Select any item in the table and click on its name to get to the Item editor page:\n3. Click inside any value and make an update to its contents:\nWarning: Note that modifying the partition key will result in changing the values of the item keys. This will delete and recreate the item with new keys.\n4. At the bottom of the page, click Save changes:\nQuerying a DynamoDB Table 1. In the left-hand menu, click PartiQL editor:\nThe PartiQL editor page will load.\nPartiQL is a SQL (Structured Query Language) compatible language for Amazon DynamoDB. As well as querying tables, you can use it to insert new items and update existing ones.\n2. Under Tables, click the three dots next to the and click Scan table:\nThe Query 1 editor will be populated with a PartiQL query that selects all items from the .\n3. To execute the PartiQL table, under the editor, click Run:\n4. Scroll down to see the results under Items returned:\nNotice that you have a choice of viewing the results in tabular form or in JSON (Java Script Object Notation):\n5. To query for a specific item, replace the contents of the Query 1 editor with the following, and click Run:\nSELECT * FROM \"Thread\" WHERE \"Subject\" = 'Intro to cool stuff' This time, you will only see items returned that satisfy the value of the WHERE condition.\nNote: Change the value of the WHERE condition to match an item you created if you don’t see a result.\nPartiQL supports most standard features of SQL which means you can query, select, and sort your data in sophisticated ways.\nTypically, using the Amazon DynamoDB Console to query items is useful for one-off reports and debugging or troubleshooting. Like most databases, DynamoDB can be accessed programmatically by other systems and software applications through either the AWS SDK (software development kit) or DyanmoDB’s HTTP API (application programming interface).\nYou can learn more about using PartiQL with Amazon DynamoDB by visiting the Working with PartiQL Query Language section of the Amazon DynamoDB developer guide.\nDeleting a DynamoDB Table 1. In the left-hand menu, click Tables:\n2. In the Tables table, select the Thread table:\n3. On the right-hand side, click Delete:\nThe Delete table confirmation modal will appear.\nNotice that you have the ability to create a backup for a table before deleting it.\n4. In the confirmation textbox, enter delete and click Delete table:\nYou will see a message summarizing the deletion:\n5. To continue, click Go to tables:\n6. To update the Tables table, click the refresh icon:\nYou will now see only two tables listed.\n","description":"Creating a DynamoDB Amazon DynamoDB Table","title":"Introduction to DynamoDB","uri":"/en/tracks/aws-certified-developer-associate/dynamodb/introduction-dynamodb/"},{"content":"Google maps Route\n","description":"Israel - Haifa - Bahai Gardens","title":"Israel - Haifa - Bahai Gardens","uri":"/en/photos/22-07-02-israel-haifa-bahai-gardens/"},{"content":"Interim metrics still in process\nFor 2020:\nTime spent studying/practicing: ~5500 hours ","description":"Certified IT knowledge for the year 2020","title":"IT courses 2020","uri":"/en/posts/diploma/"},{"content":"Web / Browser get base URL const getBaseURL = url =\u003e url.replace(/[?#].*$/, ''); getBaseURL('http://url.com/page?name=Adam\u0026surname=Smith'); // 'http://url.com/page' const url = new URL(\"https://example.com/login?user=someguy\u0026page=news\"); url.origin // \"https://example.com\" url.host // \"example.com\" url.protocol // \"https:\" url.pathname // \"/login\" url.searchParams.get('user') // \"someuser\" get URL parameters as object const getURLParameters = url =\u003e (url.match(/([^?=\u0026]+)(=([^\u0026]*))/g) || []).reduce( (a, v) =\u003e ( (a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1)), a ), {} ); getURLParameters('google.com'); // {} getURLParameters('http://url.com/page?name=Adam\u0026surname=Smith'); // {name: 'Adam', surname: 'Smith'} // One line Object.fromEntries('http://url.com/page?name=Adam\u0026surname=Smith'.split('?')[1].split('\u0026').map(x=\u003ex.split('='))) if DOC element contains another element const elementContains = (parent, child) =\u003e parent !== child \u0026\u0026 parent.contains(child); elementContains( document.querySelector('head'), document.querySelector('title') ); // true elementContains(document.querySelector('body'), document.querySelector('body')); // false Date const {locale, timeZone} = Intl.DateTimeFormat().resolvedOptions(); const date = new Date(Date.now()); new Intl.DateTimeFormat(\"en-US\", { timeZone: \"America/Los_Angeles\", minute: \"numeric\", hour: \"numeric\", }).format(date); // 9:45 AM (returns the current time in that timeZone) is Date valid const isDateValid = (...val) =\u003e !Number.isNaN(new Date(...val).valueOf()); isDateValid('December 17, 1995 03:24:00'); // true isDateValid('1995-12-17T03:24:00'); // true isDateValid('1995-12-17 T03:24:00'); // false isDateValid('Duck'); // false isDateValid(2023, 01, 22); // true isDateValid(1995, 11, 17, 'Duck'); // false isDateValid({}); // false UNIX timestamp from Date const getTimestamp = (date = new Date()) =\u003e Math.floor(date.getTime() / 1000); getTimestamp(); // 1602162242 Compare dates / sort export function compareDates(date1, date2) { if (!date1) { return 1; // move date1 to the end of the array } if (!date2) { return -1; // move date2 to the end of the array } // Convert the date strings to Date objects const d1 = new Date(date1); const d2 = new Date(date2); // Compare the dates if (d1.getTime() === d2.getTime()) { return 0; // dates are equal } if (d1 \u003c d2) { return -1; // date1 is earlier than date2 } return 1; // date1 is later than date2 } const sortedItems = allItems.sort((itemA, itemB) =\u003e compareDates(itemA.date, itemB.date) ); Login Secure Your Node.js App with JSON Web Tokens\nclient.ts // client.ts import axios, { AxiosInstance } from 'axios'; export class Client { private _client: AxiosInstance; constructor(accessToken?: string, url?: string) { const apiUrl = this.selectApiTarget(); let headers = {}; if (accessToken !== undefined) { headers = { 'Authorization': `Bearer ${accessToken}` }; } this._client = axios.create({ baseURL: url || apiUrl, headers: headers, }); } private selectApiTarget(): string { let backendUrl = config.backend.url; if (window.location.host.includes(\"node.sharedtodos.com\")) { backendUrl = config.backend.url.slice().replace(\"api.sharedtodos.com\", \"node-api.sharedtodos.com\"); } return `${backendUrl}/api/v1/`; } async getLoggedInUser(): Promise\u003cUser\u003e { return await this._client.get('/user/me').then((response) =\u003e response.data); } async forgetLoggedInUser(): Promise\u003cvoid\u003e { return await this._client.delete('/user/me').then((response) =\u003e response.data); } async getTasks(listId: number): Promise\u003cTask[]\u003e { return await this._client.get(`boards/${listId}/tasks`).then((response) =\u003e response.data); } async deleteTask(listId: number, taskId: number) { return await this._client.delete(`boards/${listId}/tasks/${taskId}`).then((response) =\u003e response.data); } async createTask(listId: number, title: string, description: string) { const task: Task = { title: title, description: description, }; return await this._client.post(`boards/${listId}/tasks`, task); } async updateTask(listId: number, taskId: string, task: Task) { return await this._client.put(`boards/${listId}/tasks/${taskId}`, task); } async login(email: string): Promise\u003cstring\u003e { let data = new FormData(); data.append('user_email', email); return await this._client.post(`login`, data, { headers: {'Content-Type': 'multipart/form-data' } }).then((response) =\u003e response.data.access_token); } } export const getClient = (accessToken?, url?): Client =\u003e new Client(accessToken, url); config.ts // config.ts interface ConfigOptions { backend: { url: string }; auth0: any; authentication: { provider: string }; authorization: { embedUrl: string }; } declare global { interface Window { _env_: any; } } const Config: ConfigOptions = { backend: { url: process.env.REACT_APP_BACKEND_URL || window?._env_?.BACKEND_URL || \"http://localhost:8008\", }, auth0: { domain: process.env.AUTH0_DOMAIN || window?._env_?.AUTH0_DOMAIN || \"acalla-demoapp.us.auth0.com\", clientId: process.env.AUTH0_CLIENT_ID || window?._env_?.AUTH0_CLIENT_ID || \"myClientID\", audience: process.env.AUTH0_AUDIENCE || window?._env_?.AUTH0_AUDIENCE || \"https://demoapi.server.com/v1/\", }, authentication: { provider: \"auth0\", }, authorization: { embedUrl: window?._env_?.AUTHZ_EMBED_URL || \"http://localhost:3000\", } }; export default Config; Data Structures export const shuffleArray = \u003cT\u003e(array: T[]): T[] =\u003e { for (let i = array.length - 1; i \u003e 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [array[i], array[j]] = [array[j], array[i]]; } return array; }; Cheat Sheet // Single-line comments start with two slashes. /* Multiline comments start with slash-star, and end with star-slash */ // Statements can be terminated by ; doStuff(); // ... but they don't have to be, as semicolons are automatically inserted // wherever there's a newline, except in certain cases. doStuff() // Because those cases can cause unexpected results, we'll keep on using // semicolons in this guide. /////////////////////////////////// // 1. Numbers, Strings and Operators // JavaScript has one number type (which is a 64-bit IEEE 754 double). // Doubles have a 52-bit mantissa, which is enough to store integers // up to about 9✕10¹⁵ precisely. 3; // = 3 1.5; // = 1.5 // Some basic arithmetic works as you'd expect. 1 + 1; // = 2 0.1 + 0.2; // = 0.30000000000000004 8 - 1; // = 7 10 * 2; // = 20 35 / 5; // = 7 // Including uneven division. 5 / 2; // = 2.5 // And modulo division. 10 % 2; // = 0 30 % 4; // = 2 18.5 % 7; // = 4.5 // Bitwise operations also work; when you perform a bitwise operation your float // is converted to a signed int *up to* 32 bits. 1 \u003c\u003c 2; // = 4 // Precedence is enforced with parentheses. (1 + 3) * 2; // = 8 // There are three special not-a-real-number values: Infinity; // result of e.g. 1/0 -Infinity; // result of e.g. -1/0 NaN; // result of e.g. 0/0, stands for 'Not a Number' // There's also a boolean type. true; false; // Strings are created with ' or \". 'abc'; \"Hello, world\"; // Negation uses the ! symbol !true; // = false !false; // = true // Equality is === 1 === 1; // = true 2 === 1; // = false // Inequality is !== 1 !== 1; // = false 2 !== 1; // = true // More comparisons 1 \u003c 10; // = true 1 \u003e 10; // = false 2 \u003c= 2; // = true 2 \u003e= 2; // = true // Strings are concatenated with + \"Hello \" + \"world!\"; // = \"Hello world!\" // ... which works with more than just strings \"1, 2, \" + 3; // = \"1, 2, 3\" \"Hello \" + [\"world\", \"!\"]; // = \"Hello world,!\" // and are compared with \u003c and \u003e \"a\" \u003c \"b\"; // = true // Type coercion is performed for comparisons with double equals... \"5\" == 5; // = true null == undefined; // = true // ...unless you use === \"5\" === 5; // = false null === undefined; // = false // ...which can result in some weird behaviour... 13 + !0; // 14 \"13\" + !0; // '13true' // You can access characters in a string with `charAt` \"This is a string\".charAt(0); // = 'T' // ...or use `substring` to get larger pieces. \"Hello world\".substring(0, 5); // = \"Hello\" // `length` is a property, so don't use (). \"Hello\".length; // = 5 // There's also `null` and `undefined`. null; // used to indicate a deliberate non-value undefined; // used to indicate a value is not currently present (although // `undefined` is actually a value itself) // false, null, undefined, NaN, 0 and \"\" are falsy; everything else is truthy. // Note that 0 is falsy and \"0\" is truthy, even though 0 == \"0\". /////////////////////////////////// // 2. Variables, Arrays and Objects // Variables are declared with the `var` keyword. JavaScript is dynamically // typed, so you don't need to specify type. Assignment uses a single `=` // character. var someVar = 5; // If you leave the var keyword off, you won't get an error... someOtherVar = 10; // ...but your variable will be created in the global scope, not in the scope // you defined it in. // Variables declared without being assigned to are set to undefined. var someThirdVar; // = undefined // If you want to declare a couple of variables, then you could use a comma // separator var someFourthVar = 2, someFifthVar = 4; // There's shorthand for performing math operations on variables: someVar += 5; // equivalent to someVar = someVar + 5; someVar is 10 now someVar *= 10; // now someVar is 100 // and an even-shorter-hand for adding or subtracting 1 someVar++; // now someVar is 101 someVar--; // back to 100 // Arrays are ordered lists of values, of any type. var myArray = [\"Hello\", 45, true]; // Their members can be accessed using the square-brackets subscript syntax. // Array indices start at zero. myArray[1]; // = 45 // Arrays are mutable and of variable length. myArray.push(\"World\"); myArray.length; // = 4 // Add/Modify at specific index myArray[3] = \"Hello\"; // Add and remove element from front or back end of an array myArray.unshift(3); // Add as the first element someVar = myArray.shift(); // Remove first element and return it myArray.push(3); // Add as the last element someVar = myArray.pop(); // Remove last element and return it // Join all elements of an array with semicolon var myArray0 = [32,false,\"js\",12,56,90]; myArray0.join(\";\"); // = \"32;false;js;12;56;90\" // Get subarray of elements from index 1 (include) to 4 (exclude) myArray0.slice(1,4); // = [false,\"js\",12] // Remove 4 elements starting from index 2, and insert there strings // \"hi\",\"wr\" and \"ld\"; return removed subarray myArray0.splice(2,4,\"hi\",\"wr\",\"ld\"); // = [\"js\",12,56,90] // myArray0 === [32,false,\"hi\",\"wr\",\"ld\"] // JavaScript's objects are equivalent to \"dictionaries\" or \"maps\" in other // languages: an unordered collection of key-value pairs. var myObj = {key1: \"Hello\", key2: \"World\"}; // Keys are strings, but quotes aren't required if they're a valid // JavaScript identifier. Values can be any type. var myObj = {myKey: \"myValue\", \"my other key\": 4}; // Object attributes can also be accessed using the subscript syntax, myObj[\"my other key\"]; // = 4 // ... or using the dot syntax, provided the key is a valid identifier. myObj.myKey; // = \"myValue\" // Objects are mutable; values can be changed and new keys added. myObj.myThirdKey = true; // If you try to access a value that's not yet set, you'll get undefined. myObj.myFourthKey; // = undefined /////////////////////////////////// // 3. Logic and Control Structures // The `if` structure works as you'd expect. var count = 1; if (count == 3){ // evaluated if count is 3 } else if (count == 4){ // evaluated if count is 4 } else { // evaluated if it's not either 3 or 4 } // As does `while`. while (true){ // An infinite loop! } // Do-while loops are like while loops, except they always run at least once. var input; do { input = getInput(); } while (!isValid(input)); // The `for` loop is the same as C and Java: // initialization; continue condition; iteration. for (var i = 0; i \u003c 5; i++){ // will run 5 times } // Breaking out of labeled loops is similar to Java outer: for (var i = 0; i \u003c 10; i++) { for (var j = 0; j \u003c 10; j++) { if (i == 5 \u0026\u0026 j ==5) { break outer; // breaks out of outer loop instead of only the inner one } } } // The for/in statement allows iteration over properties of an object. var description = \"\"; var person = {fname:\"Paul\", lname:\"Ken\", age:18}; for (var x in person){ description += person[x] + \" \"; } // description = 'Paul Ken 18 ' // The for/of statement allows iteration over iterable objects (including the built-in String, // Array, e.g. the Array-like arguments or NodeList objects, TypedArray, Map and Set, // and user-defined iterables). var myPets = \"\"; var pets = [\"cat\", \"dog\", \"hamster\", \"hedgehog\"]; for (var pet of pets){ myPets += pet + \" \"; } // myPets = 'cat dog hamster hedgehog ' // \u0026\u0026 is logical and, || is logical or if (house.size == \"big\" \u0026\u0026 house.colour == \"blue\"){ house.contains = \"bear\"; } if (colour == \"red\" || colour == \"blue\"){ // colour is either red or blue } // \u0026\u0026 and || \"short circuit\", which is useful for setting default values. var name = otherName || \"default\"; // The `switch` statement checks for equality with `===`. // Use 'break' after each case // or the cases after the correct one will be executed too. grade = 'B'; switch (grade) { case 'A': console.log(\"Great job\"); break; case 'B': console.log(\"OK job\"); break; case 'C': console.log(\"You can do better\"); break; default: console.log(\"Oy vey\"); break; } /////////////////////////////////// // 4. Functions, Scope and Closures // JavaScript functions are declared with the `function` keyword. function myFunction(thing){ return thing.toUpperCase(); } myFunction(\"foo\"); // = \"FOO\" // Note that the value to be returned must start on the same line as the // `return` keyword, otherwise you'll always return `undefined` due to // automatic semicolon insertion. Watch out for this when using Allman style. function myFunction(){ return // \u003c- semicolon automatically inserted here {thisIsAn: 'object literal'}; } myFunction(); // = undefined // JavaScript functions are first class objects, so they can be reassigned to // different variable names and passed to other functions as arguments - for // example, when supplying an event handler: function myFunction(){ // this code will be called in 5 seconds' time } setTimeout(myFunction, 5000); // Note: setTimeout isn't part of the JS language, but is provided by browsers // and Node.js. // Another function provided by browsers is setInterval function myFunction(){ // this code will be called every 5 seconds } setInterval(myFunction, 5000); // Function objects don't even have to be declared with a name - you can write // an anonymous function definition directly into the arguments of another. setTimeout(function(){ // this code will be called in 5 seconds' time }, 5000); // JavaScript has function scope; functions get their own scope but other blocks // do not. if (true){ var i = 5; } i; // = 5 - not undefined as you'd expect in a block-scoped language // This has led to a common pattern of \"immediately-executing anonymous // functions\", which prevent temporary variables from leaking into the global // scope. (function(){ var temporary = 5; // We can access the global scope by assigning to the \"global object\", which // in a web browser is always `window`. The global object may have a // different name in non-browser environments such as Node.js. window.permanent = 10; })(); temporary; // raises ReferenceError permanent; // = 10 // One of JavaScript's most powerful features is closures. If a function is // defined inside another function, the inner function has access to all the // outer function's variables, even after the outer function exits. function sayHelloInFiveSeconds(name){ var prompt = \"Hello, \" + name + \"!\"; // Inner functions are put in the local scope by default, as if they were // declared with `var`. function inner(){ alert(prompt); } setTimeout(inner, 5000); // setTimeout is asynchronous, so the sayHelloInFiveSeconds function will // exit immediately, and setTimeout will call inner afterwards. However, // because inner is \"closed over\" sayHelloInFiveSeconds, inner still has // access to the `prompt` variable when it is finally called. } sayHelloInFiveSeconds(\"Adam\"); // will open a popup with \"Hello, Adam!\" in 5s /////////////////////////////////// // 5. More about Objects; Constructors and Prototypes // Objects can contain functions. var myObj = { myFunc: function(){ return \"Hello world!\"; } }; myObj.myFunc(); // = \"Hello world!\" // When functions attached to an object are called, they can access the object // they're attached to using the `this` keyword. myObj = { myString: \"Hello world!\", myFunc: function(){ return this.myString; } }; myObj.myFunc(); // = \"Hello world!\" // What this is set to has to do with how the function is called, not where // it's defined. So, our function doesn't work if it isn't called in the // context of the object. var myFunc = myObj.myFunc; myFunc(); // = undefined // Inversely, a function can be assigned to the object and gain access to it // through `this`, even if it wasn't attached when it was defined. var myOtherFunc = function(){ return this.myString.toUpperCase(); }; myObj.myOtherFunc = myOtherFunc; myObj.myOtherFunc(); // = \"HELLO WORLD!\" // We can also specify a context for a function to execute in when we invoke it // using `call` or `apply`. var anotherFunc = function(s){ return this.myString + s; }; anotherFunc.call(myObj, \" And Hello Moon!\"); // = \"Hello World! And Hello Moon!\" // The `apply` function is nearly identical, but takes an array for an argument // list. anotherFunc.apply(myObj, [\" And Hello Sun!\"]); // = \"Hello World! And Hello Sun!\" // This is useful when working with a function that accepts a sequence of // arguments and you want to pass an array. Math.min(42, 6, 27); // = 6 Math.min([42, 6, 27]); // = NaN (uh-oh!) Math.min.apply(Math, [42, 6, 27]); // = 6 // But, `call` and `apply` are only temporary. When we want it to stick, we can // use `bind`. var boundFunc = anotherFunc.bind(myObj); boundFunc(\" And Hello Saturn!\"); // = \"Hello World! And Hello Saturn!\" // `bind` can also be used to partially apply (curry) a function. var product = function(a, b){ return a * b; }; var doubler = product.bind(this, 2); doubler(8); // = 16 // When you call a function with the `new` keyword, a new object is created, and // made available to the function via the `this` keyword. Functions designed to be // called like that are called constructors. var MyConstructor = function(){ this.myNumber = 5; }; myNewObj = new MyConstructor(); // = {myNumber: 5} myNewObj.myNumber; // = 5 // Unlike most other popular object-oriented languages, JavaScript has no // concept of 'instances' created from 'class' blueprints; instead, JavaScript // combines instantiation and inheritance into a single concept: a 'prototype'. // Every JavaScript object has a 'prototype'. When you go to access a property // on an object that doesn't exist on the actual object, the interpreter will // look at its prototype. // Some JS implementations let you access an object's prototype on the magic // property `__proto__`. While this is useful for explaining prototypes it's not // part of the standard; we'll get to standard ways of using prototypes later. var myObj = { myString: \"Hello world!\" }; var myPrototype = { meaningOfLife: 42, myFunc: function(){ return this.myString.toLowerCase(); } }; myObj.__proto__ = myPrototype; myObj.meaningOfLife; // = 42 // This works for functions, too. myObj.myFunc(); // = \"hello world!\" // Of course, if your property isn't on your prototype, the prototype's // prototype is searched, and so on. myPrototype.__proto__ = { myBoolean: true }; myObj.myBoolean; // = true // There's no copying involved here; each object stores a reference to its // prototype. This means we can alter the prototype and our changes will be // reflected everywhere. myPrototype.meaningOfLife = 43; myObj.meaningOfLife; // = 43 // The for/in statement allows iteration over properties of an object, // walking up the prototype chain until it sees a null prototype. for (var x in myObj){ console.log(myObj[x]); } ///prints: // Hello world! // 43 // [Function: myFunc] // true // To only consider properties attached to the object itself // and not its prototypes, use the `hasOwnProperty()` check. for (var x in myObj){ if (myObj.hasOwnProperty(x)){ console.log(myObj[x]); } } ///prints: // Hello world! // We mentioned that `__proto__` was non-standard, and there's no standard way to // change the prototype of an existing object. However, there are two ways to // create a new object with a given prototype. // The first is Object.create, which is a recent addition to JS, and therefore // not available in all implementations yet. var myObj = Object.create(myPrototype); myObj.meaningOfLife; // = 43 // The second way, which works anywhere, has to do with constructors. // Constructors have a property called prototype. This is *not* the prototype of // the constructor function itself; instead, it's the prototype that new objects // are given when they're created with that constructor and the new keyword. MyConstructor.prototype = { myNumber: 5, getMyNumber: function(){ return this.myNumber; } }; var myNewObj2 = new MyConstructor(); myNewObj2.getMyNumber(); // = 5 myNewObj2.myNumber = 6; myNewObj2.getMyNumber(); // = 6 // Built-in types like strings and numbers also have constructors that create // equivalent wrapper objects. var myNumber = 12; var myNumberObj = new Number(12); myNumber == myNumberObj; // = true // Except, they aren't exactly equivalent. typeof myNumber; // = 'number' typeof myNumberObj; // = 'object' myNumber === myNumberObj; // = false if (0){ // This code won't execute, because 0 is falsy. } if (new Number(0)){ // This code will execute, because wrapped numbers are objects, and objects // are always truthy. } // However, the wrapper objects and the regular builtins share a prototype, so // you can actually add functionality to a string, for instance. String.prototype.firstCharacter = function(){ return this.charAt(0); }; \"abc\".firstCharacter(); // = \"a\" // This fact is often used in \"polyfilling\", which is implementing newer // features of JavaScript in an older subset of JavaScript, so that they can be // used in older environments such as outdated browsers. // For instance, we mentioned that Object.create isn't yet available in all // implementations, but we can still use it with this polyfill: if (Object.create === undefined){ // don't overwrite it if it exists Object.create = function(proto){ // make a temporary constructor with the right prototype var Constructor = function(){}; Constructor.prototype = proto; // then use it to create a new, appropriately-prototyped object return new Constructor(); }; } // ES6 Additions // The \"let\" keyword allows you to define variables in a lexical scope, // as opposed to a function scope like the var keyword does. let name = \"Billy\"; // Variables defined with let can be reassigned new values. name = \"William\"; // The \"const\" keyword allows you to define a variable in a lexical scope // like with let, but you cannot reassign the value once one has been assigned. const pi = 3.14; pi = 4.13; // You cannot do this. // There is a new syntax for functions in ES6 known as \"lambda syntax\". // This allows functions to be defined in a lexical scope like with variables // defined by const and let. const isEven = (number) =\u003e { return number % 2 === 0; }; isEven(7); // false // The \"equivalent\" of this function in the traditional syntax would look like this: function isEven(number) { return number % 2 === 0; }; // I put the word \"equivalent\" in double quotes because a function defined // using the lambda syntax cannnot be called before the definition. // The following is an example of invalid usage: add(1, 8); const add = (firstNumber, secondNumber) =\u003e { return firstNumber + secondNumber; }; Cheat Sheet Typescript // There are 3 basic types in TypeScript let isDone: boolean = false; let lines: number = 42; let name: string = \"Anders\"; // But you can omit the type annotation if the variables are derived // from explicit literals let isDone = false; let lines = 42; let name = \"Anders\"; // When it's impossible to know, there is the \"Any\" type let notSure: any = 4; notSure = \"maybe a string instead\"; notSure = false; // okay, definitely a boolean // Use const keyword for constants const numLivesForCat = 9; numLivesForCat = 1; // Error // For collections, there are typed arrays and generic arrays let list: number[] = [1, 2, 3]; // Alternatively, using the generic array type let list: Array\u003cnumber\u003e = [1, 2, 3]; // For enumerations: enum Color { Red, Green, Blue }; let c: Color = Color.Green; console.log(Color[c]); // \"Green\" // Lastly, \"void\" is used in the special case of a function returning nothing function bigHorribleAlert(): void { alert(\"I'm a little annoying box!\"); } // Functions are first class citizens, support the lambda \"fat arrow\" syntax and // use type inference // The following are equivalent, the same signature will be inferred by the // compiler, and same JavaScript will be emitted let f1 = function (i: number): number { return i * i; } // Return type inferred let f2 = function (i: number) { return i * i; } // \"Fat arrow\" syntax let f3 = (i: number): number =\u003e { return i * i; } // \"Fat arrow\" syntax with return type inferred let f4 = (i: number) =\u003e { return i * i; } // \"Fat arrow\" syntax with return type inferred, braceless means no return // keyword needed let f5 = (i: number) =\u003e i * i; // Interfaces are structural, anything that has the properties is compliant with // the interface interface Person { name: string; // Optional properties, marked with a \"?\" age?: number; // And of course functions move(): void; } // Object that implements the \"Person\" interface // Can be treated as a Person since it has the name and move properties let p: Person = { name: \"Bobby\", move: () =\u003e { } }; // Objects that have the optional property: let validPerson: Person = { name: \"Bobby\", age: 42, move: () =\u003e { } }; // Is not a person because age is not a number let invalidPerson: Person = { name: \"Bobby\", age: true }; // Interfaces can also describe a function type interface SearchFunc { (source: string, subString: string): boolean; } // Only the parameters' types are important, names are not important. let mySearch: SearchFunc; mySearch = function (src: string, sub: string) { return src.search(sub) != -1; } // Classes - members are public by default class Point { // Properties x: number; // Constructor - the public/private keywords in this context will generate // the boiler plate code for the property and the initialization in the // constructor. // In this example, \"y\" will be defined just like \"x\" is, but with less code // Default values are also supported constructor(x: number, public y: number = 0) { this.x = x; } // Functions dist(): number { return Math.sqrt(this.x * this.x + this.y * this.y); } // Static members static origin = new Point(0, 0); } // Classes can be explicitly marked as implementing an interface. // Any missing properties will then cause an error at compile-time. class PointPerson implements Person { name: string move() {} } let p1 = new Point(10, 20); let p2 = new Point(25); //y will be 0 // Inheritance class Point3D extends Point { constructor(x: number, y: number, public z: number = 0) { super(x, y); // Explicit call to the super class constructor is mandatory } // Overwrite dist(): number { let d = super.dist(); return Math.sqrt(d * d + this.z * this.z); } } // Modules, \".\" can be used as separator for sub modules module Geometry { export class Square { constructor(public sideLength: number = 0) { } area() { return Math.pow(this.sideLength, 2); } } } let s1 = new Geometry.Square(5); // Local alias for referencing a module import G = Geometry; let s2 = new G.Square(10); // Generics // Classes class Tuple\u003cT1, T2\u003e { constructor(public item1: T1, public item2: T2) { } } // Interfaces interface Pair\u003cT\u003e { item1: T; item2: T; } // And functions let pairToTuple = function \u003cT\u003e(p: Pair\u003cT\u003e) { return new Tuple(p.item1, p.item2); }; let tuple = pairToTuple({ item1: \"hello\", item2: \"world\" }); // Including references to a definition file: /// \u003creference path=\"jquery.d.ts\" /\u003e // Template Strings (strings that use backticks) // String Interpolation with Template Strings let name = 'Tyrone'; let greeting = `Hi ${name}, how are you?` // Multiline Strings with Template Strings let multiline = `This is an example of a multiline string`; // READONLY: New Feature in TypeScript 3.1 interface Person { readonly name: string; readonly age: number; } var p1: Person = { name: \"Tyrone\", age: 42 }; p1.age = 25; // Error, p1.age is read-only var p2 = { name: \"John\", age: 60 }; var p3: Person = p2; // Ok, read-only alias for p2 p3.age = 35; // Error, p3.age is read-only p2.age = 45; // Ok, but also changes p3.age because of aliasing class Car { readonly make: string; readonly model: string; readonly year = 2018; constructor() { this.make = \"Unknown Make\"; // Assignment permitted in constructor this.model = \"Unknown Model\"; // Assignment permitted in constructor } } let numbers: Array\u003cnumber\u003e = [0, 1, 2, 3, 4]; let moreNumbers: ReadonlyArray\u003cnumber\u003e = numbers; moreNumbers[5] = 5; // Error, elements are read-only moreNumbers.push(5); // Error, no push method (because it mutates array) moreNumbers.length = 3; // Error, length is read-only numbers = moreNumbers; // Error, mutating methods are missing // Tagged Union Types for modelling state that can be in one of many shapes type State = | { type: \"loading\" } | { type: \"success\", value: number } | { type: \"error\", message: string }; declare const state: State; if (state.type === \"success\") { console.log(state.value); } else if (state.type === \"error\") { console.error(state.message); } // Template Literal Types // Use to create complex string types type OrderSize = \"regular\" | \"large\"; type OrderItem = \"Espresso\" | \"Cappuccino\"; type Order = `A ${OrderSize} ${OrderItem}`; let order1: Order = \"A regular Cappuccino\"; let order2: Order = \"A large Espresso\"; let order3: Order = \"A small Espresso\"; // Error // Iterators and Generators // for..of statement // iterate over the list of values on the object being iterated let arrayOfAnyType = [1, \"string\", false]; for (const val of arrayOfAnyType) { console.log(val); // 1, \"string\", false } let list = [4, 5, 6]; for (const i of list) { console.log(i); // 4, 5, 6 } // for..in statement // iterate over the list of keys on the object being iterated for (const i in list) { console.log(i); // 0, 1, 2 } // Type Assertion let foo = {} // Creating foo as an empty object foo.bar = 123 // Error: property 'bar' does not exist on `{}` foo.baz = 'hello world' // Error: property 'baz' does not exist on `{}` // Because the inferred type of foo is `{}` (an object with 0 properties), you // are not allowed to add bar and baz to it. However with type assertion, // the following will pass: interface Foo { bar: number; baz: string; } let foo = {} as Foo; // Type assertion here foo.bar = 123; foo.baz = 'hello world' Resources react cheatsheet https://learnxinyminutes.com/docs/typescript/ ","description":"JavaScript code snippets","title":"JavaScript code snippets","uri":"/en/posts/js-snippets/"},{"content":"type ObjectWithKeyName = { [key: string]: any; }; // transform array of objects to dict // use object provided keyName as a key of dict // expected for each object in array this keyName value is unique const transformArrayToDict = (objects: ObjectWithKeyName[], keyName: string) =\u003e { const res: ObjectWithKeyName = {}; objects.forEach((obj) =\u003e { res[obj[keyName]] = obj; }); return res; }; ","description":"JavaScript: convert array of objects to dictionary","title":"JavaScript: convert array of objects to dictionary","uri":"/en/posts/js-convert-array-to-dict/"},{"content":"About AWS Lambda AWS Lambda User Guide AWS Lambda is a serverless computing service that runs program code in response to certain events and is responsible for automatically allocating the necessary computing resources.\nAWS Lambda automatically runs program code in response to various events, such as HTTP requests through Amazon API Gateway, changing objects in Amazon Simple Storage Service garbage cans (Amazon S3), updating tables in Amazon DynamoDB or changing states in AWS Step Functions.\nSupports for Java, Go, PowerShell, Node.js, C#, Python and Ruby. It also provides a Runtime API which allows you to use any additional programming languages to author your functions. A runtime is a program that runs a Lambda function’s handler method when the function is invoked. You can include a runtime in your function’s deployment package in the form of an executable file named bootstrap\nWhen you publish a version, AWS Lambda makes a snapshot copy of the Lambda function code (and configuration) in the $LATEST version. A published version is immutable.\nLambda execution role is an IAM role that grants the function permission to access AWS services and resources. Under Attach permissions policies, choose the AWS managed policies AWSLambdaBasicExecutionRole and AWSXRayDaemonWriteAccess.\nAWS managed policies for Lambda features\nDigest Types of lambda invocation RequestResponse. Event. Dryrun. Lambda execution context is a temporary runtime environment that initializes any external dependencies of our Lambda function code, such as database connections or HTTP endpoints Lambda Environment variables are variables that enable you to dynamically pass settings to your function code and libraries, without making changes to your code. Environment variables are key-value pairs that you create and modify as part of your function configuration. Lambda concurrent executions = (invocations per second) x (average execution duration in seconds). Concurrency limit of lambda execution, Default 1000 Reserved - 900 unreserved 100. Will get throttled if it exceeds concurrency limit AWS_PROXY in API gateway is primarily used for Lambda proxy integration. A Lambda authorizer is an API Gateway feature that uses a Lambda function to control access to your API. Lambda authorizer can be used for custom authorization scheme. 2 types: Token based. Request parameter based Lambda authorizer. Lambda deployment configuration: HalfAtATime Canary Linear. AWS Lambda compute platform deployments cannot use an in-place deployment type Increasing memory in lambda will increase CPU in lambda Lambda Versioning: By default, each AWS Lambda function has a single current version of the code. Clients of Lambda function can call a specific version or at the latest implementation Lambda Alias: You can create one or more aliases for our AWS Lambda function. A Lambda alias is like a pointer to a specific Lambda function version. Users can access the function version using the alias ARN Lambda@Edge is a feature of Amazon CloudFront that lets you run code closer to users of your application, which improves performance and reduces latency Lambda Layer - Layer is a ZIP archive that contains libraries, a custom runtime, or other dependencies. With layers, you can use libraries in your function without needing to include them in your deployment package Amazon DynamoDB is integrated with AWS Lambda so that you can trigger pieces of code that automatically respond to events in DynamoDB Streams. AWSLambdaDynamoDBExecutionRole is required to enable Lambda to work with DynamoDB API Gateway - Stage variables are name-value pairs that you can define as configuration attributes associated with a deployment stage of a REST API. Integrating Cloud Watch Events with lambda can be used for scheduling events If there is an incompatible output returned from a Lambda proxy integration backend, it will return 502 To resolve lambda throttled exception when using Cognito events, perform retry on sync. Lambda Event hook running order: start -\u003e BeforeAllowTraffic -\u003e AllowTraffic -\u003e After AllowTraffic -\u003e End AWS Lambda runs function code securely within a VPC b default. To enable your Lambda function to access resources inside your private VPC, you must provide additional VPC-specific configuration information that includes VPC subnet IDs and security group IDs. AWS Lambda uses this information to set up elastic network interfaces (ENIs) that enable your function to connect securely to other resources within your private VPC Lambda Asynchronous invocation can be triggered by Amazon Simple Storage Service, Amazon Simple Notification Service, Amazon Simple Email Service, AWS CloudFormation, Amazon CloudWatch Logs, Amazon CloudWatch Events, AWS CodeCommit, AWS Config. Lambda Limits: https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html Lambda provides 500 MB of additional disk space as a workspace. Lambda logs all stout for a lambda function to CloudWatch Logs. Any additional logging calls used in the function will also be sent to CloudWatch Logs. To connect to a VPC, lambda function execution role must have the following permissions: ec2:Create Networkinterface, ec2:DescribeNetworkinterfaces, ec2:Delete Networkinterface. These permissions are included in the AWSLambdaVPCAccessExecutionRole managed policy When lambda execution is hit by concurrency limit, you need to request AWS to increase concurrency limit For stream-based services like Dynamo b streams, that don’t invoke Lambda functions directly, the event source mapping configuration should be made on the Lambda side. A deployment package is a ZIP archive that contains your function code and dependencies. You can unload the package directly to lambda. Or you can use an Amazon S3 bucket and then upload it to lambda. If the deployment package is larger than 50 MB. you must use Amazon 53 Lambda can incur a first run penalty also called cold starts. Cold starts can cause slower than expected behavior on infrequently run functions or functions with high concurrency demands Price Price\nPrice x86\n0.000016667 USD per gigabyte-second 0,20 USD per 1 million requests Arm price\n0,0000133334 USD for each gigabyte-second 0,20 USD for 1 million queries Practice In the AWS Management Console search bar, type Lambda and select Lambda under “Services”:\nhttps://us-west-2.console.aws.amazon.com/lambda/home?region=us-west-2#\nOn page Functions click Create a function\nAuthor from scratch is selected and enter the following values in the bottom form:\nFunction name: *MyCustomFunc Runtime: Node.js 16.X I select this section because I use the cloudacademy account. This role gives you permission to create functions\nPermissions: Change default execution role. Execution Role: Select Use an existing role. Existing role: Select the role beginning with cloudacademylabs-LambdaExecutionRole Create function I’m writing a function to view the log, I’ll add a print to the terminal. And I’ll also add processing of the message I receive (In the next step in the testing section)\nThe function takes as an object event which contains an array of Records. On the 1st (0) position the object Sns (name of the service SNS Notifications).\nIn the object itself there will be 2 values:\ncook_secs - cooking time (microwave) req_secs - cooking time (prepare) console.log('Loading function'); exports.handler = function(event, context) { console.log(JSON.stringify(event, null, 2)); const message = JSON.parse(event.Records[0].Sns.Message); if (message.cook_secs \u003c message.req_secs) { if (message.pre) { context.succeed(\"User ended \" + message.pre + \" preset early\"); } else { context.succeed(\"User ended custom cook time early\"); } } context.succeed(); }; Deploy Test This functionality allows you to test how the function reacts to certain events. Let’s try to add an event from SNS Notifications.\nLet’s choose from the list\nWe get a template in which we make some changes, adjust the field Message - the one that we will process in our function.\nField Message - string, so our object will need to be wrapped in quotes\nTo make the handler understand that we put quotation marks inside quotation marks, we must put a special symbol \\ before the quotation mark.\nFinally we update one line and save it - Create\nNow we click the Test button.\nSince cook_secs in our event was less than req_secs, the function printed the first condition, and below in Function Logs we see the message that we print when we initialize the Loading function\nQuestions Q1 When working with a published version of the AWS Lambda function, you should note that the _____.\nUse the AWS Management Console to create and configure the cluster. Create a cron job to schedule the cluster deployment using the _aws cloudformation deploy_ command Create a configuration file with the .config extension and place it into the .ebextensions folder in the application package. Build an AWS Lambda function that polls to the ElasticBeanstalk environment deployments and create and configure the Amazon ElastiCache cluster. Explanation AWS Secrets Manager\nC\nQ2 A developer is building a streamlined development process for Lambda functions related to S3 storage.The developer needs a consistent, reusable code blueprint that can be easily customized to manage Lambda function definition and deployment, the S3 events to be managed and the Identity Access Management (IAM) policies definition.\nWhich of the following AWS solutions offers is best suited for this objective?\nAWS Software Development Kits (SDKs) AWS Serverless Application Model (SAM) templates AWS Systems Manager AWS Step Functions Explanation Serverless Application Model\n2\nQ3 A developer is adding sign-up and sign-in functionality to an application. The application is required to make an API call to a custom analytics solution to log user sign-in events\nWhich combination of actions should the developer take to satisfy these requirements? (Select TWO.)\nUse Amazon Cognito to provide the sign-up and sign-in functionality Use AWS IAM to provide the sign-up and sign-in functionality Configure an AWS Config rule to make the API call triggered by the post-authentication event Invoke an Amazon API Gateway method to make the API call triggered by the post-authentication event Execute an AWS Lambda function to make the API call triggered by the post-authentication event Explanation Amazon Cognito adds user sign-up, sign-in, and access control to web and mobile applications quickly and easily. Users can also create an AWS Lambda function to make an API call to a custom analytics solution and then trigger that function with an Amazon Cognito post authentication trigger.\n1, 5\nQ4 A developer is designing a web application that allows the users to post comments and receive a real-time feedback.\nWhich architectures meet these requirements? (Select TWO.)\nCreate an AWS AppSync schema and corresponding APIs. Use an Amazon DynamoDB table as the data store. Create a WebSocket API in Amazon API Gateway. Use an AWS Lambda function as the backend and an Amazon DynamoDB table as the data store Create an AWS Elastic Beanstalk application backed by an Amazon RDS database. Configure the application to allow long-lived TCP/IP sockets. Create a GraphQL endpoint in Amazon API Gateway. Use an Amazon DynamoDB table as the data store. Enable WebSocket on Amazon CloudFront. Use an AWS Lambda function as the origin and an Amazon Aurora DB cluster as the data store Explanation AWS AppSync simplifies application development by letting users create a flexible API to securely access, manipulate, and combine data from one or more data sources. AWS AppSync is a managed service that uses GraphQL to make it easy for applications to get the exact data they need.\nAWS AppSync allows users to build scalable applications, including those requiring real-time updates, on a range of data sources, including Amazon DynamoDB. In Amazon API Gateway, users can create a WebSocket API as a stateful frontend for an AWS service (such as AWS Lambda or DynamoDB) or for an HTTP endpoint.\nThe WebSocket API invokes the backend based on the content of the messages it receives from client applications. Unlike a REST API, which receives and responds to requests, a WebSocket API supports two-way communication between client applications and the backend.\n1, 2\nQ5 A food delivery company is building a feature that requests reviews from customers after their orders are delivered. The solution should be a short-running process that can message customers simultaneously at various contact points including email, text, and mobile push notifications.\nWhich approach best meets these requirements?\nUse EventBridge with Kinesis Data Streams to send messages. Use a Step Function to send SQS messages. Use a Lambda function to send SNS messages. Use AWS Batch and SNS to send messages. Explanation https://docs.aws.amazon.com/sns/latest/dg/welcome.html\n3\nResources Community posts ","description":"A step-by-step guide to AWS Lambda","title":"Lambda","uri":"/en/tracks/aws-certified-developer-associate/lambda/"},{"content":" Array / String # Problem Difficulty Slides/Video 1 1768. Merge Strings Alternately Easy ✅ ✅ 2 1071. Greatest Common Divisor of Strings Easy ✅ ✅ 3 1431. Kids With the Greatest Number of Candies Easy ✅ ✅ 4 605. Can Place Flowers Easy 5 345. Reverse Vowels of a String Easy 6 151. Reverse Words in a String Medium ✅ 7 238. Product of Array Except Self Medium 8 334. Increasing Triplet Subsequence Medium 9 443. String Compression Medium Two Pointers # Problem Difficulty 10 283. Move Zeroes Easy 11 392. Is Subsequence Easy 12 11. Container With Most Water Medium 13 1679. Max Number of K-Sum Pairs Medium Sliding Window # Problem Difficulty 14 643. Maximum Average Subarray I Easy 15 1456. Maximum Number of Vowels in a Substring of Given Length Medium 16 1004. Max Consecutive Ones III Medium 17 1493. Longest Subarray of 1’s After Deleting One Element Medium Prefix Sum # Problem Difficulty Slides/Video 18 1732. Find the Highest Altitude Easy ✅ 19 724. Find Pivot Index Easy Hash Map / Set # Problem Difficulty 20 2215. Find the Difference of Two Arrays Easy 21 1207. Unique Number of Occurrences Easy 22 1657. Determine if Two Strings Are Close Medium 23 2352. Equal Row and Column Pairs Medium Stack # Problem Difficulty 24 2390. Removing Stars From a String Medium 25 735. Asteroid Collision Medium 26 394. Decode String Medium Queue # Problem Difficulty 27 933. Number of Recent Calls Easy 28 649. Dota2 Senate Medium Linked List # Problem Difficulty 31 141. Linked List Cycle Easy 31 206. Reverse Linked List Easy 29 2095. Delete the Middle Node of a Linked List Medium 30 328. Odd Even Linked List Medium 32 2130. Maximum Twin Sum of a Linked List Medium Binary Tree - DFS # Problem Difficulty 33 104. Maximum Depth of Binary Tree Easy 34 872. Leaf-Similar Trees Easy 35 1448. Count Good Nodes in Binary Tree Medium 36 437. Path Sum III Medium 37 1372. Longest ZigZag Path in a Binary Tree Medium 38 236. Lowest Common Ancestor of a Binary Tree Medium Binary Tree - BFS # Problem Difficulty 39 199. Binary Tree Right Side View Medium 40 1161. Maximum Level Sum of a Binary Tree Medium Binary Search Tree # Problem Difficulty 41 700. Search in a Binary Search Tree Easy 42 450. Delete Node in a BST Medium Graphs - DFS # Problem Difficulty 43 841. Keys and Rooms Medium 44 547. Number of Provinces Medium 45 1466. Reorder Routes to Make All Paths Lead to the City Zero Medium 46 399. Evaluate Division Medium Graphs - BFS # Problem Difficulty 47 1926. Nearest Exit from Entrance in Maze Medium 48 994. Rotting Oranges Medium Heap / Priority Queue # Problem Difficulty 49 Kth Largest Element in an Array Medium 50 Smallest Number in Infinite Set Medium 51 Maximum Subsequence Score Medium 52 Total Cost to Hire K Workers Medium Binary Search # Problem Difficulty 53 Guess Number Higher or Lower Easy 54 Successful Pairs of Spells and Potions Medium 55 162. Find Peak Element Medium 56 Koko Eating Bananas Medium Backtracking # Problem Difficulty 57 17. Letter Combinations of a Phone Number Medium 58 Combination Sum III Medium DP - 1D # Problem Difficulty 59 N-th Tribonacci Number Easy 60 Min Cost Climbing Stairs Easy 61 House Robber Medium 62 Domino and Tromino Tiling Medium DP - Multidimensional # Problem Difficulty 63 Unique Paths Medium 64 Longest Common Subsequence Medium 65 Best Time to Buy and Sell Stock with Transaction Fee Medium 66 Edit Distance Medium Bit Manipulation # Problem Difficulty 67 Counting Bits Easy 68 136. Single Number Easy 69 Minimum Flips to Make a OR b Equal to c Medium Trie # Problem Difficulty 70 208. Implement Trie (Prefix Tree) Medium 71 Search Suggestions System Medium Intervals # Problem Difficulty 72 435. Non-overlapping Intervals Medium 73 Minimum Number of Arrows to Burst Balloons Medium Monotonic Stack # Problem Difficulty 74 Daily Temperatures Medium 75 Online Stock Span Medium Links LeetCode Top 75 ","description":"","title":"LeetCode Top 75","uri":"/en/tracks/algorithms-101/leetcode75/"},{"content":"AI The curated list of AI tools for marketing Discover the newest AIs for any given task Create 1,000 AI art images a day for free openai examples openai answers from file AI-powered video summaries Chrome extension Free AI-generated Stock Images of People Soft/Architecture Block Diagram Maker Theme for Docs - MkDocs Media Fast and simple way to visualize your story - free 1 Storyboard and 10 Frames Video from Screenshot Other Create and sell your own personalized books and journals Books nice covers Comments on site https://github.com/umputun/remark42 https://demo.comentario.app/ IL https://www.cashcow.co.il/ интернет магазин ","description":"","title":"Links","uri":"/en/p/links/"},{"content":"Python To set up Python with Black and Flake8, you will need a couple of configuration files: pyproject.toml for Black, and .flake8 for Flake8.\nBlack is a code formatter for Python. It reformats your entire file in place according to the Black code style, which is a strict subset of PEP 8. Black makes code review faster by producing the smallest diffs possible.\nFlake8 is a powerful tool that checks your Python code against some of the style conventions in PEP 8. It combines the capabilities of several other tools including:\nPyFlakes: Checks for logical errors. pycodestyle: Checks for the format errors. Ned Batchelder’s McCabe script: Checks the complexity of your code. Step 1: Install Python python --version Step 2: Install Black and Flake8 pip install black pip install flake8 Step 3: Install Python Extension for VS Code Go to the Extensions view in VS Code (View -\u003e Extensions), search for “Python,” and then install it.\nStep 4: Configure Black and Flake8 In the pyproject.toml file, you have the following settings:\nline-length: This is the maximum line length that Black will enforce. You’ve set it to 130. target-version: This specifies the Python versions your project supports. Black may change the way it formats code depending on the Python version targetted. include and exclude: These options define the files Black should format and exclude from formatting, respectively. Create a pyproject.toml file in your project root directory with the following content for Black:\n[tool.black] line-length = 130 target-version = ['py38'] include = '\\.pyi?$' exclude = ''' /( \\.git | \\.venv | \\.eggs | \\.hg | \\.mypy_cache | \\.nox | \\.tox | \\.venv | _build | buck-out | build | dist )/ ''' And a .flake8 file with the following content for Flake8:\n[flake8] max-line-length = 150 ignore = E203, E266, E501, W503, F403, F401 max-complexity = 18 select = B,C,E,F,W,T4,B9 max-complexity: This is complexity checker setting. It’s a measure of the complexity of your functions, methods, and classes. The lower this number, the less complex your code is allowed to be. Step 5: Configure VS Code Settings Go to the Settings in VS Code (File -\u003e Preferences -\u003e Settings) and search for “Python Formatting Provider.” Select “black” from the dropdown list.\nTo set Flake8 as the linter, search for “Python Linting” in the settings and select “flake8.”\nNow, VS Code will automatically use Black and Flake8 to format and lint your Python code, respectively.\nStep 6: Format on file save To run the formatter each time you save a Python file, you’ll need to modify the VS Code settings. Here’s how:\nOpen the Command Palette with Ctrl+Shift+P MacOs(Cmd+Shift+P). Type “Preferences: Open Settings (JSON)” and select it. Choose Default Settings or Workspace Settings depend on global or project specific setup. For global “Search for “Editor: Format On Save” in Command Palette search bar and check the box to enable it. Add the following lines in the JSON file for local project/workspace setup: \"python.editor.formatOnSave\": true, \"python.formatting.provider\": \"black\" This tells VS Code to run the Python formatter (which you’ve set to Black) every time you save a Python file.\nYou can do the same with Flake8 by enabling linting on save:\n\"python.linting.flake8Enabled\": true, \"python.linting.lintOnSave\": true Groovy with CodeNarc Step 1: Install Groovy Ensure you have Groovy installed on your system. You can verify the installation by running the following command in your terminal:\ngroovy --version Step 2: Install the Groovy Extension for VS Code In your build.gradle file, add:\nStep 3: Set Up CodeNarc apply plugin: 'codenarc' dependencies { codenarc 'org.codenarc:CodeNarc:1.6' } codenarc { configFile = file('config/codenarc/rules.groovy') } Create a config/codenarc/rules.groovy file in your project root directory and add the following content:\nruleset { LineLength { enabled = true priority = 1 maximumLineLength = 150 } } Now, when you run your Gradle build, CodeNarc will check your Groovy files against the rules defined in config/codenarc/rules.groovy.\nJS/TypeScript with ESLint and Prettier Step 1: Install Node.js and npm Before you install ESLint and Prettier, ensure you have Node.js and npm installed on your system. You can verify the installation by running the following commands in your terminal:\nnode --version npm --version Step 2: Install ESLint and Prettier You can install ESLint and Prettier as devDependencies in your project by running the following command in your terminal:\nnpm install eslint prettier --save-dev Step 3: Install the ESLint and Prettier Extensions for VS Code Search for ESLint and Prettier - Code formatter in the Extensions view in VS Code (View -\u003e Extensions) and install them.\nStep 4: Configure ESLint and Prettier To configure ESLint and Prettier, you need to create two configuration files, .eslintrc.json for ESLint, and .prettierrc for Prettier, in your project root directory.\nFor example, you can create an .eslintrc.json file with the following content for ESLint:\n{ \"env\": { \"browser\": true, \"es6\": true }, \"extends\": \"eslint:recommended\", \"rules\": { \"indent\": [\"error\", 2], \"linebreak-style\": [\"error\", \"unix\"], \"quotes\": [\"error\", \"double\"], \"semi\": [\"error\", \"always\"] } } And a .prettierrc file with the following content for Prettier:\n{ \"semi\": true, \"trailingComma\": \"all\", \"singleQuote\": true, \"printWidth\": 80, \"tabWidth\": 2 } Step 5: Configure VS Code Settings Go to the Settings in VS Code (File -\u003e Preferences -\u003e Settings) and search for “Format On Save.” Check the box to enable it.\nIn the settings, search for “Default Formatter” and select “Prettier - Code formatter” from the dropdown list.\nYou can also add these settings directly to your settings.json file:\n{ \"editor.formatOnSave\": true, \"editor.defaultFormatter\": \"esbenp.prettier-vscode\", \"editor.codeActionsOnSave\": { \"source.fixAll.eslint\": true }, \"[javascript]\": { \"editor.formatOnSave\": false, \"editor.defaultFormatter\": null }, \"[javascriptreact]\": { \"editor.formatOnSave\": false, \"editor.defaultFormatter\": null }, \"[typescript]\": { \"editor.formatOnSave\": false, \"editor.defaultFormatter\": null }, \"[typescriptreact]\": { \"editor.formatOnSave\": false, \"editor.defaultFormatter\": null } } These settings tell VS Code to run Prettier as the default formatter, and also to perform any auto-fixes that ESLint can handle on save.\nNow, VS Code will automatically use ESLint and Prettier to lint and format your JavaScript and TypeScript code, respectively.\n","description":"Setting Up Python and Groovy Linters and Formatters in Visual Studio Code","title":"Linters \u0026 Formatters Setup for Python, Groovy, JavaScript in VSCode","uri":"/en/posts/python-groovy-lint-format-setup/"},{"content":"MacBook Pro Specification 13-inch Apple M1 Pro M1 2020 16 GB RAM 512 GB SSD QWERTY = English/Hebrew macOS Monterey (Update always) Homebrew Install Homebrew as package manager for macOS:\n## paste in terminal and follow the instructions /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Update everything in Homebrew to recent version:\nbrew update Add additional source for casks:\nbrew tap homebrew/cask-versions Install GUI applications (read more about these in GUI Applications):\nbrew install --cask \\ appcleaner \\ all-in-one-messenger \\ anaconda \\ brewmate \\ deepl \\ discord \\ disk-inventory-x \\ docker \\ figma \\ google-chrome \\ google-drive \\ grammarly \\ iterm2 \\ itsycal \\ macx-youtube-downloader \\ mongodb-compass \\ notion \\ obs \\ postman \\ rectangle \\ sublime-text \\ syncthing \\ telegram \\ tor-browser \\ transmission \\ utm \\ viber \\ visual-studio-code \\ vlc \\ yandex-disk \\ zoom Install terminal applications (read more about these in Terminal Applications):\nbrew install \\ git \\ jupyterlab \\ ffmpeg \\ nvm Additional GUI Applications GUI Applications Google Chrome Google Chrome (web development, web browsing)\nPreferences\nset default browser always show bookmarks import bookmarks from previous machine Chrome Developer Tools\nNetwork -\u003e only “Fetch/XHR” Search Shortcuts. Add Shortucts for different search engines.\nchrome://settings/searchEngines Yandex, search only in Russia. Shortcut: vv url: https://yandex.ru/{yandex:searchPath}?text=%s\u0026{yandex:referralID}\u0026lr=101443\u0026rstr=-225 Youtube Shortcut: yy url: https://www.youtube.com/results?search_query=%s\u0026page={startPage?}\u0026utm_source=opensearch Chrome Extensions\nChatGPT for Search Engines - Show ChatGPT output on every search request DeepL Translate - AI translator DoubleSubs - dual subs on youtube/netflix + web translator Google Translate React Developer Tools Pocket - The easiest, fastest way to capture articles, videos, and more. Session Buddy (Manage Browser Tabs and Bookmarks) LanguageTool (multilingual grammar, style, and spell checker) RSS Feed Reader (Easy to subscribe/unsubscribe to blogs/no need email + iOS/Android) Inoreader (Easy to subscribe/unsubscribe to blogs/no need email + iOS/Android) 30 Seconds of Knowledge (random code snippet on a new tab) JSON Formatter picture-in-picture (youtube/video above other screens) Visual CSS Editor (Customize any website visually) Squish - AI-powered summary tool. Turn any body of text into a few sentences with one click. Zotero - Add/sync scientific PDF documents Video Downloader Plus Opus Guide (Step-by-step for instructions) Disk Inventory X Disk Inventory X (disk usage utility for macOS)\nDocker Docker (Docker, see setup)\nused for running databases (e.g. PostgreSQL, MongoDB) in container without cluttering the Mac Preferences enable “Use Docker Compose” Firefox Firefox (web development)\nVisual Studio Code Visual Studio Code (web development IDE)\nSettings / Synced\nSublime Text Sublime Text (editor)\nMaccy Maccy (clipboard manager)\nenable “Launch at Login” Rectangle Move and resize windows in macOS using keyboard shortcuts or snap areas\nhttps://rectangleapp.com OBS OBS (for video recording and live streaming)\nfor Native Mac Screen recorder Base (Canvas) 2880x1800 (Ratio: 16:10) Output 1728x1080 ### Spotify Spotify\nSoundcloud https://soundcloud.com Syncthing syncthing - Sync folders/files between devices. I use to backup all photos/video from mobile to PC\nTransmission Transmission (A torrent client that I use. Very minimal in its UI but very powerful and has all the features that I need)\nUTM UTM (Virtual machines UI using QEMU)\ndownload ubuntu for arm, doc On error with shared folder: Could not connect: Connection refused open in browser: http://127.0.0.1:9843/ For Debian install spice-webdavd for shared folder. https://packages.debian.org/search?keywords=spice-webdavd, https://github.com/utmapp/UTM/issues/1204 sudo apt install spice-vdagent spice-webdavd -y VLC VLC (video player)\nuse as default for video files Terminal Applications nvm nvm (node version manager)\njupyterlab jupyterlab (Jupyter - python development, fast code snippets)\njupyter notebook - to start jupyter notebook ffmpeg ffmpeg (Converting video and audio)\ncompress video:\nffmpeg -i input.mp4 -c:v libx264 -crf 23 -preset slow -c:a aac -b:a 192k output.mp4 # or ffmpeg -i input.mp4 output.avi convert video to .gif:\n- ffmpeg \\ -i input.mp4 \\ -ss 00:00:00.000 \\ -pix_fmt rgb24 \\ -r 10 \\ -s 960x540 \\ -t 00:00:10.000 \\ output.gif NVM for Node/npm The node version manager (NVM) is used to install and manage multiple Node versions. After you have installed it via Homebrew in a previous step, type the following commands to complete the installation:\necho \"source $(brew --prefix nvm)/nvm.sh\" \u003e\u003e ~/.zshrc source ~/.zshrc ## or alias ## zshsource Now install the latest LTS version on the command line:\nnvm install \u003clatest LTS version from https://nodejs.org/en/\u003e Afterward, check whether the installation was successful and whether the node package manager (npm) got installed along the way:\nnode -v \u0026\u0026 npm -v Update npm to its latest version:\nnpm install -g npm@latest And set defaults for npm:\nnpm set init-author-name \"Roman Kurnovskii\" npm set init-author-email \"you@example.com\" npm set init-author-url \"https://romankurnovskii.com\" If you are a library author, log in to npm too:\nnpm adduser That’s it. If you want to list all your Node.js installation, type the following:\nnvm list If you want to install a newer Node.js version, then type:\nnvm install \u003cversion\u003e --reinstall-packages-from=$(nvm current) nvm use \u003cversion\u003e nvm alias default \u003cversion\u003e Optionally install yarn if you use it as alternative to npm:\nnpm install -g yarn yarn -v If you want to list all globally installed packages, run this command:\nnpm list -g --depth=0 That’s it. You have a running version of Node.js and its package manager.\nOH MY ZSH MacOS already comes with zsh as default shell. Install Oh My Zsh for an improved (plugins, themes, …) experience. Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. It comes with a bunch of features out of the box and improves your terminal experience.\nInstall:\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Update everything (e.g. plugins) in Oh My Zsh to recent version:\nomz update Install fonts for themes:\nbrew tap homebrew/cask-fonts brew install --cask font-hack-nerd-font iTerm2 Install theme Theme description\nbrew install romkatv/powerlevel10k/powerlevel10k echo \"source $(brew --prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme\" \u003e\u003e~/.zshrc Enable suggestions git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions echo \"plugins=(zsh-autosuggestions)\" \u003e\u003e~/.zshrc Open new tab(CMD+T)/restart iTerm to proceed with theme setup.\nTerminal Script and Aliases Update .zprofile. The changes will take effect after restarting the terminal\nvi ~/.zprofile Automatic software updates Add script to zprofile that updates everything:\nUpdate, upgrade all and cleanup softwareupdate - system software update tool We can execute this command on startup, but i prefer handle it. When I kick of upd command in terminal, it will update everything I need:\nalias upd='brew update; brew upgrade; brew cu -a --cleanup -y -v; brew cleanup; softwareupdate -i -a; i' Add aliases to the latest versions pip \u0026 python\n# А # ❯ which pip # /opt/homebrew/bin/pip # ❯ which python # /opt/homebrew/anaconda3/bin//python # snippet creates python virtual env in current folder alias penv='python -m venv venv \u0026\u0026 source ./venv/bin/activate \u0026\u0026 pip install --upgrade pip \u0026\u0026 echo \"\\n\" \u003e\u003e requirements.txt \u0026\u0026 pip install -r requirements.txt \u0026\u0026 pip freeze \u003e requirements_freeze.txt \u0026\u0026 echo \"venv/\" \u003e\u003e .gitignore' alias jp=\"jupyter notebook $@\" Clean space alias clean=\"brew cleanup --prune=all; rm -rf ~/Library/Caches\" Links https://www.robinwieruch.de/mac-setup-web-development/ https://sourabhbajaj.com/mac-setup/iTerm/ack.html https://www.engineeringwithutsav.com/blog/spice-up-your-macos-terminal ","description":"How I set up my M1 MacBook Pro software development...","title":"Mac Setup 2022","uri":"/en/posts/mac-setup-development/"},{"content":"About The Moving Average Convergence Divergence (MACD) is a versatile trading indicator used in various forms of trading, including high-frequency trading (HFT).\nMACD is a trend-following momentum indicator that shows the relationship between two moving averages of a security’s price.\nCalculating Formula The MACD is calculated by subtracting the 26-period Exponential Moving Average (EMA) from the 12-period EMA. A 9-day EMA of the MACD, called the “signal line”, is then plotted on top of the MACD, functioning as a trigger for buy and sell signals.\nHere’s the formula for the MACD:\nMACD = 12-Period EMA − 26-Period EMA To calculate the signal line, you take the 9-period EMA of the MACD.\nSignal Line = 9-Period EMA of MACD Example:\nSince MACD requires 26 periods to start, we’ll calculate from the 26th minute:\nMinute Open High Low Close EMA12 EMA26 EMA9 (Signal) MACD 1 $10.0 $11.0 $9.5 $10.0 - - - - 2 $10.1 $12.1 $10.0 $12.0 - - - - 3 $12.2 $15.2 $12.0 $15.0 - - - - 4 $15.1 $15.1 $13.9 $14.0 - - - - 5 $14.1 $16.1 $14.0 $16.0 - - - - 6 $16.1 $16.1 $14.9 $15.0 - - - - 7 $15.1 $17.1 $15.0 $17.0 - - - - 8 $17.1 $17.1 $15.9 $16.0 - - - - 9 $16.1 $18.1 $16.0 $18.0 - - Starts here - 10 $18.1 $18.1 $16.9 $17.0 - - - 11 $17.1 $19.1 $17.0 $19.0 - - - 12 $19.1 $19.1 $17.9 $18.0 Starts here - - 13 $18.1 $20.1 $18.0 $20.0 - - 14 $20.1 $21.1 $20.0 $21.0 - - 15 $21.1 $21.1 $19.9 $20.0 - - 16 $20.1 $22.1 $20.0 $21.0 - - 17 $21.1 $23.1 $21.0 $22.0 - - 18 $22.1 $24.1 $22.0 $23.0 - - 19 $23.1 $25.1 $23.0 $24.0 - - 20 $24.1 $26.1 $24.0 $25.0 - - 21 $25.1 $27.1 $25.0 $26.0 - - 22 $26.1 $28.1 $26.0 $27.0 - - 23 $27.1 $29.1 $27.0 $28.0 - - 24 $28.1 $30.1 $28.0 $29.0 - - 25 $29.1 $31.1 $29.0 $30.0 - - 26 $30.1 $32.1 $30.0 $31.0 Starts here Starts here 27 $31.1 $33.1 $31.0 $32.0 28 $32.1 $34.1 $32.0 $33.0 29 $33.1 $35.1 $33.0 $34.0 30 $34.1 $36.1 $34.0 $35.0 In python it can be calculated in the following way:\nimport pandas as pd # Assuming 'df' is your DataFrame and 'Close' is the column with closing prices df['EMA12'] = df['Close'].ewm(span=12, adjust=False).mean() df['EMA26'] = df['Close'].ewm(span=26, adjust=False).mean() df['MACD'] = df['EMA12'] - df['EMA26'] df['Signal'] = df['MACD'].ewm(span=9, adjust=False).mean() Pros and Cons Pros:\nTrend Identification: MACD can identify the start of a trend, providing good entry points. Signal Line Crossovers: The MACD’s signal line can provide clear buy and sell signals. Cons:\nFalse Signals: Like any indicator, MACD can produce false signals, particularly in volatile markets. Lag: MACD can sometimes lag behind the market because it’s a trend-following indicator. It may not work well in ranging (non-trending) markets, where price movements can be random. Example of signals True Positive:\nA true positive in MACD is a situation where the MACD line crosses above the signal line and the price goes up, indicating a strong bullish signal, or the MACD line crosses below the signal line and the price goes down, indicating a strong bearish signal.\nThese signals can help traders decide when to enter or exit trades.\nFalse Positive:\nA false positive in MACD is typically a situation where the MACD line crosses above the signal line (potential buy signal), but the price does not go up, or the MACD line crosses below the signal line (potential sell signal), but the price does not go down. It’s important to confirm MACD signals with other indicators or patterns to avoid false positives.\nUse in Real Trading In a real trading scenario, traders often use MACD in conjunction with other indicators to confirm signals and minimize risks. For example, a trader may use the Relative Strength Index (RSI) together with MACD.\nIf MACD gives a buy signal (MACD line crosses above the signal line), and RSI is below 30 (indicating an oversold condition), the trader may consider this as a strong buy signal.\nPython Implementation Click here to view this notebook in full screen ","description":"A comprehensive guide to the Moving Average Convergence Divergence (MACD) trading indicator.","title":"MACD - Moving Average Convergence Divergence","uri":"/en/posts/trading-indicators/macd/"},{"content":"This article offers an example of the basic Markdown syntax that can be used and also shows whether the basic elements of HTML are decorated with CSS.\nHeaders Header 1 ======== Header 2 -------- Header 1 Header 2 # h1 ## h2 ### h3 #### h4 ##### h5 ###### h6 h1 h2 h3 h4 h5 h6 Paragraph To insert an empty string, you need to put the word wrap symbol twice (press Enter)\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur eius in labore quidem, sequi suscipit! Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquam aut commodi debitis ipsam nobis perspiciatis sequi, sint unde vitae. Images ![Image alt text](/path/to/img.jpg) ![Image alt text](/path/to/img.jpg \"title\") ![Image alt text][img] [img]: http://foo.com/img.jpg Emphasis *italic* _italic_ **bold** __bold__ ***bold italic*** ___bold italic___ ~~strikethrough~~ `code` italic italic\nbold bold bold italic bold italic\nstrikethrough\ncode\nLinks [link](http://google.com) [link][google] [google]: http://google.com \u003chttp://google.com\u003e Blockquotes The blockquote element represents the content that is quoted from another source, optionally with a quotation that must be in the element footer or cite, and optional line changes such as annotations and abbreviations.\nBlock quote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Notethat you can use the syntax Markdown inside the block quote.\nBlock quote with authorship Don’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n\u003eThis is an example quote, \u003ein which before each line \u003eangle bracket is used. \u003eThis is an example quote, in which the corner bracket is placed only before the beginning of the new paragraph. \u003eSecond paragraph. This is an example quote, in which before each line angle bracket is used.\nThis is an example quote, in which the corner bracket is placed only before the beginning of the new paragraph. Second paragraph.\n\u003e Level One Citation \u003e\u003e Second Level Citation \u003e\u003e\u003e Third Level Citation \u003e \u003eLevel One Citation Level One Citation\nSecond Level Citation\nThird Level Citation\nLevel One Citation\nTables | Name | Age | | ----- | --- | | Bob | 27 | | Alice | 23 | Name Age Bob 27 Alice 23 The cells in the delimitation row use only symbols - and :. The symbol : is placed at the beginning, at the end, or on both sides of the cell contents of the dividing row to indicate the alignment of the text in the corresponding column on the left, right side, or center.\n| Column on the left | Column on the right | Column on the center | | :----------------- | ------------------: | :------------------: | | Text | Text | Text | Column on the left Column on the right Column on the center Text Text Text Markdown inside the table | Italics | Bold | Code | | --------- | -------- | ------ | | *italics* | **bold** | `code` | Italics Bold Code italics bold code Code Blocks Code block with inverted quotes \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eExample HTML5 Document\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eTest\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Code block with four spaces indent \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eExample HTML5 Document\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eTest\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Code Unit with Hugo Internal Shorted Backlight \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eExample HTML5 Document\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eTest\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Lists * Item 1 * Item 2 - Item 1 - Item 2 - [ ] Checkbox off - [x] Checkbox on 1. Item 1 2. Item 2 Item 1\nItem 2\nItem 1\nItem 2\nCheckbox off\nCheckbox on\nItem 1 Item 2 Make the headers uniform. At the end of the title, do not put a point.\nCorrect Wrong Getting the Creating a Cluster Get the Creating a Cluster Get Create Cluster If you want to describe the sequence of actions, use the numbered list. At the end of the lines, put a period.\nIf the order of items is not important, use the marked list. Make it one of the ways:\nIf the entries in the list are separate sentences, start them with a capital letter and put a period at the end. If the introductory phrase and the list make up one sentence, the entries in the list should start with a lowercase letter and end with a semicolon. The last list item ends with a dot. If the list consists of parameter names or values (without explanation), do not put characters at the end of lines. Ordered list First item Second item Third item To create an ordered numbered list, use the digits with the symbol . or ). The recommended markup format is 1 and ..\n1. First item 1. Second item 1. Third item First item Second item Third item To create a nested ordered list, add a indent to the entries in the child list. The allowed indentation is from two to five spaces. The recommended indent size is four spaces.\nFor example, markup:\n1. First paragraph 1. Sub-paragraph 1. Sub-paragraph 1. Second paragraph First paragraph Sub-paragraph Sub-paragraph Second paragraph Unordered list List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other elements - abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nMost \u003cmark\u003esalamanders\u003c/mark\u003e are nocturnal 💡 Data structure is a container that stores data in a specific format. This container decides how the outside world can read or change this data.\nMath LaTeX syntax Math Element Code Pronunciation $x_{12345}$ $x_{12345}$ $\\quad x_12$ $\\quad x_12$ $a_{ij}b_{kl}=\\delta_{i}^{l}$ $a_{ij}b_{kl}=\\delta_{i}^{l}$ $\\alpha$ $\\alpha$ \\alpha $\\beta$ $\\beta$ \\beta $\\gamma$ $\\gamma$ \\gamma $\\delta$ $\\delta$ \\delta $\\epsilon$ $\\epsilon$ \\epsilon $\\pi$ $\\pi$ \\pi $\\theta$ $\\theta$ \\theta $\\lambda$ $\\lambda$ \\lambda $\\mu$ $\\mu$ \\mu $\\sigma$ $\\sigma$ \\sigma $\\omega$ $\\omega$ \\omega $\\Gamma$ $\\Gamma$ \\Gamma $\\Delta$ $\\Delta$ \\Delta $\\Sigma$ $\\Sigma$ \\Sigma $\\Theta$ $\\Theta$ \\Theta $\\Omega$ $\\Omega$ \\Omega $\\infty$ $\\infty$ \\infty $\\sum$ $\\sum$ \\sum $\\prod$ $\\prod$ \\prod $\\int$ $\\int$ \\int $\\oint$ $\\oint$ \\oint $\\partial$ $\\partial$ \\partial $\\nabla$ $\\nabla$ \\nabla $\\pm$ $\\pm$ \\pm $\\times$ $\\times$ \\times $\\div$ $\\div$ \\div $\\approx$ $\\approx$ \\approx $\\geq$ $\\geq$ \\geq $\\leq$ $\\leq$ \\leq $\\neq$ $\\neq$ \\neq Resources Style from Google The above quote is taken from Rob Pike’s book talk during Gopherfest, November 18, 2015. ↩︎\n","description":"Markdown cheatsheet","title":"Markdown Cheat Sheet","uri":"/en/posts/markdown-syntax/"},{"content":"Auditing Packages dpkg --verify or\ndpkg -V # dpkg -V ??5?????? /lib/systemd/system/ssh.service ??5?????? c /etc/libvirt/qemu/networks/default.xml ‘ssh.service’: reports a change to SSH’s service file that the administrator made to the packaged file instead of using an appropriate /etc/systemd/system/ssh.service override ‘c’ letter: legitimately modified Monitoring Files AIDE apt install aide aideinit # first db init aideinit creates a cron job in etc/cron.daily/aide\nDB: /var/lib/aide/aide.db\nWhen changes are detected, AIDE records them in log files /var/log/aide/*.log\nlogcheck Monitors log files every hour by default and sends unusual log messages in emails to the administrator for further analysis\nsudo apt install logcheck sudo -u logcheck logcheck -o debian@debian:~$ sudo -u logcheck logcheck -help usage: logcheck [-c CFG] [-d] [-h] [-H HOST] [-l LOG] [-L CFG] [-D DIR] [-m MAIL] [-o] [-r DIR] [-s|-p|-w] [-R] [-S DIR] [-t] [-T] [-u] -c CFG = override default configuration file -d = debug mode -h = print this usage information and exit -H HOST = use this hostname in the subject of any generated mail -l LOG = check the specified logfile -L CFG = override default logfiles list -D DIR = override default logfiles lists directory -m MAIL = send the report to the specified recipient -o = send the report to stdout, no mail will be sent -p = use the \"paranoid\" runlevel -r DIR = override default rules directory -R = adds \"Reboot:\" to email subject -s = use the \"server\" runlevel -S DIR = override default state directory -t = testing mode, don't update the logfile offsets -T = do not remove the TMPDIR -u = enable syslog-summary -v = print version -w = use the \"workstation\" runlevel Save log to some dir path mkdir -p /data/ sudo -u logcheck logcheck -o \u003e /data/$(date +\"%m-%d-%Y-%T\").log Run every hour Create script, make it executable and drop it in /etc/cron.hourly. Resources https://portal.offsec.com/courses/pen-103/books-and-videos/modal/modules/securing-and-monitoring-kali-linux/exercises/monitoring-kali-services https://www.digitalocean.com/community/tutorials/iptables-essentials-common-firewall-rules-and-commands#listing-and-deleting-rules ","description":"Monitoring","title":"Monitoring Linux OS","uri":"/en/posts/linux/debian-setup/"},{"content":"Scanning Options Nmap Option Description 10.10.10.0/24 Target network range. -sn Disables port scanning. -Pn Disables ICMP Echo Requests -n Disables DNS Resolution. -PE Performs the ping scan by using ICMP Echo Requests against the target. --packet-trace Shows all packets sent and received. --reason Displays the reason for a specific result. --disable-arp-ping Disables ARP Ping Requests. --top-ports=\u003cnum\u003e Scans the specified top ports that have been defined as most frequent. -p- Scan all ports. -p22-110 Scan all ports between 22 and 110. -p22,25 Scans only the specified ports 22 and 25. -F Scans top 100 ports. -sS Performs an TCP SYN-Scan. -sA Performs an TCP ACK-Scan. -sU Performs an UDP Scan. -sV Scans the discovered services for their versions. -sC Perform a Script Scan with scripts that are categorized as “default”. --script \u003cscript\u003e Performs a Script Scan by using the specified scripts. -O Performs an OS Detection Scan to determine the OS of the target. -A Performs OS Detection, Service Detection, and traceroute scans. -D RND:5 Sets the number of random Decoys that will be used to scan the target. -e Specifies the network interface that is used for the scan. -S 10.10.10.200 Specifies the source IP address for the scan. -g Specifies the source port for the scan. --dns-server \u003cns\u003e DNS resolution is performed by using a specified name server. Output Options Nmap Option Description -oA filename Stores the results in all available formats starting with the name of “filename”. -oN filename Stores the results in normal format with the name “filename”. -oG filename Stores the results in “grepable” format with the name of “filename”. -oX filename Stores the results in XML format with the name of “filename”. Performance Options Nmap Option Description --max-retries \u003cnum\u003e Sets the number of retries for scans of specific ports. --stats-every=5s Displays scan’s status every 5 seconds. -v/-vv Displays verbose output during the scan. --initial-rtt-timeout 50ms Sets the specified time value as initial RTT timeout. --max-rtt-timeout 100ms Sets the specified time value as maximum RTT timeout. --min-rate 300 Sets the number of packets that will be sent simultaneously. -T \u003c0-5\u003e Specifies the specific timing template. ","description":"nmap - cheatsheet","title":"nmap - cheatsheet","uri":"/en/posts/linux/nmap-cheatsheet/"},{"content":"Stage 1: Implementation and Greedy 1809A - Garland (implementation, 800) 1807A - Plus or Minus (implementation, 800) 1807B - Grab the Candies (greedy, 800) 1807C - Find and Replace (greedy, implementation, strings, 800) 1798A - Showstopper (greedy, implementation, sortings, 800) 1799A - Recent Actions (data structures, greedy, implementation, math, 800) 1788A - One and Two (brute force, implementation, math, 800) 1778A - Flip Flop Sum (greedy, implementation, 800) 1772A - A+B? (implementation, 800) 1796B - Asterisk-Minor Template (implementation, strings, 1000) Stage 2: Combinatorics and Geometry 1777A - Everybody Likes Good Arrays! (greedy, math, 800) 1787A - Exponential Equation (constructive algorithms, math, 800) 1777B - Emordnilap (combinatorics, greedy, math, 900) 1773F - Football (constructive algorithms, 800) 1774A - Add Plus Minus Sign (constructive algorithms, math, 800) 1776A - Walking Boy (greedy, 800) 1776L - Controllers (binary search, math, 1500) ","description":"Codeforces contests solutions","title":"Plan","uri":"/en/tracks/algorithms-101/codeforces/plan/"},{"content":"Q1 # Problem Difficulty Topics 1 1. Two Sum Easy Array, Hash Table 2 13. Roman to Integer Easy Hash Table, Math, String 3 14. Longest Common Prefix Easy String 4 20. Valid Parentheses Easy String, Stack 5 21. Merge Two Sorted Lists Easy Linked List, Recursion 6 26. Remove Duplicates from Sorted Array Easy Array, Two pointers 7 66. Plus One Easy Array, Math 8 69. Sqrt(x) Easy Math, Binary Search, 9 70. Climbing Stairs Easy Math, Dynamic Programming, Memoization 10 88. Merge Sorted Array Easy Array, Two pointers, Sorting 11 94. Binary Tree Inorder Traversal Easy Stack, Tree, Depth-First Search, Binary Tree 12 2. Add Two Numbers Medium Linked List, Math, Recursion 13 3. Longest Substring Without Repeating Characters Medium Hash Table, String, Sliding Window 14 5. Longest Palindromic Substring Medium String, Dynamic Programming 15 7. Reverse Integer Medium Math 16 11. Container With Most Water Medium Array, Two pointers, Greedy 17 15. 3Sum Medium Array, Two pointers, Sorting 18 17. Letter Combinations of a Phone Number Medium Hash Table, String, Backtracking 19 19. Remove Nth Node From End of List Medium Linked List, Two pointers 20 22. Generate Parentheses Medium String, Dynamic Programming, Backtracking Intermediate results Appeared intuitive understanding of algorithms. In most cases, one hour is not enough to solve the problem. If you start sketching an intuitive algorithm, then in the process comes an understanding and an improved solution.\nUpdate plan by solution:\nAfter reading, if there is no exact solution: Assume/analyze/draw the proposed algorithm View solutions with explanations Compare with your own / analyze Code Q2 # Problem Difficulty Topics 21 28. Find the Index of the First Occurrence in a String Medium String, Two pointers, String Matching 22 29. Divide Two Integers Medium Math, Bit Manipulation 23 33. Search in Rotated Sorted Array Medium Array, Binary Search, 24 34. Find First and Last Position of Element in Sorted Array Medium Array, Binary Search, 25 36. Valid Sudoku Medium Array, Hash Table, Matrix 26 38. Count and Say Medium String 27 46. Permutations Medium Array, Backtracking 28 48. Rotate Image Medium Array, Math, Matrix 29 49. Group Anagrams Medium Array, Hash Table, String, Sorting 30 50. Pow(x, n) Medium Math, Recursion 31 53. Maximum Subarray Medium Array, Divide and Conquer, Dynamic Programming Intermediate results Revise training tactics. Prepare list of top coding patterns.\nPractice on each coding pattern.\nQ3 # Problem Difficulty Topics 32 55. Jump Game Medium Array, Greedy, Dynamic Programming 33 56. Merge Intervals Medium Array, Sorting, 34 62. Unique Paths Medium Math, Dynamic Programming, Combinatorics] 35 73. Set Matrix Zeroes Medium Array, Hash Table, Matrix 36 75. Sort Colors Medium Array, Two Pointers, Sorting 37 78. Subsets Medium Array, Backtracking, Bit Manipulation Started participating in contests.\nLinks Top Interview 150 LeetCode Companies problems ","description":"","title":"Plan","uri":"/en/tracks/algorithms-101/plan/"},{"content":" Docs EN | RU Posts EN | RU ","description":"","title":"Posts Archive","uri":"/en/posts/archive/"},{"content":"Lab Process Amazon SNS Notifications with AWS Lambda Creating an Amazon SNS Topic 1. In the AWS Management Console search bar, enter SNS, and click the Simple Notification Service result under Services:\nIn the left-hand side menu, click Topics: If you can’t see the left-hand menu, to expand it, click the following:\nClick Create topic: In the Create topic form, ensure to have selected the Standard type, and enter the following values accepting the defaults for values not specified: Name: lab-topic You can leave the Display name field empty for this Lab. When you create topics where the recipients receive messages over SMS (Short Message Service) you are required to provide a value.\nAt the bottom of the form, click Create topic: Creating an AWS Lambda Function 1. In the AWS Management Console search bar, enter Lambda, and click the Lambda result under Services:\nYou will see the Functions list page.\nClick Create function: In the Create function form, ensure Author from scratch is selected: In the Create function form, enter lab-function in the Function name field: In the Create function form, in the Runtime drop-down, select Python 3.8: In the Create function form, click Change default execution role and select Use an existing role: In the Existing role drop-down, select lambda_s3_put: The role you have selected has been pre-populated for this Lab. Usually when using Lambda you will create a specific role for your function.\nTo create your function, click Create function: Implementing an AWS Lambda Function to Upload to S3 Scroll down to the Code source section and double-click lambda_function.py.\nIn the code editor, replace the contents with the following Python code:\nfrom datetime import datetime import boto3 account_id = boto3.client('sts').get_caller_identity()[\"Account\"] s3 = boto3.resource('s3') def lambda_handler(event, context): record = event['Records'][0]['Sns'] message = record['Message'] subject = record['Subject'] print(\"Subject: %s\" % subject) print(\"Message: %s\" % message) s3.Object(f\"sns-lab-bucket-{account_id}\", subject).put(Body=message) return \"SUCCESS\" The function code you entered processes a message from SNS. The code uploads a file into an S3 Bucket which was pre-created as a part of this lab. The name of the file will be the subject of the message and the content of the file will be the message body.\nYou can use a Lambda function to do many different things. Some examples include:\nProcess web-requests Put a custom metric into AWS CloudWatch Add or update a record in a database Post a web-request to an external service To save your changes and deploy your function, at the top of the Code source section, click Deploy: You will see a notification that your function has been deployed:\n4. To add an SNS trigger, in the Function overview section, click Add trigger:\n​\nIn the Select a trigger dropdown, enter SNS, and click the SNS result: ​\nIn the SNS topic drop-down, select lab-topic: ​\nThe SNS topic field will be filled with the ARN (Amazon Resource Name) of your SNS topic.\nTo add your SNS trigger, click Add: ​\nYou will see a notification that your trigger has been added:\nIn SNS terminology, by adding an SNS trigger you have “subscribed” your Lambda function to the SNS topic.\nPublishing a Message to an Amazon SNS Topic Navigate to the AWS SNS service.\nIn the left-hand side menu, click Topics:\nIn the list of topics, click lab-topic: Click Publish message: In the Message details section of the form, in the Subject field, enter lab-subject: In the Message body section of the form, in the Message body to send to the endpoint textbox, enter Lab Message: Usually when you publish a message to an SNS topic, you would include meaningful data in the message body. The content of the message body is often called the “payload” of a message. In SNS, the payload can be plain text, or it can be a structured payload such as JSON, XML, or some other format. The service or device subscribed to your topic can use the data in the payload to determine what action to take in response to receiving a message.\nTo publish your message, click Publish message: You will see a notification, similar to the following, confirming your message has been published:\nVerifying the AWS Lambda Function Processed the Message 1. In the AWS Management Console search bar, enter S3, and click the S3 result under Services:\nIn the list of S3 Buckets, click the Bucket beginning with sns-lab-bucket-: In the list of objects you will see a file called lab-subject: This file was uploaded to the S3 bucket by your Lambda function.\n","description":"Process Amazon SNS Notifications with AWS Lambda","title":"Process Amazon SNS Notifications with AWS Lambda","uri":"/en/tracks/aws-certified-developer-associate/sns/aws-lambda-sns-notifications/"},{"content":"« Left Shift Moves the bits of its first operand to the left by the number of places specified in its second operand.\nFormula: $a « n = a * 2^n$\nShifting a single bit to the left by one place doubles its value. Shifting to two places to the left by one place quadruple its value. \u003e\u003e\u003e 100 \u003c\u003c 1 200 \u003e\u003e\u003e 100 \u003c\u003c 2 400 \u003e\u003e\u003e 100 \u003c\u003c 3 800 » Right Shift The rightmost bits always get dropped. Every time you shift a bit to the right by one position, you halve its underlying value. Formula: $a » n = [a/2^n]$\n\u003e\u003e\u003e 100 \u003e\u003e 1 50 \u003e\u003e\u003e 100 \u003e\u003e 2 25 \u003e\u003e\u003e 100 \u003e\u003e 3 12 \u003e\u003e\u003e 5 \u003e\u003e 10 0 the right shift operator automatically floors the result. \u003e\u003e\u003e 5 \u003e\u003e 1 # Bitwise right shift 2 \u003e\u003e\u003e 5 // 2 # Floor division (integer division) 2 \u003e\u003e\u003e 5 / 2 # Floating-point division 2.5 \u003e\u003e\u003e -2 \u003e\u003e 5 -1 \u0026 Operator 0 \u0026 0 = 0 0 \u0026 1 = 0 1 \u0026 0 = 0 1 \u0026 1 = 0 For numbers:\n27 \u0026 23\nCovert to binary\n27 -\u003e 11011 23 -\u003e 10111\nturns to (in binary)\n11011 \u0026 10111 = 10011 -\u003e 19\n27 \u0026 23 = 19\nResources https://realpython.com/python-bitwise-operators/ ","description":"Python bitwise operators","title":"Python bitwise operators","uri":"/en/posts/python-bitwise-operators/"},{"content":"def sum_of_digits(n): sum = 0 while n: sum += n % 10 n //= 10 return sum # Single line comments start with a number symbol. \"\"\" Multiline strings can be written using three \"s, and are often used as documentation. \"\"\" #################################################### ## 1. Primitive Datatypes and Operators #################################################### # You have numbers 3 # =\u003e 3 # Math is what you would expect 1 + 1 # =\u003e 2 8 - 1 # =\u003e 7 10 * 2 # =\u003e 20 35 / 5 # =\u003e 7.0 # Integer division rounds down for both positive and negative numbers. 5 // 3 # =\u003e 1 -5 // 3 # =\u003e -2 5.0 // 3.0 # =\u003e 1.0 # works on floats too -5.0 // 3.0 # =\u003e -2.0 # The result of division is always a float 10.0 / 3 # =\u003e 3.3333333333333335 # Modulo operation 7 % 3 # =\u003e 1 # i % j have the same sign as j, unlike C -7 % 3 # =\u003e 2 # Exponentiation (x**y, x to the yth power) 2**3 # =\u003e 8 # Enforce precedence with parentheses 1 + 3 * 2 # =\u003e 7 (1 + 3) * 2 # =\u003e 8 # Boolean values are primitives (Note: the capitalization) True # =\u003e True False # =\u003e False # negate with not not True # =\u003e False not False # =\u003e True # Boolean Operators # Note \"and\" and \"or\" are case-sensitive True and False # =\u003e False False or True # =\u003e True # True and False are actually 1 and 0 but with different keywords True + True # =\u003e 2 True * 8 # =\u003e 8 False - 5 # =\u003e -5 # Comparison operators look at the numerical value of True and False 0 == False # =\u003e True 1 == True # =\u003e True 2 == True # =\u003e False -5 != False # =\u003e True # None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False. # All other values are True bool(0) # =\u003e False bool(\"\") # =\u003e False bool([]) # =\u003e False bool({}) # =\u003e False bool(()) # =\u003e False bool(set()) # =\u003e False bool(4) # =\u003e True bool(-6) # =\u003e True # Using boolean logical operators on ints casts them to booleans for evaluation, but their non-cast value is returned # Don't mix up with bool(ints) and bitwise and/or (\u0026,|) bool(0) # =\u003e False bool(2) # =\u003e True 0 and 2 # =\u003e 0 bool(-5) # =\u003e True bool(2) # =\u003e True -5 or 0 # =\u003e -5 # Equality is == 1 == 1 # =\u003e True 2 == 1 # =\u003e False # Inequality is != 1 != 1 # =\u003e False 2 != 1 # =\u003e True # More comparisons 1 \u003c 10 # =\u003e True 1 \u003e 10 # =\u003e False 2 \u003c= 2 # =\u003e True 2 \u003e= 2 # =\u003e True # Seeing whether a value is in a range 1 \u003c 2 and 2 \u003c 3 # =\u003e True 2 \u003c 3 and 3 \u003c 2 # =\u003e False # Chaining makes this look nicer 1 \u003c 2 \u003c 3 # =\u003e True 2 \u003c 3 \u003c 2 # =\u003e False # (is vs. ==) is checks if two variables refer to the same object, but == checks # if the objects pointed to have the same values. a = [1, 2, 3, 4] # Point a at a new list, [1, 2, 3, 4] b = a # Point b at what a is pointing to b is a # =\u003e True, a and b refer to the same object b == a # =\u003e True, a's and b's objects are equal b = [1, 2, 3, 4] # Point b at a new list, [1, 2, 3, 4] b is a # =\u003e False, a and b do not refer to the same object b == a # =\u003e True, a's and b's objects are equal # Strings are created with \" or ' \"This is a string.\" 'This is also a string.' # Strings can be added too \"Hello \" + \"world!\" # =\u003e \"Hello world!\" # String literals (but not variables) can be concatenated without using '+' \"Hello \" \"world!\" # =\u003e \"Hello world!\" # A string can be treated like a list of characters \"Hello world!\"[0] # =\u003e 'H' # You can find the length of a string len(\"This is a string\") # =\u003e 16 # You can also format using f-strings or formatted string literals (in Python 3.6+) name = \"Reiko\" f\"She said her name is {name}.\" # =\u003e \"She said her name is Reiko\" # You can basically put any Python expression inside the braces and it will be output in the string. f\"{name} is {len(name)} characters long.\" # =\u003e \"Reiko is 5 characters long.\" # None is an object None # =\u003e None # Don't use the equality \"==\" symbol to compare objects to None # Use \"is\" instead. This checks for equality of object identity. \"etc\" is None # =\u003e False None is None # =\u003e True # None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False. # All other values are True bool(0) # =\u003e False bool(\"\") # =\u003e False bool([]) # =\u003e False bool({}) # =\u003e False bool(()) # =\u003e False bool(set()) # =\u003e False #################################################### ## 2. Variables and Collections #################################################### # Python has a print function print(\"I'm Python. Nice to meet you!\") # =\u003e I'm Python. Nice to meet you! # By default the print function also prints out a newline at the end. # Use the optional argument end to change the end string. print(\"Hello, World\", end=\"!\") # =\u003e Hello, World! # Simple way to get input data from console input_string_var = input(\"Enter some data: \") # Returns the data as a string # There are no declarations, only assignments. # Convention is to use lower_case_with_underscores some_var = 5 some_var # =\u003e 5 # Accessing a previously unassigned variable is an exception. # See Control Flow to learn more about exception handling. some_unknown_var # Raises a NameError # if can be used as an expression # Equivalent of C's '?:' ternary operator \"yay!\" if 0 \u003e 1 else \"nay!\" # =\u003e \"nay!\" # Lists store sequences li = [] # You can start with a prefilled list other_li = [4, 5, 6] # Add stuff to the end of a list with append li.append(1) # li is now [1] li.append(2) # li is now [1, 2] li.append(4) # li is now [1, 2, 4] li.append(3) # li is now [1, 2, 4, 3] # Remove from the end with pop li.pop() # =\u003e 3 and li is now [1, 2, 4] # Let's put it back li.append(3) # li is now [1, 2, 4, 3] again. # Access a list like you would any array li[0] # =\u003e 1 # Look at the last element li[-1] # =\u003e 3 # Looking out of bounds is an IndexError li[4] # Raises an IndexError # You can look at ranges with slice syntax. # The start index is included, the end index is not # (It's a closed/open range for you mathy types.) li[1:3] # Return list from index 1 to 3 =\u003e [2, 4] li[2:] # Return list starting from index 2 =\u003e [4, 3] li[:3] # Return list from beginning until index 3 =\u003e [1, 2, 4] li[::2] # Return list selecting every second entry =\u003e [1, 4] li[::-1] # Return list in reverse order =\u003e [3, 4, 2, 1] # Use any combination of these to make advanced slices # li[start:end:step] # Make a one layer deep copy using slices li2 = li[:] # =\u003e li2 = [1, 2, 4, 3] but (li2 is li) will result in false. # Remove arbitrary elements from a list with \"del\" del li[2] # li is now [1, 2, 3] # Remove first occurrence of a value li.remove(2) # li is now [1, 3] li.remove(2) # Raises a ValueError as 2 is not in the list # Insert an element at a specific index li.insert(1, 2) # li is now [1, 2, 3] again # Get the index of the first item found matching the argument li.index(2) # =\u003e 1 li.index(4) # Raises a ValueError as 4 is not in the list # You can add lists # Note: values for li and for other_li are not modified. li + other_li # =\u003e [1, 2, 3, 4, 5, 6] # Concatenate lists with \"extend()\" li.extend(other_li) # Now li is [1, 2, 3, 4, 5, 6] # Check for existence in a list with \"in\" 1 in li # =\u003e True # Examine the length with \"len()\" len(li) # =\u003e 6 # Tuples are like lists but are immutable. tup = (1, 2, 3) tup[0] # =\u003e 1 tup[0] = 3 # Raises a TypeError # Note that a tuple of length one has to have a comma after the last element but # tuples of other lengths, even zero, do not. type((1)) # =\u003e \u003cclass 'int'\u003e type((1,)) # =\u003e \u003cclass 'tuple'\u003e type(()) # =\u003e \u003cclass 'tuple'\u003e # You can do most of the list operations on tuples too len(tup) # =\u003e 3 tup + (4, 5, 6) # =\u003e (1, 2, 3, 4, 5, 6) tup[:2] # =\u003e (1, 2) 2 in tup # =\u003e True # You can unpack tuples (or lists) into variables a, b, c = (1, 2, 3) # a is now 1, b is now 2 and c is now 3 # You can also do extended unpacking a, *b, c = (1, 2, 3, 4) # a is now 1, b is now [2, 3] and c is now 4 # Tuples are created by default if you leave out the parentheses d, e, f = 4, 5, 6 # tuple 4, 5, 6 is unpacked into variables d, e and f # respectively such that d = 4, e = 5 and f = 6 # Now look how easy it is to swap two values e, d = d, e # d is now 5 and e is now 4 # Dictionaries store mappings from keys to values empty_dict = {} # Here is a prefilled dictionary filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3} # Note keys for dictionaries have to be immutable types. This is to ensure that # the key can be converted to a constant hash value for quick look-ups. # Immutable types include ints, floats, strings, tuples. invalid_dict = {[1,2,3]: \"123\"} # =\u003e Raises a TypeError: unhashable type: 'list' valid_dict = {(1,2,3):[1,2,3]} # Values can be of any type, however. # Look up values with [] filled_dict[\"one\"] # =\u003e 1 # Get all keys as an iterable with \"keys()\". We need to wrap the call in list() # to turn it into a list. We'll talk about those later. Note - for Python # versions \u003c3.7, dictionary key ordering is not guaranteed. Your results might # not match the example below exactly. However, as of Python 3.7, dictionary # items maintain the order at which they are inserted into the dictionary. list(filled_dict.keys()) # =\u003e [\"three\", \"two\", \"one\"] in Python \u003c3.7 list(filled_dict.keys()) # =\u003e [\"one\", \"two\", \"three\"] in Python 3.7+ # Get all values as an iterable with \"values()\". Once again we need to wrap it # in list() to get it out of the iterable. Note - Same as above regarding key # ordering. list(filled_dict.values()) # =\u003e [3, 2, 1] in Python \u003c3.7 list(filled_dict.values()) # =\u003e [1, 2, 3] in Python 3.7+ # Check for existence of keys in a dictionary with \"in\" \"one\" in filled_dict # =\u003e True 1 in filled_dict # =\u003e False # Looking up a non-existing key is a KeyError filled_dict[\"four\"] # KeyError # Use \"get()\" method to avoid the KeyError filled_dict.get(\"one\") # =\u003e 1 filled_dict.get(\"four\") # =\u003e None # The get method supports a default argument when the value is missing filled_dict.get(\"one\", 4) # =\u003e 1 filled_dict.get(\"four\", 4) # =\u003e 4 # \"setdefault()\" inserts into a dictionary only if the given key isn't present filled_dict.setdefault(\"five\", 5) # filled_dict[\"five\"] is set to 5 filled_dict.setdefault(\"five\", 6) # filled_dict[\"five\"] is still 5 # Adding to a dictionary filled_dict.update({\"four\":4}) # =\u003e {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4} filled_dict[\"four\"] = 4 # another way to add to dict # Remove keys from a dictionary with del del filled_dict[\"one\"] # Removes the key \"one\" from filled dict # From Python 3.5 you can also use the additional unpacking options {'a': 1, **{'b': 2}} # =\u003e {'a': 1, 'b': 2} {'a': 1, **{'a': 2}} # =\u003e {'a': 2} # Sets store ... well sets empty_set = set() # Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry. some_set = {1, 1, 2, 2, 3, 4} # some_set is now {1, 2, 3, 4} # Similar to keys of a dictionary, elements of a set have to be immutable. invalid_set = {[1], 1} # =\u003e Raises a TypeError: unhashable type: 'list' valid_set = {(1,), 1} # Add one more item to the set filled_set = some_set filled_set.add(5) # filled_set is now {1, 2, 3, 4, 5} # Sets do not have duplicate elements filled_set.add(5) # it remains as before {1, 2, 3, 4, 5} # Do set intersection with \u0026 other_set = {3, 4, 5, 6} filled_set \u0026 other_set # =\u003e {3, 4, 5} # Do set union with | filled_set | other_set # =\u003e {1, 2, 3, 4, 5, 6} # Do set difference with - {1, 2, 3, 4} - {2, 3, 5} # =\u003e {1, 4} # Do set symmetric difference with ^ {1, 2, 3, 4} ^ {2, 3, 5} # =\u003e {1, 4, 5} # Check if set on the left is a superset of set on the right {1, 2} \u003e= {1, 2, 3} # =\u003e False # Check if set on the left is a subset of set on the right {1, 2} \u003c= {1, 2, 3} # =\u003e True # Check for existence in a set with in 2 in filled_set # =\u003e True 10 in filled_set # =\u003e False # Make a one layer deep copy filled_set = some_set.copy() # filled_set is {1, 2, 3, 4, 5} filled_set is some_set # =\u003e False #################################################### ## 3. Control Flow and Iterables #################################################### # Let's just make a variable some_var = 5 # Here is an if statement. Indentation is significant in Python! # Convention is to use four spaces, not tabs. # This prints \"some_var is smaller than 10\" if some_var \u003e 10: print(\"some_var is totally bigger than 10.\") elif some_var \u003c 10: # This elif clause is optional. print(\"some_var is smaller than 10.\") else: # This is optional too. print(\"some_var is indeed 10.\") \"\"\" For loops iterate over lists prints: dog is a mammal cat is a mammal mouse is a mammal \"\"\" for animal in [\"dog\", \"cat\", \"mouse\"]: # You can use format() to interpolate formatted strings print(\"{} is a mammal\".format(animal)) \"\"\" \"range(number)\" returns an iterable of numbers from zero to the given number prints: 0 1 2 3 \"\"\" for i in range(4): print(i) \"\"\" \"range(lower, upper)\" returns an iterable of numbers from the lower number to the upper number prints: 4 5 6 7 \"\"\" for i in range(4, 8): print(i) \"\"\" \"range(lower, upper, step)\" returns an iterable of numbers from the lower number to the upper number, while incrementing by step. If step is not indicated, the default value is 1. prints: 4 6 \"\"\" for i in range(4, 8, 2): print(i) \"\"\" To loop over a list, and retrieve both the index and the value of each item in the list prints: 0 dog 1 cat 2 mouse \"\"\" animals = [\"dog\", \"cat\", \"mouse\"] for i, value in enumerate(animals): print(i, value) \"\"\" While loops go until a condition is no longer met. prints: 0 1 2 3 \"\"\" x = 0 while x \u003c 4: print(x) x += 1 # Shorthand for x = x + 1 # Handle exceptions with a try/except block try: # Use \"raise\" to raise an error raise IndexError(\"This is an index error\") except IndexError as e: pass # Pass is just a no-op. Usually you would do recovery here. except (TypeError, NameError): pass # Multiple exceptions can be handled together, if required. else: # Optional clause to the try/except block. Must follow all except blocks print(\"All good!\") # Runs only if the code in try raises no exceptions finally: # Execute under all circumstances print(\"We can clean up resources here\") # Instead of try/finally to cleanup resources you can use a with statement with open(\"myfile.txt\") as f: for line in f: print(line) # Writing to a file contents = {\"aa\": 12, \"bb\": 21} with open(\"myfile1.txt\", \"w+\") as file: file.write(str(contents)) # writes a string to a file with open(\"myfile2.txt\", \"w+\") as file: file.write(json.dumps(contents)) # writes an object to a file # Reading from a file with open('myfile1.txt', \"r+\") as file: contents = file.read() # reads a string from a file print(contents) # print: {\"aa\": 12, \"bb\": 21} with open('myfile2.txt', \"r+\") as file: contents = json.load(file) # reads a json object from a file print(contents) # print: {\"aa\": 12, \"bb\": 21} # Python offers a fundamental abstraction called the Iterable. # An iterable is an object that can be treated as a sequence. # The object returned by the range function, is an iterable. filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3} our_iterable = filled_dict.keys() print(our_iterable) # =\u003e dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface. # We can loop over it. for i in our_iterable: print(i) # Prints one, two, three # However we cannot address elements by index. our_iterable[1] # Raises a TypeError # An iterable is an object that knows how to create an iterator. our_iterator = iter(our_iterable) # Our iterator is an object that can remember the state as we traverse through it. # We get the next object with \"next()\". next(our_iterator) # =\u003e \"one\" # It maintains state as we iterate. next(our_iterator) # =\u003e \"two\" next(our_iterator) # =\u003e \"three\" # After the iterator has returned all of its data, it raises a StopIteration exception next(our_iterator) # Raises StopIteration # We can also loop over it, in fact, \"for\" does this implicitly! our_iterator = iter(our_iterable) for i in our_iterator: print(i) # Prints one, two, three # You can grab all the elements of an iterable or iterator by calling list() on it. list(our_iterable) # =\u003e Returns [\"one\", \"two\", \"three\"] list(our_iterator) # =\u003e Returns [] because state is saved #################################################### ## 4. Functions #################################################### # Use \"def\" to create new functions def add(x, y): print(\"x is {} and y is {}\".format(x, y)) return x + y # Return values with a return statement # Calling functions with parameters add(5, 6) # =\u003e prints out \"x is 5 and y is 6\" and returns 11 # Another way to call functions is with keyword arguments add(y=6, x=5) # Keyword arguments can arrive in any order. # You can define functions that take a variable number of # positional arguments def varargs(*args): return args varargs(1, 2, 3) # =\u003e (1, 2, 3) # You can define functions that take a variable number of # keyword arguments, as well def keyword_args(**kwargs): return kwargs # Let's call it to see what happens keyword_args(big=\"foot\", loch=\"ness\") # =\u003e {\"big\": \"foot\", \"loch\": \"ness\"} # You can do both at once, if you like def all_the_args(*args, **kwargs): print(args) print(kwargs) \"\"\" all_the_args(1, 2, a=3, b=4) prints: (1, 2) {\"a\": 3, \"b\": 4} \"\"\" # When calling functions, you can do the opposite of args/kwargs! # Use * to expand tuples and use ** to expand kwargs. args = (1, 2, 3, 4) kwargs = {\"a\": 3, \"b\": 4} all_the_args(*args) # equivalent to all_the_args(1, 2, 3, 4) all_the_args(**kwargs) # equivalent to all_the_args(a=3, b=4) all_the_args(*args, **kwargs) # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4) # Returning multiple values (with tuple assignments) def swap(x, y): return y, x # Return multiple values as a tuple without the parenthesis. # (Note: parenthesis have been excluded but can be included) x = 1 y = 2 x, y = swap(x, y) # =\u003e x = 2, y = 1 # (x, y) = swap(x,y) # Again parenthesis have been excluded but can be included. # Function Scope x = 5 def set_x(num): # Local var x not the same as global variable x x = num # =\u003e 43 print(x) # =\u003e 43 def set_global_x(num): global x print(x) # =\u003e 5 x = num # global var x is now set to 6 print(x) # =\u003e 6 set_x(43) set_global_x(6) # Python has first class functions def create_adder(x): def adder(y): return x + y return adder add_10 = create_adder(10) add_10(3) # =\u003e 13 # There are also anonymous functions (lambda x: x \u003e 2)(3) # =\u003e True (lambda x, y: x ** 2 + y ** 2)(2, 1) # =\u003e 5 # There are built-in higher order functions list(map(add_10, [1, 2, 3])) # =\u003e [11, 12, 13] list(map(max, [1, 2, 3], [4, 2, 1])) # =\u003e [4, 2, 3] list(filter(lambda x: x \u003e 5, [3, 4, 5, 6, 7])) # =\u003e [6, 7] # We can use list comprehensions for nice maps and filters # List comprehension stores the output as a list which can itself be a nested list [add_10(i) for i in [1, 2, 3]] # =\u003e [11, 12, 13] [x for x in [3, 4, 5, 6, 7] if x \u003e 5] # =\u003e [6, 7] # You can construct set and dict comprehensions as well. {x for x in 'abcddeef' if x not in 'abc'} # =\u003e {'d', 'e', 'f'} {x: x**2 for x in range(5)} # =\u003e {0: 0, 1: 1, 2: 4, 3: 9, 4: 16} #################################################### ## 5. Modules #################################################### # You can import modules import math print(math.sqrt(16)) # =\u003e 4.0 # You can get specific functions from a module from math import ceil, floor print(ceil(3.7)) # =\u003e 4.0 print(floor(3.7)) # =\u003e 3.0 # You can import all functions from a module. # Warning: this is not recommended from math import * # You can shorten module names import math as m math.sqrt(16) == m.sqrt(16) # =\u003e True # Python modules are just ordinary Python files. You # can write your own, and import them. The name of the # module is the same as the name of the file. # You can find out which functions and attributes # are defined in a module. import math dir(math) # If you have a Python script named math.py in the same # folder as your current script, the file math.py will # be loaded instead of the built-in Python module. # This happens because the local folder has priority # over Python's built-in libraries. #################################################### ## 6. Classes #################################################### # We use the \"class\" statement to create a class class Human: # A class attribute. It is shared by all instances of this class species = \"H. sapiens\" # Basic initializer, this is called when this class is instantiated. # Note that the double leading and trailing underscores denote objects # or attributes that are used by Python but that live in user-controlled # namespaces. Methods(or objects or attributes) like: __init__, __str__, # __repr__ etc. are called special methods (or sometimes called dunder methods) # You should not invent such names on your own. def __init__(self, name): # Assign the argument to the instance's name attribute self.name = name # Initialize property self._age = 0 # An instance method. All methods take \"self\" as the first argument def say(self, msg): print(\"{name}: {message}\".format(name=self.name, message=msg)) # Another instance method def sing(self): return 'yo... yo... microphone check... one two... one two...' # A class method is shared among all instances # They are called with the calling class as the first argument @classmethod def get_species(cls): return cls.species # A static method is called without a class or instance reference @staticmethod def grunt(): return \"*grunt*\" # A property is just like a getter. # It turns the method age() into a read-only attribute of the same name. # There's no need to write trivial getters and setters in Python, though. @property def age(self): return self._age # This allows the property to be set @age.setter def age(self, age): self._age = age # This allows the property to be deleted @age.deleter def age(self): del self._age # When a Python interpreter reads a source file it executes all its code. # This __name__ check makes sure this code block is only executed when this # module is the main program. if __name__ == '__main__': # Instantiate a class i = Human(name=\"Ian\") i.say(\"hi\") # \"Ian: hi\" j = Human(\"Joel\") j.say(\"hello\") # \"Joel: hello\" # i and j are instances of type Human, or in other words: they are Human objects # Call our class method i.say(i.get_species()) # \"Ian: H. sapiens\" # Change the shared attribute Human.species = \"H. neanderthalensis\" i.say(i.get_species()) # =\u003e \"Ian: H. neanderthalensis\" j.say(j.get_species()) # =\u003e \"Joel: H. neanderthalensis\" # Call the static method print(Human.grunt()) # =\u003e \"*grunt*\" # Static methods can be called by instances too print(i.grunt()) # =\u003e \"*grunt*\" # Update the property for this instance i.age = 42 # Get the property i.say(i.age) # =\u003e \"Ian: 42\" j.say(j.age) # =\u003e \"Joel: 0\" # Delete the property del i.age # i.age # =\u003e this would raise an AttributeError #################################################### ## 6.1 Inheritance #################################################### # Inheritance allows new child classes to be defined that inherit methods and # variables from their parent class. # Using the Human class defined above as the base or parent class, we can # define a child class, Superhero, which inherits the class variables like # \"species\", \"name\", and \"age\", as well as methods, like \"sing\" and \"grunt\" # from the Human class, but can also have its own unique properties. # To take advantage of modularization by file you could place the classes above in their own files, # say, human.py # To import functions from other files use the following format # from \"filename-without-extension\" import \"function-or-class\" from human import Human # Specify the parent class(es) as parameters to the class definition class Superhero(Human): # If the child class should inherit all of the parent's definitions without # any modifications, you can just use the \"pass\" keyword (and nothing else) # but in this case it is commented out to allow for a unique child class: # pass # Child classes can override their parents' attributes species = 'Superhuman' # Children automatically inherit their parent class's constructor including # its arguments, but can also define additional arguments or definitions # and override its methods such as the class constructor. # This constructor inherits the \"name\" argument from the \"Human\" class and # adds the \"superpower\" and \"movie\" arguments: def __init__(self, name, movie=False, superpowers=[\"super strength\", \"bulletproofing\"]): # add additional class attributes: self.fictional = True self.movie = movie # be aware of mutable default values, since defaults are shared self.superpowers = superpowers # The \"super\" function lets you access the parent class's methods # that are overridden by the child, in this case, the __init__ method. # This calls the parent class constructor: super().__init__(name) # override the sing method def sing(self): return 'Dun, dun, DUN!' # add an additional instance method def boast(self): for power in self.superpowers: print(\"I wield the power of {pow}!\".format(pow=power)) if __name__ == '__main__': sup = Superhero(name=\"Tick\") # Instance type checks if isinstance(sup, Human): print('I am human') if type(sup) is Superhero: print('I am a superhero') # Get the Method Resolution search Order used by both getattr() and super() # This attribute is dynamic and can be updated print(Superhero.__mro__) # =\u003e (\u003cclass '__main__.Superhero'\u003e, # =\u003e \u003cclass 'human.Human'\u003e, \u003cclass 'object'\u003e) # Calls parent method but uses its own class attribute print(sup.get_species()) # =\u003e Superhuman # Calls overridden method print(sup.sing()) # =\u003e Dun, dun, DUN! # Calls method from Human sup.say('Spoon') # =\u003e Tick: Spoon # Call method that exists only in Superhero sup.boast() # =\u003e I wield the power of super strength! # =\u003e I wield the power of bulletproofing! # Inherited class attribute sup.age = 31 print(sup.age) # =\u003e 31 # Attribute that only exists within Superhero print('Am I Oscar eligible? ' + str(sup.movie)) #################################################### ## 6.2 Multiple Inheritance #################################################### # Another class definition # bat.py class Bat: species = 'Baty' def __init__(self, can_fly=True): self.fly = can_fly # This class also has a say method def say(self, msg): msg = '... ... ...' return msg # And its own method as well def sonar(self): return '))) ... (((' if __name__ == '__main__': b = Bat() print(b.say('hello')) print(b.fly) # And yet another class definition that inherits from Superhero and Bat # superhero.py from superhero import Superhero from bat import Bat # Define Batman as a child that inherits from both Superhero and Bat class Batman(Superhero, Bat): def __init__(self, *args, **kwargs): # Typically to inherit attributes you have to call super: # super(Batman, self).__init__(*args, **kwargs) # However we are dealing with multiple inheritance here, and super() # only works with the next base class in the MRO list. # So instead we explicitly call __init__ for all ancestors. # The use of *args and **kwargs allows for a clean way to pass arguments, # with each parent \"peeling a layer of the onion\". Superhero.__init__(self, 'anonymous', movie=True, superpowers=['Wealthy'], *args, **kwargs) Bat.__init__(self, *args, can_fly=False, **kwargs) # override the value for the name attribute self.name = 'Sad Affleck' def sing(self): return 'nan nan nan nan nan batman!' if __name__ == '__main__': sup = Batman() # Get the Method Resolution search Order used by both getattr() and super(). # This attribute is dynamic and can be updated print(Batman.__mro__) # =\u003e (\u003cclass '__main__.Batman'\u003e, # =\u003e \u003cclass 'superhero.Superhero'\u003e, # =\u003e \u003cclass 'human.Human'\u003e, # =\u003e \u003cclass 'bat.Bat'\u003e, \u003cclass 'object'\u003e) # Calls parent method but uses its own class attribute print(sup.get_species()) # =\u003e Superhuman # Calls overridden method print(sup.sing()) # =\u003e nan nan nan nan nan batman! # Calls method from Human, because inheritance order matters sup.say('I agree') # =\u003e Sad Affleck: I agree # Call method that exists only in 2nd ancestor print(sup.sonar()) # =\u003e ))) ... ((( # Inherited class attribute sup.age = 100 print(sup.age) # =\u003e 100 # Inherited attribute from 2nd ancestor whose default value was overridden. print('Can I fly? ' + str(sup.fly)) # =\u003e Can I fly? False #################################################### ## 7. Advanced #################################################### # Generators help you make lazy code. def double_numbers(iterable): for i in iterable: yield i + i # Generators are memory-efficient because they only load the data needed to # process the next value in the iterable. This allows them to perform # operations on otherwise prohibitively large value ranges. # NOTE: `range` replaces `xrange` in Python 3. for i in double_numbers(range(1, 900000000)): # `range` is a generator. print(i) if i \u003e= 30: break # Just as you can create a list comprehension, you can create generator # comprehensions as well. values = (-x for x in [1,2,3,4,5]) for x in values: print(x) # prints -1 -2 -3 -4 -5 to console/terminal # You can also cast a generator comprehension directly to a list. values = (-x for x in [1,2,3,4,5]) gen_to_list = list(values) print(gen_to_list) # =\u003e [-1, -2, -3, -4, -5] # Decorators # In this example `beg` wraps `say`. If say_please is True then it # will change the returned message. from functools import wraps def beg(target_function): @wraps(target_function) def wrapper(*args, **kwargs): msg, say_please = target_function(*args, **kwargs) if say_please: return \"{} {}\".format(msg, \"Please! I am poor :(\") return msg return wrapper @beg def say(say_please=False): msg = \"Can you buy me a beer?\" return msg, say_please print(say()) # Can you buy me a beer? print(say(say_please=True)) # Can you buy me a beer? Please! I am poor :( ","description":"Python Cheat Sheet","title":"Python Cheat Sheet","uri":"/en/posts/python-snippets/"},{"content":"Template def function_name(param1: Type1, param2: Type2, ...) -\u003e ReturnType: \"\"\"Brief description of the function. More detailed explanation of the function if necessary. This can span multiple lines as needed. Args: param1 (Type1): Description of param1. param2 (Type2): Description of param2. ... Returns: ReturnType: Description of the return value. Raises: ExceptionType: Explanation of the conditions under which this exception is raised. Example: \u003e\u003e\u003e function_name(param1_value, param2_value) Expected output \"\"\" ... Example With Type Hints def add_numbers(num1: int, num2: int = 5) -\u003e int: \"\"\"Adds two numbers together. Args: num1 (int): The first number to add. num2 (int, optional): The second number to add. Defaults to 5. Returns: int: The sum of num1 and num2. Example: \u003e\u003e\u003e add_numbers(3, 2) 5 \"\"\" return num1 + num2 Without Type Hints def add_numbers(num1, num2=5): \"\"\"Adds two numbers together. Args: num1: The first number to add. Should be of type int. num2: The second number to add. Should be of type int. Defaults to 5. Returns: The sum of num1 and num2. The return value will be of type int. Example: \u003e\u003e\u003e add_numbers(3, 2) 5 \"\"\" return num1 + num2 Resources Google Python Style Guide: This is a widely adopted style guide in the Python community. It has a specific section on comments and docstrings that I found particularly helpful: https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings\nPEP 257 - Docstring Conventions: This is the Python Enhancement Proposal that describes the conventions for writing good docstrings in Python: https://www.python.org/dev/peps/pep-0257/\nPEP 484 - Type Hints: This PEP introduced the concept of type hints to Python, and provides guidelines on how to use them: https://www.python.org/dev/peps/pep-0484/\n","description":"Python docstring templates","title":"Python docstring templates","uri":"/en/posts/python-docstring-templates/"},{"content":"Clean template ############################################# Libraries ###################################################### import bisect import sys import math import os import time from queue import PriorityQueue from io import BytesIO, IOBase from collections import defaultdict, Counter from bisect import bisect_right ############################################# Definitions ###################################################### INF = sys.maxsize BUFSIZE = 4096 ############################################# Inputs ###################################################### # def inp(): return sys.stdin.readline().rstrip(\"\\r\\n\") # read line as string # def inp_int(): return int(inp()) # read input as integer. '1' -\u003e 1 # def inp_int_list(): return list(map(int, inp().split())) # def inp_str_list(): return list(inp()) ############################################# Solution ###################################################### def solve(): n = list(map(int, input().split())) res = 0 print(res) for _ in range(int(input())): solve() Full template ############################################# Libraries ###################################################### import bisect import sys import math import os import time from queue import PriorityQueue from io import BytesIO, IOBase from collections import defaultdict, Counter from bisect import bisect_right ############################################# Definitions ###################################################### INF = sys.maxsize BUFSIZE = 4096 ############################################# Inputs ###################################################### def inp(): return sys.stdin.readline().rstrip(\"\\r\\n\") # read line as string def inp_int(): return int(inp()) # read input as integer. '1' -\u003e 1 def inp_int_list(): return list(map(int, inp().split())) def inp_str_list(): return list(inp()) ############################################# Data Structures ###################################################### class SegmentTree: # //O(logn) for operations and O(n) for building// def init(arr): # n shld be a power of 2...hence add extra zeros before itself if needed //O(n)// n = len(arr) tree = [0]*(2*n) for i in range(n): # The actual array is between indices n to 2*n-1 the first nodes store sums tree[n+i] = arr[i] for i in range(n-1, -1, -1): # parent node value = child node's sum i\u003c\u003c1 = 2*i, i\u003c\u003c1 |1 = 2*i+1 tree[i] = tree[i \u003c\u003c 1]+tree[(i \u003c\u003c 1) | 1] return tree def add(tree, i, v): # Sets vertex i to value v (i shld be 0 based indexing) //O(logn)// # As the actual array is between n and 2*n-1, we add n to i (n = len(tree)//2) i += len(tree) // 2 tree[i] = v while i \u003e 1: tree[i \u003e\u003e 1] = tree[i] + tree[i ^ 1] i \u003e\u003e= 1 # Calculating the values of prev nodes. (eg if node 9 is changed 9\u003e\u003e1 = 4 takes values of node i(9) and node i^1(8)) # calculates the sum of values in the range [l,r-1] (l and r take 0 based indexing) //O(logn)// def range_sum(tree, l, r): l += len(tree)//2 r += len(tree)//2 sum = 0 while l \u003c r: if l \u0026 1: # If the index is odd, add its value to sum. if the index is even it means there would be a parent sum += tree[l] l += 1 # of this with odd index if r \u0026 1: r -= 1 sum += tree[r] l \u003e\u003e= 1 r \u003e\u003e= 1 return sum ############################################# Solution ###################################################### def solve(): s = inp() print() def run(): for _ in range(inp_int()): solve() if __name__ == \"__main__\": CODE_DEBUG = 1 if os.environ.get(\"CODE_DEBUG\") or CODE_DEBUG: sys.stdin = open(\"./input.txt\", \"r\") start_time = time.time() run() print(\"\\n--- %s seconds ---\\n\" % (time.time() - start_time)) else: run() ","description":"Python template for contests","title":"Python template for contests","uri":"/en/tracks/algorithms-101/codeforces/cp-template/"},{"content":"On this page you can find 50 random questions.\nTo get prepared for exam you can use cloud-exam-prepare.com\nQ1 - Q10 Q1 You are developing an API in Amazon API Gateway that several mobile applications will use to interface with a back end service in AWS being written by another developer. You can use a(n)____ integration for your API methods to develop and test your client applications before the other developer has completed work on the back end.\nHTTP proxy mock AWS service proxy Lambda function Explanation http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-method-settings-console.html\nAmazon API Gateway supports mock integrations for API methods.\n2\nQ2 You are creating multiple resources using multiple CloudFormation templates. One of the resources (Resource B) needs the ARN value of another resource (resource A) before it is created.\nWhat steps can you take in this situation? (Choose 2 answers)\nUse a template to first create Resource A with the ARN as an output value. Use a template to create Resource B and reference the ARN of Resource A using Fn::GetAtt. Hard code the ARN value output from creating Resource A into the second template. Just create Resource B. Explanation http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html\n2\nQ3 A company with global users is using a content delivery network service to ensure low latency for all customers. The company has several applications that require similar cache behavior.\nWhich API command can a developer use to ensure cache storage consistency with minimal duplication?\nCreateReusableDelegationSet with Route 53 CreateStackSet with CloudFormation CreateGlobalReplicationGroup with ElastiCache CreateCachePolicy with CloudFront Explanation https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateCachePolicy.html\n4\nQ4 You are creating a few test functions to demonstrate the ease of developing serverless applications. You want to use the command line to deploy AWS Lambda functions, an Amazon API Gateway, and Amazon DynamoDB tables.\nWhat is the easiest way to develop these simple applications?\nInstall AWS SAM CLI and run “sam init [options]” with the templates’ data. Use AWS step function visual workflow and insert your templates in the states Save your template in the Serverless Application Repository and use AWS SAM Explanation AWS SAM - AWS Serverless Application Model\nhttps://aws.amazon.com/serverless/sam/\n1\nQ5 What will happen if you delete an unused custom deployment configuration in AWS CodeDeploy?\nYou will no longer be able to associate the deleted deployment configuration with new deployments and new deployment groups. Nothing will happen, as the custom deployment configuration was unused. All deployment groups associated with the custom deployment configuration will also be deleted. All deployments associated with the custom deployment configuration will be terminated. Explanation https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-delete.html\nCan delete only if unused.\n1\nQ6 What happens when you delete a deployment group with the AWS CLI in AWS CodeDeploy?\nAll details associated with that deployment group will be moved from AWS CodeDeploy to AWS OpsWorks. The instances used in the deployment group will change. All details associated with that deployment group will also be deleted from AWS CodeDeploy. The instances that were participating in the deployment group will run once again. Explanation https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-groups-delete.html\nIf you delete a deployment group, all details associated with that deployment group will also be deleted from CodeDeploy. The instances used in the deployment group will remain unchanged. This action cannot be undone.\n3\nQ7 You are configuring a Jenkins project that is installed on an Amazon EC2 instance running a Windows operating system. You want this Jenkins project to integrate with AWS CodePipeline.\nWhich actions should you take to make this function perform correctly? (2 answers)\nRestart all Amazon EC2 instances that are running a Windows operating system. Provide the IAM user credentials to integrate AWS CodePipeline. Fill out the required fields for your proxy host. Modify the PATH variable to include the directory where you installed Jenkins on all Amazon EC2 instance that are running a Windows operating system. Explanation https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-four-stage-pipeline.html\n2, 3\nQ8 You are deploying Multi-Factor Authentication (MFA) on Amazon Cognito. You have set the verification message to be by SMS. However, during testing, you do not receive the MFA SMS on your device.\nWhat action will best solve this issue?\nUse AWS Lambda to send the time-based one-time password by SMS Increase the complexity of the password Create and assign a role with a policy that enables Cognito to send SMS messages to users Create and assign a role with a policy that enables Cognito to send Email messages to users Explanation https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html\n3\nQ9 A developer is adding sign-up and sign-in functionality to an application. The application is required to make an API call to a custom analytics solution to log user sign-in events\nWhich combination of actions should the developer take to satisfy these requirements? (Select TWO.)\nUse Amazon Cognito to provide the sign-up and sign-in functionality Use AWS IAM to provide the sign-up and sign-in functionality Configure an AWS Config rule to make the API call triggered by the post-authentication event Invoke an Amazon API Gateway method to make the API call triggered by the post-authentication event Execute an AWS Lambda function to make the API call triggered by the post-authentication event Explanation Amazon Cognito adds user sign-up, sign-in, and access control to web and mobile applications quickly and easily. Users can also create an AWS Lambda function to make an API call to a custom analytics solution and then trigger that function with an Amazon Cognito post authentication trigger.\n1, 5\nQ10 A developer is designing a web application that allows the users to post comments and receive in a real-time feedback.\nWhich architectures meet these requirements? (Select TWO.)\nCreate an AWS AppSync schema and corresponding APIs. Use an Amazon DynamoDB table as the data store. Create a WebSocket API in Amazon API Gateway. Use an AWS Lambda function as the backend and an Amazon DynamoDB table as the data store Create an AWS Elastic Beanstalk application backed by an Amazon RDS database. Configure the application to allow long-lived TCP/IP sockets. Create a GraphQL endpoint in Amazon API Gateway. Use an Amazon DynamoDB table as the data store. Enable WebSocket on Amazon CloudFront. Use an AWS Lambda function as the origin and an Amazon Aurora DB cluster as the data store Explanation AWS AppSync simplifies application development by letting users create a flexible API to securely access, manipulate, and combine data from one or more data sources. AWS AppSync is a managed service that uses GraphQL to make it easy for applications to get the exact data they need.\nAWS AppSync allows users to build scalable applications, including those requiring real-time updates, on a range of data sources, including Amazon DynamoDB. In Amazon API Gateway, users can create a WebSocket API as a stateful frontend for an AWS service (such as AWS Lambda or DynamoDB) or for an HTTP endpoint.\nThe WebSocket API invokes the backend based on the content of the messages it receives from client applications. Unlike a REST API, which receives and responds to requests, a WebSocket API supports two-way communication between client applications and the backend.\n1, 2\nQ11 - Q20 1 You are asked to establish a baseline for normal Amazon ECS performance in your environment by measuring performance at various times and under different load conditions. To establish a baseline, Amazon recommends that you should at a minimum monitor the CPU and ____ for your Amazon ECS clusters and the CPU and ____ metrics for your Amazon ECS services.\nmemory reservation and utilization; concurrent connections memory utilization; memory reservation and utilization concurrent connections; memory reservation and utilization memory reservation and utilization; memory utilization Explanation 4\n2 What is one reason that AWS does not recommend that you configure your ElastiCache so that it can be accessed from outside AWS?\nThe metrics reported by CloudWatch are more difficult to report. Security concerns and network latency over the public internet. The ElastiCache cluster becomes more prone to failures. The performance of the ElastiCache cluster is no longer controllable. Explanation Elasticache is a service designed to be used internally to your VPC. External access is discouraged due to the latency of Internet traffic and security concerns. However, if external access to ElastiCache is required for test or development purposes, it can be done through a VPN.\n2\n3 You are building a web application that will run in an AWS ElasticBeanstalk environment. You need to add and configure an Amazon ElastiCache cluster into the environment immediately after the application is deployed.\nWhat is the most efficient method to ensure that the cluster is deployed immediately after the EB application is deployed?\nUse the AWS Management Console to create and configure the cluster. Create a cron job to schedule the cluster deployment using the aws cloudformation deploy command Create a configuration file with the .config extension and place it into the .ebextensions folder in the application package. Build an AWS Lambda function that polls to the ElasticBeanstalk environment deployments and create and configure the Amazon ElastiCache cluster. Explanation [AWS Secrets Manager](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-resources.html)\n3\n4 Emily is building a web application using AWS ElasticBeanstalk. The application uses static images like icons, buttons and logos. Emily is looking for a way to serve these static images in a performant way that will not disrupt user sessions.\nWhich of the following options would meet this requirement?\nUse an Amazon Elastic File System (EFS) volume to serve the static image files. Configure the AWS ElasticBeanstalk proxy server to serve the static image files. Use an Amazon S3 bucket to serve the static image files. Use an Amazon Elastic Block Store (EBS) volume to serve the static image files. Explanation https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-staticfiles.html\nAn Amazon S3 bucket would work, but the AWS ElasticBeanstalk proxy server would need to route the requests to the static files to a different place anytime they need to be shown.\n2\n5 A company is providing services to many downstream consumers. Each consumer may connect to one or more services. This has resulted in complex architecture that is difficult to manage and does not scale well. The company needs a single interface to manage these services to consumers\nWhich AWS service should be used to refactor this architecture?\nAWS X-Ray Amazon SQS AWS Lambda Amazon API Gateway Explanation 4\n6 Which load balancer would you use for services which use HTTP or HTTPS traffic?\nExplanation Application Load Balancer (ALB). 7 What are possible target groups for ALB (Application Load Balancer)?\nExplanation EC2 tasks ECS instances Lambda functions Private IP Addresses 8 Your would like to optimize the performance of their web application by routing inbound traffic to api.mysite.com to Compute Optimized EC2 instances and inbound traffic to mobile.mysite.com to Memory Optimized EC2 instances.\nWhich solution below would be best to implement for this?\nEnable X-Forwarded For on the web servers and use a Classic Load Balancer Configure proxy servers to forward the traffic to the correct instances Use Classic Load Balancer with path-based routing rules to forward the traffic to the correct instances Use Application Load Balancer with host-based routing rules to forward the traffic to the correct instances Explanation Application Load Balancer with host-based routing rules\nhttps://aws.amazon.com/blogs/aws/new-host-based-routing-support-for-aws-application-load-balancers/\n4\n9 A company uses Amazon DynamoDB for managing and tracking orders. DynamoDB table is partitioned based on the order date. The company receives a huge increase in orders during a sales event, causing DynamoDB writes to throttle, and the consumed throughput is below the provisioned throughput.\nAccording to AWS best practices, how can this issue be resolved with MINIMAL costs?\nCreate a new Dynamo DB table for every order date Add a random number suffix to the partition key values Add a global secondary index to the DynamoDB table Increase the read and write capacity units of the DynamoDB table Explanation A randomizing strategy can greatly improve write throughput. But it’s difficult to read a specific item because you don’t know which suffix value was used when writing the item.\nChoosing the Right DynamoDB Partition Key\nUsing write sharding to distribute workloads evenly\n2\n10 A food delivery company is building a feature that requests reviews from customers after their orders are delivered. The solution should be a short-running process that can message customers simultaneously at various contact points including email, text, and mobile push notifications.\nWhich approach best meets these requirements?\nUse EventBridge with Kinesis Data Streams to send messages. Use a Step Function to send SQS messages. Use Lambda function to send SNS messages. Use AWS Batch and SNS to send messages. Explanation https://docs.aws.amazon.com/sns/latest/dg/welcome.html\n3\nQ21 - Q30 1 How AWS Fargate different from AWS ECS?\nExplanation In AWS ECS, you manage the infrastructure - you need to provision and configure the EC2 instances. While in AWS Fargate, you don’t provision or manage the infrastructure, you simply focus on launching Docker containers. You can think of it as the serverless version of AWS ECS.\n2 What is Chaos Engineering?\nExplanation Chaos engineering is the process of stressing an application in testing or production environments by creating disruptive events, such as server outages or API throttling, observing how the system responds, and implementing improvements.\nChaos engineering helps teams create the real-world conditions needed to uncover the hidden issues, monitoring blind spots, and performance bottlenecks that are difficult to find in distributed systems.\nIt starts with analyzing the steady-state behavior, building an experiment hypothesis (e.g., terminating x number of instances will lead to x% more retries), executing the experiment by injecting fault actions, monitoring roll back conditions, and addressing the weaknesses.\n3 A client has contracted you to review their existing AWS environment and recommend and implement best practice changes. You begin by reviewing existing users and Identity Access Management. You found out improvements that can be made with the use of the root account and Identity Access Management.\nWhat are the best practice guidelines for use of the root account?\nNever use the root account. Use the root account only to create administrator accounts. Use the root account to create your first IAM user and then lock away the root account. Use the root account to create all other accounts, and share the root account with one backup administrator. Explanation lock-away-credentials 1\n4 Veronika is writing a REST service that will add items to a shopping list. The service is built on Amazon API Gateway with AWS Lambda integrations. The shopping list stems are sent as query string parameters in the method request.\nHow should Veronika convert the query string parameters to arguments for the Lambda function?\nEnable request validation Include the Amazon Resource Name (ARN) of the Lambda function Change the integration type Create a mapping template Explanation API Gateway mapping template\n4\n5 Your organization has an AWS setup and planning to build Single Sign-On for users to authenticate with on-premise Microsoft Active Directory Federation Services (ADFS) and let users log in to the AWS console using AWS STS Enterprise Identity Federation.\nWhich of the following services do you need to call from AWS STS service after you authenticate with your on-premise?\nAssumeRoleWithSAML GetFederationToken AssumeRoleWithWebIdentity GetCallerIdentity Explanation https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html 1\n6 Alice is building a mobile application. She planned to use Multi-Factor Authentication (MFA) when accessing some AWS resources.\nWhich of the following APIs will be leveraged to provide temporary security credentials?\nAssumeRoleWithSAML GetFederationToken GetSessionToken AssumeRoleWithWebIdentity Explanation https://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html\nAssumeRoleWithWebIdentity - does not support MFA\n3\n7 You built a data analysis application to collect and process real-time data from smart meters. Amazon Kinesis Data Streams is the backbone of your design. You received an alert that a few shards are hot.\nWhat steps will you take to keep a strong performance?\nRemove the hot shards Merge the hot shards Split the hot shards Increase the shard capacity Explanation https://docs.aws.amazon.com/streams/latest/dev/kinesis-using-sdk-java-resharding-strategies.html\nSplit the hot shards\n3\n8 Jasmin needs to perform ad-hoc business analytics queries on well-structured dat1. Data comes in constantly at a high velocity. Jasmin’s team can understand SQL.\nWhat AWS service(s) should Jasmin look to first?\nEMR using Hive EMR running Apache Spark Kinesis Firehose + RDS Kinesis Firehose + RedShift Explanation RedShift supports ad-hoc queries over well-structured data using a SQL-compliant wire protocol\nhttps://aws.amazon.com/kinesis/data-firehose/features/\n4\n9 Key rotation is an important concept of key management. How does Key Management Service (KMS) implement key rotation?\nKMS supports manual Key Rotation only; you can create new keys any time you want and all data will be re-encrypted with the new key. KMS creates new cryptographic material for your KMS keys every rotation period, and uses the new keys for any upcoming encryption; it also maintains old keys to be able to decrypt data encrypted with those keys. Key rotation is the process of synchronizing keys between configured regions; KMS will synchronize key changes in near-real time once keys are changed. Key rotation is supported through the re-importing of new KMS keys; once you import a new key all data keys will be re-encrypted with the new KMS key. Explanation When you enable automatic key rotation for a customer-managed KMS key, AWS KMS generates new cryptographic material for the KMS key every year. AWS KMS also saves the KMS key’s older cryptographic material so it can be used to decrypt data that it has encrypted.\n10 Alan is managing an environment with regulation and compliance requirements that mandate encryption at rest and in transit. The environment covers multiple accounts (Management, Development, and Production) and at some point in time, Alan might need to move encrypted snapshots and AMIs with encrypted volumes across accounts.\nWhich statements are true with regard to this scenario? (Choose 2 answers)\nCreate Master keys in management account and assign Development and Production accounts as users of these keys, then any media encrypted using these keys can be shared between the three accounts. Can share AMIs with encrypted volumes across accounts, even with the use of custom encryption keys. Make encryption keys for development and production accounts then anything encrypted using these keys can be moved across accounts. You can not move encrypted snapshots across accounts if data migration is required some third-party tools must be used. Explanation https://docs.aws.amazon.com/kms/latest/developerguide/overview.html\n1, 2\nQ31 - Q40 1 When working with a published version of the AWS Lambda function, you should note that the _____.\nUse the AWS Management Console to create and configure the cluster. Create a cron job to schedule the cluster deployment using the _aws cloudformation deploy_ command Create a configuration file with the .config extension and place it into the .ebextensions folder in the application package. Build an AWS Lambda function that polls to the ElasticBeanstalk environment deployments and create and configure the Amazon ElastiCache cluster. Explanation AWS Secrets Manager\n3\n2 A Developer wants access to the log data of an application running on an EC2 instance available to systems administrators.\nWhich of the following enables monitoring of the metric in Amazon CloudWatch?\nRetrieve the log data from AWS CloudTrail using the LookupEvents API Call Retrieve the log data from CloudWatch using the GetMetricData API call Launch a new EC2 instance, configure Amazon CloudWatch Events, and then install the application Install the Amazon CloudWatch logs agent on the EC2 instance that the application is running on Explanation 4\n3 A developer is building a streamlined development process for Lambda functions related to S3 storage. The developer needs a consistent, reusable code blueprint that can be easily customized to manage Lambda function definition and deployment, the S3 events to be managed and the Identity Access Management (IAM) policies definition.\nWhich of the following AWS solutions offers is best suited for this objective?\nAWS Software Development Kits (SDKs) AWS Serverless Application Model (SAM) templates AWS Systems Manager AWS Step Functions Explanation Serverless Application Model\n2\n4 Explain RDS Multi Availability Zone\nExplanation RDS multi AZ used mainly for disaster recovery purposes There is an RDS master instance and in another AZ an RDS standby instance The data is synced synchronously between them The user, application is accessing one DNS name and where there is a failure with the master instance, the DNS name moves to the standby instance, so the failover done automatically 5 Developer wants to implement a more fine-grained control of developers S3 buckets by restricting access to S3 buckets on a case-by-case basis using S3 bucket policies.\nWhich methods of access control can developer implement using S3 bucket policies? (Choose 3 answers)\nControl access based on the time of day Control access based on IP Address Control access based on Active Directory group Control access based on CIDR block Explanation https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-iam-policies.html CIDRs - A set of Classless Inter-Domain Routings\nhttps://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html\n1, 2, 4\n6 To ensure that an encryption key was not corrupted in transit, Elastic Transcoder uses a(n) ____ digest of the decryption key as a checksum.\nBLAKE2 SHA-1 SHA-2 MD5 Explanation https://docs.aws.amazon.com/elastictranscoder/latest/developerguide/job-settings.html\nMD5 digest (or checksum)\n4\n7 Dan is responsible for supporting your company’s AWS infrastructure, consisting of multiple EC2 instances running in a VPC, DynamoDB, SQS, and S3. You are working on provisioning a new S3 bucket, which will ultimately contain sensitive data.\nWhat are two separate ways to ensure data is encrypted in-flight both into and out of S3? (Choose 2 answers)\nUse the encrypted SSL/TLS endpoint. Enable encryption in the bucket policy. Encrypt it on the client-side before uploading. Set the server-side encryption option on upload. Explanation https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingEncryption.html\n1, 3\n8 In a move toward using microservices, a company’s Management team has asked all Development teams to build their services so that API requests depend only on that services data store. One team is building a Payments service that has its own database. The service floods data that originates in the Accounts database. Both are using Amazon DynamoDB.\nWhat approach will result in the simplest, decoupled, and reliable method to get near-real-time updates from the Accounts database?\nUse Amazon Glue to perform frequent updates from the Accounts database to the Payments database Use Amazon Kinesis Data Firehose to deliver all changes from the Accounts database to the Payments database. Use Amazon DynamoDB Streams to deliver all changes from the Accounts database to the Payments database. Use Amazon ElastiCache in Payments, with the cache updated by triggers in the Accounts database. Explanation 3\n9 You’ve decided to use autoscaling in conjunction with SNS to alert you when your auto-scaling group scales. Notifications can be delivered using SNS in several ways.\nWhich options are supported notification methods? (Choose 3 answers)\nHTTP or HTTPS POST notifications Email using SMTP or plain text Kinesis Stream Invoking of a Lambda function Explanation https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-sns-notifications.html\n1, 2, 4\n10 Which endpoint is considered to be best practice when analyzing data within a Configuration Stream of AWS Config?\nSNS E-Mail SQS Kinesis Explanation https://docs.aws.amazon.com/config/latest/developerguide/monitor-resource-changes.html\n3\nQ41 - Q50 1 A developer is adding a feedback form to a website. Upon user submission, the form should create a discount code, email the user the code and display a message on the website that tells the user to check their email. The developer wants to use separate Lambda functions to manage these processes and use a Step Function to orchestrate the interactions with minimal custom scripting.\nWhich of the following Step Function workflows can be used to meet requirements?\nAsynchronous Express Workflow Synchronous Express Workflow Standard Workflow Standard Express Workflow Explanation https://aws.amazon.com/blogs/compute/new-synchronous-express-workflows-for-aws-step-functions/\n2\n2 You joined an application monitoring team. Your role focuses on finding system performance and bottlenecks in Lambda functions and providing specific solutions. Another teammate focuses on auditing the systems.\nWhich AWS service will be your main tool?\nAWS X-Ray AWS IAM AWS CloudTrail AWS Athena Explanation AWS X-Ray provides graphs of system performance and identifies bottlenecks\n1\n3 A team of Developers must migrate an application running inside an AWS Elastic Beastalk environment from a Classic Load Balancer to an Application Load Balancer.\nWhich steps should be taken to accomplish the task using the AWS Management Console?\n1 Select a new load balancer type before running the deployment. Update the application code in the existing deployment. Deploy the new version of the application code to the environment. 2 Create a new environment with the same configurations except for the load balancer type. Deploy the same application versions as used in the original environment. Run the Swap-environment-cnames action. 3 Clone the existing environment, changing the associated load balancer type. Deploy the same application version as used in the original environment. Run the Swap-environment-cnames action. 4 Edit the environment definitions in the existing deployment. Change the associated load balancer type according to the requirements. Rebuild the environment with the new load balancer type. Explanation 4\n4 A developer is deploying an application that will store files in an Amazon S3 bucket. The files must be encrypted at rest. The developer wants to automatically replicate the files to an S3 bucket in a different AWS Region for disaster recovery.\nHow can the developer accomplish this task with the LEAST amount of configuration?\nEncrypt the files by using server-side encryption with S3 managed encryption keys (SSE-S3). Enable S3 bucket replication. Encrypt the files by using server-side encryption (SSE) with an AWS Key Management Service (AWS KMS) customer master key (CMK). Enable S3 bucket replication. Use the s3 sync command to sync the files to the S3 bucket in the other Region. Configure an S3 Lifecycle configuration to automatically transfer files to the S3 bucket in the other Region. Explanation 2\n5 A serverless application is using AWS Step Functions to process data and save it to a database. The application needs to validate some data with an external service before saving the dat1. The application will call the external service from an AWS Lambda function, and the external service will take a few hours to validate the dat1. The external service will respond to a webhook when the validation is complete.\nA developer needs to pause the Step Functions workflow and wait for the response from the external service.\nWhat should the developer do to meet this requirement?\nUse the .waitForTaskToken option in the Lambda function task state. Pass the token in the body. Use the .waitForTaskToken option in the Lambda function task state. Pass the invocation request. Call the Lambda function in synchronous mode. Wait for the external service to complete the processing. Call the Lambda function in asynchronous mode. Use the Wait state until the external service completes the processing. Explanation 4\n6 A company has an application that writes files to an Amazon S3 bucket. Whenever there is a new file, an S3 notification event invokes an AWS Lambda function to process the file. The Lambda function code works as expected. However, when a developer checks the Lambda function logs, the developer finds that multiple invocations occur for every file.\nWhat is causing the duplicate entries?\nThe S3 bucket name is incorrectly specified in the application and is targeting another S3 bucket. The Lambda function did not run correctly, and Lambda retried the invocation with a delay. Amazon S3 is delivering the same event multiple times. The application stopped intermittently and then resumed, splitting the logs into multiple smaller files. Explanation 1\n7 An AWS Lambda function accesses two Amazon DynamoDB tables. A developer wants to improve the performance of the Lambda function by identifying bottlenecks in the function.\nHow can the developer inspect the timing of the DynamoDB API calls?\nAdd DynamoDB as an event source to the Lambda function. View the performance with Amazon CloudWatch metrics Place an Application Load Balancer (ALB) in front of the two DynamoDB tables. Inspect the ALB logs Limit Lambda to no more than five concurrent invocations. Monitor from the Lambda console. Enable AWS X-Ray tracing for the function. View the traces from the X-Ray service. Explanation 4\n8 A developer deployed an application to an Amazon EC2 instance. The application needs to know the public IPv4 address of the instance. How can the application find this information?\nQuery the instance metadata from http://169.254.169.254/latest/meta-data/. Query the instance user data from http://169.254.169.254/latest/user-data/. Query the Amazon Machine Image (AMI) information from http://169.254 169.254/latest/meta-data/ami/. Check the hosts file of the operating system. Explanation 1\n9 A developer is creating a serverless application that uses an AWS Lambda function The developer will use AWS CloudFormation to deploy the application. The application will write logs to Amazon CloudWatch Logs. The developer has created a log group in a CloudFormation template for the application to use. The developer needs to modify the CloudFormation template to make the name of the log group available to the application at runtime.\nWhich solution will meet this requirement?\nUse the AWS::Include transform in CloudFormation to provide the log group’s name to the application. Pass the log group’s name to the application in the user data section of the CloudFormation template Use the CloudFormation template’s Mappings section to specify the log group’s name for the application. Pass the log group’s Amazon Resource Name (ARN) as an environment variable to the Lambda function. Explanation 4\n10 A developer needs to use the AWS CLI on an on-premises development server temporarily to access AWS services while performing maintenance. The developer needs to authenticate to AWS with their identity for several hours.\nWhat is the MOST secure way to call AWS CLI commands with the developer’s IAM identity?\nSpecify the developer’s IAM access key ID and secret access key as parameters for each CLI command. Run the AWS configure CLI command. Provide the developer’s IAM access key ID and secret access key. Specify the developer’s IAM profile as a parameter for each CLI command. Run the get-session-token CLI command with the developer’s IAM user. Use the returned credentials to call the CLI. Explanation 4\nQ51 - Q60 6 A developer notices timeouts from the AWS CLI when the developer runs list commands.\nWhat should the developer do to avoid these timeouts?\nUse the --page-size parameter to request a smaller number of items. Use shorthand syntax to separate the list by a single space. Use the yaml-stream output for faster viewing of large datasets. Use quotation marks around strings to enclose data structure. Explanation 1\n7 A company is planning to use AWS CodeDeploy to deploy an application to Amazon Elastic Container Service (Amazon ECS). During the deployment of a new version of the application, the company initially must expose only 10% of live traffic to the new version of the deployed application. Then, after 15 minutes elapse, the company must route all the remaining live traffic to the new version of the deployed application.\nWhich CodeDeploy predefined configuration will meet these requirements?\nCodeDeployDefault.ECSCanary10Percent15Minutes CodeDeployDefault.LambdaCanary10Percent5Minutes CodeDeployDefault.LambdaCanary10Percent15Minutes CodeDeployDefault.ECSLinear10PercentEvery1 Minutes Explanation 1\n8 Explanation 9 A microservices application is deployed across multiple containers in Amazon Elastic Container Service (Amazon ECS). To improve performance, a developer wants to capture trace information between the microservices and visualize the microservices architecture.\nWhich solution will meet these requirements?\nBuild the container from the amazon/aws-xray-daemon base image. Use the AWS X-Ray SDK to instrument the application. Install the Amazon CloudWatch agent on the container image. Use the CloudWatch SDK to publish custom metrics from each of the microservices. Install the AWS X-Ray daemon on each of the ECS instances. Configure AWS CloudTrail data events to capture the traffic between the microservices. Explanation 3\n10 A company is running an application on Amazon Elastic Container Service (Amazon ECS). When the company deploys a new version of the application, the company initially needs to expose 10% of live traffic to the new version. After a period of time, the company needs to immediately route all the remaining live traffic to the new version.\nWhich ECS deployment should the company use to meet these requirements?\nRolling update Blue/green with canary Blue/green with all at once Blue/green with linear Explanation 2\n","description":"AWS exam questions Certified Developer 2023","title":"Questions","uri":"/en/tracks/aws-certified-developer-associate/questions/"},{"content":"About Relational Database Service Managed DB service that uses SQL as query language Amazon Relational Database Service (Amazon RDS) is a collection of managed services that makes it simple to set up, operate, and scale databases in the cloud.\nDocumentation User Guide Supports engines:\nAmazon Aurora with MySQL compatibility: 5432 Amazon Aurora with PostgreSQL compatibility: 5432 MySQL: 3306 MariaDB: 3306 PostgreSQL: 5432 Oracle: 1521 SQL Server: 1433 Engine modes:\nUsed in CreateDBCluster\nglobal parallelquery serverless multimaster Backups Backups are enabled by default in RDS Automated backups\nDaily full backup (during maintenance window) Backups of transaction logs (every 5 minutes) 7 days retention (can increase upto 35) DB Snapshots\nManually triggered by the user Can retain backup as long as you want Auto scaling When RDS detects you’re running out of space, it scales automatically Digest To verify slowly running queries enable slow query log. TDE (Transparent data encryption) supports encryption on Microsoft SQL server AWS Systems Manager Parameter Store provides secure, hierarchical storage for confiquration data management and secrets management. You can store data such as passwords, database strings, Amazon Machine Image (AMI) IDs, and license codes as parameter values AWS Secrets Manager is an AWS service that can be used to securely store, retrieve, and automatically rotate database credentials. AWS Secrets Manager has built-in integration for RDS databases. Price Current price\nUse Cases Type: Relational\nThis type services: Aurora, Redshift, RDS\nEcommerce websites, Traditional sites etc.\nAmazon Relational Database Service (Amazon RDS) on [AWS Outposts](AWS Outposts) allows you to deploy fully managed database instances in your on-premises environment\nQuestions Q1 Explain RDS Multi Availability Zone\nExplanation RDS multi AZ used mainly for disaster recovery purposes There is an RDS master instance and in another AZ an RDS standby instance The data is synced synchronously between them The user, application is accessing one DNS name and where there is a failure with the master instance, the DNS name moves to the standby instance, so the failover done automatically Q2 A company is migrating a legacy application to Amazon EC2. The application uses a username and password stored in the source code to connect to a MySQL database. The database will be migrated to an Amazon RDS for MySQL DB instance. As part of the migration, the company wants to implement a secure way to store and automatically rotate the database credentials.\nWhich approach meets these requirements?\nStore the database credentials in environment variables in an Amazon Machine Image (AMI). Rotate the credentials by replacing the AMI. Store the database credentials in AWS Systems Manager Parameter Store. Configure Parameter Store to automatically rotate the credentials. Store the database credentials in environment variables on the EC2 instances. Rotate the credentials by relaunching the EC2 instances. Store the database credentials in AWS Secrets Manager. Configure Secrets Manager to automatically rotate the credentials Explanation AWS Secrets Manager\nSecrets Manager offers secret rotation\n4\nQ3 Explain RDS Multi Availability Zone\nExplanation RDS multi AZ used mainly for disaster recovery purposes There is an RDS master instance and in another AZ an RDS standby instance The data is synced synchronously between them The user, application is accessing one DNS name and where there is a failure with the master instance, the DNS name moves to the standby instance, so the failover done automatically ","description":"Set up, operate, and scale a relational database in the cloud with just a few clicks.","title":"RDS","uri":"/en/tracks/aws-certified-developer-associate/rds/"},{"content":"TODO G2 Contest date: 2023-02-03\nContest problems\nEditorial\nTemplate with function snippets\nA. Codeforces Checking https://codeforces.com/contest/1791/problem/A\nSolution:\ndef solve(letter): code = \"codeforces\" if letter in code: print(\"YES\") else: print(\"NO\") for _ in range(int(inp())): letter = inp() solve(letter) B. Following Directions https://codeforces.com/contest/1791/problem/B\ngeometry, implementation, *800\nSolution:\ndef solve(n, s): x = 0 y = 0 for move in s: if move == 'L': x -= 1 elif move == 'R': x += 1 elif move == 'U': y += 1 elif move == 'D': y -= 1 if x == 1 and y == 1: print(\"YES\") break else: print(\"NO\") for _ in range(int(inp())): # attempts num = int(inp()) letter = inp() solve(num, letter) C. Prepend and Append https://codeforces.com/contest/1791/problem/C\nimplementation, two pointers, *800\nIn this problem we are allowed:\nto remove first letter of the binary string and last. We can do this while first letter is not equal to the last according to the definition of the problem. (Add 𝟶 to one end of the string and 𝟷 to the other end of the string.) Solution:\ndef solve(n, s): res = n if res \u003c= 1: return 1 while res \u003e 0: first = s[0] last = s[-1] if first == last: return res s = s[1:-1] res -= 2 return res for _ in range(int(inp())): # attempts n = int(inp()) s = inp() print(solve(n, s)) Optimized:\nUse deque from collection module\n\u003e\u003e\u003e deque('123') deque(['1', '2', '3']) from collections import deque def solve(n, s): s = deque(s) while len(s) and s[0] != s[-1]: s.popleft() s.pop() print(len(s)) D. Distinct Split https://codeforces.com/contest/1791/problem/D\nbrute force, greedy, strings, *1000\nIf we get a string abcabcd we need to split into two strings.\nNote 1: result number could not be more than string length.\nabcabcd can be splited into abc and abcd. len(‘abc’) = 3 #3 distinct letters len(‘abcd’) = 4 3 + 4 = 7\nOutput: maximum possible value of 𝑓(𝑎)+𝑓(𝑏) such that 𝑎+𝑏=𝑠.\nLet’s look at other examples and possible edge cases.\nNote 2: function for a string 𝑥 - is the number of distinct characters. (From problem statement.)\n'aaaaa' =\u003e 1 # 1 distinct If we concatenate two strings into one s, we need to keep order of the letters. Need to split this string s in a such a way so that repeated letters fall into different parts of string s (a and b). abcab =\u003e abc and ab better that abca and b because:\nf('abc') = 3 f('abca') = 3 f('ab') = 2 f('b') = 1 5 \u003e 4 Approach 1:\nDivide string into two parts starting left part from len 1. For example: s = ‘abcabc’ a = ‘a’ b = ‘bcabc’ Increase left part and decrease right part. On each step calculate sum of distinct letters. For example: set(a) + set(b) max_result = max(max_result, len(set(a)) + len(set(b))) Solution:\ndef solve(): # input n = int(inp()) s = inp() point = 0 max_n = 0 a_set = set(s[point]) b_set = set(s[point+1:]) while point \u003c n - 1: max_n = max(max_n, len(a_set) + len(b_set)) a_set.add(s[point + 1]) b_set = set(s[point+2:]) point += 1 if max_n == n: break return max_n def run(): for _ in range(inp_int()): print(solve()) if __name__ == \"__main__\": if os.environ.get(\"CODE_DEBUG\"): sys.stdin = open(\"./input.txt\", \"r\") start_time = time.time() run() print(\"\\n--- %s seconds ---\\n\" % (time.time() - start_time)) else: run() Optimization:\nb_set = set(s[point+2:]) is very heavy on each step in the loop.\nUse Counter instead.\ndef solve(): # input n = int(inp()) s = inp() point = 0 max_n = 0 a = set(s[point]) b = Counter(s[point+1:]) while point \u003c n - 1: max_n = max(max_n, len(a) + len(b)) point += 1 b_letter = s[point] a.add(b_letter) b[b_letter] -= 1 if b[b_letter] \u003c= 0: del b[b_letter] if max_n == n: break return max_n Explanation from Codeforces:\nLet’s check all splitting points 𝑖 for all (1≤𝑖≤𝑛−1). We denote a splitting point as the last index of the first string we take (and all the remaining characters will go to the second string). We need to keep a dynamic count of the number of distinct characters in both strings 𝑎 (the first string) and 𝑏 (the second string). We can do this using two frequency arrays (and adding one to the distinct count of either string 𝑎 or 𝑏 when the frequency of a character is greater than zero.\nE. Negatives and Positives https://codeforces.com/contest/1791/problem/E\ndp, greedy, sortings, *1100\nExplanation from Codeforces:\nWe can notice that by performing any number of operations, the parity of the count of negative numbers won’t ever change.\nThus, if the number of negative numbers is initially even, we can make it equal to 0 by performing some operations.\nSo, for an even count of negative numbers, the answer is the sum of the absolute values of all numbers (since we can make all of them positive). And if the count of negative numbers is odd, we must have one negative number at the end.\nWe will choose the one smallest by absolute value and keep the rest positive (for simplicity, we consider −0 as a negative number).\nSolution:\ndef solve(): n = inp_int() a = inp_int_list() count_minus = 0 count_zeros = 0 min_val = abs(a[0]) s = 0 # sum for i in range(n): if a[i] \u003c 0: count_minus += 1 if a[i] == 0: count_zeros += 1 v = abs(a[i]) s += v min_val = min(min_val, v) count_minus = count_minus % 2 # if count of odd numbers is negative count_minus -= count_zeros if count_minus \u003c= 0: return s if count_minus == 1: s -= abs(min_val * 2) return s return s def run(): for _ in range(inp_int()): print(solve()) run() Optimization:\ndef solve(): n = inp_int() a = inp_int_list() count_minus = 0 for i in range(n): if a[i] \u003c 0: count_minus += 1 a[i] = abs(a[i]) s = sum(a) # sum if count_minus % 2: return s - min(a) * 2 else: return s F. Range Update Point Query https://codeforces.com/contest/1791/problem/F\nThere are two types of inputs (cases) (in addition to array a and n of test cases):\nline with two elements: 2 x. Starts with 2 line with three elements: 1 l r. Starts with 1 In 1st case: print array a\nIn 2nd case: update the value of 𝑎𝑖 to the sum of its digits.\nSlow Solution:\ndef sum_of_digits(n): sum = 0 while n: sum += n % 10 n //= 10 return sum def solve(): n, q = map(int, inp().split()) a = list(map(int, inp().split())) while q: q -= 1 t, *params = map(int, inp().split()) if t == 1: l, r = params for i in range(l-1, r): a[i] = sum_of_digits(a[i]) else: x, = params print(a[x-1]) t = int(inp().strip()) for _ in range(t): # attempts solve() This solution is slow because of loop:\nfor i in range(l-1, r): a[i] = sum_of_digits(a[i]) The key here is the following: after the operation is applied on ai thrice, it won’t change after any further operations.\nProblem here is to implement a solution how to save information how many times there was a change of a[i].\nOne way is to use Fenwick Tree\nUse FenwickTree template Save there count of a[i] changes. No need to calculate more than 3 times When need to print a[x] calculate up to three times and print result. class Fenwick: #also known as Binary Indexed Tree (BIT) # no need to change here anything def __init__(self, n): self.n = n self.bit = [0] * (n+1) def add(self, idx, val): while idx \u003c= self.n: self.bit[idx] += val idx += idx \u0026 -idx def add_range(self, l, r, val): self.add(l, val) self.add(r+1, -val) def query(self, idx): #Calculates the sum of the elements from the beginning to idx ret = 0 while idx \u003e 0: ret += self.bit[idx] idx -= idx \u0026 -idx return ret def range_sum(self, l, r): # Return the sum of the elements from l (inclusive) to r (exclusive) return self.prefix_sum(r - 1) - self.prefix_sum(l - 1) def prefix_sum(self, x): # return sum upto and including element x z = x res = 0 while z \u003e= 0: res += self.bit[z] # Strip trailing zeros from z, and then take away one z = (z \u0026 (z + 1)) - 1 return res def solve(): n, q = list(map(int, inp().split())) a = list(map(int, inp().split())) tree = BIT(n) while q: q -= 1 t, *params = map(int, inp().split()) if t == 1: l, r = params tree.add(l, 1) tree.add(r + 1, -1) else: x, = params need = min(3, tree.query(x)) # get count of times need to change a[i] cur = a[x - 1] for i in range(need): cur = sum_of_digits(cur) print(cur) Good to know\nSegment Tree template tutorial A Visual Introduction to Fenwick Tree | medium Fenwick Tree | cp-algorithms Segment Tree | cp-algorithms Дерево отрезков | algorithmica Дерево Фенвика | algorithmica Дерево Фенвика | habr G1. Teleporters (Easy Version) https://codeforces.com/contest/1791/problem/G1\ngreedy, sortings *1100\nStatement:\nYou are playing a game where you are given a list of teleporters (0,2,…,𝑛), each located at a point on the number line. The number line includes all integers from 0 to n.\nAt point i, you can do one of three actions:\nMove left one unit: this action costs 1 coin. Move right one unit: this action also costs 1 coin. Use a teleporter at point i: this action costs $a_i$ coins. When you use a teleporter, you are immediately teleported back to point 0. Last statement in the problem means that at any point i on the number line, you have the option to use a teleporter located at that point, which will immediately transport you back to point 0. However, using a teleporter costs a certain number of coins, denoted by $a_i$. For example, if you are at point i = 5, and you use the teleporter located at point 5, you will be immediately transported back to point 0, but you will have to pay the cost $a_i$ in coins to do so.\nEssentially, the teleporters provide a way for you to quickly move back to the starting point (point 0) without having to take multiple steps, but this convenience comes at a cost. You can only use each teleporter once, and you must have enough coins to pay the cost of using it.\nYou start at point 0, and you have c coins to spend. Your goal is to use as many teleporters as possible while still having at least 1 coin left over. You cannot use a teleporter more than once.\nWrite a function max_teleporters(n, c, a) that takes in\nthe length of the number line n the number of coins you have c the list of teleporter costs a. The function should return the maximum number of teleporters you can use given your starting position at 0 and the number of coins you have to spend.\nYou may assume that n, c, and all elements of a are positive integers.\nFor example, the following input should return 2:\nn = 8 c = 32 a = [100, 52, 13, 6, 9, 4, 100, 35] max_teleporters(n, c, a) =\u003e 2 Will use greedy algorithm.\nApproach:\nGiven input: n = 8, c = 32, a = [100, 52, 13, 6, 9, 4, 100, 35]\nStep 1: Calculate the cost of each teleporter\nFor each teleporter at position i, add the index i and the cost a[i] The resulting array cost contains the costs to use each teleporter, accounting for the cost of moving to that teleporter’s position: [101, 54, 16, 10, 14, 10, 107, 43] Step 2: Sort the cost array in ascending order\nSorting the array ensures that we use the cheapest teleporters first Step 3: Compute the maximum number of teleporters we can use\nInitialize a variable used to 0 to keep track of how many teleporters we’ve used Iterate over the sorted cost array, adding the cost of each teleporter to a running total total If the current total is less than or equal to c, we can use the current teleporter, so increment used If the current total is greater than c, we’ve run out of coins and can’t use any more teleporters, so exit the loop Return the final value of used Step 4: Return the maximum number of teleporters we can use\nThe maximum number of teleporters we can use is the value of used computed in Step 3: 2 Solution:\ndef max_teleporters(n, c, a): # First, we add the index of each teleporter to its cost, so that we can easily # calculate the cost to reach each teleporter from the starting position (0). for i in range(n): a[i] += i + 1 # We then sort the list of teleporter costs in ascending order, so that we can # use the cheapest teleporters first. a.sort() # We iterate over the sorted list of teleporter costs, using as many teleporters # as possible while still having at least one coin remaining. We keep track of the # number of teleporters used in the \"used\" variable. used = 0 for cost in a: if cost \u003c= c: used += 1 c -= cost else: break # Finally, we return the number of teleporters used. return used Explanation from Codeforces:\nIt’s easy to see that it’s optimal to only move right or to use a portal once we are at it. We can notice that when we teleport back, the problem is independent of the previous choices.\nWe still are at point 0 and have some portals left. Thus, we can just find out the individual cost of each portal, sort portals by individual costs, and take them from smallest to largest by cost as long as we can.\nThe cost of portal 𝑖 is $𝑖+𝑎𝑖_$ (since we pay \u0026𝑎_𝑖\u0026 to use it and need 𝑖 moves to get to it).\nG2. Teleporters (Hard Version) https://codeforces.com/contest/1791/problem/G2\nbinary, search, greedy, sortings *1900\nExplanation from Codeforces:\nPlease also refer to the tutorial for the easy version.\nIf we are not at the first taken portal, the problem is still independent for each portal, but this time the cost of a portal is $𝑚𝑖𝑛(𝑎_𝑖+𝑖,𝑎_𝑖+𝑛+1−𝑖)$ (since we can come to a portal either from point 0 or point $𝑛+1$).\nSo, we again sort the portals by their costs. But this time, we need to make sure that the first taken portal is taken from point 0, so we will iterate over all portals and check the maximum amount of portals we can take if we use it as the first one.\nWe can check this using prefix sums over the minimum cost array and binary searching, checking if the amount of considered portals taken doesn’t exceed the number of coins we initially have (we also have to deal with the case when the portal we are considering is included both times as the initial portal and in the minimum cost prefix).\n","description":"Codeforces Round #849 (Div. 4) / 1791","title":"Round #849/1791 (Div. 4)","uri":"/en/tracks/algorithms-101/codeforces/contests/849-div-4-1791/"},{"content":" Contest problems A. TubeTube Feed Mushroom Filippov is having lunch and wants to watch a video on TubeTube. He has a specific amount of time for lunch, and he wants to make the best use of it by watching the most entertaining video that fits into his lunch break.\nGiven a list of videos, each with its duration and entertainment value, your task is to help Mushroom Filippov choose the best video to watch. He can only watch one video, and the video must not exceed his lunch break time.\nIf there are multiple videos that fit into his lunch time, choose the one with the highest entertainment value.\nLogic:\nIterate through the list of videos and checking if the video duration is less than or equal to the lunch time.\nIf it is, you then check if the entertainment value of that video is higher than the current highest entertainment value. If it is, update the highest entertainment value and remember the index of that video. After going through all the videos, you will have the index of the most entertaining video that fits into the lunch break time. 1822A Solution:\ndef solve(): n, t = map(int, input().split()) durations = list(map(int, input().split())) values = list(map(int, input().split())) max_value = 0 # max entertainment value max_index = -1 # Iterate through the videos for i in range(n): # If the video can be watched within the lunch break if i + durations[i] \u003c= t: if values[i] \u003e max_value: max_value = values[i] max_index = i + 1 print(max_index) for _ in range(int(input())): solve() ","description":"Codeforces Round #867 (Div. 3) / 1822","title":"Round #867/1822 (Div. 3)","uri":"/en/tracks/algorithms-101/codeforces/contests/867-div-3-1822/"},{"content":"About Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service. Route 53 connects user requests to internet applications running on AWS or on-premises.\nDocumentation User Guide A highly available and scalable Domain Name System (DNS) web service used for domain registration, DNS routing, and health checking.\nCan create and manage your public DNS records.\nWhat is the difference between Route 53 and DNS?\nYour DNS is the service that translates your domain name into an IP address. AWS Route 53 is a smart DNS system that can dynamically change your origin address based on load, and even perform load balancing before traffic even reaches your servers.\nAlternatives Cloudflare DNS. Google Cloud DNS. Azure DNS. GoDaddy Premium DNS. DNSMadeEasy. ClouDNS. UltraDNS. NS1. Routing Policies Simple routing policy – route internet traffic to a single resource that performs a given function for your domain. You can’t create multiple records that have the same name and type, but you can specify multiple values in the same record, such as multiple IP addresses.\nFailover routing policy – use when you want to configure active-passive failover.\nGeolocation routing policy – use when you want to route internet traffic to your resources based on the location of your users.\nGeoproximity routing policy – use when you want to route traffic based on the location of your resources and, optionally, shift traffic from resources in one location to resources in another.\nYou can also optionally choose to route more traffic or less to a given resource by specifying a value, known as a bias. A bias expands or shrinks the size of the geographic region from which traffic is routed to a resource. The effect of changing the bias for your resources depends on a number of factors, including the following: The number of resources that you have. How close the resources are to one another. The number of users that you have near the border area between geographic regions. Latency routing policy – use when you have resources in multiple locations and you want to route traffic to the resource that provides the best latency.\nIP-based routing policy – use when you want to route traffic based on your users’ locations, and know where the IP address or traffic is coming from.\nMultivalue answer routing policy – use when you want Route 53 to respond to DNS queries with up to eight healthy records selected at random.\nWeighted routing policy – use to route traffic to multiple resources in proportions that you specify.\nWhen you register a domain or transfer domain registration to Route 53, it configures the domain to renew automatically. The automatic renewal period is typically one year, although the registries for some top-level domains (TLDs) have longer renewal periods.\nWhen you register a domain with Route 53, it creates a hosted zone that has the same name as the domain, assigns four name servers to the hosted zone, and updates the domain to use those name servers.\nDigest Route 53 is AWS DNS service Map domain names to EC2 instances, Load Balancers and 53 buckets Routing Policies Simple - Traffic routed to a single resource Weighted - Traffic routed to a resource = weight assigned to the resource/sum of all the weights Latency - serves requests from the AWS region with low latency Geographical - routes the traffic based on the location of the request origin Failover - routes traffic to primary when primary healthy; secondary when primary is unhealthy Multivalue Answer - routs randomly to multiple healthy resources VPC - private network on AWS platform Subnet, NAT Instance, NAT Gatewav, Internet Gatewav, NACLs, Route Table VPC Wizard Single public subnet Public and Private subnet (NAT) Public and private subnet and AWS managed VPN access Private subnet only and AWS managed VPN access VPC Peering - helps transfer of data VPC Flow logs - helps capture information about incoming/outgoing traffic Direct Connect - dedicated connection from on premises network to VPC Price Pay only for what you use.\nCurrent price\nUse Cases Domain Registration / transfer Manage network traffic globally Set up private DNS ","description":"Amazon Route 53 - A reliable and cost-effective way to route end users to Internet applications","title":"Route 53","uri":"/en/tracks/aws-certified-developer-associate/route53/"},{"content":"About The Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements. Developed by J. Welles Wilder, the RSI is a very popular indicator that is used primarily to identify overbought and oversold conditions in a market.\nCalculating The RSI is calculated using the following steps:\nCalculate the average gain and the average loss over the specified period (usually 14 periods). Compute the relative strength (RS) which is the ratio of average gain to average loss. The RSI is then calculated using the formula: RSI = 100 - (100 / (1 + RS)) Formula RSI = 100 - (100 / (1 + RS))\nWhere:\nRS: (Relative Strength) = Average Gain / Average Loss Pros and Cons Pros:\nRSI is a versatile indicator that can be used in trending or ranging markets. It helps identify potential reversals, overbought/oversold conditions, and divergence. Cons:\nDuring strong trends, the RSI may remain overbought or oversold for extended periods. False signals can occur, especially during choppy market conditions. Example of signals Minute Open High Low Close 1 $10.0 $11.0 $9.5 $10.0 2 $10.1 $12.1 $10.0 $12.0 3 $12.2 $15.2 $12.0 $15.0 4 $15.1 $15.1 $13.9 $14.0 5 $14.1 $16.1 $14.0 $16.0 6 $16.1 $16.1 $14.9 $15.0 7 $15.1 $17.1 $15.0 $17.0 8 $17.1 $17.1 $15.9 $16.0 9 $16.1 $18.1 $16.0 $18.0 10 $18.1 $18.1 $16.9 $17.0 11 $17.1 $19.1 $17.0 $19.0 12 $19.1 $19.1 $17.9 $18.0 13 $18.1 $20.1 $18.0 $20.0 14 $20.1 $21.1 $20.0 $21.0 15 $21.1 $21.1 $19.9 $20.0 16 $20.1 $22.1 $20.0 $21.0 17 $21.1 $23.1 $21.0 $22.0 18 $22.1 $24.1 $22.0 $23.0 19 $23.1 $25.1 $23.0 $24.0 20 $24.1 $26.1 $24.0 $25.0 21 $25.1 $27.1 $25.0 $26.0 For the following examples, let’s assume the RSI settings are set to the standard 14 periods.\nTrue Positive:\nIn the 6th minute, the price drops from $16 to $15. The RSI dips below the 30 level, indicating an oversold condition. In the next minute, the price increases to $17, marking a successful buy signal.\nFalse Positive:\nIn the 21th minute, the price jumps from $25 to $26. The RSI exceeds 70, implying an overbought condition. However, the price continues to increase in the next minutes, rendering this a false sell signal.\nUse in Real Trading In real trading, RSI is often used in conjunction with other indicators to increase the robustness of the signals.\nFor instance, traders might look for price action patterns (like support/resistance breaks) or confirmations from other indicators before acting on an RSI signal.\nPython Implementation Click here to view this notebook in full screen ","description":"A comprehensive guide to the Relative Strength Index (RSI) trading indicator.","title":"RSI - Relative Strength Index","uri":"/en/posts/trading-indicators/rsi/"},{"content":"A Segment Tree is a data structure used for efficiently processing queries over intervals or ranges. It is commonly used for solving problems that involve finding information about a set of elements and their sub-intervals.\nSince a Segment Tree is a binary tree, a simple linear array can be used to represent the Segment Tree. Before building the Segment Tree, one must figure what needs to be stored in the Segment Tree’s node?.\nEach leaf node represents a single element, and each internal node represents the union of its children’s ranges. Queries are performed by traversing the tree from the root to the leaves, and aggregating information about the ranges that intersect with the query interval.\nExample 1, consider a set of numbers and the task of finding the minimum value in a range of these numbers. The Segment Tree can be used to solve this problem by storing the minimum value of each range in the tree’s internal nodes, and answering queries by searching for the smallest value in the portion of the tree that covers the query interval.\nExample 2, if the question is to find the sum of all the elements in an array from L indices to R, then at each node (except leaf nodes) the sum of its children nodes is stored.\nThe Segment Tree can be constructed in O(n log n) time, where n is the number of elements in the original set, and it can answer queries in O(log n) time. This makes it an efficient data structure for processing queries over large datasets.\nTo study the topic “segment tree” you need to know the following concepts:\narrays loops conditional operators bitwise operations A Segment Tree is a dynamic data structure used to perform operations on and update intervals. It supports two operations: Element update (update) on a given range and request (query) on the sum of elements in a given range.\nLet’s perform the following task: we have an array and we want to find the sum of the elements in a given range.\nFor this task, we can use a segment tree. It is constructed as a binary tree, where each node represents an interval and the value of the node is the sum of the elements in that interval.\nFundamentals:\nDefinition of a sum element in a segment tree: A sum element in a segment tree is the sum of all elements in the range it represents.\nConstructing a segment tree: A segment tree can be constructed from an array of numbers. Each node in the tree represents a range of elements in the array and stores the sum of the elements in that range.\nImplementation of operations: The implementation of various operations in a segment tree essentially depends on its structure. However, there are several operations that are often used in various tasks:\nUpdate value in the array: This operation allows you to change the value of an element in an array. It is usually implemented using a recursive tree traversal.\nQuery Value: This operation allows you to query the value of an element in an array. It is also usually implemented using recursive tree traversal.\nQuery for a sum: This operation allows you to query the sum of values in an array on a given interval. It is usually implemented by recursive tree traversal and sum counting\nBuilding a spanning tree Since the tree is binary, each vertex will have up to two descendants.\nGraphically it looks as follows (for an array of 8 elements):\nAt the topmost vertex the segment from the beginning of the array to the last element is fixed.\nOn the left is the left half of the parent ([0 1 2 3]). On the right is the right half ()[4 5 6 7]). And so on up to the last node with a segment of one element.\nTake the array a = [1, 3, -2, 8, -7]. We use it to build a tree of segments to write the sums of these segments in each node.\nThe structure of such a tree is as follows:\n💡 The tree contains less than 2n vertices. 2*n-1\nThe number of vertices in the worst case is estimated by the sum $n + \\frac{n}{2} + \\frac{n}{4} + \\frac{n}{8} + \\ldots + 1 \u003c 2n$\nLet us display such a tree as an array:\nThere are 9 vertices in such a tree. The array will consist of 9 elements. tree[0] = A[0:4] tree[1] = A[0:2] tree[2] = A[3:4] tree[3] = A[0:1] tree[4] = A[2:2] tree[5] = A[3:3] tree[6] = A[4:4] tree[7] = A[0:0] tree[8] = A[1:1] This tree covers all vertices.\nWith this structure, you can store different data in the vertex values, such as the sum of the segment, the smallest/the largest number, or other aggregate data on the segments.\nImplementing a segment tree in Python Initializing the tree\na = [1, 3, -2, 8, -7]\nSince the most recent nodes are segments of length == 1. So we start the process of creation with them, gradually rising to the level above.\n💡 The tree contains less than 2n vertices. 💡 Bottom vertex - the length of the segment is equal to 1.\ndef build_tree(array): n = len(array) tree = [0] * 2 * n # The tree contains less than **2n** vertices. for i in range(n): tree[n + i] = a[i] # the lowest tops of the tree # add parent nodes for i in reversed(range(n)): tree[i] = tree[2 * i] + tree[2 * i + 1] print(i, tree) \u003e\u003e array = [1, 3, -2, 8, -7] \u003e\u003e build_tree(array) 4 [0, 0, 0, 0, 1, 1, 3, -2, 8, -7] 3 [0, 0, 0, 1, 1, 1, 3, -2, 8, -7] 2 [0, 0, 2, 1, 1, 1, 3, -2, 8, -7] 1 [0, 3, 2, 1, 1, 1, 3, -2, 8, -7] 0 [3, 3, 2, 1, 1, 1, 3, -2, 8, -7] Calculating the sum on the segment:\nThe function gets the indexes of the original array.\nWhen we created the tree from the source array, we placed each individual element on the new index [n + i].\n💡 So when the function takes an index, we first find the bottommost element in the tree. It is located in the new array by the index [length_of_source_array + index]\n# calculate the sum on the segment def query_tree(l, r): global tree, n sum = 0 l += n # current item index r += n while l \u003c= r: if l % 2 == 1: # if the index is odd sum += tree[l] l += 1 if r % 2 == 0: sum += tree[r] r -= 1 l //= 2 # floor division. 8 // 3 = 2 r //= 2 return sum \u003e\u003e a = [1, 3, -2, 8, -7] \u003e\u003e n = len(a) \u003e\u003e tree = build_tree(a) \u003e\u003e query_tree(0, 4) # sum([1, 3, -2, 8, -7]) 3 \u003e\u003e query_tree(1, 3) # sum([3, -2, 8]) 9 \u003e\u003e query_tree(4, 4) -7 We get the SegmentTree class:\nSum function or any other function can be turned on at the time of tree generation\nclass SegmentTree: def __init__(self, a): self.n = len(a) self.tree = [0] * 2 * self.n for i in range(self.n): self.tree[self.n + i] = a[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2*i] + self.tree[2*i+1] def calculate_sum(self, l, r): sum = 0 l += self.n r += self.n while l \u003c= r: if l % 2 == 1: sum += self.tree[l] l += 1 if r % 2 == 0: sum += self.tree[r] r -= 1 l //= 2 r //= 2 return sum def find_value(self, l, r): l += self.n r += self.n while l \u003c r: if r % 2 == 0: r -= 1 else: r -= 1 l += 1 return l - self.n Segment Tree template class SegmentTree: def __init__(self, data, default=0, func=max): self._default = default self._func = func self._len = len(data) self._size = _size = 1 \u003c\u003c (self._len - 1).bit_length() self.data = [default] * (2 * _size) self.data[_size:_size + self._len] = data for i in reversed(range(_size)): self.data[i] = func(self.data[i + i], self.data[i + i + 1]) def __delitem__(self, idx): self[idx] = self._default def __getitem__(self, idx): return self.data[idx + self._size] def __setitem__(self, idx, value): idx += self._size self.data[idx] = value idx \u003e\u003e= 1 while idx: self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) idx \u003e\u003e= 1 def __len__(self): return self._len def query(self, start, stop): \"\"\"func of data[start, stop)\"\"\" start += self._size stop += self._size if start==stop: return self._default res_left = res_right = self._default while start \u003c stop: if start \u0026 1: res_left = self._func(res_left, self.data[start]) start += 1 if stop \u0026 1: stop -= 1 res_right = self._func(self.data[stop], res_right) start \u003e\u003e= 1 stop \u003e\u003e= 1 return self._func(res_left, res_right) def __repr__(self): return \"SegmentTree({0})\".format(self.data) The build_tree method builds a segment tree, and query allows you to perform query operations.\nLinks https://www.hackerearth.com/practice/data-structures/advanced-data-structures/segment-trees/tutorial/ ","description":"","title":"Segment Tree","uri":"/en/tracks/algorithms-101/data-structures/segment-tree/"},{"content":"“mongodb” free tier vs “documentdb”\nProject structure - src - app.py - mongo.py - .env - requirements.txt - serverless.yml Sources\nAdd AIM user Setup specific user for serverless deployment\nusername: serverless-deployer\naws aim documentation Set policy Create:\nServerLessDeployerPolicyGroup ServerLessDeployerPolicy Policy:\n{ \"Statement\": [ { \"Action\": [ \"apigateway:*\", \"cloudformation:CancelUpdateStack\", \"cloudformation:ContinueUpdateRollback\", \"cloudformation:CreateChangeSet\", \"cloudformation:CreateStack\", \"cloudformation:CreateUploadBucket\", \"cloudformation:DeleteStack\", \"cloudformation:Describe*\", \"cloudformation:EstimateTemplateCost\", \"cloudformation:ExecuteChangeSet\", \"cloudformation:Get*\", \"cloudformation:List*\", \"cloudformation:UpdateStack\", \"cloudformation:UpdateTerminationProtection\", \"cloudformation:ValidateTemplate\", \"dynamodb:CreateTable\", \"dynamodb:DeleteTable\", \"dynamodb:DescribeTable\", \"dynamodb:DescribeTimeToLive\", \"dynamodb:UpdateTimeToLive\", \"ec2:AttachInternetGateway\", \"ec2:AuthorizeSecurityGroupIngress\", \"ec2:CreateInternetGateway\", \"ec2:CreateNetworkAcl\", \"ec2:CreateNetworkAclEntry\", \"ec2:CreateRouteTable\", \"ec2:CreateSecurityGroup\", \"ec2:CreateSubnet\", \"ec2:CreateTags\", \"ec2:CreateVpc\", \"ec2:DeleteInternetGateway\", \"ec2:DeleteNetworkAcl\", \"ec2:DeleteNetworkAclEntry\", \"ec2:DeleteRouteTable\", \"ec2:DeleteSecurityGroup\", \"ec2:DeleteSubnet\", \"ec2:DeleteVpc\", \"ec2:Describe*\", \"ec2:DetachInternetGateway\", \"ec2:ModifyVpcAttribute\", \"events:DeleteRule\", \"events:DescribeRule\", \"events:ListRuleNamesByTarget\", \"events:ListRules\", \"events:ListTargetsByRule\", \"events:PutRule\", \"events:PutTargets\", \"events:RemoveTargets\", \"iam:AttachRolePolicy\", \"iam:CreateRole\", \"iam:DeleteRole\", \"iam:DeleteRolePolicy\", \"iam:DetachRolePolicy\", \"iam:GetRole\", \"iam:PassRole\", \"iam:PutRolePolicy\", \"iot:CreateTopicRule\", \"iot:DeleteTopicRule\", \"iot:DisableTopicRule\", \"iot:EnableTopicRule\", \"iot:ReplaceTopicRule\", \"kinesis:CreateStream\", \"kinesis:DeleteStream\", \"kinesis:DescribeStream\", \"lambda:*\", \"logs:CreateLogDelivery\", \"logs:CreateLogGroup\", \"logs:DeleteLogGroup\", \"logs:DescribeLogGroups\", \"logs:DescribeLogStreams\", \"logs:FilterLogEvents\", \"logs:GetLogEvents\", \"logs:PutSubscriptionFilter\", \"s3:CreateBucket\", \"s3:DeleteBucket\", \"s3:DeleteBucketPolicy\", \"s3:DeleteObject\", \"s3:DeleteObjectVersion\", \"s3:GetObject\", \"s3:GetObjectVersion\", \"s3:ListAllMyBuckets\", \"s3:ListBucket\", \"s3:PutBucketNotification\", \"s3:PutBucketPolicy\", \"s3:PutBucketTagging\", \"s3:PutBucketWebsite\", \"s3:PutEncryptionConfiguration\", \"s3:PutObject\", \"sns:CreateTopic\", \"sns:DeleteTopic\", \"sns:GetSubscriptionAttributes\", \"sns:GetTopicAttributes\", \"sns:ListSubscriptions\", \"sns:ListSubscriptionsByTopic\", \"sns:ListTopics\", \"sns:SetSubscriptionAttributes\", \"sns:SetTopicAttributes\", \"sns:Subscribe\", \"sns:Unsubscribe\", \"states:CreateStateMachine\", \"states:DeleteStateMachine\" ], \"Effect\": \"Allow\", \"Resource\": \"*\" } ], \"Version\": \"2012-10-17\" } Create user copy the API Key \u0026 Secret\nNeed during setup aws cli/serverless\nCreate serverless.yml In the root folder create:\norg: romankurnovskii app: app-name service: app-service-name frameworkVersion: '3' useDotenv: true custom: wsgi: app: src/app.app packRequirements: false provider: name: aws deploymentMethod: direct region: eu-west-1 runtime: python3.9 architecture: arm64 versionFunctions: false memorySize: 128 functions: api: handler: wsgi_handler.handler events: - httpApi: '*' environment: MONGO_CONNECTION_STRING: ${env:MONGO_CONNECTION_STRING} MONGO_COLLECTION_DB_NAME: ${env:MONGO_COLLECTION_DB_NAME} package: patterns: - '!.dynamodb/**' - '!.git/**' - '!.vscode/**' - '!.env' - '!node_modules/**' - '!tmp/**' - '!venv/**' - '!__pycache__/**' plugins: - serverless-wsgi - serverless-python-requirements Create Flask app Prerequisites python -m venv ./venv source ./venv/bin/activate App src/app.py\nfrom flask import Flask, ObjectId, request, jsonify, make_response from flask_cors import CORS import json from src.mongo import my_db users_collection = my_db.users app = Flask(__name__) cors = CORS(app) @app.route(\"/\", methods=['GET']) def get_user(user_id): user_id = request.args.get('id') user = users_collection.find_one({\"_id\": ObjectId(user_id)}) if not user: return jsonify({'error': 'data not found'}), 404 return jsonify({'user': user}) @app.route('/', methods=['PUT']) def create_record(): record = json.loads(request.data) user_id = record.get('user_id', None) users_collection.update_one({\"_id\": ObjectId(user_id)}, record) @app.route(\"/\") def hello(): return jsonify(message='Hello!') @app.errorhandler(404) def resource_not_found(e): return make_response(jsonify(error='Not found!'), 404) def internal_server_error(e): return 'error', 500 app.register_error_handler(500, internal_server_error) src/mongo.py\nimport os from pymongo import MongoClient MONGO_CONNECTION_STRING = os.environ.get( \"MONGO_CONNECTION_STRING\", default=\"mongodb://localhost:27017/\" ) MONGO_COLLECTION_DB_NAME = os.environ.get( \"MONGO_COLLECTION_DB_NAME\", default=\"test-mydb\" ) db_client = MongoClient(MONGO_CONNECTION_STRING) my_db = db_client[MONGO_COLLECTION_DB_NAME] .env\nMONGO_CONNECTION_STRING=mongodb+srv://login:password@cluster0.XXXXX.mongodb.net/mydb?retryWrites=true\u0026w=majority MONGO_COLLECTION_DB_NAME=mydb src/requirements.txt\ncertifi==2022.6.15 charset-normalizer==2.1.1 click==7.1.2 dnspython==2.2.1 ecdsa==0.18.0 Flask==1.1.4 Flask-Cors==3.0.10 idna==3.3 importlib-metadata==4.12.0 itsdangerous==1.1.0 Jinja2==2.11.3 jmespath==1.0.1 MarkupSafe==2.0.1 pyasn1==0.4.8 pymongo==4.2.0 python-dateutil==2.8.2 python-dotenv==0.20.0 requests==2.28.1 rsa==4.9 six==1.16.0 urllib3==1.26.12 Werkzeug==1.0.1 zipp==3.8.1 Deployment serverless login install dependencies with:\nnpm install and\npip install -r requirements.txt and then perform deployment with:\nserverless deploy After running deploy, you should see output similar to:\nDeploying app-service-name to stage dev (eu-west-1) ✔ Service deployed to stack app-service-name (182s) Local development Thanks to capabilities of serverless-wsgi, it is also possible to run your application locally, however, in order to do that, you will need to first install werkzeug dependency, as well as all other dependencies listed in requirements.txt. It is recommended to use a dedicated virtual environment for that purpose. You can install all needed dependencies with the following commands:\nAlready in requirements.txt:\npip install werkzeug pip install -r requirements.txt At this point, you can run your application locally with the following command:\nserverless wsgi serve For additional local development capabilities of serverless-wsgi plugin, please refer to corresponding GitHub repository.\n","description":"Create AWS serverless application on Flask + API Gateway + Lambda + MongoDB","title":"Serverless: Flask+API Gateway+Lambda+MongoDB","uri":"/en/posts/serverless-flask-lambda-api-gateway-mongodb/"},{"content":"Lab Sessionizing Clickstream Data with Amazon Kinesis Data Analytics Creating an Amazon Kinesis Data Analytics Application 1. In the AWS Management Console search bar, enter Kinesis, and click the Kinesis result under Services:\nYou will be taken to the Amazon Kinesis dashboard.\nIn this lab, a Kinesis Data Stream has been pre-created for you. Under Data Streams you will see Total data streams is one:\n2. In the left-hand menu, click Analytics applications and under that click SQL applications:\n3. To start creating a Kinesis Data Analytics application, under Data Analytics, click Create SQL application (legacy):\nYou will be taken to the Create legacy SQL application form.\n4. In the Application configuration section, and enter lab-application in the Application name textbox:\n5. At the bottom of the page, click Create legacy SQL application:\nYou will be taken to a page displaying details of your application and you will see a notification that your application has been created:\nYou will come back to this page later in the lab to connect the pre-created Kinesis Data Stream as a data source for your Kinesis Data Analytics application.\n6. To navigate to the Kinesis Data Streams list page, in the left-hand side menu, click Data streams:\nYou will see one data stream listed called lab-stream.\n7. To view the details of the pre-created data stream, in the list, click lab-stream:\nYou will be taken to the Stream details page and you will see a series of tabs with Monitoring selected.\n8. To see the configuration details of the data stream, click Configuration:\nTake a moment to look at the details on this page, there are several Kinesis Data Stream configuration options that you should be aware of:\nData Stream capacity: The number of shards in the Data Stream. Each shard has a maximum read and write capacity. To increase the total capacity of a data stream you can add shards. Encryption: Kinesis Data Streams can be encrypted using an AWS managed or customer-managed, KMS key. Data retention: A Kinesis Data Stream can retain data for a configurable amount of time between 24 and 168 hours. Enhanced (shard-level) metrics: More detailed CloudWatch metrics can be enabled for a Data Stream, these enhanced metrics have an extra cost. In this lab, you will be working with a small amount of sample data, so there is one shard configured.\nLeave these options without changing them.\nConnecting to the Virtual Machine using EC2 Instance Connect 1. In the AWS Management Console search bar, enter EC2, and click the EC2 result under Services:\n2. To see available instances, click Instances in the left-hand menu:\nThe instances list page will open, and you will see an instance named cloudacademylabs:\nIf you don’t see a running instance then the lab environment is still loading. Wait until the Instance state is Running.\n3. Right-click the cloudacademylabs instance, and click Connect:\nThe Connect to your instance form will load.\n4. In the form, ensure the EC2 Instance Connect tab is selected:\nYou will see the instance’s Instance ID and Public IP address displayed.\n5. In the User name textbox, enter ec2-user:\nNote: Ensure there is no space after ec2-user or connect will fail.\n6. To open a browser-based shell, click Connect:\nIf you see an error it’s likely that the environment hasn’t finished setting up. Check for Setup completed at the top-left corner of the lab and try connecting again:\nA browser-based shell will open in a new window ready for you to use.\nKeep this window open, you will use it in later lab steps.\nYou can also connect to the instance using your preferred SSH client and the PPK (Windows) or PEM (Mac/Linux) key files in the Credentials section of this lab.\nSimulating a Real-Time Clickstream 1. To create a template JSON file for a click event, enter the following command into the shell:\necho '{ \"user_id\": \"$USER_ID\", \"event_timestamp\": \"$EVENT_TIMESTAMP\", \"event_name\": \"$EVENT_NAME\", \"event_type\": \"click\", \"device_type\": \"desktop\" }' \u003e click.json There are two parts to this command, the first uses the built-in Bash command echo to print a JSON template. The second part uses a feature of the Bash shell called redirection, it redirects the output of the echo command to a file (creating it if doesn’t exist) called click.json.\nThe template contains five fields, the event_type, and device_type fields are hardcoded, in a non-lab environment, you may encounter streams that come from different types of devices and streams that contain more than one type of event (clickstream events alongside sales or transaction data for example). The other fields will be populated dynamically.\n2. To put records into Kinesis and simulate a clickstream, enter the following command:\nUSER_IDS=(user1 user2 user3) EVENTS=(checkout search category detail navigate) for i in $(seq 1 3000); do echo \"Iteration: ${i}\" export USER_ID=\"${USER_IDS[RANDOM%${#USER_IDS[@]}]}\"; export EVENT_NAME=\"${EVENTS[RANDOM%${#EVENTS[@]}]}\"; export EVENT_TIMESTAMP=$(($(date +%s) * 1000)) JSON=$(cat click.json | envsubst) echo $JSON aws kinesis put-record --stream-name lab-stream --data \"${JSON}\" --partition-key 1 --region us-west-2 session_interval=15 click_interval=2 if ! (($i%60)); then echo \"Sleeping for ${session_interval} seconds\" \u0026\u0026 sleep ${session_interval} else echo \"Sleeping for ${click_interval} second(s)\" \u0026\u0026 sleep ${click_interval} fi done You will see the templated JSON and also the JSON response from Kinesis for each record put into the Data Stream:\nThis command simulates a real-time click-stream with the following characteristics:\nCreates three thousand events Events have a two-second interval between them After every sixty events (two minutes) there is a fifteen-second interval, later you will assume a gap of ten seconds or more is a session boundary The command has a number of parts:\nSetup of sample user ids and event types at the beginning A loop that will execute three thousand times and a sleep statement Statements that randomly select a user id and an event type, and assign them along with the current timestamp to variables A statement that uses the envsubst command to substitute defined environment variables in the JSON template A statement invoking the AWS command-line interface tool, putting the templated JSON record into the Kinesis Data Stream A condition at the end of the loop that either sleeps for a few seconds or, periodically for longer, simulating the end of a session Leave the command running.\nNavigate to Kinesis Data Analytics in the AWS Management Console. 4. In the list of applications, to expand the application, click lab-application:\n5. To connect your Data Analytics application to the pre-created Data Stream, click ConfigureunderSource streamform:\nThe Configure source for lab-application form will load.\n6. Under Source, ensure Kinesis data stream is selected:\n7. In the Kinesis data stream, click Browse to select the radio button for lab-streamand clickChoose:\n8. Under Access permissions, select Choose from IAM roles that Kinesis Data Analytics can assume:\n9. In the IAM role list, select the role beginning with cloudacademy-lab-data-analytics:\nIf you don’t see the above role listed click the refresh button:\n10. To start discovering the schema of the records you added to the Data Stream, click Discover schema:\nAfter a moment or two, you will see a notification that the discovery was successful and below, some of the records will be displayed:\n11. To finish connecting your Data Analytics application to your Data Stream, click Save changes:\nYou will be redirected to the page for your Kinesis Data Analytics application. Leave this page open in a browser tab.\nSessionizing the Clickstream Data using Amazon Kinesis Data Analytics 1. Return to the page for your Kinesis Data Analytics application in the AWS Management Console.\n2. To start your application and expand the Steps to configure your application, click Configure SQL:\n3. In the SQL code editor, replace the existing contents with the following SQL commands\nCREATE OR REPLACE STREAM \"INTERMEDIATE_SQL_STREAM\" ( \"event_timestamp\" TIMESTAMP, \"user_id\" VARCHAR(7), \"device_type\" VARCHAR(10), \"session_timestamp\" TIMESTAMP ); CREATE OR REPLACE PUMP \"STREAM_PUMP1\" AS INSERT INTO \"INTERMEDIATE_SQL_STREAM\" SELECT STREAM TO_TIMESTAMP(\"event_timestamp\") as \"event_timestamp\", \"user_id\", \"device_type\", CASE WHEN (\"event_timestamp\" - lag(\"event_timestamp\", 1) OVER (PARTITION BY \"user_id\" ROWS 1 PRECEDING)) \u003e (10 * 1000) THEN TO_TIMESTAMP(\"event_timestamp\") WHEN (\"event_timestamp\" - lag(\"event_timestamp\", 1) OVER (PARTITION BY \"user_id\" ROWS 1 PRECEDING)) IS NULL THEN TO_TIMESTAMP(\"event_timestamp\") ELSE NULL END AS \"session_timestamp\" FROM \"SOURCE_SQL_STREAM_001\"; These statements do the following:\nDefines an intermediate stream to insert data into called INTERMEDIATE_SQL_STREAM Creates a PUMP that selects data from the source stream The SELECT statement uses the LAG function to determine if there is a ten-second interval between the last event and the current event The LAG function statements are used with PARTITION statements to restrict the LAG function by the user You should know that Kinesis Data Analytics natively assumes Unix timestamps include milliseconds. The stream you simulated is providing timestamps with milliseconds. This is why the CASE WHEN statement that checks for a ten-second interval includes (10 * 1000), it’s multiplying ten by one thousand to get ten seconds in milliseconds.\nTip: you can increase the height of the SQL editor text-box by dragging the grey bar at the bottom.\n4. To execute the SQL statements, click Save and run application:\nThe query will take up to a couple of minutes to execute and start returning results.\nOccasionally you may see an error caused by the fifteen-second interval, if you do, re-run the query by clicking Save and run application again.\nTake a look at the results. Notice that only some records have a value for session_timestamp. This is because the CASE WHEN statement in the query supplies a value of null when:\nThe interval between event timestamps is less than ten seconds There is no preceding event Also notice that below the SQL Code editor, there are two streams, the INTERMEDIATE_SQL_STREAM, and an error_stream. The error stream is where any errors that occur during the execution of the SQL will be delivered to.\n5. In the SQL editor window, under the current SQL statements, add the following:\nCREATE OR REPLACE STREAM \"DESTINATION_SQL_STREAM\" ( \"user_id\" CHAR(7), \"session_id\" VARCHAR(50), \"session_time\" VARCHAR(20), \"latest_time\" VARCHAR(20) ); CREATE OR REPLACE PUMP \"STREAM_PUMP2\" AS INSERT INTO \"DESTINATION_SQL_STREAM\" SELECT STREAM \"user_id\", \"user_id\"||'_'||\"device_type\"||'_'||TIMESTAMP_TO_CHAR('HH:mm:ss', LAST_VALUE(\"session_timestamp\") IGNORE NULLS OVER (PARTITION BY \"user_id\" RANGE INTERVAL '24' HOUR PRECEDING)) AS \"session_id\", TIMESTAMP_TO_CHAR('HH:mm:ss', \"session_timestamp\") AS \"session_time\", TIMESTAMP_TO_CHAR('HH:mm:ss', \"event_timestamp\") AS \"latest_time\" FROM \"INTERMEDIATE_SQL_STREAM\" WHERE \"user_id\" = 'user1'; These SQL statements do the following:\nCreates a stream called DESTINATION_SQL_STREAM Creates a PUMP that selects from the INTERMEDIATE_SQL_STREAM Constructs a session_id by combining the user, device type and time Restricts the query to user1 using a WHERE clause Something else to note about these statements is that the session and event timestamps are being converted to times.\n6. To run the updated query, click Save and run application.\nYou will see results similar to:\nYour times will be different.\nNotice that the session_time values are more than ten seconds apart. And that the seconds’ interval of the latest_time column between the rows that have a session time, is ten seconds or less.\n7. To see only the rows for new sessions, replace the last line of the query with the following:\nWHERE \"session_timestamp\" IS NOT NULL; This change to the WHERE clause of the last SQL statement removes the restriction of the query to user1, and removes rows where the value of session_timestamp is null.\n8. Click Save and run application to re-run your query.\nYou will see results similar to the following:\nYour results will be different.\nThe results now contain only session boundary rows for each of the users.\nLeave this browser tab open with the query running in Kinesis Data Analytics.\nCreating an AWS Lambda function to Store Sessions in an Amazon DynamoDB Table 1. In the AWS Management Console search bar, enter Lambda, and click the Lambda result under Services:\n2. To start creating your function, click Create function:\n3. Under Create function, ensure Author from scratch is selected:\n4. Under Basic information, in the Function name text-box, enter lab-function:\n5. In the Runtime drop-down, select the latest Python 3.x version available.\n6. To expand the role selection form, click Change default execution role.\n7. Under Execution role, select the Use an existing role radio button:\n8. To assign an execution role, in the Existing role drop-down, select the role called cloudacademy-lab-lambda:\n9. To create your function, click Create function:\nYou will be taken a page where you can configure your function, and you will see a notification that your function has been successfully created:\n10. Scroll down to the Code source section and in the code editor double-click the lambda_function.py file.\n11. To update your Lambda function’s implementation, replace the code in the editor window with the following:\nfrom __future__ import print_function import boto3 import base64 from json import loads dynamodb_client = boto3.client('dynamodb') table_name = \"CloudAcademyLabs\" def lambda_handler(event, context): payload = event['records'] output = [] success = 0 failure = 0 for record in payload: try: payload = base64.b64decode(record['data']) data_item = loads(payload) ddb_item = { 'session_id': { 'S': data_item['session_id'] }, 'session_time': { 'S': data_item['session_time'] }, 'user_id': { 'S': data_item['user_id'] } } dynamodb_client.put_item(TableName=table_name, Item=ddb_item) success += 1 output.append({'recordId': record['recordId'], 'result': 'Ok'}) except Exception: failure += 1 output.append({'recordId': record['recordId'], 'result': 'DeliveryFailed'}) print('Successfully delivered {0} records, failed to deliver {1} records'.format(success, failure)) return {'records': output} This python code processes a record from Kinesis Data Analytics and puts it into a DynamoDB table.\nThe implementation is based on one provided by AWS. The only change is the statements that construct the ddb_item. They have been modified to match the data being supplied by your Kinesis Data Analytics application.\n12. To deploy your function, at the top, click Deploy:\nYou will see a notification that your function has been deployed:\n13. To configure a timeout for your function, click the Configuration tab, and click Edit:\n14. Under Timeout, enter 1 in the min text-box, and 0 in the sec text-box:\nYou are updating the timeout because the default of three seconds is too low when processing data from Kinesis Data Analytics, and may lead to failures caused by the function timing out. AWS recommends setting a higher timeout to avoid such failures.\n15. To save your function’s updated timeout, click Save:\nYou will see a notification that your change to the timeout has been saved:\nConfiguring Amazon Kinesis Data Analytics to Use Your AWS Lambda Function as a Destination 1. Navigate to Kinesis Data Analytics in the AWS Management Console.\n2. In the list of applications, to expand the application, click lab-application:\n3. To begin configuring your Lambda as a destination, expand the Steps to configure your application and click Add destination:\nThe Configure destination form will load.\n4. Under Destination select AWS Lambda function:\n5. Under AWS Lambda function, click Browse and check radio box for lab-functionfollowed by clickingChoose:\nThis is the Lambda function you created in the previous lab step.\n6. Under Access permissions, ensure Choose from IAM roles that Kinesis Data Analytics can assume is selected:\n7. In the IAM role drop-down, select the role called cloudacademy-lab-lambda:\nThis is a role that has been pre-created for this lab and allows Kinesis Data Analytics to invoke your Lambda function.\n8. In the In-application stream section, under Connect in-application stream, select Choose an existing in-application stream:\n9. In the In-application stream name drop-down, select DESTINATION_SQL_STREAM:\n10. To finish connecting your Kinesis Data Analytics application to your Lambda function, click Save changes:\nYour Kinesis Data Analytics application is being updated. Please be aware that it can take up to three minutes to complete.\nOnce complete the details page for Kinesis Data Analytics application will load.\n11. In the AWS Management Console search bar, enter DynamoDB, and click the DynamoDB result under Services:\n12. In the left-hand menu, click Tables:\n13. In the list of tables, click CloudAcademyLabs:\nThis table was pre-created as a part of this lab.\n14. To see items in the DynamoDB table, click the Explore Table****Items button:\nYou will see the items in the table listed similar to:\nThese items have been inserted into the DyanmoDB table by your Lambda function, it’s being invoked by your Kinesis Data Analytics application.\n","description":"Sessionizing Clickstream Data with Amazon Kinesis Data Analytics","title":"Sessionizing Clickstream Data with Amazon Kinesis Data Analytics","uri":"/en/tracks/aws-certified-developer-associate/kinesis/sessionizing-clickstream-data-kinesis-data-analytics/"},{"content":"1. Setting up the EC2 Instance Launch an EC2 Instance Choose an Ubuntu Server image. Select an appropriate instance type. Configure instance details, storage, and security group. Ensure your security group allows inbound traffic on the ports you plan to use for your proxy (typically port 3128 for Squid). Review and launch the instance. Create and download a key pair for SSH access. (optional, can connect through AWS console later) 2. Connect to Your Instance Use SSH client with the instance’s public DNS/IP and the key pair:\nssh -i /path/to/your-key.pem ubuntu@your-instance-public-dns Or through AWS Session Manager\nInstalling and Configuring Squid Install Squid Update package lists: sudo apt-get update Install Squid: sudo apt-get install squid apache2-utils Configure Squid with Authentication Open the Squid configuration file: sudo nano /etc/squid/squid.conf Configure basic settings: Set http_port to your desired port, typically 3128.\nAdd the following lines for basic authentication:\nauth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd auth_param basic realm proxy acl authenticated proxy_auth REQUIRED http_access allow authenticated Create a username and password\nUse htpasswd to create an encrypted password file and user\napt install apache2-utils sudo htpasswd -c /etc/squid/passwd your_username You’ll be prompted to enter and confirm a password for your_username.\nSave and close the file.\nRestart Squid: Apply configuration changes: sudo systemctl restart squid Testing the Proxy From a client machine, try accessing the internet or a specific website while the proxy settings are enabled. You should be able to browse the internet through your EC2 proxy. ","description":"Learn how to set up and configure a Squid proxy server on an Amazon EC2 instance with this comprehensive guide. Perfect for beginners and seasoned users alike.","title":"Set Up Proxy on Amazon EC2 Ubuntu","uri":"/en/posts/linux/setup-proxy-server-ec2-ubuntu/"},{"content":"Setting Up Your First VPS: Secure Configuration Guide When setting up a new VPS, securing access is critical to prevent unauthorized usage.\nIn this guide, you’ll:\ncreate a new user disable SSH root access configure SSH key-based authentication for added security. Update and Upgrade Packages apt update apt upgrade -y Step 1: Initial Login as Root By default, VPS providers often grant root access. Start by logging in using the provided credentials:\nssh root@\u003cyour-server-ip\u003e Step 2: Create a New User Replace with your preferred username:\nuseradd -m -s /bin/bash -G sudo \u003cusername\u003e In case of delete the User:\nuserdel -r \u003cusername\u003e -r: Removes the user’s home directory.\nStep 3: Configure SSH Key-Based Authentication 3.1. Generate an SSH Key Pair (Local Machine) On your local machine (not the VPS), check if you already have an SSH key:\nls ~/.ssh Look for files like id_rsa and id_rsa.pub. If these files exist, you already have an SSH key. Skip to 3.2 to retrieve your public key.\nIf no SSH key exists, generate one with the following command:\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" -t rsa: Specifies the RSA algorithm. -b 4096: Sets the key size to 4096 bits (more secure). -C \"your_email@example.com\": Adds a comment to identify the key. Follow the prompts:\nPress Enter to save the key in the default location (~/.ssh/id_rsa). Optionally, set a passphrase for additional security. 3.2. Retrieve Your Public Key Your public key is stored in the file ~/.ssh/id_rsa.pub. To display it, run:\ncat ~/.ssh/id_rsa.pub You’ll see a string that starts with ssh-rsa:\nssh-rsa AAAAB3Nza...your-key... your_email@example.com Copy this entire string to your clipboard.\n3.3. Add Your Public Key to the VPS Log in to your VPS as :\nsu - \u003cusername\u003e Create the .ssh directory in the home folder:\nmkdir -p ~/.ssh chmod 700 ~/.ssh Open the authorized_keys file:\nvi ~/.ssh/authorized_keys Paste your public key into the file and save it.\nSet the appropriate permissions:\nchmod 600 ~/.ssh/authorized_keys 3.4. Test SSH Key Authentication On your local machine, test the connection to your VPS using the myuser account:\nssh \u003cusername\u003e@\u003cyour-server-ip\u003e # if using port: ssh -p \u003cport\u003e \u003cusername\u003e@\u003cyour-server-ip\u003e If the setup is correct, you’ll log in without being prompted for a password.\nStep 4: Disable Root SSH Login Edit the SSH Configuration File\nOpen the SSH daemon configuration file:\nsudo vi /etc/ssh/sshd_config Update the Following Settings\nDisable root login:\nPermitRootLogin no Disable password authentication:\nPasswordAuthentication no Save and Exit the file, then restart the SSH service:\nsudo systemctl restart sshd Step 5: Final Security Check Test New Configuration\nOpen a new terminal and verify that:\nYou can log in with the new user. Root login is disabled. Password-based login is disabled. Firewall Setup (Optional) Enable the firewall and allow only SSH traffic:\nufw allow OpenSSH ufw enable Step 6: Backup and Monitor Backup Your SSH Keys Ensure your private key is securely stored on your local machine.\nMonitor Login Attempts Check login activity using:\ncat /var/log/auth.log ","description":"A step-by-step guide to setting up a secure Debian VPS by creating a new user, disabling root access, and enabling SSH key-based authentication.","title":"Set Up Your First VPS on Debian","uri":"/en/posts/linux/debian-vps-initial-setup/"},{"content":"Today, I embarked on a journey to create an accessible, affordable, and easy-to-use VPN solution that anyone can set up on their devices using AWS.\nFinding a reasonably priced solution was critical. I opted for Amazon’s t3a.nano ARM Ubuntu image, which costs ~$0.0047/hour ~ $3.8/month.\nVarious Amazon EC2 instances and their prices are listed on Amazon’s On-Demand Pricing page.\nHere is the list of all Ubuntu AMI images to identify the appropriate image for the project. The selected image combined with the CloudFormation template, which was inspired by the AWS CloudFormation General Reference, provides a seamless and consistent user experience.\nNow it takes 2-3 minutes to create OpenVPN server using this repo.\n","description":"Setup OpenVPN on AWS EC2","title":"Setup OpenVPN Server on AWS EC2 Ubuntu","uri":"/en/stories/002-openvpn-aws-ec2-setup/"},{"content":"TLDR Code sources\nCreate Projects Creating three example projects:\nnode.js express server that returns json on request another node.js express server static html page Place projects data in dir ‘projects’.\nStructure:\n└── project ├── Dockerfile ├── nginx.conf ├── projects | ├── 1 | | ├── app.js | | └── package.json | ├── 2 | | ├── app.js | | └── package.json | └── 3 | └── index.html └── start.sh Nginx setup Server needs to “understand” the initial subdomain and where to forward.\nFor this use reverse proxy\nnginx.conf:\nworker_processes 1; events { worker_connections 1024; } http { sendfile on; server { listen 80; server_name mydomain1.localhost; location / { proxy_pass http://localhost:3000; } } server { listen 80; server_name mydomain2.localhost; location / { proxy_pass http://localhost:4000; } } server { listen 80; server_name mydomain3.localhost; root /var/www/domains/mydomain_with_static_files; location / { try_files $uri $uri/ =404; } } } Start apps To start js applications need to run node command.\nstart.sh:\n#!/bin/sh # Start the first app node /opt/projects/1/app.js \u0026 # Start the second app node /opt/projects/2/app.js \u0026 # Start nginx in the foreground nginx -g 'daemon off;' Docker file Next, we’ll create a Dockerfile to define the ‘centos’ Docker container where we can test our setup. Here’s what the Dockerfile looks like:\nFROM centos:latest # fixes RUN cd /etc/yum.repos.d/ RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-* RUN yum update -y \u0026\u0026 yum install -y curl vim git RUN curl -sL https://rpm.nodesource.com/setup_14.x | bash - RUN yum install -y nodejs # Install Nginx RUN yum install -y epel-release RUN yum install -y nginx RUN mkdir -p /opt/projects/1 ADD ./projects/1 /opt/projects/1 WORKDIR /opt/projects/1 RUN npm install RUN mkdir -p /opt/projects/2 ADD ./projects/2 /opt/projects/2 WORKDIR /opt/projects/2 RUN npm install RUN mkdir -p /var/www/domains/mydomain_with_static_files ADD ./projects/3 /var/www/domains/mydomain_with_static_files COPY start.sh /opt/projects/start.sh RUN chmod +x /opt/projects/start.sh EXPOSE 80 COPY nginx.conf /etc/nginx/nginx.conf RUN ls -la /etc/nginx/ # CMD [\"nginx\", \"-g\", \"daemon off;\"] CMD [\"/opt/projects/start.sh\"] Test run Build docker image and run docker build -t myserver . docker run -p 80:80 myserver Open in browser on host: project 1: http://mydomain1.localhost project 2: http://mydomain2.localhost project 3: http://mydomain3.localhost ","description":"Setup subdomains on VPS CentOS. Example with Docker image.","title":"Setup subdomains on VPS CentOS","uri":"/en/posts/vps-docker-subdomains-setup/"},{"content":" Create ","description":"Generate short description from article","title":"Short description from article","uri":"/en/tracks/disser/utils/text_2_short/"},{"content":"About The Simple Moving Average (SMA) is a technical indicator that calculates the average price over a specific number of periods, and it moves along as new data is added, making it a “moving average”.\nCalculating Formula SMA = (Sum of price data for the last N periods) / N\nFor example, a 5-period SMA would sum up the last 5 closing prices and divide it by 5 to find the average. It is called a ‘moving’ average because as new prices become available, the oldest prices are dropped and the average recalculates.\nMinute Open High Low Close SMA 1 $10.0 $11.0 $9.5 $10.0 - 2 $10.1 $12.1 $10.0 $12.0 - 3 $12.2 $15.2 $12.0 $15.0 - 4 $15.1 $15.1 $13.9 $14.0 - 5 $14.1 $16.1 $14.0 $16.0 $13.4 Using our given market data and specifically the closing prices, here’s how the 5-minute SMA would be calculated after Minute 5:\nMinute 1-5 close prices: $10.0, $12.0, $15.0, $14.0, $16.0 SMA = (10.0 + 12.0 + 15.0 + 14.0 + 16.0) / 5 = $13.4 The 5-minute SMA after the 5th minute would be $13.4.\nPros and Cons Pros:\nThe SMA is simple and easy to calculate and understand. It smooths out price fluctuations and helps to filter out the “noise” of the market. It’s useful for identifying trend directions over the specified period. Cons:\nThe SMA is a lagging indicator, meaning it’s based on past prices and tends to be slow to respond to recent price changes. Because it equally weighs all data points, it might not accurately reflect recent changes in the market. It might give false signals in volatile markets because it doesn’t adapt to market changes as quickly as some other indicators. Example of signals Traders often use two SMAs: a short-term one and a long-term one. When the short-term SMA crosses above the long-term SMA, it’s considered a bullish (buy) signal. When it crosses below, it’s a bearish (sell) signal.\nTrue Positive:\nIn an uptrending market, the short-term SMA might cross above the long-term SMA, correctly indicating a continuing upward trend and a good time to buy.\nFalse Positive:\nLet’s say the market is in a sideways trend (prices fluctuate within a narrow range). A brief price spike could cause the short-term SMA to cross above the long-term SMA, generating a buy signal. However, this could be misleading as the overall trend hasn’t changed.\nUse in Real Trading In real trading, SMA can be paired with other indicators for better results.\nFor instance, a trader might use SMA in conjunction with the Relative Strength Index (RSI). The RSI could help confirm whether the market is overbought or oversold when the SMAs cross.\nPython Implementation Click here to view this notebook in full screen ","description":"SMA Trading indicator","title":"SMA - Simple Moving Average","uri":"/en/posts/trading-indicators/sma/"},{"content":"The 2.x SDK leverages modern TypeScript features for enhanced type-safety, this means you get:\nMore compile-time errors and fewer run time errors Improved IDE completions and IntelliSense Harder for bugs and mistakes to make it to production Following incidents will result in type errors:\nTransaction missing a blockhash Transaction missing a signature Instruction missing an account Lookup tables passed in legacy transactions Installation npm install --save @solana/web3.js@next # This repository has been archived by the owner on Jan 10, 2025. Could be skipped npm install --save @solana/spl-token@latest # seems next point to an old version Types Finality -\u003e Commitment connection: Connection -\u003e rpc: ReturnType\u003ctypeof createSolanaRpc\u003e -\u003e rpcSubscriptions: ReturnType\u003ctypeof rpcSubscriptions\u003e V1\nconnection: Connection export const connection = new Connection(process.env.RPC_URL!, { wsEndpoint: process.env.RPC_WSS_URL!, commitment: 'confirmed', }); V2\nrpc: ReturnType\u003ctypeof createSolanaRpc\u003e export const rpc = createSolanaRpc(process.env.RPC_URL!); export const rpcSubscriptions = createSolanaRpcSubscriptions( process.env.RPC_WSS_URL! ); V1\nexport const owner: Keypair = Keypair.fromSecretKey( bs58.decode(process.env.WALLET_PRIVATE_KEY!) ); owner.publicKey -\u003e owner.address V2\nimport bs58 from 'bs58'; import { createKeyPairSignerFromBytes, KeyPairSigner } from '@solana/web3.js'; const owner: KeyPairSigner = await createKeyPairSignerFromBytes( bs58.decode(process.env.WALLET_PRIVATE_KEY!) ); V1\nawait connection.getAccountInfo(owner.publicKey) await connection.getTokenAccountsByOwner( owner.address, { programId: TOKEN_PROGRAM_ID } ); V2\nawait rpc.getAccountInfo(owner.address).send(); await rpc .getTokenAccountsByOwner( owner.address, { programId: address(TOKEN_PROGRAM_ID.toBase58()) }, { commitment: 'confirmed' } ) .send(); Send transactions V2\n// 1 Crete function `sendAndConfirmTransaction` // 2 Setup lifetime for a transaction (Every transaction needs to specify a valid lifetime for it to be accepted for execution on the * network.) // 3 Crete transaction // 1 const sendAndConfirmTransaction = sendAndConfirmTransactionFactory({ /** * The RPC implements a `sendTransaction` method which relays transactions to the network. */ rpc, /** * RPC subscriptions allow the transaction sender to subscribe to the status of our transaction. * The sender will resolve when the transaction is reported to have been confirmed, or will * reject in the event of an error, or a timeout if the transaction lifetime is thought to have * expired. */ rpcSubscriptions, }); const { value: latestBlockhash } = await rpc.getLatestBlockhash().send(); const transactionMessage = pipe( createTransactionMessage({ version: 0 }), tx =\u003e setTransactionMessageFeePayer(FEE_PAYER_ADDRESS, tx), tx =\u003e setTransactionMessageLifetimeUsingBlockhash(latestBlockhash, tx), tx =\u003e appendTransactionMessageInstructions( [ getTransferSolInstruction({ amount: lamports(12345678n), destination: DESTINATION_ADDRESS, source: SOURCE_ACCOUNT_SIGNER, }), getAddMemoInstruction({ memo: 'hello from @solana/web3.js', }), ], tx, ), ); Errors SolanaError: JSON-RPC error: The JSON sent is not a valid Request object (Encoded binary (base 58) data should be less than 128 bytes, please use Base64 encoding.)\nFix by adding encoding:\n{ encoding: 'base64', } const tokenAccountsResponse = await connection .getTokenAccountsByOwner( ownerPublicKey, { programId: address('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'), }, { encoding: 'base64', } ) .send(); // or const tokenAccountsResponse = await connection .getTokenAccountsByOwner( ownerPublicKey, { programId: address('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'), }, { encoding: 'jsonParsed', } ) .send(); ","description":"Solana SDK migration Guide (v1 → @solana/web3.js 2.x)","title":"Solana SDK migration Guide (v1 → @solana/web3.js 2.x)","uri":"/en/posts/solana-migration-v1-v2/"},{"content":"pandoc mardown -\u003e pdf Create pdf file from .md in multiple folders\nprepare:\nbrew install basictex # search for cyrillic fonts fc-list | grep к\\ brew tap homebrew/cask-fonts brew install --cask font-m-plus brew tap homebrew/cask-fonts brew install --cask font-m-plus brew install --cask font-m-plus-1 brew install --cask font-m-plus-1-code ```sh pandoc --pdf-engine xelatex \\ --variable mainfont=\"M+ 1p\" --variable sansfont=\"M+ 1p\" --variable monofont=\"M+ 1m\" \\ -V geometry:\"top=1cm, bottom=2cm, left=1cm, right=1cm\" \\ --file-scope \\ --highlight-style=tango \\ -s \\ --toc-depth=1 \\ --variable=toc-title:\" \" \\ --top-level-division=chapter \\ --standalone \\ --self-contained \\ --from=markdown \\ $(find . -name '*.ru.md') \\ -o book.pdf Convert all video to audio with ffmpeg in current directory #!/bin/bash # Check if ffmpeg is installed command -v ffmpeg \u003e/dev/null 2\u003e\u00261 || { echo \u003e\u00262 \"ffmpeg is required but not installed. Aborting.\"; exit 1; } # Get a list of all video files in the current directory video_files=(*.{mp4,mkv,flv,avi}) # Check if there are any video files in the current directory if [ ${#video_files[@]} -eq 0 ] then echo \"No video files found in the current directory.\" exit 1 fi # Loop through all video files and convert them to audio files for video_file in \"${video_files[@]}\" do # Get the file name without the extension file_name=\"${video_file%.*}\" # Convert the video file to an audio file in the current directory ffmpeg -i $video_file -vn -acodec libmp3lame -ab 128k $file_name.mp3 echo \"Conversion of $video_file completed. The audio file is located in the current directory.\" done echo \"All conversions completed.\" Remove audio from video with ffmpeg ffmpeg -i input.mp4 -c copy -an output.mp4 -i input.mp4 specifies the input video file. -c copy tells FFmpeg to copy the video stream without re-encoding. -an removes the audio stream from the output file. output.mp4 is the name you choose for the output video file. Reduce video size with ffmpeg ffmpeg -i input.mp4 -c:v libx264 -crf 23 -preset medium -c:a aac -b:a 128k output.mp4 -i input.mp4 specifies the input video file. -c:v libx264 sets the video codec to H.264, which is widely supported and provides good compression. -crf 23 controls the video quality. Lower values result in higher quality but larger file sizes. A value of around 23 is a good balance between quality and size. -preset medium sets the encoding speed and compression efficiency. The “medium” preset provides a good compromise. -c:a aac -b:a 128k sets the audio codec to AAC with a bitrate of 128k. This ensures decent audio quality while keeping the file size reasonable. output.mp4 is the name you choose for the output video file. Create a new video from all the videos sorted by name in a folder using with ffmpeg ffmpeg -f concat -safe 0 -i \u003c(for f in $(ls -v /path/to/folder/*.mp4); do echo \"file '$PWD/$f'\"; done) -c copy output.mp4 Reduce video size for all videos in dir and sibdirs python Search for all videos Convert Set same meta data Remove source video import os import subprocess import sys from datetime import datetime def convert_to_mp4(src_file): new_file = os.path.splitext(src_file)[0] + '.mp4' subprocess.run(['ffmpeg', '-i', src_file, new_file]) # Preserve the modification date of the original file mod_time = os.path.getmtime(src_file) os.utime(new_file, (mod_time, mod_time)) os.remove(full_path) def process_directory(dir_path): video_extensions = ['.avi', '.mov', '.wmv', '.flv', '.mkv'] # Define video file extensions for root, dirs, files in os.walk(dir_path): for file in files: if any(file.lower().endswith(ext) for ext in video_extensions): full_path = os.path.join(root, file) print('='*50) print(f'Starting path: {full_path}') print('='*50) try: convert_to_mp4(full_path) print(f'Processed and converted: {full_path}') except Exception as e: print(f'Failed to convert. Error: {str(e)}') if __name__ == \"__main__\": if len(sys.argv) \u003e 1: directory_path = sys.argv[1] process_directory(directory_path) else: print(\"Please provide a directory path.\") bash for file in *.*; do ffmpeg -i \"$file\" \"${file%.*}.avi\"; done ","description":"Some code snippets","title":"Some code snippets","uri":"/en/posts/other-snippets/"},{"content":"About AWS Step Functions is a low-code, visual workflow service that developers use to build distributed applications, automate IT and business processes, and build data and machine learning pipelines using AWS services.\nDocumentation User Guide Step Functions is a serverless function orches­trator that makes it easy to sequence Lambda functions \u0026 multiple AWS services into busine­ss-­cri­tical applic­ations.\nAlternatives AWS lambda Airflow Google Cloud Workflows Microsoft Flow Price Pay only for what you use\nCurrent price\nFree Tier: 4,000 state transitions per month\nUse Cases Step Functions is an easy-to-use function orchestra that makes it possible to string Lambda functions and multiple AWS services into business-critical applications.\nStep Functions manages the operations and underlying infrastructure for you to ensure your application is available at any scale.\nWith Step Functions, you are able to easily coordinate complex processes composed of different tasks.\nWithout using this service you have to coordinate each Lambda Function yourself and manage every kind of error in all steps of this complex process.\nAWS Step Functions is a useful service for breaking down complex processes into smaller and easier tasks\nAutomate Extract, Transform, and Load (ETL) process Orchestrate microservices Workflow configuration AWS service integrations Component reuse Built-in error handling Type: Orches­tration, Workflows\nStep Function Standard Workflows are optimized for long-running processes.\nExpress Workflows are better for event-driven workloads.\nPractice Introduction to AWS Step Functions\nQuestions Q1 A developer is adding a feedback form to a website. Upon user submission, the form should create a discount code, email the user the code and display a message on the website that tells the user to check their email. The developer wants to use separate Lambda functions to manage these processes and use a Step Function to orchestrate the interactions with minimal custom scripting.\nWhich of the following Step Function workflows can be used to meet requirements?\nAsynchronous Express Workflow Standard Workflow Synchronous Express Workflow Standard Express Workflow Explanation https://aws.amazon.com/blogs/compute/new-synchronous-express-workflows-for-aws-step-functions/\n3\n","description":"Amazon Step Functions","title":"Step Functions","uri":"/en/tracks/aws-certified-developer-associate/step-functions/"},{"content":"About The Stochastic Oscillator is a momentum indicator that shows the location of the close relative to the high-low range over a set number of periods. It was developed by George Lane in the 1950s.\nCalculating Formula The Stochastic Oscillator is calculated using the following formula:\n%K = 100[(C - L14) / (H14 - L14)] where:\nC = the most recent closing price L14 = the lowest price traded of the 14 previous trading sessions H14 = the highest price traded during the same 14-day period %K = the current value of the stochastic indicator The “%D” line is then a 3-day simple moving average of %K.\nPros and Cons Pros:\nThe Stochastic Oscillator can provide insights into potential overbought and oversold conditions. It can also be used to identify divergences, short-term overbought and oversold conditions, and generate trading signals. Cons:\nThe Stochastic Oscillator can stay in overbought or oversold territory for a long time, leading to many false signals in trending markets. As a lagging indicator, it might send a late signal, causing the trader to miss a big part of the trend. Example of signals Buy Signal: A buy signal might be identified when the Stochastic Oscillator crosses above the %D line (bullish divergence). Sell Signal: Conversely, a sell signal might be identified when the Stochastic Oscillator crosses below the %D line (bearish divergence). Use in Real Trading The Stochastic Oscillator is typically used with other oscillators such as the Relative Strength Index (RSI) and the Commodity Channel Index (CCI) to confirm trading signals.\nPython Implementation Click here to view this notebook in full screen ","description":"Stochastic Oscillator Trading Indicator","title":"Stochastic Oscillator - Momentum Indicator","uri":"/en/posts/trading-indicators/stochastic_oscillator/"},{"content":" https://www.buymeacoffee.com/romankurnovskii https://rom.gumroad.com/ https://www.patreon.com/user?u=79828420 ","description":"","title":"Support me","uri":"/en/p/supportme/"},{"content":"Common options z compress with gzip c create an archive u append files which are newer than the corresponding copy ibn the archive f filename of the archive v verbose, display what is inflated or deflated a unlike of z, determine compression based on file extension Create tar named archive.tar containing directory tar cf archive.tar /path/files Concatenate files into a single tar tar -cf archive.tar /path/files Extract the contents from archive.tar tar xf archive.tar Create a gzip compressed tar file name archive.tar.gz tar czf archive.tar.gz /path/files Extract a gzip compressed tar file tar xzf archive.tar.gz Create a tar file with bzip2 compression tar cjf archive.tar.bz2 /path/files Extract a bzip2 compressed tar file tar xjf archive.tar.bz2 List content of tar file tar -tvf archive.tar ","description":"tar command Cheat Sheet","title":"Tar command Cheat Sheet","uri":"/en/posts/cheat-sheet-command-tar/"},{"content":"1. Set Up the Telegram Bot Use the BotFather on Telegram to create a new bot. Get your HTTP API token. 2. Google Apps Script Code Google Apps Script for a Telegram bot:\nvar TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'; var WEBHOOK_URL = 'YOUR_WEB_APP_URL'; // web app URL of your GAS deployment. var USERS_SPREAD_SHEET_NAME='usersAnswers' var COLUMN_STEP_1 = 'E' var COLUMN_STEP_2 = 'F' var COLUMN_DATE = 'A' function setWebhook() { // run after every deploy and updated WEBHOOK_URL var url = 'https://api.telegram.org/bot' + TOKEN + '/setWebhook?url=' + WEBHOOK_URL; UrlFetchApp.fetch(url); } function doPost(e) { var data = JSON.parse(e.postData.contents); var message = data.message.text; var chatId = String(data.message.chat.id); var name = data.message.chat.first_name + \" \" + data.message.chat.last_name; const userData = data.message.from const propertiesService = PropertiesService.getScriptProperties() let chatDialogStatus = propertiesService.getProperty(chatId) let msg = '' const COMMANDS = '\\n/start\\n/about\\n/stat\\n/add\\n/show\\n/pause\\n/request' try { if (message === '/start') { propertiesService.deleteProperty(chatId); saveRequestToSpreadsheet(userData, message) msg = 'Choose an action:' + COMMANDS } else if (message === '/add') { // Will be in two steps (requests from user) propertiesService.setProperty(chatId, 'WAITING_FOR_ADD_STEP_1'); updateChatText(userData, Date.now().toLocaleString(), COLUMN_DATE); msg = \"Step 1. Send first value\" } else if (chatDialogStatus == 'WAITING_FOR_ADD_STEP_1') { updateChatText(userData, message, COLUMN_STEP_1); // Save to spreadsheet propertiesService.setProperty(chatId, 'WAITING_FOR_ADD_STEP_2'); msg = 'Step 2. Send second value' } else if (chatDialogStatus === 'WAITING_FOR_ADD_STEP_2') { propertiesService.deleteProperty(chatId); updateChatText(userData, message, COLUMN_STEP_2); msg = 'Done. Two values saved in different columns' } else { propertiesService.deleteProperty(chatId); saveRequestToSpreadsheet(userData, message) msg = 'Hello ' + name + ' id: ' + chatId + '\\nYour text:\\n' + message msg += '\\nPossible commands:' + COMMANDS } } catch (e) { msg += '\\n Error: ' + e + '\\nStatus: ' + chatDialogStatus } sendToTGM(chatId, msg); } function sendTelegramMessage(chatId, text) { var apiUrl = 'https://api.telegram.org/bot' + TOKEN + '/sendMessage'; var payload = { 'method': 'post', 'payload': { 'chat_id': chatId, 'text': String(text) } }; UrlFetchApp.fetch(apiUrl, payload); } function saveToSpreadsheet(userData, text) { var spreadsheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SPREAD_SHEET_NAME); spreadsheet.appendRow([userData.id, userData.first_name, userData.last_name, userData.username, text]); } function getAllSessionsForUser(userData) { var spreadsheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SPREAD_SHEET_NAME); var rows = spreadsheet.getDataRange().getValues(); var sessions = []; for (var i = 0; i \u003c rows.length; i++) { if (rows[i][0] === userData.id) { // If user id matches sessions.push(rows[i][4]); // Assuming answer to question 1 is in the 5th column } } return sessions; } // helpers function updateChatText(userData, text, column) { var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SPREAD_SHEET_NAME); var data = sheet.getDataRange().getValues(); var rowIndex = -1; for (var i = 0; i \u003c data.length; i++) { if (data[i][0] == userData.id) { rowIndex = i + 1; // Adding 1 to convert index to row number break; } } const columnNumber = column.charCodeAt(0) - 65 + 1; // Convert column letter to number if (rowIndex != -1) { sheet.getRange(rowIndex, columnNumber).setValue(text); Logger.log(\"Text updated successfully.\"); } else { Logger.log(\"ChatId not found. Creating new.\"); saveToSpreadsheet(userData, text, columnNumber) } } Deploy as Web App Click on the cloud icon in GAS to “Deploy” \u003e “New Deployment”. Choose type as “Web app”. Set permissions and deploy. You will get a URL (This is what you’ll use as WEB_APP_URL in the above code). Run setWebhook() Function This tells Telegram where your bot’s web app is hosted. Bot Commands After you’ve done the above, you can send /start to your bot, and it should respond with the options.\n","description":"Telegram bot with Google Apps Script (GAS)","title":"Telegram bot with Google Apps Script (GAS)","uri":"/en/posts/howto-setup-telegram-bot-and-google-apps-script/"},{"content":"most popular docker images ## lists the images docker pull imagename ## Pull an image or a repository from a registry docker ps -a ## See a list of all containers, even the ones not running docker build -t imagename . ## Create image using this directory's Dockerfile docker run -p 4000:80 imagename ## Run \"imagename\" mapping port 4000 to 80 docker rmi ## removes the image docker rm ## removes the container docker stop ## stops the container docker volume ls ## lists the volumes docker kill ## kills the container docker logs ## see logs docker inspect ## shows all the info of a container docker docker cp ## Copy files/folders between a container and the local filesystem docker pull imagename ## Pull an image or a repository from a registry docker build -t imagename . ## Create image using this directory's Dockerfile docker run -p 4000:80 imagename ## Run \"imagename\" mapping port 4000 to 80 docker run -d -p 4000:80 imagename ## Same thing, but in detached mode docker exec -it [container-id] bash ## Enter a running container docker ps ## See a list of all running containers docker stop \u003chash\u003e ## Gracefully stop the specified container docker ps -a ## See a list of all containers, even the ones not running docker kill \u003chash\u003e ## Force shutdown of the specified container docker rm \u003chash\u003e ## Remove the specified container from this machine docker rm -f \u003chash\u003e ## Remove force specified container from this machine docker rm $(docker ps -a -q) ## Remove all containers from this machine docker images -a ## Show all images on this machine docker rmi \u003cimagename\u003e ## Remove the specified image from this machine docker rmi $(docker images -q) ## Remove all images from this machine docker top \u003ccontainer-id\u003e ## Display the running processes of a container docker logs \u003ccontainer-id\u003e -f ## Live tail a container's logs docker login ## Log in this CLI session using your Docker credentials docker tag \u003cimage\u003e username/repository:tag ## Tag \u003cimage\u003e for upload to registry docker push username/repository:tag ## Upload tagged image to registry docker run username/repository:tag ## Run image from a registry docker system prune ## Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes. (Docker 17.06.1-ce and superior) docker system prune -a ## Remove all unused containers, networks, images not just dangling ones (Docker 17.06.1-ce and superior) docker volume prune ## Remove all unused local volumes docker network prune ## Remove all unused networks docker compose docker-compose up # Create and start containers docker-compose up -d # Create and start containers in detached mode docker-compose down # Stop and remove containers, networks, images, and volumes docker-compose logs # View output from containers docker-compose restart # Restart all service docker-compose pull # Pull all image service docker-compose build # Build all image service docker-compose config # Validate and view the Compose file docker-compose scale \u003cservice_name\u003e=\u003creplica\u003e # Scale special service(s) docker-compose top # Display the running processes docker-compose run -rm -p 2022:22 web bash # Start web service and runs bash as its command, remove old container. docker services docker service create \u003coptions\u003e \u003cimage\u003e \u003ccommand\u003e # Create new service docker service inspect --pretty \u003cservice_name\u003e # Display detailed information Service(s) docker service ls # List Services docker service ps # List the tasks of Services docker service scale \u003cservice_name\u003e=\u003creplica\u003e # Scale special service(s) docker service update \u003coptions\u003e \u003cservice_name\u003e # Update Service options docker stack docker stack ls # List all running applications on this Docker host docker stack deploy -c \u003ccomposefile\u003e \u003cappname\u003e # Run the specified Compose file docker stack services \u003cappname\u003e # List the services associated with an app docker stack ps \u003cappname\u003e # List the running containers associated with an app docker stack rm \u003cappname\u003e # Tear down an application docker machine docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux) docker-machine create -d hyperv --hyperv-virtual-switch \"myswitch\" myvm1 # Win10 docker-machine env myvm1 # View basic information about your node docker-machine ssh myvm1 \"docker node ls\" # List the nodes in your swarm docker-machine ssh myvm1 \"docker node inspect \u003cnode ID\u003e\" # Inspect a node docker-machine ssh myvm1 \"docker swarm join-token -q worker\" # View join token docker-machine ssh myvm1 # Open an SSH session with the VM; type \"exit\" to end docker-machine ssh myvm2 \"docker swarm leave\" # Make the worker leave the swarm docker-machine ssh myvm1 \"docker swarm leave -f\" # Make master leave, kill swarm docker-machine start myvm1 # Start a VM that is currently not running docker-machine stop $(docker-machine ls -q) # Stop all running VMs docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images docker-machine scp docker-compose.yml myvm1:~ # Copy file to node's home dir docker-machine ssh myvm1 \"docker stack deploy -c \u003cfile\u003e \u003capp\u003e\" # Deploy an app Options for popular commands docker build Docs Build an image from a Dockerfile.\ndocker build [DOCKERFILE PATH] Example\nBuild an image tagged my-org/my-image where the Dockerfile can be found at /tmp/Dockerfile.\ndocker build -t my-org:my-image -f /tmp/Dockerfile --file -f Path where to find the Dockerfile --force-rm Always remove intermediate containers --no-cache Do not use cache when building the image --rm Remove intermediate containers after a successful build (this is true) by default --tag -t Name and optionally a tag in the ‘name:tag’ format docker run Docs\nCreates and starts a container in one operation. Could be used to execute a single command as well as start a long-running container.\nExample\ndocker run -it ubuntu:latest /bin/bash This will start a ubuntu container with the entrypoint /bin/bash. Note that if you do not have the ubuntu image downloaded it will download it before running it.\n-it This will not make the container you started shut down immediately, as it will create a pseudo-TTY session (-t) and keep STDIN open (-i) --rm Automatically remove the container when it exit. Otherwise it will be stored and visible running docker ps -a. --detach -d Run container in background and print container ID --volume -v Bind mount a volume. Useful for accessing folders on your local disk inside your docker container, like configuration files or storage that should be persisted (database, logs etc.). docker exec Docs\nExecute a command inside a running container.\ndocker exec [CONTAINER ID] Example\ndocker exec [CONTAINER ID] touch /tmp/exec_works --detach -d Detached mode: run command in the background -it This will not make the container you started shut down immediately, as it will create a pseudo-TTY session (-t) and keep STDIN open (-i) docker images Docs\nList all downloaded/created images.\ndocker images -q Only show numeric IDs docker inspect Docs\nShows all the info of a container.\ndocker inspect [CONTAINER ID] docker logs Docs\nGets logs from container.\ndocker logs [CONTAINER ID] --details Log extra details --follow -f Follow log output. Do not stop when end of file is reached, but rather wait for additional data to be appended to the input. --timestamps -t Show timestamps docker ps Docs\nShows information about all running containers.\ndocker ps --all -a Show all containers (default shows just running) --filter -f Filter output based on conditions provided, docker ps -f=\"name=\"example\" --quiet -q Only display numeric IDs docker rmi Docs\nRemove one or more images.\ndocker rmi [IMAGE ID] --force -f Force removal of the image Snippets A collection of useful tips and tricks for Docker.\nDelete all containers NOTE: This will remove ALL your containers.\ndocker container prune OR, if you’re using an older docker client:\ndocker rm $(docker ps -a -q) Delete all untagged containers docker image prune OR, if you’re using an older docker client:\ndocker rmi $(docker images | grep '^\u003cnone\u003e' | awk '{print $3}') Remove all images docker rmi --force $(docker images -q) Remove all docker images with none tag docker rmi --force $(docker images --filter \"dangling=true\" -q) See all space Docker take up docker system df Get IP address of running container docker inspect [CONTAINER ID] | grep -wm1 IPAddress | cut -d '\"' -f 4 Kill all running containers docker kill $(docker ps -q) Resources docs.docker.com docker-cheat-sheet docker-cheat-sheet https://sourabhbajaj.com/mac-setup/Docker/ ","description":"Most Popular Docker Commands","title":"Top Docker Commands","uri":"/en/posts/docker-commands/"},{"content":"Uploading a File to Amazon S3 Introduction When you upload a folder from your local system or another machine, Amazon S3 uploads all the files and subfolders from the specified local folder to your bucket. It then assigns a key value that is a combination of the uploaded file name and the folder name. In this lab step, you will upload a file to your bucket. The process is similar to uploading a single file, multiple files, or a folder with files in it.\nIn order to complete this lab step, you have to upload the cloudacademy-logo.png file from your local file storage into an S3 folder you created earlier.\nDownload the Cloud Academy logo from the following location: https://s3-us-west-2.amazonaws.com/clouda-labs/scripts/s3/cloudacademy-logo.png (If the image is not downloaded for you, simply right-click the image and select Save image as to download it to your local file system.)\nInstructions Click on the cloudfolder folder. You are placed within the empty folder in your S3 bucket: Note: Click the folder name itself, not the checkbox for the folder name. If you select the folder checkbox then upload a file, it will be placed above the folder (not inside it).\nClick the Upload button.\nClick Add Files:\nA file picker will appear.\nBrowse to and select the local copy of cloudacademy-logo.png file that you downloaded earlier: The logo is added to the list of files that are ready to upload. You have several options at this point:\nAdd more files Upload However, there is another method that some users prefer to add files for upload.\nCheck the file and click on Remove:\nThis time, rather than browsing to a file, drag and drop the logo file onto the wizard. The wizard adds it to the list of files to upload.\nScroll to the bottom of the page and click Upload to upload the file:\nYou will see a blue notification that the file is uploading and then a green notification that the upload has been completed successfully.\nThe file is placed in the folder in your bucket:\n","description":"Uploading a File to Amazon S3","title":"Upload a file to S3","uri":"/en/tracks/aws-certified-developer-associate/s3/upload-file-to-s3/"},{"content":"Today, I tackled a LeetCode programming problem that pushed me to rediscover a forgotten concept and devise a creative solution to share my learning experience with others.\nThe problem centered around a backtracking algorithm. Although I had previously explored this topic, I couldn’t quite remember the exact steps and logic involved. Determined to refresh my memory, I set out not only to solve the problem but also to find a way to make it easier for myself and others to visualize and comprehend the algorithm in the future.\nI started by rewriting the algorithm from scratch, carefully examining each step and ensuring I understood the logic behind it. Once satisfied with my progress, I decided to create a video using Visual Studio Code’s debugger to capture the entire problem-solving process. I focused on problem 131: Palindrome Partitioning and meticulously documented every step from beginning to end.\nArmed with the video, I wanted to make it available on my website for others who might benefit from it. However, my website was built using the Hugo static site generator, and I soon realized that embedding the video wouldn’t be as straightforward as I initially thought. I needed a shortcode to make it work.\nA shortcode is a compact piece of code that enables users to embed various types of content, such as videos, into their website without having to write complex HTML or JavaScript. It would allow me to seamlessly integrate the video into my website, making it accessible to everyone.\n{{- $src := .Get \"src\" -}} {{- $title := .Get \"title\" -}} \u003cvideo width=\"100%\" controls\u003e \u003csource src=\"{{ $src }}\" type=\"video/mp4\"\u003e Your browser does not support the video tag. \u003c/video\u003e {{ if $title }} \u003cfigcaption\u003e{{ $title }}\u003c/figcaption\u003e {{ end }} This shortcode takes in two parameters, src and title. The src parameter specifies the video file’s URL, while the title parameter is optional and displays a caption below the video. To use the shortcode, simply include the following code in your Hugo markdown file:\n{{ \u003c video src=\"path/to/your/video.mp4\" title=\"Problem 131: Palindrome Partitioning\" \u003e}} By creating and using this shortcode, I successfully embedded my video into my Hugo site, making it available for others to learn from.\nThis experience has reaffirmed the importance of perseverance and innovation in overcoming challenges. Whether it’s relearning an algorithm or finding creative ways to share knowledge, facing obstacles head-on is an essential part of personal and professional development.\nTo try copy and use this shortcode from repo.\nLeetCode problem solution and debug video you can check on this page.\n","description":"Visualize Algorithms - Rediscovering Backtracking","title":"Visualize Algorithms - Rediscovering Backtracking","uri":"/en/stories/001-rediscovering-backtracking-algo/"},{"content":" hostapd is a user space daemon for access point and authentication servers. It implements IEEE 802.11 access point management, IEEE 802.1X/WPA/WPA2/EAP Authenticators and RADIUS authentication server. The current version supports Linux (Host AP, mac80211-based drivers) and FreeBSD (net80211). Configure network traffic routing and Network Address Translation (NAT) using iptables.\nConfigure the system to forward packets from one network interface to another, applying NAT to the packets going out of the eth0 interface.\nNetwork configuration where the system is intended to function as a router or gateway between two networks (e.g., forwarding packets from a Wi-Fi network to an Ethernet network).\nkali@kali:~$ sudo iptables -t nat -F kali@kali:~$ kali@kali:~$ sudo iptables -F kali@kali:~$ kali@kali:~$ sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE kali@kali:~$ kali@kali:~$ sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT kali@kali:~$ kali@kali:~$ echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward # (DNS, dhcp still required) kali@kali:~$ 1. sudo iptables -t nat -F iptables is a command-line utility used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel. -t nat specifies the NAT table, one of the several tables in the iptables utility used for network address translation. -F stands for ‘flush’, which clears or deletes all the rules in the selected table (in this case, the NAT table). Essentially, this command clears all NAT rules that may have been previously set up. 2. sudo iptables -F -F command is used without the -t option, which means it applies to the default filter table. This command clears all the rules in the filter table, which is responsible for packet filtering. 3. sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE -A POSTROUTING adds a rule to the POSTROUTING chain. The POSTROUTING chain is used for altering packets after they have been routed. -o eth0 specifies the outgoing network interface, eth0 in this case. -j MASQUERADE sets the MASQUERADE target. This is used for NAT. It enables IP masquerading, which hides your private IP address behind the public IP address of your network interface (here, eth0). It’s often used in situations where your IP address is dynamically assigned, such as a dial-up or DSL connection. This command sets up NAT for packets going out of the eth0 interface.\n4. sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT -A FORWARD adds a rule to the FORWARD chain. The FORWARD chain is used for packets that are being routed through the device. -i wlan0 specifies the incoming interface, wlan0 in this case. -o eth0 specifies the outgoing interface, eth0. -j ACCEPT means that these packets will be accepted and forwarded from wlan0 to eth0. This command is typically part of configuring the device to act as a router or gateway, forwarding packets from one interface to another. 5. echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward /proc/sys/net/ipv4/ip_forward is a system file that controls the IP forwarding setting of the kernel. When this is set to 1, it enables the system to forward IP packets from one network to another, effectively functioning as a router. echo 1 outputs 1, and the | sudo tee part is used to write this value into the ip_forward file with the necessary permissions. This command is crucial for enabling IP forwarding, allowing the system to route packets between interfaces. Resources https://portal.offsec.com/courses/pen-103/books-and-videos/modal/modules/securing-and-monitoring-kali-linux/exercises/securing-the-kali-file-system ","description":"Wireless access point with hostapd on Debian","title":"Wireless access point with hostapd on Debian","uri":"/en/posts/linux/wireless-access-point/"},{"content":"About AWS X-Ray helps developers analyze and debug production, distributed applications, such as those built using a microservices architecture.\nDocumentation User Guide X-Ray allows software engineers to view the state of a system at a glance, identify potential bottlenecks, and make informed operational decisions to improve performance and reliability. X-Ray inspects application code using a combination of machine and customer-provided data to identify potential bottlenecks and analyze performance and performance trends for each test scenario.\nTerminology AWS X-Ray receives data from services as segments. X-Ray then groups segments that have a common request into traces. X-Ray processes the traces to generate a service graph that provides a visual representation of your application\nX-Ray Trace Hierarchy: Trace \u003e Segment \u003e Sub Segment\nTrace\nAn X-Ray trace is a set of data points that share the same trace ID.\nSegments\nA segment is a JSON representation of a request that your application serves.\nA trace segment records information about the original request, information about the work that your application does locally, and subsegments with information about downstream calls that your application makes to AWS resources, HTTP APIs, and SQL databases.\nSubsegments\nSubsegments provide more granular timing information and details about downstream calls that your application made to fulfill the original request.\nAnnotations\nAn X-Ray annotation is system-defined, or user-defined data associated with a segment A segment can contain multiple annotations. Annotations are used to describe the request, the response, and other information about the segment Can be used for adding system or user-defined data to segments and subsegments that you want to index for search. Sampling\nX-Ray traces are sampled at a rate that you specify. The rate is specified in the sampling_rate field of the sampling object in the config object.\nMetadata\nX-Ray traces contain metadata that is useful for understanding the trace.\nMetadata (Key / value pairs) is not indexed and cannot be used for searching Digest Trace request across microservices/AWS services\nAnalyze, Troubleshoot errors, Solve performance issues Gather tracing information From applications/components/AWS Services Tools to view, filter and gain insights (Ex: Service Map) How does Tracing work?\nUnique trace ID assigned to every client request X-Amzn-Trace-Id:Root=1-5759e988-bd862e3fe Each service in request chain sends traces to X-Ray with trace ID X-Ray gathers all the information and provides visualization How do you reduce performance impact due to tracing? Sampling - Only a sub set of requests are sampled (Configurable) How can AWS Services and your applications send tracing info? Step 1 : Update Application Code Using X-Ray SDK Step 2: Use X-Ray agents (EASY to use in some services! Ex: AWS Lambda) Segments and Sub-segments can include an annotations object containing one or more fields that X-Ray indexes for use with Filter Expressions. It is indexed. Use up to 50 annotations per trace.\nTotal sampled request per second = Reservoir size + ((incoming requests per second - reservoir size) * fixed rate)\nDefault sampling X-ray SDK first request each second and 5% of any additional requests\nTracing header can be added in http request header\nAnnotations vs Segments vs Subsegments vs metadata\nX-ray daemon listens for traffic on UDP port 2000\nX-ray SDK provides interceptors to add your code to trace incoming HTTP requests.\nX-ray in EC2: You need the X-Ray daemon to be running on your EC2 instances in order to send data to X-Ray. User data script could be used to install the X-Ray daemon in EC2 instance.\nX-ray in ECS: In Amazon ECS, create a Docker image that runs the X-Ray daemon, upload it to a Docker image repository, and then deploy it to your Amazon ECS cluster.\nX-ray in elastic beanstalk: Enable the X-Ray daemon by including the xray-daemon.config configuration file in the .ebextensions directory of your source code\nAWS X-Ray helps developers analyze and debug production, distributed applications, such as those built using a micro-service architecture.\nA segment can break down the data about the work done into subsegments. Subsegments provide more granular timing information and details about - downstream calls that your application made to fulfill the original request.\nAdd annotations to subsegment document if you want to trace downstream calls.\nSegments and subsegment can include a metadata object containing one or more fields with values of any type, including objects and arrays.\nTracing header is added in the HTTP request header. A tracing header (X-Amzn-Trace-ld) can originate from the X-Ray SDK, an AWS service, or the - client request.\nUse the GetTraceSummaries API to get the list of trace IDs of the application and then retrieve the list of traces using BatchGetTraces API in - order to develop the custom debug tool\nPrice Current price\nUse Cases Type: Developer Tools\nAlternatives Google Stackdriver Azure Monitor Elastic Observability Datadog Splunk AWS X-Ray supports applications running on:\nAmazon Elastic Compute Cloud (Amazon EC2) Amazon EC2 Container Service (Amazon ECS) AWS Lambda WS Elastic Beanstalk Practice Questions Q1 You joined an application monitoring team. Your role focuses on finding system performance and bottlenecks in Lambda functions and providing specific solutions. Another teammate focuses on auditing the systems.\nWhich AWS service will be your main tool?\nAWS X-Ray AWS IAM AWS CloudTrail AWS Athena Explanation AWS X-Ray provides graphs of system performance and identifies bottlenecks\n1\n","description":"Analyze and debug production, distributed applications","title":"X-Ray","uri":"/en/tracks/aws-certified-developer-associate/xray/"}]