<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms 101 on Roman Kurnovskii</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/</link><description>Recent content in Algorithms 101 on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2023 &lt;a href="https://romankurnovskii.com">Roman Kurnovskii&lt;/a> personal page</copyright><lastBuildDate>Sat, 15 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/en/tracks/algorithms-101/index.xml" rel="self" type="application/rss+xml"/><item><title>Plan</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/plan/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/plan/</guid><description>Q1 # Problem Difficulty Topics 1 1. Two Sum Easy Array, Hash Table 2 13. Roman to Integer Easy Hash Table, Math, String 3 14. Longest Common Prefix Easy String 4 20. Valid Parentheses Easy String, Stack 5 21. Merge Two Sorted Lists Easy Linked List, Recursion 6 26. Remove Duplicates from Sorted Array Easy Array, Two pointers 7 66. Plus One Easy Array, Math 8 69. Sqrt(x) Easy Math, Binary Search, 9 70. Climbing Stairs Easy Math, Dynamic Programming, Memoization 10 88.</description></item><item><title>Algorithm Patterns</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/algorithms/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/algorithms/</guid><description>Intro Big-O Cheat Sheet Sort 1def insertion_sort(array): 2 for i in range(1, len(array)): 3 value = array[i] 4 while i &amp;gt; 0 and array[i - 1] &amp;gt; value: 5 array[i] = array[i - 1] 6 i -= 1 7 array[i] = value 8 return array 1def selection_sort(array): 2 for i in range(len(array) - 1): 3 min_value = i 4 for j in range(i + 1, len(array)): 5 if array[j] &amp;lt; array[min_value]: 6 min_value = j 7 temp = array[min_value] 8 array[min_value] = array[i] 9 array[i] = temp 10 return array Binary Search Binary search template 1def find_target(nums, target): 2 left = 0 3 right = len(nums) - 1 4 5 while left &amp;lt;= right: 6 mid = (left + right) // 2 7 if nums[mid] == target: 8 return mid 9 10 if nums[mid] &amp;lt; target: 11 left = mid + 1 12 else: 13 right = mid - 1 14 15 return -1 Python build-in module</description></item><item><title>Helpers</title><link>https://romankurnovskii.com/en/tracks/algorithms-101/helpers/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/en/tracks/algorithms-101/helpers/</guid><description>Create Linked List Definition for singly-linked list:
1class Node: 2 def __init__(self, val=0, next=None): 3 self.val = val 4 self.next = next 1values = [2, 4, 3] 2 3def create_linked_node(values): 4 head = Node(values[0]) # start node, head of the linkedlist 5 current = head # current node in the linked list where we change/add next node 6 for i in values[1:]: 7 node = Node(i) 8 current.next = node 9 current = current.next # now current node is last created 10 return head 11 12linked_list = create_linked_node(values) Object structure:</description></item></channel></rss>