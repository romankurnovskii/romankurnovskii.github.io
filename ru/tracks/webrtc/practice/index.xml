<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Практика on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/</link><description>Recent content in Практика on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2023 Personal page</copyright><lastBuildDate>Sat, 02 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tracks/webrtc/practice/index.xml" rel="self" type="application/rss+xml"/><item><title>Загрузка кода</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-get-code/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-get-code/</guid><description>Загрузка кода Если вы знакомы с сайтом git, вы можете скачать код для данной codelab с GitHub, клонировав его: git clone https://github.com/googlecodelabs/webrtc-web
Можно также нажать на ссылку ниже для загрузки zip-файла кода: https://github.com/googlecodelabs/webrtc-web/archive/master.zip
Откройте загруженный zip-файл. Разархивируйте папку проекта (adaptive-web-media), в которой по одной папке на каждый шаг этой codelab, и есть все необходимые вам ресурсы. Вы будете выполнять все действия в папке work.
Папки step-nn содержат финальную версию для каждого шага этой codelab. Они там для справки.</description></item><item><title>Обзор</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-overview/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-overview/</guid><description>Создайте приложение для получения видео и снимков с веб-камеры, с возможностью делиться ими в P2P через WebRTC. В ходе codelab вы узнаете, как использовать основные API WebRTC и настроить сервер обмена сообщениями через Node.js.
Чему вы научитесь
получать видео с вашей веб-камеры потоковое видео через RTCPeerConnection потоковая передача данных через RTCDataChannel настраивать сигналинг для обмена сообщениями комбинировать одноранговое соединение и сигналинг делать фото и передавать его через канал данных Что понадобится
Chrome версии 47 и выше веб-сервер для Chrome https://chrome.</description></item><item><title>Потоковое видео с веб-камеры</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-stream-to-cam/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-stream-to-cam/</guid><description>Чему вы научитесь:
На этом шаге вы узнаете, как
получить видеопоток с вашей веб-камеры управлять воспроизведением потока использовать CSS и SVG для обработки видео Полная версия этого шага находится в папке step-01. Немного HTML
Добавьте элемент video и элемент script в index.html в папку work.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Realtime communication with WebRTC&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;css/main.css&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Realtime communication with WebRTC&amp;lt;/h1&amp;gt; &amp;lt;video autoplay playsinline&amp;gt;&amp;lt;/video&amp;gt; &amp;lt;script src=&amp;#34;js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; И немного JavaScript
Добавьте следующее в main.js в вашей папке js:</description></item><item><title>Потоковое видео с помощью RTCPeerConnection</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-stream-with-rtcpeerconnection/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-stream-with-rtcpeerconnection/</guid><description>Чему вы научитесь
На этом шаге вы узнаете, как:
Абстрагироваться от различий браузера с помощью оболочки WebRTC, adapter.js. Использовать RTCPeerConnection API для потоковой передачи видео. Управлять захватом и потоковой передачей мультимедиа. Полная версия этого шага находится в папке step-2.
Что такое RTCPeerConnection?
RTCPeerConnection - это API для выполнения WebRTC-запросов для потоковой передачи видео и аудио и обмена данными.
В этом примере устанавливается соединение между двумя объектами RTCPeerConnection (известными как узлы) на одной и той же странице.
Не очень практично, но зато полезно для понимания того, как работает RTCPeerConnection.</description></item><item><title>Использование RTCDataChannel для обмена данными</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-rtcdatachannel-exchange-data/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-rtcdatachannel-exchange-data/</guid><description>Чему вы научитесь
как обмениваться данными между узлами WebRTC Полная версия этого шага находится в папке step-03.
Обновите свой HTML
На этом шаге вы будете использовать WebRTC каналы данных для отправки текста между двумя textarea элементами на одной странице. Это опять не сильно применимо на практике, но зато демонстрирует, как WebRTC можно использовать для обмена данными, а также для потоковых видео.
Удалите элементы video и button из index.html и замените их следующим HTML-кодом:
&amp;lt;textarea id=&amp;#34;dataChannelSend&amp;#34; disabled placeholder=&amp;#34;Press Start, enter some text, then press Send.</description></item><item><title>Настройка службы сигналинга для обмена сообщениями</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-setup-signaling-service/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-setup-signaling-service/</guid><description>Чему вы научитесь
На этом шаге вы узнаете, как:
Использовать npm для установки взаимосвязей, как указано в package.json Запускать сервер Node.js и использовать node-static для обслуживания статических файлов. Настраивать службу обмена сообщениями на Node.js через Socket.IO . Использовать это для создания ‘комнат&amp;quot; и обмена сообщениями. Полная версия этого шага находится в папке step-04.
Концепции
Чтобы установить и поддерживать вызов WebRTC, клиенты WebRTC (узлы) должны обмениваться метаданными:
Информация о кандидате (сети). сообщения offer и answer, содержащие информацию о медиа, например, о разрешении и кодеках.</description></item><item><title>Соединение однорангового соединения и сигналинга</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-peer-signaling-combine/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-peer-signaling-combine/</guid><description>Чему вы научитесь
На этом шаге вы узнаете, как:
Запускать службу сигнализации WebRTC с помощью Socket.IO на Node.js Использовать эту службу для обмена метаданными WebRTC между узлами. Полная версия этого шага находится в папке step-05. Поменяйте HTML и JavaScript
Замените содержимое index.html следующим:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Realtime communication with WebRTC&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/css/main.css&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Realtime communication with WebRTC&amp;lt;/h1&amp;gt; &amp;lt;div id=&amp;#34;videos&amp;#34;&amp;gt; &amp;lt;video id=&amp;#34;localVideo&amp;#34; autoplay muted&amp;gt;&amp;lt;/video&amp;gt; &amp;lt;video id=&amp;#34;remoteVideo&amp;#34; autoplay&amp;gt;&amp;lt;/video&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;/socket.io/socket.io.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://webrtc.github.io/adapter/adapter-latest.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Замените js/main.</description></item><item><title>Сделайте фото и отправьте его через канал данных</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-take-photo/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-take-photo/</guid><description>Чему вы научитесь
На этом шаге вы узнаете, как:
Делать снимок и получать из него данные, используя элемент canvas. Обмениваться изображениями с удаленным пользователем. Полная версия этого шага находится в папке step-06.
Как это работает
Ранее вы узнали, как обмениваться текстовыми сообщениями с помощью RTCDataChannel.
Этот шаг позволяет обмениваться целыми файлами: в этом примере - фотографиями, снятыми с помощью getUserMedia().
Основные части этого шага заключаются в следующем:
Установите канал передачи данных. Обратите внимание, что на этом шаге вы не добавляете никаких медиапотоков к одноранговому соединению.</description></item><item><title>Выводы</title><link>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-results/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/webrtc/practice/practice-results/</guid><description>Вы создали приложение для потоковой передачи видео в реальном времени и обмена данными!
Что вы узнали
В этой codelab вы узнали, как:
Получать видео с вашей веб-камеры. стримить видео с помощью RTCPeerConnection. Стримить данные с помощью RTCDataChannel. Настраивать сигналинг-службу для обмена сообщениями. Комбинировать одноранговое соединение и сигналинг. Сделать снимок и поделиться им через канал передачи данных. Следующие шаги
Посмотрите на код и архитектуру канонического приложения AppRTC для чата WebRTC – приложение (https://appr.tc/), код (https://github.com/webrtc/apprtc) Попробуйте реальные примеры (http://webrtc.github.io/samples) из github.</description></item></channel></rss>