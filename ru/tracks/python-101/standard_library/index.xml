<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>II - Стандартные модули on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/</link><description>Recent content in II - Стандартные модули on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2023 Personal page</copyright><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tracks/python-101/standard_library/index.xml" rel="self" type="application/rss+xml"/><item><title>Модуль os</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/os/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/os/</guid><description>Модуль os предоставляет функции для работы с операционной системой. Этот модуль позволяет получить доступ к файловой системе, управлять процессами, получать информацию об окружении и другие.
os.listdir - получение списка файлов и директорий в указанной директории: os.mkdir() - создание директории os.system() - выполнение команды в командной строке os.getenv() os.putenv() os.remove() - удаление файла os.rename() os.startfile() os.walk() - дает способ итерации по пути корневого уровня pathlib.Path.walk() - похожий на os.walk(). (Добавлен в 3.12) os.environ: словарь, содержащий переменные окружения, доступные в текущем процессе.</description></item><item><title>Модуль sys</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/sys/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/sys/</guid><description>Модуль sys предоставляет специфические для системы параметры и функции. Он содержит системную информацию и функции для взаимодействия со стандартными потоками ввода/вывода, аргументами командной строки и другими модулями Python.
sys.argv - список аргументов командной строки, переданных в программу при ее запуске. Первым аргументом обычно является имя файла программы.
sys.executable - путь к интерпретатору Python, который используется для запуска текущей программы.
sys.exit([arg]) - завершает выполнение программы. Если задан аргумент, то он возвращается в качестве кода выхода.
sys.modules - словарь, содержащий все загруженные модули Python, включая стандартные и сторонние модули.</description></item><item><title>Модуль logging</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/logging/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/logging/</guid><description>Модуль логирования logging является одним из стандартных модулей Python и предоставляет возможности для записи логов в приложении. Логирование используется для записи информации о работе приложения, которую можно использовать для отслеживания ошибок и диагностики проблем.
В модуле logging определены три основных компонента: логгеры (loggers), обработчики (handlers) и форматировщики (formatters). Логгеры представляют собой объекты, которые используются для записи сообщений лога. Обработчики определяют, куда будут записываться сообщения, а форматировщики определяют, как будут отформатированы эти сообщения.
Пример использования модуля logging:
import logging # Создание логгера logger = logging.</description></item><item><title>Модуль datetime/time</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/datetime_time/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/datetime_time/</guid><description>datetime Модуль datetime в Python предоставляет классы для работы с датами и временем. Он позволяет создавать объекты даты, времени и даты-времени, а также выполнять операции с этими объектами.
Класс datetime является основным классом модуля datetime и представляет дату и время в формате &amp;ldquo;ГГГГ-ММ-ДД ЧЧ:ММ:СС&amp;rdquo;. Класс date представляет только дату, а класс time - только время.
Форматирование дат и времени может выполняться с помощью метода strftime, который позволяет создавать строку с заданным форматом даты и времени. Также существует метод strptime, который позволяет преобразовать строку в объект даты и времени.</description></item><item><title>Модуль потоков threading</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/threading/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/threading/</guid><description>Модуль threading в Python предоставляет возможность создавать и управлять потоками выполнения. Потоки - это легковесные процессы, которые выполняются параллельно в пределах одного процесса, что позволяет лучше использовать ресурсы компьютера.
Для создания нового потока необходимо создать объект Thread и передать в его конструктор функцию, которую вы хотите запустить в отдельном потоке. Затем вызовите метод start() у этого объекта, чтобы запустить поток. Если вы хотите дождаться завершения потока, вызовите метод join(), который блокирует текущий поток, пока поток, на который вы вызываете join(), не завершится.</description></item><item><title>Модуль subprocess</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/subprocess/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/subprocess/</guid><description>Модуль subprocess является одним из наиболее мощных и распространенных модулей Python для управления другими процессами в операционной системе.
Основная цель subprocess заключается в том, чтобы предоставить простой и удобный способ создания новых процессов, подключения к уже существующим процессам, их управления и взаимодействия с ними.
Одним из основных классов в модуле subprocess является класс Popen, который представляет собой объект, связанный с запущенным в операционной системе процессом.
Например, чтобы запустить новый процесс с помощью Popen, мы можем использовать следующий код:</description></item><item><title>Модуль argparse</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/argparse/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/argparse/</guid><description>Модуль argparse позволяет легко парсить аргументы командной строки.
Это может быть полезно для создания сценариев командной строки, которые должны принимать аргументы от пользователя, например, при написании утилит командной строки.
Пример:
#script.py import argparse parser = argparse.ArgumentParser(description=&amp;#39;Process some integers.&amp;#39;) parser.add_argument(&amp;#39;integers&amp;#39;, metavar=&amp;#39;N&amp;#39;, type=int, nargs=&amp;#39;+&amp;#39;, help=&amp;#39;an integer for the accumulator&amp;#39;) parser.add_argument(&amp;#39;--sum&amp;#39;, dest=&amp;#39;accumulate&amp;#39;, action=&amp;#39;store_const&amp;#39;, const=sum, default=max, help=&amp;#39;sum the integers (default: find the max)&amp;#39;) args = parser.parse_args() print(args.accumulate(args.integers)) В этом примере мы создали парсер аргументов командной строки с помощью argparse, который принимает целочисленные значения и может вычислить их сумму или максимальное значение.</description></item><item><title>Модуль configparser</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/configparser/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/configparser/</guid><description>Модуль configparser позволяет работать с конфигурационными файлами в Python.
Для использования модуля configparser нужно сначала импортировать его:
import configparser Для чтения конфигурационного файла используется метод configparser.ConfigParser() с методом read():
config = configparser.ConfigParser() config.read(&amp;#39;config.ini&amp;#39;) Для записи в конфигурационный файл используется метод write():
config.set(&amp;#39;section&amp;#39;, &amp;#39;option&amp;#39;, &amp;#39;value&amp;#39;) with open(&amp;#39;config.ini&amp;#39;, &amp;#39;w&amp;#39;) as f: config.write(f) Пример работы с конфигурационным файлом:
import configparser # Создаем объект ConfigParser config = configparser.ConfigParser() # Читаем конфигурационный файл config.read(&amp;#39;config.ini&amp;#39;) # Получаем значение параметра из секции db_name = config.get(&amp;#39;database&amp;#39;, &amp;#39;db_name&amp;#39;) # Меняем значение параметра и записываем изменения в файл config.</description></item><item><title>Модуль email / smtplib</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/smtplib/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/smtplib/</guid><description>Модуль smtplib в Python предоставляет возможность отправки электронных писем через Simple Mail Transfer Protocol (SMTP).
Он предоставляет класс SMTP, который упрощает отправку электронной почты из Python-скрипта. Модуль smtplib позволяет отправлять электронные письма, как с аутентификацией, так и без, и можно отправлять как простые текстовые сообщения, так и письма с HTML-контентом.
Вот пример кода для отправки простого текстового сообщения:
import smtplib smtp_server = &amp;#39;smtp.yandex.ru&amp;#39; port = 587 login = &amp;#39;example@yandex.ru&amp;#39; password = &amp;#39;password&amp;#39; from_addr = &amp;#39;example@yandex.ru&amp;#39; to_addr = &amp;#39;example2@yandex.ru&amp;#39; message = &amp;#39;Hello, world!</description></item><item><title>Модуль asyncio</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/asyncio/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/asyncio/</guid><description>Асинхронное программирование — это концепция программирования, при применении которой запуск длительных операций происходит без ожидания их завершения и не блокирует дальнейшее выполнение программы.
Корутина — это более общая форма подпрограмм. Подпрограммы имеют одну точку входа и одну точку выхода. А корутины поддерживают множество точек входа, выхода и возобновления их выполнения.
Python модуль asyncio позволяет заниматься асинхронным программированием с применением конкурентного выполнения кода, основанного на корутинах.
Вот план использования модуля asyncio:
import asyncio # Определение асинхронной функции с помощью ключевого слова async.</description></item></channel></rss>