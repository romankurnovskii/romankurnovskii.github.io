<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>V - Фреймворки on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/</link><description>Recent content in V - Фреймворки on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2025</copyright><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tracks/python-101/frameworks/index.xml" rel="self" type="application/rss+xml"/><item><title>Flask</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/flask/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/frameworks/flask/</guid><description>&lt;p>Flask - это легковесный фреймворк для создания веб-приложений на языке Python. Он подходит как для небольших проектов, так и для крупных веб-приложений.&lt;/p>
&lt;p>Flask не имеет встроенной базы данных или абстракции уровня модели, поэтому вам нужно будет выбрать библиотеку, которая лучше всего подходит для вашего проекта.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>pip install flask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install flask_sqlalchemy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Пример CRUD-операций с использованием Flask:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">flask&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> Flask, request, jsonify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">flask_sqlalchemy&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> SQLAlchemy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#666">=&lt;/span> Flask(__name__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app&lt;span style="color:#666">.&lt;/span>config[&lt;span style="color:#4070a0">&amp;#39;SQLALCHEMY_DATABASE_URI&amp;#39;&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;sqlite:///example.db&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db &lt;span style="color:#666">=&lt;/span> SQLAlchemy(app)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Book&lt;/span>(db&lt;span style="color:#666">.&lt;/span>Model):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">id&lt;/span> &lt;span style="color:#666">=&lt;/span> db&lt;span style="color:#666">.&lt;/span>Column(db&lt;span style="color:#666">.&lt;/span>Integer, primary_key&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title &lt;span style="color:#666">=&lt;/span> db&lt;span style="color:#666">.&lt;/span>Column(db&lt;span style="color:#666">.&lt;/span>String(&lt;span style="color:#40a070">100&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> author &lt;span style="color:#666">=&lt;/span> db&lt;span style="color:#666">.&lt;/span>Column(db&lt;span style="color:#666">.&lt;/span>String(&lt;span style="color:#40a070">100&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.route&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;/books&amp;#39;&lt;/span>, methods&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#4070a0">&amp;#39;GET&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_all_books&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> books &lt;span style="color:#666">=&lt;/span> Book&lt;span style="color:#666">.&lt;/span>query&lt;span style="color:#666">.&lt;/span>all()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> [{&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>id, &lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>title, &lt;span style="color:#4070a0">&amp;#39;author&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>author} &lt;span style="color:#007020;font-weight:bold">for&lt;/span> book &lt;span style="color:#007020;font-weight:bold">in&lt;/span> books]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> jsonify(result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.route&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;/books/&amp;lt;int:book_id&amp;gt;&amp;#39;&lt;/span>, methods&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#4070a0">&amp;#39;GET&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_book&lt;/span>(book_id):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book &lt;span style="color:#666">=&lt;/span> Book&lt;span style="color:#666">.&lt;/span>query&lt;span style="color:#666">.&lt;/span>get(book_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> book &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> jsonify({&lt;span style="color:#4070a0">&amp;#39;error&amp;#39;&lt;/span>: &lt;span style="color:#4070a0">&amp;#39;Book not found&amp;#39;&lt;/span>}), &lt;span style="color:#40a070">404&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>id, &lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>title, &lt;span style="color:#4070a0">&amp;#39;author&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>author}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> jsonify(result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.route&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;/books&amp;#39;&lt;/span>, methods&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#4070a0">&amp;#39;POST&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">create_book&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book &lt;span style="color:#666">=&lt;/span> Book(title&lt;span style="color:#666">=&lt;/span>request&lt;span style="color:#666">.&lt;/span>json[&lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>], author&lt;span style="color:#666">=&lt;/span>request&lt;span style="color:#666">.&lt;/span>json[&lt;span style="color:#4070a0">&amp;#39;author&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#666">.&lt;/span>session&lt;span style="color:#666">.&lt;/span>add(book)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#666">.&lt;/span>session&lt;span style="color:#666">.&lt;/span>commit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>id, &lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>title, &lt;span style="color:#4070a0">&amp;#39;author&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>author}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> jsonify(result), &lt;span style="color:#40a070">201&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.route&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;/books/&amp;lt;int:book_id&amp;gt;&amp;#39;&lt;/span>, methods&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#4070a0">&amp;#39;PUT&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">update_book&lt;/span>(book_id):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book &lt;span style="color:#666">=&lt;/span> Book&lt;span style="color:#666">.&lt;/span>query&lt;span style="color:#666">.&lt;/span>get(book_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> book &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> jsonify({&lt;span style="color:#4070a0">&amp;#39;error&amp;#39;&lt;/span>: &lt;span style="color:#4070a0">&amp;#39;Book not found&amp;#39;&lt;/span>}), &lt;span style="color:#40a070">404&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book&lt;span style="color:#666">.&lt;/span>title &lt;span style="color:#666">=&lt;/span> request&lt;span style="color:#666">.&lt;/span>json[&lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book&lt;span style="color:#666">.&lt;/span>author &lt;span style="color:#666">=&lt;/span> request&lt;span style="color:#666">.&lt;/span>json[&lt;span style="color:#4070a0">&amp;#39;author&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#666">.&lt;/span>session&lt;span style="color:#666">.&lt;/span>commit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>id, &lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>title, &lt;span style="color:#4070a0">&amp;#39;author&amp;#39;&lt;/span>: book&lt;span style="color:#666">.&lt;/span>author}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> jsonify(result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.route&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;/books/&amp;lt;int:book_id&amp;gt;&amp;#39;&lt;/span>, methods&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#4070a0">&amp;#39;DELETE&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">delete_book&lt;/span>(book_id):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book &lt;span style="color:#666">=&lt;/span> Book&lt;span style="color:#666">.&lt;/span>query&lt;span style="color:#666">.&lt;/span>get(book_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> book &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> jsonify({&lt;span style="color:#4070a0">&amp;#39;error&amp;#39;&lt;/span>: &lt;span style="color:#4070a0">&amp;#39;Book not found&amp;#39;&lt;/span>}), &lt;span style="color:#40a070">404&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#666">.&lt;/span>session&lt;span style="color:#666">.&lt;/span>delete(book)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#666">.&lt;/span>session&lt;span style="color:#666">.&lt;/span>commit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#40a070">204&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Данный код использует Flask вместе с библиотекой SQLAlchemy для создания веб-приложения и взаимодействия с базой данных. Роуты приложения обрабатывают HTTP-запросы и возвращают соответствующий HTTP-ответ. В данном примере реализованы операции CRUD (Create, Read, Update, Delete) для модели Book.&lt;/p>
&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://flask.palletsprojects.com/">Официальная документация Flask&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Django</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/django/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/frameworks/django/</guid><description>&lt;p>Django - это высокоуровневый фреймворк для веб-приложений на языке Python. Он предоставляет множество инструментов для разработки сайтов, начиная от автоматического создания административного интерфейса до работы с базами данных. Основными принципами, которыми руководствуется Django, являются: быстрота разработки, возможность переиспользования кода и расширяемость.&lt;/p>
&lt;p>Установим необходимые пакеты:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>pip install django
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для начала работы с Django нужно создать проект. Для этого в командной строке нужно ввести команду:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>django-admin startproject project_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>После этого будет создан проект с именем &amp;ldquo;project_name&amp;rdquo;. Внутри проекта есть файлы настроек и приложения. Приложение - это часть проекта, которая отвечает за определенную функциональность.&lt;/p>
&lt;p>Для создания приложения нужно ввести команду:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>python manage.py startapp app_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Далее можно начинать разработку функциональности внутри приложения.&lt;/p>
&lt;p>Пример реализации CRUD операций с использованием Django:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">django.shortcuts&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> render, get_object_or_404
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">django.http&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> HttpResponseRedirect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">django.urls&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> reverse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">.models&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> Book
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">index&lt;/span>(request):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> books &lt;span style="color:#666">=&lt;/span> Book&lt;span style="color:#666">.&lt;/span>objects&lt;span style="color:#666">.&lt;/span>all()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> render(request, &lt;span style="color:#4070a0">&amp;#39;index.html&amp;#39;&lt;/span>, {&lt;span style="color:#4070a0">&amp;#39;books&amp;#39;&lt;/span>: books})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">create&lt;/span>(request):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> request&lt;span style="color:#666">.&lt;/span>method &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;POST&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book &lt;span style="color:#666">=&lt;/span> Book(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title&lt;span style="color:#666">=&lt;/span>request&lt;span style="color:#666">.&lt;/span>POST&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> author&lt;span style="color:#666">=&lt;/span>request&lt;span style="color:#666">.&lt;/span>POST&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#39;author&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> published_date&lt;span style="color:#666">=&lt;/span>request&lt;span style="color:#666">.&lt;/span>POST&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#39;published_date&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book&lt;span style="color:#666">.&lt;/span>save()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> HttpResponseRedirect(reverse(&lt;span style="color:#4070a0">&amp;#39;index&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> render(request, &lt;span style="color:#4070a0">&amp;#39;create.html&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">update&lt;/span>(request, book_id):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book &lt;span style="color:#666">=&lt;/span> get_object_or_404(Book, pk&lt;span style="color:#666">=&lt;/span>book_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> request&lt;span style="color:#666">.&lt;/span>method &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;POST&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book&lt;span style="color:#666">.&lt;/span>title &lt;span style="color:#666">=&lt;/span> request&lt;span style="color:#666">.&lt;/span>POST&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book&lt;span style="color:#666">.&lt;/span>author &lt;span style="color:#666">=&lt;/span> request&lt;span style="color:#666">.&lt;/span>POST&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#39;author&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book&lt;span style="color:#666">.&lt;/span>published_date &lt;span style="color:#666">=&lt;/span> request&lt;span style="color:#666">.&lt;/span>POST&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#39;published_date&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book&lt;span style="color:#666">.&lt;/span>save()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> HttpResponseRedirect(reverse(&lt;span style="color:#4070a0">&amp;#39;index&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> render(request, &lt;span style="color:#4070a0">&amp;#39;update.html&amp;#39;&lt;/span>, {&lt;span style="color:#4070a0">&amp;#39;book&amp;#39;&lt;/span>: book})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">delete&lt;/span>(request, book_id):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book &lt;span style="color:#666">=&lt;/span> get_object_or_404(Book, pk&lt;span style="color:#666">=&lt;/span>book_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> book&lt;span style="color:#666">.&lt;/span>delete()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> HttpResponseRedirect(reverse(&lt;span style="color:#4070a0">&amp;#39;index&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В данном примере определены функции для отображения списка книг (index), создания новой книги (create), обновления существующей книги (update) и удаления книги (delete). Все эти функции используют модель Book, которая определена в файле models.py. Шаблоны (templates) для каждой из функций находятся в отдельных html-файлах.&lt;/p>
&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.djangoproject.com/">Официальная документация Django&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>FastAPI</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/fastapi/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/frameworks/fastapi/</guid><description>&lt;p>FastAPI - это фреймворк для создания веб-приложений на Python, использующий современный подход к созданию API и основанный на ASGI-серверах. Он разработан с упором на скорость и быстродействие, предоставляя возможности асинхронного выполнения запросов, автоматического документирования API и многие другие.&lt;/p>
&lt;p>Для установки &lt;code>FastAPI&lt;/code> нужно выполнить команду &lt;code>pip install fastapi&lt;/code>. Для запуска приложения можно использовать стандартный инструмент &lt;code>uvicorn&lt;/code>, который также необходимо установить: &lt;code>pip install uvicorn&lt;/code>.&lt;/p>
&lt;p>Пример CRUD приложения на FastAPI:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">fastapi&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> FastAPI, HTTPException
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">pydantic&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> BaseModel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">typing&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> Dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#666">=&lt;/span> FastAPI()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Имитация базы данных&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db &lt;span style="color:#666">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Модель для создания/редактирования задачи&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Task&lt;/span>(BaseModel):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> title: &lt;span style="color:#007020">str&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: &lt;span style="color:#007020">str&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Модель для ответа со списком задач&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">TaskList&lt;/span>(BaseModel):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tasks: Dict[&lt;span style="color:#007020">int&lt;/span>, Task]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Получение списка задач&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.get&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;/tasks/&amp;#34;&lt;/span>, response_model&lt;span style="color:#666">=&lt;/span>TaskList)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_tasks&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> TaskList(tasks&lt;span style="color:#666">=&lt;/span>db)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Получение одной задачи по id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.get&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;/tasks/&lt;/span>&lt;span style="color:#70a0d0">{task_id}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_task&lt;/span>(task_id: &lt;span style="color:#007020">int&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> task_id &lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> db:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">raise&lt;/span> HTTPException(status_code&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">404&lt;/span>, detail&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Task not found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> db[task_id]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Создание новой задачи&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.post&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;/tasks/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">create_task&lt;/span>(task: Task):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task_id &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">max&lt;/span>(db&lt;span style="color:#666">.&lt;/span>keys(), default&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db[task_id] &lt;span style="color:#666">=&lt;/span> task
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;id&amp;#34;&lt;/span>: task_id}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Редактирование задачи&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.put&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;/tasks/&lt;/span>&lt;span style="color:#70a0d0">{task_id}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">update_task&lt;/span>(task_id: &lt;span style="color:#007020">int&lt;/span>, task: Task):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> task_id &lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> db:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">raise&lt;/span> HTTPException(status_code&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">404&lt;/span>, detail&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Task not found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db[task_id] &lt;span style="color:#666">=&lt;/span> task
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#4070a0">&amp;#34;Task has been updated&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Удаление задачи&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@app.delete&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;/tasks/&lt;/span>&lt;span style="color:#70a0d0">{task_id}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">delete_task&lt;/span>(task_id: &lt;span style="color:#007020">int&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> task_id &lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> db:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">raise&lt;/span> HTTPException(status_code&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">404&lt;/span>, detail&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Task not found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#666">.&lt;/span>pop(task_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#4070a0">&amp;#34;Task has been deleted&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Этот код создает простое приложение с API для управления задачами. Он использует модели Pydantic для валидации данных, а также async/await синтаксис для асинхронной обработки запросов. Код использует декораторы FastAPI для определения конечных точек API (маршрутов), а также для указания моделей данных, которые используются для запросов и ответов.&lt;/p>
&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://fastapi.tiangolo.com/">Официальная документация FastAPI&lt;/a>
content/tracks/python-101/400_frameworks/403_fastapi.ru.md&lt;/li>
&lt;/ul></description></item><item><title>Tornado</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/tornado/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/frameworks/tornado/</guid><description>&lt;p>Tornado - это еще один быстрый веб-фреймворк, который разработан для обработки больших объемов трафика в режиме реального времени.&lt;/p>
&lt;p>Для начала работы с Tornado нам нужно установить его, используя команду pip:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>pip install tornado
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">tornado.ioloop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">tornado.web&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">tornado.escape&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">MainHandler&lt;/span>(tornado&lt;span style="color:#666">.&lt;/span>web&lt;span style="color:#666">.&lt;/span>RequestHandler):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> items &lt;span style="color:#666">=&lt;/span> [{&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#4070a0">&amp;#39;Item 1&amp;#39;&lt;/span>}, {&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#4070a0">&amp;#39;Item 2&amp;#39;&lt;/span>}]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>write(tornado&lt;span style="color:#666">.&lt;/span>escape&lt;span style="color:#666">.&lt;/span>json_encode(items))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">ItemHandler&lt;/span>(tornado&lt;span style="color:#666">.&lt;/span>web&lt;span style="color:#666">.&lt;/span>RequestHandler):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get&lt;/span>(self, &lt;span style="color:#007020">id&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: &lt;span style="color:#007020">id&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#4070a0">&amp;#39;Item &amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020">id&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>write(tornado&lt;span style="color:#666">.&lt;/span>escape&lt;span style="color:#666">.&lt;/span>json_encode(item))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">post&lt;/span>(self, &lt;span style="color:#007020">id&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: &lt;span style="color:#007020">id&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>: self&lt;span style="color:#666">.&lt;/span>get_argument(&lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>write(tornado&lt;span style="color:#666">.&lt;/span>escape&lt;span style="color:#666">.&lt;/span>json_encode(item))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">put&lt;/span>(self, &lt;span style="color:#007020">id&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#39;id&amp;#39;&lt;/span>: &lt;span style="color:#007020">id&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>: self&lt;span style="color:#666">.&lt;/span>get_argument(&lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>write(tornado&lt;span style="color:#666">.&lt;/span>escape&lt;span style="color:#666">.&lt;/span>json_encode(item))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">delete&lt;/span>(self, &lt;span style="color:#007020">id&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>write(&lt;span style="color:#4070a0">&amp;#39;Item &amp;#39;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#007020">id&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#39; deleted&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">make_app&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> tornado&lt;span style="color:#666">.&lt;/span>web&lt;span style="color:#666">.&lt;/span>Application([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#4070a0">r&lt;/span>&lt;span style="color:#4070a0">&amp;#39;/&amp;#39;&lt;/span>, MainHandler),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#4070a0">r&lt;/span>&lt;span style="color:#4070a0">&amp;#39;/item/(\d+)&amp;#39;&lt;/span>, ItemHandler),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> __name__ &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app &lt;span style="color:#666">=&lt;/span> make_app()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app&lt;span style="color:#666">.&lt;/span>listen(&lt;span style="color:#40a070">8888&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tornado&lt;span style="color:#666">.&lt;/span>ioloop&lt;span style="color:#666">.&lt;/span>IOLoop&lt;span style="color:#666">.&lt;/span>current()&lt;span style="color:#666">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере мы создаем два класса-обработчика, один для главной страницы, другой для работы с конкретным элементом. Для тестирования мы создаем два элемента и возвращаем их в формате JSON при запросе к главной странице.&lt;/p>
&lt;p>Когда мы запрашиваем элемент, создается элемент соответствующий запрошенному и возвращается в формате JSON. Методы &lt;code>post&lt;/code>, &lt;code>put&lt;/code> и &lt;code>delete&lt;/code> принимают данные из тела запроса и выполняют соответствующую операцию.&lt;/p>
&lt;p>Запуск приложения осуществляется через командную строку:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>python tornado_app.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>После запуска приложения, мы можем обращаться к нему через браузер по адресу &lt;a href="http://localhost:8888/">http://localhost:8888/&lt;/a>. При обращении к адресу &lt;a href="http://localhost:8888/item/1">http://localhost:8888/item/1&lt;/a>, мы получим объект с идентификатором 1 в формате JSON.&lt;/p>
&lt;p>При выполнении запроса &lt;code>post&lt;/code> на тот же URL с параметрами, мы создадим новый элемент.&lt;/p>
&lt;p>При запросе &lt;code>put&lt;/code> мы обновим данные существующего элемента, а при выполнении &lt;code>delete&lt;/code> - удалим элемент с указанным идентификатором.&lt;/p>
&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.tornadoweb.org/">Официальная документация Tornado&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>