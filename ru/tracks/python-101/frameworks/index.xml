<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>V - Фреймворки on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/</link><description>Recent content in V - Фреймворки on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2023 Personal page</copyright><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tracks/python-101/frameworks/index.xml" rel="self" type="application/rss+xml"/><item><title>Flask</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/flask/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/frameworks/flask/</guid><description>Flask - это легковесный фреймворк для создания веб-приложений на языке Python. Он подходит как для небольших проектов, так и для крупных веб-приложений.
Flask не имеет встроенной базы данных или абстракции уровня модели, поэтому вам нужно будет выбрать библиотеку, которая лучше всего подходит для вашего проекта.
pip install flask pip install flask_sqlalchemy Пример CRUD-операций с использованием Flask:
from flask import Flask, request, jsonify from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config[&amp;#39;SQLALCHEMY_DATABASE_URI&amp;#39;] = &amp;#39;sqlite:///example.db&amp;#39; db = SQLAlchemy(app) class Book(db.Model): id = db.</description></item><item><title>Django</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/django/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/frameworks/django/</guid><description>Django - это высокоуровневый фреймворк для веб-приложений на языке Python. Он предоставляет множество инструментов для разработки сайтов, начиная от автоматического создания административного интерфейса до работы с базами данных. Основными принципами, которыми руководствуется Django, являются: быстрота разработки, возможность переиспользования кода и расширяемость.
Установим необходимые пакеты:
pip install django Для начала работы с Django нужно создать проект. Для этого в командной строке нужно ввести команду:
django-admin startproject project_name После этого будет создан проект с именем &amp;ldquo;project_name&amp;rdquo;. Внутри проекта есть файлы настроек и приложения.</description></item><item><title>FastAPI</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/fastapi/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/frameworks/fastapi/</guid><description>FastAPI - это фреймворк для создания веб-приложений на Python, использующий современный подход к созданию API и основанный на ASGI-серверах. Он разработан с упором на скорость и быстродействие, предоставляя возможности асинхронного выполнения запросов, автоматического документирования API и многие другие.
Для установки FastAPI нужно выполнить команду pip install fastapi. Для запуска приложения можно использовать стандартный инструмент uvicorn, который также необходимо установить: pip install uvicorn.
Пример CRUD приложения на FastAPI:
from fastapi import FastAPI, HTTPException from pydantic import BaseModel from typing import Dict app = FastAPI() # Имитация базы данных db = {} # Модель для создания/редактирования задачи class Task(BaseModel): title: str description: str # Модель для ответа со списком задач class TaskList(BaseModel): tasks: Dict[int, Task] # Получение списка задач @app.</description></item><item><title>Tornado</title><link>https://romankurnovskii.com/ru/tracks/python-101/frameworks/tornado/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/frameworks/tornado/</guid><description>Tornado - это еще один быстрый веб-фреймворк, который разработан для обработки больших объемов трафика в режиме реального времени.
Для начала работы с Tornado нам нужно установить его, используя команду pip:
pip install tornado import tornado.ioloop import tornado.web import tornado.escape class MainHandler(tornado.web.RequestHandler): def get(self): items = [{&amp;#39;id&amp;#39;: 1, &amp;#39;name&amp;#39;: &amp;#39;Item 1&amp;#39;}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;Item 2&amp;#39;}] self.write(tornado.escape.json_encode(items)) class ItemHandler(tornado.web.RequestHandler): def get(self, id): item = {&amp;#39;id&amp;#39;: id, &amp;#39;name&amp;#39;: &amp;#39;Item &amp;#39; + id} self.write(tornado.escape.json_encode(item)) def post(self, id): item = {&amp;#39;id&amp;#39;: id, &amp;#39;name&amp;#39;: self.</description></item></channel></rss>