<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I - Основы on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/</link><description>Recent content in I - Основы on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2025</copyright><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tracks/python-101/basis/index.xml" rel="self" type="application/rss+xml"/><item><title>Установка Python</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/install/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/install/</guid><description>&lt;p>Для установки Python на MacOS можно использовать менеджер пакетов brew. Для этого необходимо выполнить команду:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew install python
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для операционных систем на базе Linux также существуют менеджеры пакетов, которые можно использовать для установки Python. Например, для Ubuntu можно использовать команду:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo apt-get install python
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для Windows можно загрузить установочный пакет с официального сайта &lt;a href="https://www.python.org/downloads/">https://www.python.org/downloads/&lt;/a>.&lt;/p>
&lt;p>После установки Python необходимо убедиться, что версия Python, установленная на компьютере, соответствует требованиям для запуска необходимых библиотек и инструментов, которые будут использоваться в процессе разработки.&lt;/p>
&lt;p>Проверить версию можно в терминале или командной строке набрав команду &lt;code>python&lt;/code>.&lt;/p>
&lt;img src="../../img/python_ver.ru.png" width="55%" id="zoom-default" class="medium-zoom-image" loading="lazy">
&lt;p>Как только мы запутили Python, можно писать код в терминале.&lt;/p>
&lt;img src="../../img/print_hello.ru.png" width="55%" id="zoom-default" class="medium-zoom-image" loading="lazy"></description></item><item><title>Среда разработки</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/ide/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/ide/</guid><description>&lt;p>Для удобной работы с Python требуется хорошо настроенная рабочая среда. Я предпочитаю использовать &lt;a href="https://code.visualstudio.com/">&lt;strong>Visual Studio Code&lt;/strong>&lt;/a> - бесплатный редактор кода, разработанный Microsoft.&lt;/p>
&lt;p>Для начала, нужно установить Visual Studio Code на свой компьютер. Это можно сделать с помощью официального сайта &lt;a href="https://code.visualstudio.com/">https://code.visualstudio.com/&lt;/a>.&lt;/p>
&lt;p>Установка Python на MacOS и Linux очень проста. Для MacOS можно использовать менеджер пакетов brew, который позволяет установить последнюю версию Python одной командой:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew install --cask visual-studio-code
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для Linux, в зависимости от дистрибутива, используется свой менеджер пакетов. Например, для Ubuntu это можно сделать командой:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo apt-get install code
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>После установки необходимо установить расширение &lt;strong>Python&lt;/strong>. Для этого необходимо перейти во вкладку &amp;ldquo;Extensions&amp;rdquo;, найти &amp;ldquo;Python&amp;rdquo; и нажать кнопку &amp;ldquo;Install&amp;rdquo;.&lt;/p>
&lt;p>&lt;p class="md__image">
&lt;img
src="../../img/vscode.ru.png"
id="zoom-default"
alt=""
loading="lazy"
/>
&lt;/p>
&lt;/p>
&lt;p>Создайте файл для проекта, например, &lt;code>example_1.py&lt;/code>.&lt;/p>
&lt;p>Напишите код &lt;code>print(&amp;quot;Hello, world!&amp;quot;)&lt;/code> и запустите его, нажав на кнопку с треугольником справа вверху:&lt;/p>
&lt;p>&lt;p class="md__image">
&lt;img
src="../../img/vscode-01.ru.png"
id="zoom-default"
alt=""
loading="lazy"
/>
&lt;/p>
&lt;/p>
&lt;p>VSCode запустит код и в нижнем окне программы в терминале вы увидите результат:&lt;/p>
&lt;p>&lt;p class="md__image">
&lt;img
src="../../img/vscode-02.ru.png"
id="zoom-default"
alt=""
loading="lazy"
/>
&lt;/p>
&lt;/p></description></item><item><title>Типы данных</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/types/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/types/</guid><description>&lt;p>Python - это язык программирования, который обладает динамической типизацией, что означает, что тип переменной может меняться в процессе выполнения программы.&lt;/p>
&lt;p>В Python есть несколько основных типов данных:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Строковые типы&lt;/strong> (string)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Числовые типы&lt;/strong> (целые числа, числа с плавающей запятой, комплексные числа)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Логический тип&lt;/strong> (True/False)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Списки&lt;/strong> (list) - это упорядоченная коллекция элементов, которые могут быть различных типов данных.&lt;/p>
&lt;p>Списки создаются при помощи квадратных скобок &lt;code>[ ]&lt;/code> и элементы списка разделяются запятыми.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Кортежи&lt;/strong> (tuple) - это упорядоченная коллекция элементов, которые могут быть различных типов данных.&lt;/p>
&lt;p>Кортежи создаются при помощи круглых скобок &lt;code>( )&lt;/code> и элементы кортежа разделяются запятыми.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Словари&lt;/strong> (dictionary) - это неупорядоченная коллекция пар &amp;ldquo;ключ-значение&amp;rdquo;, где каждый ключ связан со значением.&lt;/p>
&lt;p>Словари создаются при помощи фигурных скобок &lt;code>{ }&lt;/code> и пары &amp;ldquo;ключ-значение&amp;rdquo; разделяются двоеточием, а элементы словаря разделяются запятыми.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Множества&lt;/strong> (set) - это неупорядоченная коллекция уникальных элементов.&lt;/p>
&lt;p>Множества создаются при помощи фигурных скобок &lt;code>{ }&lt;/code> и элементы множества разделяются запятыми.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Например, вот как можно создать списки, кортежи, словари и множества в Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_list &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>, &lt;span style="color:#40a070">5.0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_tuple &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;two&amp;#34;&lt;/span>, &lt;span style="color:#40a070">3.0&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_dict &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#4070a0">&amp;#34;John&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#40a070">30&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;city&amp;#34;&lt;/span>: &lt;span style="color:#4070a0">&amp;#34;New York&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_set &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Числа</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/numbers/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/numbers/</guid><description>&lt;p>Числовые типы данных в Python могут быть целыми числами (&lt;strong>int&lt;/strong>), числами с плавающей запятой (&lt;strong>float&lt;/strong>) и комплексными числами (&lt;strong>complex&lt;/strong>).&lt;/p>
&lt;p>Целые числа - это числа без дробной части, а числа с плавающей запятой - это числа с дробной частью.&lt;/p>
&lt;p>Комплексные числа представляются парой вещественных чисел и используются в математических расчетах.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># целое число&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">3.14&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># вещественное число&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">3&lt;/span>j &lt;span style="color:#60a0b0;font-style:italic"># комплексное число&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#007020">type&lt;/span>(a)) &lt;span style="color:#60a0b0;font-style:italic"># выведет &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#007020">type&lt;/span>(b)) &lt;span style="color:#60a0b0;font-style:italic"># выведет &amp;lt;class &amp;#39;float&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#007020">type&lt;/span>(c)) &lt;span style="color:#60a0b0;font-style:italic"># выведет &amp;lt;class &amp;#39;complex&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Python поддерживает все стандартные арифметические операции: сложение, вычитание, умножение, деление, возведение в степень, целочисленное деление и остаток от деления.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(a &lt;span style="color:#666">+&lt;/span> b) &lt;span style="color:#60a0b0;font-style:italic"># сложение, выведет 13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(a &lt;span style="color:#666">-&lt;/span> b) &lt;span style="color:#60a0b0;font-style:italic"># вычитание, выведет 7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(a &lt;span style="color:#666">*&lt;/span> b) &lt;span style="color:#60a0b0;font-style:italic"># умножение, выведет 30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(a &lt;span style="color:#666">/&lt;/span> b) &lt;span style="color:#60a0b0;font-style:italic"># деление, выведет 3.3333333333333335&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(a &lt;span style="color:#666">**&lt;/span> b) &lt;span style="color:#60a0b0;font-style:italic"># возведение в степень, выведет 1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(a &lt;span style="color:#666">//&lt;/span> b) &lt;span style="color:#60a0b0;font-style:italic"># целочисленное деление, выведет 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(a &lt;span style="color:#666">%&lt;/span> b) &lt;span style="color:#60a0b0;font-style:italic"># остаток от деления, выведет 1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Строки</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/strings/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/strings/</guid><description>&lt;p>В Python существует несколько типов данных. Основные типы данных, с которыми вы, вероятно, будете чаще всего встречаться, - это строка, целое число, плавающая цифра, список, словарь и кортеж. В этой главе мы рассмотрим строковый тип данных. Вы удивитесь, как много вещей можно делать со строками в Python прямо из коробки. Существует также модуль string, который можно импортировать для получения доступа к еще большей функциональности, но мы не будем рассматривать его в этой главе. Вместо этого мы рассмотрим следующие темы:&lt;/p>
&lt;ul>
&lt;li>Как создавать строки&lt;/li>
&lt;li>Конкатенация строк&lt;/li>
&lt;li>Методы работы со строками&lt;/li>
&lt;li>Нарезка строк&lt;/li>
&lt;li>Подстановка строк&lt;/li>
&lt;/ul>
&lt;h2 id="создание">Создание&lt;/h2>
&lt;p>Строки обычно создаются одним из трех способов. Вы можете использовать одинарные, двойные или тройные кавычки. Давайте посмотрим!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">text1&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Привет, мир!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">text2&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Python - это замечательный язык программирования&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">text3&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&amp;#39;Строка с тройными кавычками может быть выполнена с помощью трех одинарных или трех двойных кавычек.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">При выводе сохраняются разрывы строк.&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Существует еще один способ создания строки - это использование метода &lt;strong>str&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">my_number&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">my_string&lt;/span> &lt;span style="color:#666">=&lt;/span> str&lt;span style="color:#666">(&lt;/span>my_number&lt;span style="color:#666">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;123&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="методы">Методы&lt;/h2>
&lt;p>Строка - это объект в Python. Фактически, все в Python является объектом.&lt;/p>
&lt;p>Строки в Python поддерживают множество операций, включая конкатенацию (объединение строк), повторение, индексацию, извлечение срезов и многое другое.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>string1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Привет, &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;мир!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string3 &lt;span style="color:#666">=&lt;/span> string1 &lt;span style="color:#666">+&lt;/span> string2 &lt;span style="color:#60a0b0;font-style:italic"># конкатенация строк&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(string3) &lt;span style="color:#60a0b0;font-style:italic"># выведет &amp;#39;Привет, мир!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string4 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Python &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string5 &lt;span style="color:#666">=&lt;/span> string4 &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># повторение строки&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(string5) &lt;span style="color:#60a0b0;font-style:italic"># выведет &amp;#39;Python Python Python&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string6 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Hello, world!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(string6[&lt;span style="color:#40a070">7&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># индексация символов, выведет &amp;#39;w&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string7 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Python is awesome&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(string7[&lt;span style="color:#40a070">0&lt;/span>:&lt;span style="color:#40a070">6&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># извлечение среза, выведет &amp;#39;Python&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Существует множество других методов работы со строками. Например, если бы вы хотели, чтобы все было в нижнем регистре, вы бы использовали метод &lt;strong>lower()&lt;/strong>. Если бы вы хотели удалить все пробелы в начале и в конце строки, вы бы использовали метод &lt;strong>strip()&lt;/strong>. Чтобы получить список всех методов работы со строками, введите в интерпретатор следующую команду:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; dir&lt;span style="color:#666">(&lt;/span>my_string&lt;span style="color:#666">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В итоге вы должны увидеть нечто похожее на это:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>[&amp;#39;__add__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__contains__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__format__&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getitem__&amp;#39;, &amp;#39;__getnewargs__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;__init_subclass__&amp;#39;, &amp;#39;__iter__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__len__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__mod__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__rmod__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__setattr__&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;capitalize&amp;#39;, &amp;#39;casefold&amp;#39;, &amp;#39;center&amp;#39;, &amp;#39;count&amp;#39;, &amp;#39;encode&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;endswith&amp;#39;, &amp;#39;expandtabs&amp;#39;, &amp;#39;find&amp;#39;, &amp;#39;format&amp;#39;, &amp;#39;format_map&amp;#39;, &amp;#39;index&amp;#39;, &amp;#39;isalnum&amp;#39;, &amp;#39;isalpha&amp;#39;, &amp;#39;isascii&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;isdecimal&amp;#39;, &amp;#39;isdigit&amp;#39;, &amp;#39;isidentifier&amp;#39;, &amp;#39;islower&amp;#39;, &amp;#39;isnumeric&amp;#39;, &amp;#39;isprintable&amp;#39;, &amp;#39;isspace&amp;#39;, &amp;#39;istitle&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;isupper&amp;#39;, &amp;#39;join&amp;#39;, &amp;#39;ljust&amp;#39;, &amp;#39;lower&amp;#39;, &amp;#39;lstrip&amp;#39;, &amp;#39;maketrans&amp;#39;, &amp;#39;partition&amp;#39;, &amp;#39;removeprefix&amp;#39;, &amp;#39;removesuffix&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;replace&amp;#39;, &amp;#39;rfind&amp;#39;, &amp;#39;rindex&amp;#39;, &amp;#39;rjust&amp;#39;, &amp;#39;rpartition&amp;#39;, &amp;#39;rsplit&amp;#39;, &amp;#39;rstrip&amp;#39;, &amp;#39;split&amp;#39;, &amp;#39;splitlines&amp;#39;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;#39;startswith&amp;#39;, &amp;#39;strip&amp;#39;, &amp;#39;swapcase&amp;#39;, &amp;#39;title&amp;#39;, &amp;#39;translate&amp;#39;, &amp;#39;upper&amp;#39;, &amp;#39;zfill&amp;#39;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Вы можете смело игнорировать методы, начинающиеся и заканчивающиеся двойными знаками, такие как &lt;strong>&lt;strong>add&lt;/strong>&lt;/strong>. Они не используются в повседневном кодировании на Python. Вместо этого сосредоточьтесь на других методах.&lt;/p>
&lt;p>Если вы хотите узнать, что делает один из них, просто попросите &lt;strong>помощи&lt;/strong>. Например, вы хотите узнать, для чего нужна &lt;strong>capitalize&lt;/strong>. Чтобы узнать это, введите&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; help&lt;span style="color:#666">(&lt;/span>my_string.capitalize&lt;span style="color:#666">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Это вернет следующую информацию:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>Help on built-in function capitalize:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>capitalize() method of builtins.str instance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Return a capitalized version of the string.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> More specifically, make the first character have upper case and the rest lower
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> case.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Возвращает копию строки S, в которой заглавным является только первый символ.&lt;/p>
&lt;p>Вы только что узнали немного о теме, называемой &lt;strong>интроспекцией&lt;/strong>. Python позволяет легко проводить интроспекцию всех своих объектов, что делает его очень удобным в использовании. По сути, интроспекция позволяет вам спрашивать Python о самом себе. В одном из предыдущих разделов вы узнали о преобразовании. Возможно, вы задавались вопросом, как определить тип переменной (например, int или string). Вы можете попросить Python рассказать вам об этом!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; type&lt;span style="color:#666">(&lt;/span>my_string&lt;span style="color:#666">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#007020">type&lt;/span> &lt;span style="color:#4070a0">&amp;#39;str&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Переменная &lt;code>my_string&lt;/code> имеет тип &lt;code>str&lt;/code>.&lt;/p>
&lt;h2 id="разделение-строки-на-подстроки">Разделение строки на подстроки&lt;/h2>
&lt;p>Одной из задач с которой вы будете часто заниматься в реальном мире, - это разделение строк.
Давайте посмотрим, как работает нарезка на примере следующей строки:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">my_string&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;I like Python!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Каждый символ в строке может быть доступен с помощью нарезки. Например, если я хочу получить только первый символ, я могу сделать следующее:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string&lt;span style="color:#666">[&lt;/span>0:4&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;I li&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Это захватит первый символ в строке до 4-го символа, но &lt;strong>не включая&lt;/strong> его. Да, Python основан на нулях. Это будет немного проще понять, если мы обозначим позицию каждого символа в таблице:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I | | l | i | k | e | | P | y | t | h | o | n | !
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Таким образом, у нас есть строка длиной 14 символов, начинающаяся с нуля и заканчивающаяся тринадцатью. Давайте рассмотрим еще несколько примеров, чтобы лучше закрепить эти понятия в голове.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string&lt;span style="color:#666">[&lt;/span>:1&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;I&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string&lt;span style="color:#666">[&lt;/span>0:12&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;I like Pytho&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string&lt;span style="color:#666">[&lt;/span>0:13&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;I like Python&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string&lt;span style="color:#666">[&lt;/span>0:14&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;I like Python!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string&lt;span style="color:#666">[&lt;/span>0:-5&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;I like Py&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string&lt;span style="color:#666">[&lt;/span>:&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;I like Python!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_string&lt;span style="color:#666">[&lt;/span>2:&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;like Python!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="форматирование-строк">Форматирование строк&lt;/h2>
&lt;p>Для форматирования строк в Python есть несколько способов, но одним из наиболее распространенных является метод &lt;code>format()&lt;/code>. Он позволяет объединять строки и значения переменных, заданных в скобках &lt;code>{}&lt;/code>. Например:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Alice&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Меня зовут &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0">, и мне &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0"> лет&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>format(name, age))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере мы использовали фигурные скобки для обозначения места, где нужно вставить переменные &lt;code>name&lt;/code> и &lt;code>age&lt;/code>. Метод &lt;code>format()&lt;/code> позволяет использовать несколько переменных, их значения будут подставлены в порядке следования внутри скобок.&lt;/p>
&lt;p>Кроме того, можно задать формат вывода для каждой переменной. Например, чтобы вывести значение переменной &lt;code>age&lt;/code> в шестнадцатеричном формате, можно использовать следующий код:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Мне &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0"> лет, что в шестнадцатеричной системе счисления равно &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>format(age, &lt;span style="color:#007020">hex&lt;/span>(age)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В результате мы получим вывод: &amp;lsquo;Мне 30 лет, что в шестнадцатеричной системе счисления равно 0x1e&amp;rsquo;.&lt;/p>
&lt;p>Также в Python 3.6 и выше есть более удобный способ форматирования строк, называемый &amp;ldquo;f-strings&amp;rdquo; (форматированные строки). В этом случае мы используем символ f перед открывающей кавычкой, а переменные вставляем прямо внутрь фигурных скобок. Например:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Alice&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Меня зовут &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>name&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">, и мне &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>age&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0"> лет&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Этот код даст тот же результат, что и предыдущий.&lt;/p>
&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/functions.html#func-str">Официальная документация Python по типу str&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/string.html#string-formatting">Форматирование строк&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.python.org/3/library/string.html#formatexamples">Подробнее о форматировании строк&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Списки</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/lists/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/lists/</guid><description>&lt;p>Список в Python похож на массив в других языках.&lt;/p>
&lt;h2 id="создание">Создание&lt;/h2>
&lt;p>В Python пустой список может быть создан следующими способами.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bb60d5">my_list&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">my_list&lt;/span> &lt;span style="color:#666">=&lt;/span> list&lt;span style="color:#666">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Можно обращаться к элементам списка и кортежа по индексу, начиная с нуля. Например, чтобы получить доступ к первому элементу списка, можно использовать индекс 0:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_list &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>, &lt;span style="color:#40a070">5.0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_list[&lt;span style="color:#40a070">0&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># выводит 1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Можно также использовать срезы (&lt;strong>slices&lt;/strong>) для получения подмножества элементов списка или кортежа. Например, чтобы получить первые три элемента списка, можно использовать срез &lt;code>[0:3]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_list &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;four&amp;#34;&lt;/span>, &lt;span style="color:#40a070">5.0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_list[&lt;span style="color:#40a070">0&lt;/span>:&lt;span style="color:#40a070">3&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># выводит [1, 2, 3]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Вы также можете создавать списки списков следующим образом:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">my_nested_list&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">[&lt;/span>my_list, my_list2&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; my_nested_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">[[&lt;/span>1, 2, 3&lt;span style="color:#666">]&lt;/span>, &lt;span style="color:#666">[&lt;/span>&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;c&amp;#39;&lt;/span>&lt;span style="color:#666">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Иногда возникает необходимость объединить два списка вместе. Первый способ - использовать метод &lt;code>extend&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">combo_list&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">one_list&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">[&lt;/span>4, 5&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; combo_list.extend&lt;span style="color:#666">(&lt;/span>one_list&lt;span style="color:#666">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; combo_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">[&lt;/span>4, 5&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Можно просто сложить два списка вместе:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">my_list&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">[&lt;/span>1, 2, 3&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">my_list2&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">[&lt;/span>&lt;span style="color:#4070a0">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;b&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;c&amp;#34;&lt;/span>&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">combo_list&lt;/span> &lt;span style="color:#666">=&lt;/span> my_list + my_list2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; combo_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">[&lt;/span>1, 2, 3, &lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;c&amp;#39;&lt;/span>&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="методы">Методы&lt;/h2>
&lt;p>Методы списков - это функции, которые могут быть применены к спискам. Некоторые из наиболее распространенных методов:&lt;/p>
&lt;ul>
&lt;li>&lt;code>append()&lt;/code>: добавляет элемент в конец списка.&lt;/li>
&lt;li>&lt;code>insert()&lt;/code>: добавляет элемент в указанное место списка.&lt;/li>
&lt;li>&lt;code>pop()&lt;/code>: удаляет последний элемент списка и возвращает его.&lt;/li>
&lt;li>&lt;code>remove()&lt;/code>: удаляет первый элемент списка с указанным значением.&lt;/li>
&lt;li>&lt;code>sort()&lt;/code>: сортирует элементы списка по возрастанию.&lt;/li>
&lt;li>&lt;code>reverse()&lt;/code>: переворачивает порядок элементов списка.&lt;/li>
&lt;/ul>
&lt;p>Примеры использования методов:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>fruits &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#39;apple&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;banana&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;cherry&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fruits&lt;span style="color:#666">.&lt;/span>append(&lt;span style="color:#4070a0">&amp;#39;orange&amp;#39;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;cherry&amp;#39;, &amp;#39;orange&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fruits&lt;span style="color:#666">.&lt;/span>insert(&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;grape&amp;#39;&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># добавить по индексу 1: [&amp;#39;apple&amp;#39;, &amp;#39;grape&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;cherry&amp;#39;, &amp;#39;orange&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fruits&lt;span style="color:#666">.&lt;/span>pop() &lt;span style="color:#60a0b0;font-style:italic"># [&amp;#39;apple&amp;#39;, &amp;#39;grape&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;cherry&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fruits&lt;span style="color:#666">.&lt;/span>remove(&lt;span style="color:#4070a0">&amp;#39;banana&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fruits&lt;span style="color:#666">.&lt;/span>sort() &lt;span style="color:#60a0b0;font-style:italic">#[&amp;#39;apple&amp;#39;, &amp;#39;cherry&amp;#39;, &amp;#39;grape&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Кортежи</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/tuples/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/tuples/</guid><description>&lt;p>Кортежи в Python - это неизменяемые последовательности элементов, очень похожие на списки.&lt;/p>
&lt;h2 id="создание">Создание&lt;/h2>
&lt;p>Создаются с использованием круглых скобок и могут содержать любые типы данных, в том числе и другие кортежи.&lt;/p>
&lt;p>Создание кортежей очень похоже на создание списков, только используются круглые скобки вместо квадратных скобок. Например:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>another_tuple &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">tuple&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>abc &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">tuple&lt;/span>([&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Мы создали кортеж t, содержащий три элемента. Теперь мы можем обратиться к каждому элементу этого кортежа по его индексу, так же как и в списках:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(t[&lt;span style="color:#40a070">0&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># выведет 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(t[&lt;span style="color:#40a070">1&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># выведет 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(t[&lt;span style="color:#40a070">2&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># выведет 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Кортежи также могут содержать элементы разных типов данных:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;apple&amp;#34;&lt;/span>, &lt;span style="color:#40a070">42&lt;/span>, &lt;span style="color:#007020;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Как и в списках, мы можем использовать отрицательные индексы для обращения к элементам кортежа с конца:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(t[&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># выведет True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Кортежи поддерживают срезы (slicing). Например, мы можем получить подкортеж, состоящий из элементов с индексами от 1 до 2:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(t[&lt;span style="color:#40a070">1&lt;/span>:&lt;span style="color:#40a070">3&lt;/span>]) &lt;span style="color:#60a0b0;font-style:italic"># выведет (42, True)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="методы">Методы&lt;/h2>
&lt;p>Кортежи имеют ряд методов, которые позволяют производить некоторые операции с ними. Однако, поскольку они неизменяемы, многие методы, доступные для списков, недоступны для кортежей. Вот несколько примеров доступных методов:&lt;/p>
&lt;ul>
&lt;li>count(x) - возвращает количество элементов в кортеже, равных x.&lt;/li>
&lt;li>index(x) - возвращает индекс первого элемента в кортеже, равного x.&lt;/li>
&lt;/ul>
&lt;p>Например, мы можем использовать метод &lt;code>count()&lt;/code> для подсчета количества элементов &amp;ldquo;apple&amp;rdquo; в кортеже:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;apple&amp;#34;&lt;/span>, &lt;span style="color:#40a070">42&lt;/span>, &lt;span style="color:#007020;font-weight:bold">True&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;apple&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;banana&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(t&lt;span style="color:#666">.&lt;/span>count(&lt;span style="color:#4070a0">&amp;#34;apple&amp;#34;&lt;/span>)) &lt;span style="color:#60a0b0;font-style:italic"># выведет 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Или мы можем использовать метод &lt;code>index()&lt;/code> для поиска индекса первого вхождения элемента &amp;ldquo;banana&amp;rdquo; в кортеже:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;apple&amp;#34;&lt;/span>, &lt;span style="color:#40a070">42&lt;/span>, &lt;span style="color:#007020;font-weight:bold">True&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;apple&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;banana&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(t&lt;span style="color:#666">.&lt;/span>index(&lt;span style="color:#4070a0">&amp;#34;banana&amp;#34;&lt;/span>)) &lt;span style="color:#60a0b0;font-style:italic"># выведет 4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="применение">Применение&lt;/h2>
&lt;p>Кортежи могут быть очень полезны, когда вам нужно создать неизменяемый набор данных. Они также могут быть использованы в качестве ключей словаря, потому что они неизменяемы.&lt;/p></description></item><item><title>Словари</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/dict/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/dict/</guid><description>&lt;p>Словарь - это коллекция, которая позволяет хранить пары ключ-значение. В отличие от списков, словари не имеют порядка, и доступ к элементам словаря осуществляется по ключу, а не по индексу.&lt;/p>
&lt;h2 id="создание">Создание&lt;/h2>
&lt;p>Для создания словаря используется фигурная скобка &lt;code>{}&lt;/code> с ключами и значениями, разделенными двоеточием. Можно также использовать функцию &lt;code>dict()&lt;/code> для создания словаря.&lt;/p>
&lt;p>Пример создания словаря:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_dict &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#4070a0">&amp;#39;John&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;age&amp;#39;&lt;/span>: &lt;span style="color:#40a070">25&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;city&amp;#39;&lt;/span>: &lt;span style="color:#4070a0">&amp;#39;New York&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_dict_2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">dict&lt;/span>(name&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#39;Mary&amp;#39;&lt;/span>, age&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">30&lt;/span>, city&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#39;London&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для доступа к элементам словаря используется ключ. Например, чтобы получить значение, связанное с ключом &amp;ldquo;name&amp;rdquo;, можно использовать следующий синтаксис:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#666">=&lt;/span> my_dict[&lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#666">=&lt;/span> my_dict&lt;span style="color:#666">.&lt;/span>get(&lt;span style="color:#4070a0">&amp;#39;name&amp;#39;&lt;/span>, &lt;span style="color:#007020;font-weight:bold">None&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># вернет None если такого ключа нету&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Чтобы добавить новый элемент в словарь, просто создайте новую пару ключ-значение:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_dict[&lt;span style="color:#4070a0">&amp;#39;occupation&amp;#39;&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;engineer&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="методы">Методы&lt;/h2>
&lt;ul>
&lt;li>keys(): возвращает все ключи словаря&lt;/li>
&lt;li>values(): возвращает все значения словаря&lt;/li>
&lt;li>items(): возвращает все пары ключ-значение словаря в виде кортежей&lt;/li>
&lt;/ul>
&lt;p>А также: &lt;code>'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values'&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>keys &lt;span style="color:#666">=&lt;/span> my_dict&lt;span style="color:#666">.&lt;/span>keys() &lt;span style="color:#60a0b0;font-style:italic"># Получение всех ключей словаря&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>values &lt;span style="color:#666">=&lt;/span> my_dict&lt;span style="color:#666">.&lt;/span>values() &lt;span style="color:#60a0b0;font-style:italic"># Получение всех значений словаря&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>items &lt;span style="color:#666">=&lt;/span> my_dict&lt;span style="color:#666">.&lt;/span>items() &lt;span style="color:#60a0b0;font-style:italic"># Получение всех пар ключ-значение словаря&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="применение">Применение&lt;/h2>
&lt;p>Словари - это очень мощный инструмент, который часто используется в программировании для хранения и управления данными.&lt;/p></description></item><item><title>Множества</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/sets/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/sets/</guid><description>&lt;h2 id="создание">Создание&lt;/h2>
&lt;p>Множество можно создать, используя фигурные скобки &lt;code>{}&lt;/code> или функцию &lt;code>set()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_set &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_set) &lt;span style="color:#60a0b0;font-style:italic"># {1, 2, 3}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_set &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">set&lt;/span>([&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_set) &lt;span style="color:#60a0b0;font-style:italic"># {1, 2, 3}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="методы">Методы&lt;/h2>
&lt;ul>
&lt;li>add(): добавляет элемент в множество.&lt;/li>
&lt;li>remove(): удаляет элемент из множества. Если элемента нет в множестве, возбуждается исключение.&lt;/li>
&lt;li>discard(): удаляет элемент из множества. Если элемента нет в множестве, ничего не происходит.&lt;/li>
&lt;li>union(): возвращает объединение двух множеств.&lt;/li>
&lt;li>intersection(): возвращает пересечение двух множеств.&lt;/li>
&lt;li>difference(): возвращает разность двух множеств.&lt;/li>
&lt;li>symmetric_difference(): возвращает симметрическую разность двух множеств.&lt;/li>
&lt;/ul>
&lt;p>Также: &lt;code>'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update'&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_set &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_set) &lt;span style="color:#60a0b0;font-style:italic"># {1, 2, 3}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Добавление элемента&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_set&lt;span style="color:#666">.&lt;/span>add(&lt;span style="color:#40a070">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_set) &lt;span style="color:#60a0b0;font-style:italic"># {1, 2, 3, 4}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Удаление элемента&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_set&lt;span style="color:#666">.&lt;/span>remove(&lt;span style="color:#40a070">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_set) &lt;span style="color:#60a0b0;font-style:italic"># {1, 3, 4}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Объединение множеств&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>other_set &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>union_set &lt;span style="color:#666">=&lt;/span> my_set&lt;span style="color:#666">.&lt;/span>union(other_set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(union_set) &lt;span style="color:#60a0b0;font-style:italic"># {1, 3, 4, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Пересечение множеств&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>intersection_set &lt;span style="color:#666">=&lt;/span> my_set&lt;span style="color:#666">.&lt;/span>intersection(other_set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(intersection_set) &lt;span style="color:#60a0b0;font-style:italic"># {3, 4}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Разность множеств&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>difference_set &lt;span style="color:#666">=&lt;/span> my_set&lt;span style="color:#666">.&lt;/span>difference(other_set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(difference_set) &lt;span style="color:#60a0b0;font-style:italic"># {1}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Симметрическая разность множеств&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>symmetric_difference_set &lt;span style="color:#666">=&lt;/span> my_set&lt;span style="color:#666">.&lt;/span>symmetric_difference(other_set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(symmetric_difference_set) &lt;span style="color:#60a0b0;font-style:italic"># {1, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="применение">Применение&lt;/h2>
&lt;p>Множества могут использоваться для проверки наличия элемента или для удаления дубликатов из списка:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_list &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_set &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">set&lt;/span>(my_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_set) &lt;span style="color:#60a0b0;font-style:italic"># {1, 2, 3, 4, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Проверка наличия элемента&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> my_set:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;3 есть в множестве&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Удаление дубликатов из списка&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_list &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">list&lt;/span>(my_set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_list) &lt;span style="color:#60a0b0;font-style:italic"># [1, 2, 3, 4, 5]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://habr.com/ru/company/wunderfund/blog/693592/">Множества в Python&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Операторы</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/operators/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/operators/</guid><description>&lt;h2 id="оператор-присваивания">Оператор присваивания&lt;/h2>
&lt;p>Оператор присваивания &amp;ldquo;=&amp;rdquo; используется для присвоения значения переменной. Например:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="арифметические-операторы">Арифметические операторы&lt;/h2>
&lt;p>Арифметические операторы используются для выполнения математических операций над числами.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">+&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Сложение&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">-&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Вычитание&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">*&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Умножение&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">/&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Деление&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">%&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Остаток от деления&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">**&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Возведение в степень&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">//&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># Целочисленное деление&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Пример:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">+&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">-&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">*&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">/&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 2.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">%&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">**&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">//&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="операторы-сравнения">Операторы сравнения&lt;/h2>
&lt;p>Операторы сравнения используются для сравнения значений.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>== # Равно
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!= # Не равно
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; # Больше
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt; # Меньше
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;= # Больше или равно
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;= # Меньше или равно
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">==&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">!=&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">&amp;gt;&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">&amp;lt;&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">&amp;gt;=&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">&amp;lt;=&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="булевы-операторы">Булевы операторы&lt;/h2>
&lt;p>Булевы операторы используются для выполнения логических операций.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>and # Логическое И
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>or # Логическое ИЛИ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>not # Логическое НЕ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>z &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">&amp;gt;&lt;/span> y &lt;span style="color:#007020;font-weight:bold">and&lt;/span> x &lt;span style="color:#666">&amp;gt;&lt;/span> z) &lt;span style="color:#60a0b0;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">&amp;gt;&lt;/span> y &lt;span style="color:#007020;font-weight:bold">or&lt;/span> x &lt;span style="color:#666">&amp;lt;&lt;/span> z) &lt;span style="color:#60a0b0;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#007020;font-weight:bold">not&lt;/span> x &lt;span style="color:#666">&amp;gt;&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="побитовые-операторы">Побитовые операторы&lt;/h2>
&lt;p>Побитовые операторы используются для выполнения операций с двоичными числами.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>&amp;amp; # Побитовое И
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| # Побитовое ИЛИ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^ # Побитовое исключающее ИЛИ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~ # Побитовое НЕ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&amp;lt; # Сдвиг влево
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt; # Сдвиг вправо
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># 0b101&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># 0b011&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">&amp;amp;&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 1 (0b001)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">|&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># 7 &lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="операторы-is-и-in">Операторы &amp;ldquo;is&amp;rdquo; и &amp;ldquo;in&amp;rdquo;&lt;/h2>
&lt;p>Оператор &lt;code>is&lt;/code> используется для проверки, являются ли два объекта одним и тем же объектом в памяти.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#007020;font-weight:bold">is&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># False, потому что это два разных объекта в памяти&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(x &lt;span style="color:#666">==&lt;/span> y) &lt;span style="color:#60a0b0;font-style:italic"># True, потому что содержание списков одинаковое&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Оператор &lt;code>in&lt;/code> используется для проверки, находится ли элемент в последовательности.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> x) &lt;span style="color:#60a0b0;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#40a070">4&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> x) &lt;span style="color:#60a0b0;font-style:italic"># False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="тернарный-оператор">Тернарный оператор&lt;/h2>
&lt;p>Тернарный оператор - это оператор, который позволяет записать короткое условие в одну строку. Он имеет следующий синтаксис: &lt;code>value_if_true if condition else value_if_false&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max_value &lt;span style="color:#666">=&lt;/span> x &lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#666">&amp;gt;&lt;/span> y &lt;span style="color:#007020;font-weight:bold">else&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(max_value) &lt;span style="color:#60a0b0;font-style:italic"># 20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере, если &lt;code>x&lt;/code> больше &lt;code>y&lt;/code>, то &lt;code>max_value&lt;/code> будет равен &lt;code>x&lt;/code>, иначе &lt;code>y&lt;/code>.&lt;/p></description></item><item><title>Условия</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/conditionals/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/conditionals/</guid><description>&lt;p>В каждом компьютерном языке есть хотя бы один условный оператор. Чаще всего этот оператор представляет собой структуру &lt;strong>if/elif/else&lt;/strong>.&lt;/p>
&lt;p>В &lt;a href="https://www.python.org/downloads/release/python-3100/">Python 3.10&lt;/a> добавилась структура &lt;a href="https://peps.python.org/pep-0636/">&lt;strong>match/case&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="оператор-if">Оператор if&lt;/h2>
&lt;p>Позволяет выполнить блок кода, если определенное условие истинно&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;x is positive&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">elif&lt;/span> x &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;x is negative&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;x is zero&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="matchcase">match/case&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_day_name&lt;/span>(day):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">match&lt;/span> day:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#40a070">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Monday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#40a070">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tuesday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#40a070">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Wednesday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#40a070">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Thursday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#40a070">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Friday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#40a070">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Saturday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#40a070">7&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Sunday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> _:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Invalid day&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">match&lt;/span> command&lt;span style="color:#666">.&lt;/span>split():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;quit&amp;#34;&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Goodbye!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quit_game()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;look&amp;#34;&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_room&lt;span style="color:#666">.&lt;/span>describe()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;get&amp;#34;&lt;/span>, obj]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> character&lt;span style="color:#666">.&lt;/span>get(obj, current_room)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;go&amp;#34;&lt;/span>, direction]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_room &lt;span style="color:#666">=&lt;/span> current_room&lt;span style="color:#666">.&lt;/span>neighbor(direction)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="orandnot">or/and/not&lt;/h2>
&lt;ul>
&lt;li>&lt;code>or&lt;/code> означает, что если любое условие, которое &amp;ldquo;перечислено&amp;rdquo; вместе, равно True, то выполняется следующее утверждение&lt;/li>
&lt;li>&lt;code>and&lt;/code> означает, что для выполнения следующего утверждения все утверждения должны быть True&lt;/li>
&lt;li>&lt;code>not&lt;/code> означает, что если условие оценивается как False, то оно является True. На мой взгляд, это самый запутанный вариант.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#007020;font-weight:bold">and&lt;/span> y &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Both x and y are positive&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#007020;font-weight:bold">or&lt;/span> y &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;At least one of x and y is positive&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> x &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;x is not negative&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_list &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">in&lt;/span> my_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;&amp;#39;x&amp;#39; is not in the list, so this is True!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="проверка-на-ничто-none">Проверка на ничто (None)&lt;/h2>
&lt;p>В Python &lt;code>None&lt;/code> используется, чтобы обозначить отсутствие значения. Это можно использовать в условных операторах, чтобы проверить, имеет ли переменная значение &lt;code>None&lt;/code>.&lt;/p>
&lt;p>Например, если мы хотим проверить, имеет ли переменная &lt;code>x&lt;/code> значение &lt;code>None&lt;/code>, мы можем написать:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;x is None&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Мы также можем использовать оператор &lt;code>is not&lt;/code> для проверки, имеет ли переменная значение, отличное от &lt;code>None&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;x is not None&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь мы используем условный оператор if, чтобы проверить, имеет ли переменная x значение None. Если это так, мы выводим сообщение &amp;ldquo;x is None&amp;rdquo;. Если переменная x имеет какое-то другое значение, мы ничего не выводим.&lt;/p>
&lt;p>Это может быть полезно, если мы не знаем, какое значение будет иметь переменная, или если переменная может быть пустой.&lt;/p>
&lt;h2 id="if-name--main">if &lt;strong>name&lt;/strong> == “&lt;strong>main&lt;/strong>”&lt;/h2>
&lt;p>Оператор if name == &amp;ldquo;main&amp;rdquo; используется для определения, запущен ли файл напрямую или импортирован как модуль. Если файл запущен напрямую, блок кода внутри этого условия будет выполнен, если же файл импортирован как модуль, этот блок кода не будет выполнен:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> __name__ &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># код, который будет выполнен только при запуске файла напрямую&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Располагается в конце файла. Это говорит Python, что вы хотите выполнить следующий код, только если эта программа будет выполнена как отдельный файл.&lt;/p></description></item><item><title>Функции</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/functions/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/functions/</guid><description>&lt;p>Функция - это структура, которую вы определяете. Вы можете решать, есть ли у них аргументы или нет. Вы можете добавить аргументы в виде ключевых слов и аргументы по умолчанию.&lt;/p>
&lt;p>Функция - это блок кода, который начинается с ключевого слова &lt;code>def&lt;/code>, имени функции и двоеточия. Вот простой пример:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">a_function&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;You just created a function!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Эта функция ничего не делает, кроме вывода какого-то текста.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">add&lt;/span>(a, b):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> a &lt;span style="color:#666">+&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере мы создали функцию &lt;code>add&lt;/code>, которая принимает два аргумента &lt;code>a&lt;/code> и &lt;code>b&lt;/code> и возвращает их сумму.&lt;/p>
&lt;p>Вызов функции происходит путем указания имени функции, за которым следуют аргументы в скобках.&lt;/p>
&lt;p>Пример:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#666">=&lt;/span> add(&lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(result) &lt;span style="color:#60a0b0;font-style:italic"># выводит 5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="пустая-функция-заглушка">Пустая функция (заглушка)&lt;/h2>
&lt;p>Иногда, когда вы пишете код, вы просто хотите написать определения функций, не вставляя в них никакого кода.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">empty_function&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Все функции что-то возвращают. Если не указать ей, что она должна что-то вернуть, то она вернет &lt;code>None&lt;/code>.&lt;/p>
&lt;h2 id="аргументы-с-ключевыми-словами">Аргументы с ключевыми словами&lt;/h2>
&lt;p>Функции также могут принимать аргументы в виде ключевых слов! На самом деле они могут принимать как обычные аргументы, так и аргументы с ключевыми словами. Значит, вы можете указать, какие ключевые слова какими являются, и передать их. Вы видели такое поведение в предыдущем примере.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">keyword_function&lt;/span>(a&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">1&lt;/span>, b&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> a&lt;span style="color:#666">+&lt;/span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>keyword_function(b&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">4&lt;/span>, a&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">5&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># 9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Вы также могли бы вызвать эту функцию без указания ключевых слов. Эта функция также демонстрирует концепцию аргументов по умолчанию. Каким образом? Ну, попробуйте вызвать функцию вообще без аргументов!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>keyword_function() &lt;span style="color:#60a0b0;font-style:italic"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="args-и-kwargs">*args и **kwargs&lt;/h2>
&lt;p>Также функции могут принимать переменное число аргументов или аргументы с произвольными именами (как в словарях). Это делается с помощью операторов &lt;code>*&lt;/code> и &lt;code>**&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">myfunc&lt;/span>(&lt;span style="color:#666">*&lt;/span>args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> arg &lt;span style="color:#007020;font-weight:bold">in&lt;/span> args:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(arg)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Эта функция принимает переменное число аргументов и выводит их все на экран.&lt;/p>
&lt;p>Функции в Python также могут иметь аргументы со значениями по умолчанию. Если аргумент не передан при вызове функции, то будет использовано значение по умолчанию. Например:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">myfunc&lt;/span>(a, b&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">10&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> a &lt;span style="color:#666">+&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере мы создали функцию &lt;code>myfunc&lt;/code>, которая принимает два аргумента: &lt;code>a&lt;/code> и &lt;code>b&lt;/code> (по умолчанию равный &lt;code>10&lt;/code>). Если при вызове функции не указан второй аргумент, то он будет равен &lt;code>10&lt;/code>.&lt;/p>
&lt;p>Функции также могут принимать аргументы с ключевыми словами, которые представляют собой пары &amp;ldquo;ключ-значение&amp;rdquo;. Эти аргументы позволяют явно указать, какое значение должно быть использовано для каждого параметра функции. Для определения аргументов с ключевыми словами используются двойные звездочки (&lt;code>**&lt;/code>).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">print_values&lt;/span>(&lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> key, value &lt;span style="color:#007020;font-weight:bold">in&lt;/span> kwargs&lt;span style="color:#666">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(key, value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print_values(name&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#39;John&amp;#39;&lt;/span>, age&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">25&lt;/span>, city&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#39;New York&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере функция print_values() принимает произвольное количество аргументов с ключевыми словами и выводит их на экран. При вызове функции передаются аргументы с ключевыми словами name, age, и city, и функция выводит их значения.&lt;/p>
&lt;p>Аргументы с ключевыми словами особенно полезны, когда у функции есть множество параметров, и вы хотите явно указать, какое значение должно быть использовано для каждого параметра. Это также может быть полезно, если вы используете библиотеку, которая принимает множество аргументов, и вы хотите быть уверены, что вы передаете значения правильно.&lt;/p>
&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vegibit.com/python-function-tutorial/">https://vegibit.com/python-function-tutorial/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Область видимости</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/scope/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/scope/</guid><description>&lt;p>Область видимости, или &lt;strong>scope&lt;/strong>, определяет, где переменные могут быть использованы в программе. В Python есть две основные области видимости: &lt;strong>глобальная&lt;/strong> и &lt;strong>локальная&lt;/strong>.&lt;/p>
&lt;p>Переменные, определенные &lt;strong>внутри функции&lt;/strong>, имеют &lt;strong>локальную&lt;/strong> область видимости. Это означает, что они могут быть использованы только внутри этой функции. Если попытаться использовать их вне функции, будет вызвано исключение.&lt;/p>
&lt;p>Переменные, определенные вне функции, имеют глобальную область видимости. Они могут быть использованы в любом месте программы, в том числе и внутри функций. Если внутри функции определить переменную с тем же именем, что и глобальная переменная, то функция будет использовать локальную переменную.&lt;/p>
&lt;p>Пример:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># глобальная переменная&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">my_func&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># локальная переменная&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Значение x внутри функции:&amp;#34;&lt;/span>, x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_func()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Значение x вне функции:&amp;#34;&lt;/span>, x)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Вывод:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>Значение x внутри функции: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Значение x вне функции: 10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере мы создали глобальную переменную &lt;code>x&lt;/code> со значением &lt;code>10&lt;/code>, а затем определили функцию &lt;code>my_func()&lt;/code>, в которой мы создали локальную переменную &lt;code>x&lt;/code> со значением &lt;code>5&lt;/code>. Внутри функции мы выводим значение локальной переменной &lt;code>x&lt;/code>, а затем вызываем функцию и выводим значение глобальной переменной &lt;code>x&lt;/code>.&lt;/p>
&lt;p>💡 Если мы попробуем изменить значение глобальной переменной x внутри функции, то мы получим ошибку:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># глобальная переменная&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">my_func&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">=&lt;/span> x &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">5&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># ошибка: переменная x не определена&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Значение x внутри функции:&amp;#34;&lt;/span>, x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_func()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Значение x вне функции:&amp;#34;&lt;/span>, x)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере мы пытаемся изменить значение глобальной переменной &lt;code>x&lt;/code> внутри функции, но получаем ошибку, так как переменная &lt;code>x&lt;/code> не определена внутри функции.&lt;/p>
&lt;p>Чтобы изменить значение глобальной переменной, нужно использовать оператор &lt;code>global&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># глобальная переменная&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">my_func&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">global&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">=&lt;/span> x &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Значение x внутри функции:&amp;#34;&lt;/span>, x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_func()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Значение x вне функции:&amp;#34;&lt;/span>, x)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере мы используем оператор &lt;code>global&lt;/code> для того, чтобы указать, что мы хотим использовать глобальную переменную &lt;code>x&lt;/code>.&lt;/p></description></item><item><title>Классы</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/classes/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/classes/</guid><description>&lt;p>Все в Python является объектом. Это означает, что каждая сущность в Python имеет методы и значения. Причина в том, что в основе всего лежит класс.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#bb60d5">x&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Some String&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; dir&lt;span style="color:#666">(&lt;/span>x&lt;span style="color:#666">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">[&lt;/span>&lt;span style="color:#4070a0">&amp;#39;__add__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__class__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__contains__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__delattr__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__doc__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__eq__&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;__format__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__ge__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__getattribute__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__getitem__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__getnewargs__&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;__getslice__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__gt__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__hash__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__init__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__le__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__len__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__lt__&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;__mod__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__mul__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__ne__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__new__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__reduce__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__reduce_ex__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__repr__&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;__rmod__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__rmul__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__setattr__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__sizeof__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__str__&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;__subclasshook__&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;_formatter_field_name_split&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;_formatter_parser&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;capitalize&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;center&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;count&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;decode&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;encode&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;endswith&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;expandtabs&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;find&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;format&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;index&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;isalnum&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;isalpha&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;isdigit&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;islower&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;isspace&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;istitle&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;isupper&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;join&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;ljust&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;lower&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;lstrip&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;partition&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;replace&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;rfind&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;rindex&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;rjust&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;rpartition&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;rsplit&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;rstrip&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;split&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;splitlines&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;startswith&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;strip&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;swapcase&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;title&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">&amp;#39;translate&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;upper&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;zfill&amp;#39;&lt;/span>&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь у нас есть строка, присвоенная переменной &lt;strong>x&lt;/strong>. Может показаться, что это не так много, но у этой строки есть много методов. Если вы используете ключевое слово &lt;strong>dir&lt;/strong> в Python, то сможете получить список всех методов, которые можно вызвать для вашей строки.&lt;/p>
&lt;p>Технически мы не должны напрямую вызывать &lt;strong>методы&lt;/strong>, начинающиеся с символов подчеркивания, но их можно вызвать.&lt;/p>
&lt;p>Это значит, что строка основана на классе, а &lt;strong>x&lt;/strong>- это &lt;strong>экземпляр&lt;/strong> этого класса!&lt;/p>
&lt;p>В Python мы можем создавать свои собственные классы.&lt;/p>
&lt;h2 id="создание-класса">Создание класса&lt;/h2>
&lt;p>Создать класс в Python очень просто. Вот очень простой пример:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">MyClass&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my_attribute &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">my_method&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Hello, world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь мы создали класс &lt;code>MyClass&lt;/code>, который имеет атрибут &lt;code>my_attribute&lt;/code> со значением &lt;code>42&lt;/code> и метод &lt;code>my_method&lt;/code>, который просто выводит сообщение в консоль.&lt;/p>
&lt;p>Атрибуты класса могут быть доступны как через экземпляр класса, так и напрямую через класс:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(MyClass&lt;span style="color:#666">.&lt;/span>my_attribute) &lt;span style="color:#60a0b0;font-style:italic"># 42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_object &lt;span style="color:#666">=&lt;/span> MyClass()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_object&lt;span style="color:#666">.&lt;/span>my_attribute) &lt;span style="color:#60a0b0;font-style:italic"># 42&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Методы класса принимают в качестве первого аргумента экземпляр класса (&lt;code>self&lt;/code>) и могут иметь доступ к атрибутам класса и вызывать другие методы класса:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">MyClass&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my_attribute &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">my_method&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(self&lt;span style="color:#666">.&lt;/span>my_attribute)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">my_other_method&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>my_method()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь мы добавили метод &lt;code>my_other_method&lt;/code>, который просто вызывает метод &lt;code>my_method&lt;/code>.&lt;/p>
&lt;p>В Python существуют специальные методы, которые определяются с помощью двойного подчеркивания в начале и в конце названия метода. Например, метод &lt;code>__init__&lt;/code> используется для инициализации экземпляра класса при его создании (конструкторы):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">MyClass&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>name &lt;span style="color:#666">=&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">say_hello&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> self&lt;span style="color:#666">.&lt;/span>name &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34;!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь мы определили метод &lt;code>__init__&lt;/code>, который принимает аргумент name и сохраняет его в атрибуте name. Метод say_hello использует этот атрибут для вывода сообщения.&lt;/p>
&lt;p>Классы могут &lt;strong>наследовать&lt;/strong> друг от друга, позволяя переопределять и расширять функциональность базового класса. Для этого используется ключевое слово super:&lt;/p>
&lt;h2 id="что-такое-self">Что такое self?&lt;/h2>
&lt;p>Классы Python нуждаются в способе обращения к самим себе. Это не какое-то самовлюбленное созерцание класса. Напротив, это способ отличить один экземпляр от другого.&lt;/p>
&lt;p>Слово &lt;code>self&lt;/code> - это способ самоописания любого объекта, в буквальном смысле.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Person&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, name, age):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>name &lt;span style="color:#666">=&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>age &lt;span style="color:#666">=&lt;/span> age
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">introduce&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;My name is &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0"> and I&amp;#39;m &lt;/span>&lt;span style="color:#70a0d0">{}&lt;/span>&lt;span style="color:#4070a0"> years old.&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>format(self&lt;span style="color:#666">.&lt;/span>name, self&lt;span style="color:#666">.&lt;/span>age))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person1 &lt;span style="color:#666">=&lt;/span> Person(&lt;span style="color:#4070a0">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#40a070">25&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person1&lt;span style="color:#666">.&lt;/span>introduce()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь &lt;code>self.name&lt;/code> и &lt;code>self.age&lt;/code> представляют атрибуты объекта &lt;code>Person&lt;/code>, который вызывает метод &lt;code>introduce&lt;/code>. Без использования &lt;code>self&lt;/code> мы не могли бы получить доступ к атрибутам объекта из метода.&lt;/p>
&lt;h2 id="наследование">Наследование&lt;/h2>
&lt;p>Наследование - это механизм, который позволяет создавать новый класс на основе уже существующего, наследуя его свойства и методы. Класс, от которого наследуется новый класс, называется родительским классом, а новый класс - дочерним классом.&lt;/p>
&lt;p>Дочерний класс может использовать свойства и методы родительского класса, а также добавлять свои собственные свойства и методы. Это позволяет создавать более сложные иерархии классов, где дочерние классы наследуют общие свойства и методы от родительского класса, но могут быть уникальными в других отношениях.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Animal&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, name, species):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>name &lt;span style="color:#666">=&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>species &lt;span style="color:#666">=&lt;/span> species
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">speak&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;I am an animal.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Dog&lt;/span>(Animal):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, name, breed):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">super&lt;/span>()&lt;span style="color:#666">.&lt;/span>__init__(name, species&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Canis&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>breed &lt;span style="color:#666">=&lt;/span> breed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">speak&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Woof!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Cat&lt;/span>(Animal):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> __init__(self, name, color):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">super&lt;/span>()&lt;span style="color:#666">.&lt;/span>__init__(name, species&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Felis&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#666">.&lt;/span>color &lt;span style="color:#666">=&lt;/span> color
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">speak&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Meow!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dog &lt;span style="color:#666">=&lt;/span> Dog(&lt;span style="color:#4070a0">&amp;#34;Buddy&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;Golden Retriever&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#666">=&lt;/span> Cat(&lt;span style="color:#4070a0">&amp;#34;Luna&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;Black&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(dog&lt;span style="color:#666">.&lt;/span>name) &lt;span style="color:#60a0b0;font-style:italic"># Output: Buddy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(dog&lt;span style="color:#666">.&lt;/span>breed) &lt;span style="color:#60a0b0;font-style:italic"># Output: Golden Retriever&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dog&lt;span style="color:#666">.&lt;/span>speak() &lt;span style="color:#60a0b0;font-style:italic"># Output: Woof!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(cat&lt;span style="color:#666">.&lt;/span>name) &lt;span style="color:#60a0b0;font-style:italic"># Output: Luna&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(cat&lt;span style="color:#666">.&lt;/span>color) &lt;span style="color:#60a0b0;font-style:italic"># Output: Black&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat&lt;span style="color:#666">.&lt;/span>speak() &lt;span style="color:#60a0b0;font-style:italic"># Output: Meow!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере класс &lt;code>Animal&lt;/code> является &lt;strong>родительским&lt;/strong> классом для классов &lt;code>Dog&lt;/code> и &lt;code>Cat&lt;/code>.&lt;/p>
&lt;p>Класс &lt;code>Dog&lt;/code> &lt;strong>наследует&lt;/strong> свойства &lt;code>name&lt;/code> и &lt;code>species&lt;/code> от класса &lt;code>Animal&lt;/code> и добавляет свой собственный атрибут &lt;code>breed&lt;/code>.&lt;/p>
&lt;p>Класс &lt;code>Cat&lt;/code> также наследует свойства &lt;code>name&lt;/code> и &lt;code>species&lt;/code> от класса &lt;code>Animal&lt;/code> и добавляет свой собственный атрибут &lt;code>color&lt;/code>.&lt;/p>
&lt;p>У каждого класса есть свой метод &lt;code>speak&lt;/code>, который переопределяет метод &lt;code>speak&lt;/code> родительского класса &lt;code>Animal&lt;/code>. Когда вызывается метод &lt;code>speak&lt;/code> для экземпляра класса Dog, выводится строка &amp;ldquo;Woof!&amp;rdquo;, а когда вызывается для экземпляра класса &lt;code>Cat&lt;/code>, выводится строка &amp;ldquo;Meow!&amp;rdquo;. (&lt;em>Полиморфизм&lt;/em>)&lt;/p>
&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vegibit.com/python-abstract-base-classes/">https://vegibit.com/python-abstract-base-classes/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Циклы</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/loops/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/loops/</guid><description>&lt;h2 id="цикл-while">Цикл while&lt;/h2>
&lt;p>Цикл &lt;code>while&lt;/code> повторяет набор инструкций, пока заданное условие истинно. Каждый раз, когда выполняется набор инструкций, условие проверяется снова, и если оно продолжает быть истинным, то набор инструкций выполняется снова.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">while&lt;/span> i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="цикл-for">Цикл for&lt;/h2>
&lt;p>Цикл for используется для прохождения через элементы в последовательности, такой как список или строка. В отличие от цикла &lt;code>while&lt;/code>, в цикле &lt;code>for&lt;/code> не нужно определять начальное условие или шаг увеличения.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>fruits &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;apple&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;banana&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;cherry&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> fruits:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apple
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>banana
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cherry
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="операторы-break-и-continue">Операторы break и continue&lt;/h2>
&lt;p>Оператор break позволяет выйти из цикла, когда выполнено определенное условие, даже если условие продолжает оставаться истинным.
Оператор continue позволяет пропустить определенные итерации цикла, когда выполняется определенное условие, и продолжить следующую итерацию.&lt;/p>
&lt;p>Пример:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">while&lt;/span> i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> i &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> i &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="else-в-циклах">else в циклах&lt;/h2>
&lt;p>Конструкция &lt;code>else&lt;/code> в циклах в Python выполняется, когда цикл завершается нормально, то есть без использования оператора break. Если оператор break используется в цикле, то блок кода, указанный после else, не будет выполняться.&lt;/p>
&lt;p>В цикле &lt;code>while&lt;/code>, конструкция &lt;code>else&lt;/code> будет выполнена, когда условие цикла станет ложным, и все итерации будут выполнены.&lt;/p>
&lt;p>В цикле for, конструкция &lt;code>else&lt;/code> будет выполнена после последней итерации, когда больше нет элементов для итерации.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> num &lt;span style="color:#007020;font-weight:bold">in&lt;/span> numbers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> num &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Found 3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;3 not found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере, если число 3 найдено в списке numbers, то будет выведено &amp;ldquo;Found 3&amp;rdquo;. Если число 3 не найдено в списке, то после окончания цикла будет выведено &amp;ldquo;3 not found&amp;rdquo;.&lt;/p></description></item><item><title>Генераторы</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/comprehensions/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/comprehensions/</guid><description>&lt;p>В языке Python есть несколько методов создания списков и словарей, которые известны как генераторы.&lt;/p>
&lt;h2 id="генераторы-списков">Генераторы списков&lt;/h2>
&lt;p>Генератор списка - это выражение, которое генерирует список значений на основе каких-то правил. Вместо того, чтобы создавать список целиком и хранить его в памяти, генератор списка генерирует значения по мере их запроса.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>squares &lt;span style="color:#666">=&lt;/span> [x&lt;span style="color:#666">*&lt;/span>x &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">10&lt;/span>)]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Эта строка создает генератор списка, который генерирует квадраты чисел от 0 до 9. Затем можно перебрать элементы этого генератора с помощью цикла:&lt;/p>
&lt;p>В Python есть функция &lt;code>range&lt;/code>, которая может возвращать список чисел. По умолчанию она возвращает целые числа, начиная с 0 и заканчивая числом, которое вы ей передали, но не включая его. В данном случае она возвращает список, содержащий целые числа &lt;code>0-9&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> square &lt;span style="color:#007020;font-weight:bold">in&lt;/span> squares:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(square)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="генераторы-словарей">Генераторы словарей&lt;/h2>
&lt;p>Генератор словаря работает аналогично генератору списка, но вместо списка мы создаем словарь с помощью фигурных скобок и пары &amp;ldquo;ключ: значение&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_dict &lt;span style="color:#666">=&lt;/span> {x: x&lt;span style="color:#666">**&lt;/span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">5&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Вывод: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="генератор-множеств">Генератор множеств&lt;/h2>
&lt;p>Генератор множества используется аналогично генератору списка, но вместо списка мы создаем множество с помощью фигурных скобок.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>my_set &lt;span style="color:#666">=&lt;/span> {x&lt;span style="color:#666">**&lt;/span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">5&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(my_set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Вывод: {0, 1, 4, 9, 16}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь мы создаем множество &lt;code>my_set&lt;/code> с элементами, равными квадратам чисел от 0 до 4.&lt;/p>
&lt;p>&lt;strong>Ресурсы:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vegibit.com/python-comprehension-tutorial/">https://vegibit.com/python-comprehension-tutorial/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Ввод данных пользователем</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/inputs/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/inputs/</guid><description>&lt;p>В Python вы можете запросить у пользователя ввод данных во время выполнения программы. Для этого используется функция inp(), которая приостанавливает выполнение программы, ожидает ввода от пользователя и возвращает введенные данные в виде строки.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">input&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Введите ваше имя: &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Привет, &amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> name &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34;!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>При запуске этого кода пользователь увидит приглашение &amp;ldquo;Введите ваше имя:&amp;rdquo;, после чего он может ввести свое имя и нажать клавишу &lt;code>Enter&lt;/code>. Затем программа поприветствует пользователя по имени.&lt;/p>
&lt;p>Вы также можете использовать функцию &lt;code>int()&lt;/code> для преобразования введенной строки в целое число. Например:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>age &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">int&lt;/span>(&lt;span style="color:#007020">input&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Сколько вам лет? &amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;В следующем году вам будет&amp;#34;&lt;/span>, age &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Этот код запросит у пользователя возраст, преобразует его в целое число и выводит сообщение о том, сколько ему будет лет в следующем году.&lt;/p>
&lt;p>Обратите внимание, что функция &lt;code>inp()&lt;/code> всегда возвращает строку, поэтому необходимо преобразовывать введенные данные в нужный тип, если это необходимо.&lt;/p></description></item><item><title>Обработка исключений</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/exception_handling/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/exception_handling/</guid><description>&lt;p>Обработка исключений - это механизм, который позволяет обработать возможную ошибку, которая может возникнуть в процессе выполнения программы.&lt;/p>
&lt;p>В Python эта конструкция исключений обычно обернута в так называемый &lt;strong>try/except&lt;/strong>.&lt;/p>
&lt;p>Оператор &lt;code>try-except&lt;/code> - это основной инструмент для обработки исключений. Код, который может вызвать исключение, помещается в блок &lt;code>try&lt;/code>. Если исключение возникает, то Python переходит в блок &lt;code>except&lt;/code>, где вы можете обработать исключение и выполнить соответствующий код.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">int&lt;/span>(&lt;span style="color:#007020">input&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Введите число: &amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">100&lt;/span> &lt;span style="color:#666">/&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">except&lt;/span> &lt;span style="color:#007020">ZeroDivisionError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Деление на ноль!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Результат: &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>result&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Конец программы&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В этом примере программа просит пользователя ввести число, которое будет использоваться в делении на 100. Если пользователь вводит 0, то возникает исключение &lt;code>ZeroDivisionError&lt;/code>, которое обрабатывается блоком except.&lt;/p>
&lt;p>В случае, если исключение не возникает, программа выполняет блок else. Независимо от того, возникает исключение или нет, блок &lt;code>finally&lt;/code> всегда будет выполнен.&lt;/p>
&lt;p>Кроме того, вы можете использовать несколько блоков &lt;code>except&lt;/code> для обработки разных типов исключений.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">int&lt;/span>(&lt;span style="color:#007020">input&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Введите число: &amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">100&lt;/span> &lt;span style="color:#666">/&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">except&lt;/span> &lt;span style="color:#007020">ZeroDivisionError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Деление на ноль!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">except&lt;/span> &lt;span style="color:#007020">ValueError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Неверный формат числа!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Результат: &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>result&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Конец программы&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Помимо этого, можно использовать операторы &lt;code>try-except&lt;/code> внутри функций, чтобы обрабатывать исключения, возникающие во время их выполнения.&lt;/p>
&lt;p>В Python используются операторы &lt;code>raise&lt;/code> и &lt;code>assert&lt;/code>, которые позволяют вызвать исключение в явном виде, когда это необходимо.&lt;/p>
&lt;p>Пример использования оператора &lt;code>raise&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> x &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">raise&lt;/span> &lt;span style="color:#007020">ValueError&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Число должно быть положительным!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Пример использования оператора &lt;code>assert&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">assert&lt;/span> x &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;Число должно быть отрицательным!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Оператор &lt;code>assert&lt;/code> проверяет истинность заданного выражения, и если оно является ложным, вызывает исключение &lt;code>AssertionError&lt;/code>.&lt;/p></description></item><item><title>Работа с файлами</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/file_io/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/file_io/</guid><description>&lt;h2 id="чтение-файла">Чтение файла&lt;/h2>
&lt;p>Чтобы прочитать файл в Python, вам нужно сначала открыть файл. Вы можете сделать это, используя функцию &lt;code>open()&lt;/code>. Эта функция принимает два аргумента: &lt;strong>имя файла&lt;/strong> и &lt;strong>режим открытия файла&lt;/strong>.&lt;/p>
&lt;p>Режим открытия файла может быть &amp;ldquo;r&amp;rdquo; (чтение), &amp;ldquo;w&amp;rdquo; (запись) или &amp;ldquo;a&amp;rdquo; (добавление).&lt;/p>
&lt;p>Пример, который читает файл &amp;ldquo;example.txt&amp;rdquo; в режиме чтения и выводит его содержимое на экран:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;example.txt&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#666">=&lt;/span> f&lt;span style="color:#666">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(content)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Мы используем оператор &lt;code>with&lt;/code>, который автоматически закрывает файл после его использования. Функция &lt;code>read()&lt;/code> читает содержимое файла и возвращает его в виде строки.&lt;/p>
&lt;h2 id="как-читать-файлы-по-частям">Как читать файлы по частям&lt;/h2>
&lt;p>Если файл очень большой, то может быть более эффективным читать его по частям.&lt;/p>
&lt;p>Самый простой способ читать файл по частям - использовать цикл. Для первого примера мы будем использовать цикл &lt;strong>for&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>handle &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;test.txt&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;r&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> line &lt;span style="color:#007020;font-weight:bold">in&lt;/span> handle:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>handle&lt;span style="color:#666">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь мы открываем файл в дескрипторе в режиме &amp;ldquo;только чтение&amp;rdquo;, а затем используем цикл &lt;strong>for&lt;/strong> для итерации по нему.&lt;/p>
&lt;p>Вот пример, который читает файл по 100 байтов за раз:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;example.txt&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chunk &lt;span style="color:#666">=&lt;/span> f&lt;span style="color:#666">.&lt;/span>read(&lt;span style="color:#40a070">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> chunk:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(chunk)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь мы используем цикл &lt;code>while&lt;/code> для чтения файла по частям. Функция &lt;code>read()&lt;/code> читает 100 байтов за раз и возвращает их в виде строки. Если возвращаемая строка пустая, значит, мы достигли конца файла, и мы выходим из цикла.&lt;/p>
&lt;h2 id="запись-файлов">Запись файлов&lt;/h2>
&lt;p>Чтобы записать данные в файл в Python, вам также нужно открыть файл с помощью функции &lt;code>open()&lt;/code>, но в режиме записи (&amp;ldquo;w&amp;rdquo;) или добавления (&amp;ldquo;a&amp;rdquo;). Затем вы можете записать данные в файл, используя функцию &lt;code>write()&lt;/code>.&lt;/p>
&lt;p>Вот пример, который записывает строку в файл &amp;ldquo;example.txt&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;example.txt&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;w&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#666">.&lt;/span>write(&lt;span style="color:#4070a0">&amp;#34;Hello, world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Здесь мы используем функцию &lt;code>write()&lt;/code>, чтобы записать строку в файл.&lt;/p>
&lt;h2 id="использование-оператора-with">Использование оператора with&lt;/h2>
&lt;p>В Python есть небольшой встроенный оператор &lt;strong>with&lt;/strong>, который можно использовать для упрощения чтения и записи файлов. Оператор &lt;strong>with&lt;/strong> создает то, что в Python известно как &lt;strong>менеджер контекста&lt;/strong>, который автоматически закроет файл, когда вы закончите его обработку. Давайте посмотрим, как это работает:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#007020">open&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;test.txt&amp;#34;&lt;/span>) &lt;span style="color:#007020;font-weight:bold">as&lt;/span> file_handler:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> line &lt;span style="color:#007020;font-weight:bold">in&lt;/span> file_handler:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(line)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Импорт модулей</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/imports/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/imports/</guid><description>&lt;p>Python поставляется с большим количеством готового кода. Эти части кода известны как модули и пакеты.&lt;/p>
&lt;p>Модуль - это один импортируемый файл Python, а пакет состоит из двух или более модулей. Пакет может быть импортирован так же, как и модуль.&lt;/p>
&lt;p>В Python вы можете импортировать модули из других файлов, чтобы использовать функции и переменные, определенные в этих модулях.&lt;/p>
&lt;h2 id="import">import&lt;/h2>
&lt;p>Python предоставляет ключевое слово &lt;strong>import&lt;/strong> для импорта модулей.&lt;/p>
&lt;p>Допустим, у нас есть два файла:&lt;/p>
&lt;p>Файл &lt;code>dog.py&lt;/code>, содержащий следующий код:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">bark&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;Гав-гав!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Файл &lt;code>main.py&lt;/code>, в котором мы хотим использовать функцию &lt;code>bark&lt;/code> из &lt;code>dog.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">dog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dog&lt;span style="color:#666">.&lt;/span>bark()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Мы импортируем модуль &lt;code>dog&lt;/code> в &lt;code>main.py&lt;/code> с помощью оператора import и затем можем вызывать функцию &lt;code>bark()&lt;/code> через точку и имя модуля.&lt;/p>
&lt;h2 id="from-x-import-y">from X import Y&lt;/h2>
&lt;p>Мы также можем импортировать определенные функции или переменные из модуля с помощью оператора &lt;code>from&lt;/code>.&lt;/p>
&lt;p>Допустим, у нас есть файл &lt;code>math.py&lt;/code>, содержащий функцию &lt;code>square&lt;/code>, которая возводит число в квадрат:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">square&lt;/span>(x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> x &lt;span style="color:#666">**&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В файле &lt;code>main.py&lt;/code> мы можем импортировать только функцию &lt;code>square&lt;/code> из &lt;code>math.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">math&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> square
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#666">=&lt;/span> square(&lt;span style="color:#40a070">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(result)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Мы можем использовать &lt;code>square&lt;/code>, как будто она была определена в &lt;code>main.py&lt;/code>, и не нужно вызывать ее через точку и имя модуля.&lt;/p>
&lt;p>Обратите внимание, что если мы попытаемся вызвать какую-то другую функцию из &lt;code>math.py&lt;/code>, которая не была импортирована, мы получим ошибку:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">math&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> square
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Ошибка: name &amp;#39;add&amp;#39; is not defined&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#666">=&lt;/span> add(&lt;span style="color:#40a070">5&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="import-">import *&lt;/h2>
&lt;p>В Python можно импортировать все функции из модуля одной командой. Для этого используется символ звездочки (*).&lt;/p>
&lt;p>Вот пример:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">math&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#666">*&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Эта команда импортирует все функции и константы из модуля math, и мы можем использовать их в нашем коде без префикса math.&lt;/p>
&lt;p>Однако, такой подход не рекомендуется, так как может привести к конфликту имен и ухудшить читаемость кода. Вместо этого, лучше явно указывать, какие функции и константы нужны для нашей программы.&lt;/p>
&lt;p>Модуль csv
Модуль configparser
Логирование
Модуль sys
Модуль os
Модуль email / smtplib
Модуль sqlite
Модуль subprocess
Модуль потоков Thread
Модуль asyncio&lt;/p></description></item></channel></rss>