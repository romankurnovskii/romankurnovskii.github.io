<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I - Основы on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/</link><description>Recent content in I - Основы on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2023 Personal page</copyright><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tracks/python-101/basis/index.xml" rel="self" type="application/rss+xml"/><item><title>Установка Python</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/install/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/install/</guid><description>Для установки Python на MacOS можно использовать менеджер пакетов brew. Для этого необходимо выполнить команду:
brew install python Для операционных систем на базе Linux также существуют менеджеры пакетов, которые можно использовать для установки Python. Например, для Ubuntu можно использовать команду:
sudo apt-get install python Для Windows можно загрузить установочный пакет с официального сайта https://www.python.org/downloads/.
После установки Python необходимо убедиться, что версия Python, установленная на компьютере, соответствует требованиям для запуска необходимых библиотек и инструментов, которые будут использоваться в процессе разработки.</description></item><item><title>Среда разработки</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/ide/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/ide/</guid><description>Для удобной работы с Python требуется хорошо настроенная рабочая среда. Я предпочитаю использовать Visual Studio Code - бесплатный редактор кода, разработанный Microsoft.
Для начала, нужно установить Visual Studio Code на свой компьютер. Это можно сделать с помощью официального сайта https://code.visualstudio.com/.
Установка Python на MacOS и Linux очень проста. Для MacOS можно использовать менеджер пакетов brew, который позволяет установить последнюю версию Python одной командой:
brew install --cask visual-studio-code Для Linux, в зависимости от дистрибутива, используется свой менеджер пакетов. Например, для Ubuntu это можно сделать командой:</description></item><item><title>Типы данных</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/types/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/types/</guid><description>Python - это язык программирования, который обладает динамической типизацией, что означает, что тип переменной может меняться в процессе выполнения программы.
В Python есть несколько основных типов данных:
Строковые типы (string)
Числовые типы (целые числа, числа с плавающей запятой, комплексные числа)
Логический тип (True/False)
Списки (list) - это упорядоченная коллекция элементов, которые могут быть различных типов данных.
Списки создаются при помощи квадратных скобок [ ] и элементы списка разделяются запятыми.
Кортежи (tuple) - это упорядоченная коллекция элементов, которые могут быть различных типов данных.</description></item><item><title>Числа</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/numbers/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/numbers/</guid><description>Числовые типы данных в Python могут быть целыми числами (int), числами с плавающей запятой (float) и комплексными числами (complex).
Целые числа - это числа без дробной части, а числа с плавающей запятой - это числа с дробной частью.
Комплексные числа представляются парой вещественных чисел и используются в математических расчетах.
a = 5 # целое число b = 3.14 # вещественное число c = 2 + 3j # комплексное число print(type(a)) # выведет &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; print(type(b)) # выведет &amp;lt;class &amp;#39;float&amp;#39;&amp;gt; print(type(c)) # выведет &amp;lt;class &amp;#39;complex&amp;#39;&amp;gt; Python поддерживает все стандартные арифметические операции: сложение, вычитание, умножение, деление, возведение в степень, целочисленное деление и остаток от деления.</description></item><item><title>Строки</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/strings/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/strings/</guid><description>В Python существует несколько типов данных. Основные типы данных, с которыми вы, вероятно, будете чаще всего встречаться, - это строка, целое число, плавающая цифра, список, словарь и кортеж. В этой главе мы рассмотрим строковый тип данных. Вы удивитесь, как много вещей можно делать со строками в Python прямо из коробки. Существует также модуль string, который можно импортировать для получения доступа к еще большей функциональности, но мы не будем рассматривать его в этой главе. Вместо этого мы рассмотрим следующие темы:</description></item><item><title>Списки</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/lists/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/lists/</guid><description>Список в Python похож на массив в других языках.
Создание В Python пустой список может быть создан следующими способами.
my_list = [] &amp;gt;&amp;gt;&amp;gt; my_list = list() Можно обращаться к элементам списка и кортежа по индексу, начиная с нуля. Например, чтобы получить доступ к первому элементу списка, можно использовать индекс 0:
my_list = [1, 2, 3, &amp;#34;four&amp;#34;, 5.0] print(my_list[0]) # выводит 1 Можно также использовать срезы (slices) для получения подмножества элементов списка или кортежа. Например, чтобы получить первые три элемента списка, можно использовать срез [0:3]:</description></item><item><title>Кортежи</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/tuples/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/tuples/</guid><description>Кортежи в Python - это неизменяемые последовательности элементов, очень похожие на списки.
Создание Создаются с использованием круглых скобок и могут содержать любые типы данных, в том числе и другие кортежи.
Создание кортежей очень похоже на создание списков, только используются круглые скобки вместо квадратных скобок. Например:
t = (1, 2, 3) another_tuple = tuple() abc = tuple([4, 5, 6]) Мы создали кортеж t, содержащий три элемента. Теперь мы можем обратиться к каждому элементу этого кортежа по его индексу, так же как и в списках:</description></item><item><title>Словари</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/dict/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/dict/</guid><description>Словарь - это коллекция, которая позволяет хранить пары ключ-значение. В отличие от списков, словари не имеют порядка, и доступ к элементам словаря осуществляется по ключу, а не по индексу.
Создание Для создания словаря используется фигурная скобка {} с ключами и значениями, разделенными двоеточием. Можно также использовать функцию dict() для создания словаря.
Пример создания словаря:
my_dict = {&amp;#39;name&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;age&amp;#39;: 25, &amp;#39;city&amp;#39;: &amp;#39;New York&amp;#39;} my_dict_2 = dict(name=&amp;#39;Mary&amp;#39;, age=30, city=&amp;#39;London&amp;#39;) Для доступа к элементам словаря используется ключ. Например, чтобы получить значение, связанное с ключом &amp;ldquo;name&amp;rdquo;, можно использовать следующий синтаксис:</description></item><item><title>Множества</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/sets/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/sets/</guid><description>Создание Множество можно создать, используя фигурные скобки {} или функцию set():
my_set = {1, 2, 3} print(my_set) # {1, 2, 3} my_set = set([1, 2, 3]) print(my_set) # {1, 2, 3} Методы add(): добавляет элемент в множество. remove(): удаляет элемент из множества. Если элемента нет в множестве, возбуждается исключение. discard(): удаляет элемент из множества. Если элемента нет в множестве, ничего не происходит. union(): возвращает объединение двух множеств. intersection(): возвращает пересечение двух множеств. difference(): возвращает разность двух множеств. symmetric_difference(): возвращает симметрическую разность двух множеств.</description></item><item><title>Операторы</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/operators/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/operators/</guid><description>Оператор присваивания Оператор присваивания &amp;ldquo;=&amp;rdquo; используется для присвоения значения переменной. Например:
x = 5 Арифметические операторы Арифметические операторы используются для выполнения математических операций над числами.
+ # Сложение - # Вычитание * # Умножение / # Деление % # Остаток от деления ** # Возведение в степень // # Целочисленное деление Пример:
x = 5 y = 2 print(x + y) # 7 print(x - y) # 3 print(x * y) # 10 print(x / y) # 2.5 print(x % y) # 1 print(x ** y) # 25 print(x // y) # 2 Операторы сравнения Операторы сравнения используются для сравнения значений.</description></item><item><title>Условия</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/conditionals/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/conditionals/</guid><description>В каждом компьютерном языке есть хотя бы один условный оператор. Чаще всего этот оператор представляет собой структуру if/elif/else.
В Python 3.10 добавилась структура match/case
Оператор if Позволяет выполнить блок кода, если определенное условие истинно
x = 5 if x &amp;gt; 0: print(&amp;#34;x is positive&amp;#34;) elif x &amp;lt; 0: print(&amp;#34;x is negative&amp;#34;) else: print(&amp;#34;x is zero&amp;#34;) match/case def get_day_name(day): match day: case 1: return &amp;#34;Monday&amp;#34; case 2: return &amp;#34;Tuesday&amp;#34; case 3: return &amp;#34;Wednesday&amp;#34; case 4: return &amp;#34;Thursday&amp;#34; case 5: return &amp;#34;Friday&amp;#34; case 6: return &amp;#34;Saturday&amp;#34; case 7: return &amp;#34;Sunday&amp;#34; case _: return &amp;#34;Invalid day&amp;#34; match command.</description></item><item><title>Функции</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/functions/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/functions/</guid><description>Функция - это структура, которую вы определяете. Вы можете решать, есть ли у них аргументы или нет. Вы можете добавить аргументы в виде ключевых слов и аргументы по умолчанию.
Функция - это блок кода, который начинается с ключевого слова def, имени функции и двоеточия. Вот простой пример:
def a_function(): print(&amp;#34;You just created a function!&amp;#34;) Эта функция ничего не делает, кроме вывода какого-то текста.
def add(a, b): result = a + b return result В этом примере мы создали функцию add, которая принимает два аргумента a и b и возвращает их сумму.</description></item><item><title>Область видимости</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/scope/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/scope/</guid><description>Область видимости, или scope, определяет, где переменные могут быть использованы в программе. В Python есть две основные области видимости: глобальная и локальная.
Переменные, определенные внутри функции, имеют локальную область видимости. Это означает, что они могут быть использованы только внутри этой функции. Если попытаться использовать их вне функции, будет вызвано исключение.
Переменные, определенные вне функции, имеют глобальную область видимости. Они могут быть использованы в любом месте программы, в том числе и внутри функций. Если внутри функции определить переменную с тем же именем, что и глобальная переменная, то функция будет использовать локальную переменную.</description></item><item><title>Классы</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/classes/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/classes/</guid><description>Все в Python является объектом. Это означает, что каждая сущность в Python имеет методы и значения. Причина в том, что в основе всего лежит класс.
&amp;gt;&amp;gt;&amp;gt; x = &amp;#34;Some String&amp;#34; &amp;gt;&amp;gt;&amp;gt; dir(x) [&amp;#39;__add__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__contains__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getitem__&amp;#39;, &amp;#39;__getnewargs__&amp;#39;, &amp;#39;__getslice__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__len__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__mod__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__rmod__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;_formatter_field_name_split&amp;#39;, &amp;#39;_formatter_parser&amp;#39;, &amp;#39;capitalize&amp;#39;, &amp;#39;center&amp;#39;, &amp;#39;count&amp;#39;, &amp;#39;decode&amp;#39;, &amp;#39;encode&amp;#39;, &amp;#39;endswith&amp;#39;, &amp;#39;expandtabs&amp;#39;, &amp;#39;find&amp;#39;, &amp;#39;format&amp;#39;, &amp;#39;index&amp;#39;, &amp;#39;isalnum&amp;#39;, &amp;#39;isalpha&amp;#39;, &amp;#39;isdigit&amp;#39;, &amp;#39;islower&amp;#39;, &amp;#39;isspace&amp;#39;, &amp;#39;istitle&amp;#39;, &amp;#39;isupper&amp;#39;, &amp;#39;join&amp;#39;, &amp;#39;ljust&amp;#39;, &amp;#39;lower&amp;#39;, &amp;#39;lstrip&amp;#39;, &amp;#39;partition&amp;#39;, &amp;#39;replace&amp;#39;, &amp;#39;rfind&amp;#39;, &amp;#39;rindex&amp;#39;, &amp;#39;rjust&amp;#39;, &amp;#39;rpartition&amp;#39;, &amp;#39;rsplit&amp;#39;, &amp;#39;rstrip&amp;#39;, &amp;#39;split&amp;#39;, &amp;#39;splitlines&amp;#39;, &amp;#39;startswith&amp;#39;, &amp;#39;strip&amp;#39;, &amp;#39;swapcase&amp;#39;, &amp;#39;title&amp;#39;, &amp;#39;translate&amp;#39;, &amp;#39;upper&amp;#39;, &amp;#39;zfill&amp;#39;] Здесь у нас есть строка, присвоенная переменной x.</description></item><item><title>Циклы</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/loops/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/loops/</guid><description>Цикл while Цикл while повторяет набор инструкций, пока заданное условие истинно. Каждый раз, когда выполняется набор инструкций, условие проверяется снова, и если оно продолжает быть истинным, то набор инструкций выполняется снова.
i = 1 while i &amp;lt; 6: print(i) i += 1 1 2 3 4 5 Цикл for Цикл for используется для прохождения через элементы в последовательности, такой как список или строка. В отличие от цикла while, в цикле for не нужно определять начальное условие или шаг увеличения.</description></item><item><title>Генераторы</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/comprehensions/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/comprehensions/</guid><description>В языке Python есть несколько методов создания списков и словарей, которые известны как генераторы.
Генераторы списков Генератор списка - это выражение, которое генерирует список значений на основе каких-то правил. Вместо того, чтобы создавать список целиком и хранить его в памяти, генератор списка генерирует значения по мере их запроса.
squares = [x*x for x in range(10)] Эта строка создает генератор списка, который генерирует квадраты чисел от 0 до 9. Затем можно перебрать элементы этого генератора с помощью цикла:
В Python есть функция range, которая может возвращать список чисел.</description></item><item><title>Ввод данных пользователем</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/inputs/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/inputs/</guid><description>В Python вы можете запросить у пользователя ввод данных во время выполнения программы. Для этого используется функция inp(), которая приостанавливает выполнение программы, ожидает ввода от пользователя и возвращает введенные данные в виде строки.
name = input(&amp;#34;Введите ваше имя: &amp;#34;) print(&amp;#34;Привет, &amp;#34; + name + &amp;#34;!&amp;#34;) При запуске этого кода пользователь увидит приглашение &amp;ldquo;Введите ваше имя:&amp;rdquo;, после чего он может ввести свое имя и нажать клавишу Enter. Затем программа поприветствует пользователя по имени.
Вы также можете использовать функцию int() для преобразования введенной строки в целое число.</description></item><item><title>Обработка исключений</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/exception_handling/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/exception_handling/</guid><description>Обработка исключений - это механизм, который позволяет обработать возможную ошибку, которая может возникнуть в процессе выполнения программы.
В Python эта конструкция исключений обычно обернута в так называемый try/except.
Оператор try-except - это основной инструмент для обработки исключений. Код, который может вызвать исключение, помещается в блок try. Если исключение возникает, то Python переходит в блок except, где вы можете обработать исключение и выполнить соответствующий код.
try: x = int(input(&amp;#34;Введите число: &amp;#34;)) result = 100 / x except ZeroDivisionError: print(&amp;#34;Деление на ноль!</description></item><item><title>Работа с файлами</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/file_io/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/file_io/</guid><description>Чтение файла Чтобы прочитать файл в Python, вам нужно сначала открыть файл. Вы можете сделать это, используя функцию open(). Эта функция принимает два аргумента: имя файла и режим открытия файла.
Режим открытия файла может быть &amp;ldquo;r&amp;rdquo; (чтение), &amp;ldquo;w&amp;rdquo; (запись) или &amp;ldquo;a&amp;rdquo; (добавление).
Пример, который читает файл &amp;ldquo;example.txt&amp;rdquo; в режиме чтения и выводит его содержимое на экран:
with open(&amp;#34;example.txt&amp;#34;, &amp;#34;r&amp;#34;) as f: content = f.read() print(content) Мы используем оператор with, который автоматически закрывает файл после его использования. Функция read() читает содержимое файла и возвращает его в виде строки.</description></item><item><title>Импорт модулей</title><link>https://romankurnovskii.com/ru/tracks/python-101/basis/imports/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/basis/imports/</guid><description>Python поставляется с большим количеством готового кода. Эти части кода известны как модули и пакеты.
Модуль - это один импортируемый файл Python, а пакет состоит из двух или более модулей. Пакет может быть импортирован так же, как и модуль.
В Python вы можете импортировать модули из других файлов, чтобы использовать функции и переменные, определенные в этих модулях.
import Python предоставляет ключевое слово import для импорта модулей.
Допустим, у нас есть два файла:
Файл dog.py, содержащий следующий код:
def bark(): print(&amp;#39;Гав-гав!</description></item></channel></rss>