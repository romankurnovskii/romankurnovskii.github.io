<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Карманная книга по Python on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/docs/python101/</link><description>Recent content in Карманная книга по Python on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2023 &lt;a href="https://romankurnovskii.com">Roman Kurnovskii&lt;/a> personal page</copyright><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/docs/python101/index.xml" rel="self" type="application/rss+xml"/><item><title>Введение</title><link>https://romankurnovskii.com/ru/docs/python101/01-intro/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/01-intro/</guid><description>Добро пожаловать в Python 101! Я написал эту книгу, чтобы помочь вам изучить Python 3. Она не претендует на роль исчерпывающего справочника. Напротив, ее цель - познакомить вас со строительными блоками Python, чтобы вы могли сами написать что-нибудь полезное. Многие учебники по программированию учат только языку, но не идут дальше этого. Я постараюсь не только ознакомить вас с основами, но и показать, как создавать полезные программы. Теперь вы можете задаться вопросом, почему простого изучения основ недостаточно.</description></item><item><title>Часть I - Основы</title><link>https://romankurnovskii.com/ru/docs/python101/01-part_i/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/01-part_i/</guid><description>В первой части мы изучим основы языка программирования Python. Этот раздел книги должен подготовить вас к использованию всех строительных блоков Python, чтобы вы были готовы уверенно взяться за следующие разделы.
Давайте рассмотрим, что мы будем изучать:
IDLE Строки Списки, словари и кортежи Условные операторы Циклы Генераторы Обработка исключений Файловый ввод-вывод Импорт модулей и пакетов Функции Классы В первой главе этого раздела вы познакомитесь со встроенной средой разработки Python, которая называется IDLE. В следующих двух главах мы рассмотрим некоторые типы Python, такие как строки, списки и словари.</description></item><item><title>1. Программирование IDLE</title><link>https://romankurnovskii.com/ru/docs/python101/chapter1_idle/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter1_idle/</guid><description>Глава 1 - Программирование IDLE Использование IDLE Python поставляется с собственным редактором кода: IDLE (Integrated Development and Learning Environment). Существует предание, что название IDLE происходит от имени Эрика Айдла, актера из &amp;ldquo;Монти Пайтона&amp;rdquo;. IDE - это редактор для программистов, который обеспечивает цветную подсветку ключевых слов языка, автозаполнение, &amp;ldquo;экспериментальный&amp;rdquo; отладчик и множество других интересных вещей. Вы можете найти IDE к большинству популярных языков, а некоторые IDE работают с несколькими языками.
IDLE - это своего рода легкая IDE, но в ней есть все перечисленные элементы.</description></item><item><title>2. Все о строках</title><link>https://romankurnovskii.com/ru/docs/python101/chapter2_strings/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter2_strings/</guid><description>В Python существует несколько типов данных. Основные типы данных, с которыми вы, вероятно, будете чаще всего встречаться, - это строка, целое число, плавающая цифра, список, словарь и кортеж. В этой главе мы рассмотрим строковый тип данных. Вы удивитесь, как много вещей можно делать со строками в Python прямо из коробки. Существует также модуль string, который можно импортировать для получения доступа к еще большей функциональности, но мы не будем рассматривать его в этой главе. Вместо этого мы рассмотрим следующие темы:</description></item><item><title>3. Списки, кортежи и словари</title><link>https://romankurnovskii.com/ru/docs/python101/chapter3_lists_dicts/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter3_lists_dicts/</guid><description>В Python есть еще несколько важных типов данных, которые вы, вероятно, будете использовать каждый день. Они называются списками, кортежами и словарями. Цель этой главы - познакомить вас с каждым из этих типов данных. Они не являются особенно сложными, так что думаю, что вам будет очень легко научиться их использовать. Когда вы освоите эти три типа данных, а также строковый тип данных из предыдущей главы, вы пройдете довольно большой путь в изучении Python. Вы будете использовать эти четыре строительных блока в 99% всех приложений, которые вы будете писать.</description></item><item><title>4. Условия</title><link>https://romankurnovskii.com/ru/docs/python101/chapter4_conditionals/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter4_conditionals/</guid><description>В каждом компьютерном языке есть хотя бы один условный оператор. Чаще всего этот оператор представляет собой структуру if/elif/else.
В Python 3.10 добавилась структура match/case
Условный оператор проверяет, является ли утверждение истинным или ложным. Это, собственно, все, что он делает. Также рассмотрим следующие булевы операции: and, or и not. Эти операции могут изменять поведение условного оператора простыми и сложными способами, в зависимости от проекта.
Оператор if Оператор if в Python довольно прост в использовании. Давайте потратим несколько минут на рассмотрение нескольких примеров, чтобы лучше познакомиться с этой конструкцией.</description></item><item><title>5. Циклы</title><link>https://romankurnovskii.com/ru/docs/python101/chapter5_loops/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter5_loops/</guid><description>В каждом языке программирования, который я пробовал, есть какая-то конструкция циклов. В большинстве из них их больше одного. В мире Python есть два типа циклов:
цикл for и цикл while Вы увидите, что цикл for является самым популярным. Циклы используются, когда вы хотите сделать что-то много раз. Обычно вам нужно выполнить какую-то операцию или набор операций над фрагментом данных снова и снова. Вот здесь-то и приходят на помощь циклы. С их помощью очень легко применять подобную логику к вашим данным.</description></item><item><title>6. Генераторы в Python</title><link>https://romankurnovskii.com/ru/docs/python101/chapter6_comprehensions/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter6_comprehensions/</guid><description>В языке Python есть несколько методов создания списков и словарей, которые известны как генераторы. Существует также третий тип генератора для создания набора в Python. В этой главе мы узнаем, как использовать каждый тип генераторов. Вы увидите, что конструкция генератора основываются на знаниях, полученных из предыдущих глав, поскольку они содержат циклы и условия.
Генераторы списков Генераторы списков в Python очень удобны. Но их также бывает трудно понять, когда и зачем их использовать. Генераторы списков, как правило, сложнее для чтения, чем простое использование цикла for.</description></item><item><title>7. Обработка исключений</title><link>https://romankurnovskii.com/ru/docs/python101/chapter7_exception_handling/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter7_exception_handling/</guid><description>Что вы делаете, когда в вашей программе происходит что-то плохое? Допустим, вы пытаетесь открыть файл, но вводите неправильный путь или запрашиваете у пользователя информацию, а он вводит какой-то мусор. Вы не хотите, чтобы ваша программа аварийно завершилась, поэтому вы реализуете обработку исключений. В Python эта конструкция обычно обернута в так называемый try/except. В этой главе мы рассмотрим следующие темы:
Общие типы исключений Обработка исключений с помощью try/except Изучим, как работает try/except/finally Исследуем, как оператор else работает в сочетании с try/except.</description></item><item><title>8. Работа с файлами</title><link>https://romankurnovskii.com/ru/docs/python101/chapter8_file_io/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter8_file_io/</guid><description>Эта глава знакомит с темой чтения и записи данных в файлы на жестком диске. Вы увидите, что читать и записывать файлы в Python очень просто. Давайте приступим!
Как читать файл В Python есть встроенная функция open, которую мы можем использовать для открытия файла для чтения. Создайте текстовый файл с именем &amp;ldquo;test.txt&amp;rdquo; со следующим содержимым:
1This is a test file 2line 2 3line 3 4this line intentionally left blank Вот несколько примеров, которые показывают, как использовать open для чтения:</description></item><item><title>9. Импортирование</title><link>https://romankurnovskii.com/ru/docs/python101/chapter9_imports/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter9_imports/</guid><description>Python поставляется с большим количеством готового кода. Эти части кода известны как модули и пакеты. Модуль - это один импортируемый файл Python, а пакет состоит из двух или более модулей. Пакет может быть импортирован так же, как и модуль. Каждый раз, когда вы сохраняете собственный сценарий Python, вы создаете модуль. Это, конечно, может быть далеко не самым полезным модулем, но тем не менее. В этой главе мы узнаем, как импортировать модули, используя несколько различных методов. Давайте начнем!</description></item><item><title>10. Функции</title><link>https://romankurnovskii.com/ru/docs/python101/chapter10_functions/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter10_functions/</guid><description>Функция - это структура, которую вы определяете. Вы можете решать, есть ли у них аргументы или нет. Вы можете добавить аргументы в виде ключевых слов и аргументы по умолчанию. Функция - это блок кода, который начинается с ключевого слова def, имени функции и двоеточия. Вот простой пример:
1 def a_function(): 2 print(&amp;#34;You just created a function!&amp;#34;) Эта функция ничего не делает, кроме вывода какого-то текста. Чтобы вызвать функцию, нужно напечатать ее имя, за которым следуют открытые и закрытые круглые скобки:</description></item><item><title>11. Классы</title><link>https://romankurnovskii.com/ru/docs/python101/chapter11_classes/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter11_classes/</guid><description>Все в Python является объектом. Это означает, что каждая сущность в Python имеет методы и значения. Причина в том, что в основе всего лежит класс.
1&amp;gt;&amp;gt;&amp;gt; x = &amp;#34;Some String&amp;#34; 2&amp;gt;&amp;gt;&amp;gt; dir(x) 3[&amp;#39;__add__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__contains__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, 4&amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getitem__&amp;#39;, &amp;#39;__getnewargs__&amp;#39;, 5&amp;#39;__getslice__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__len__&amp;#39;, &amp;#39;__lt__&amp;#39;, 6&amp;#39;__mod__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, 7&amp;#39;__rmod__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, 8&amp;#39;_formatter_field_name_split&amp;#39;, &amp;#39;_formatter_parser&amp;#39;, &amp;#39;capitalize&amp;#39;, &amp;#39;center&amp;#39;, &amp;#39;count&amp;#39;, 9&amp;#39;decode&amp;#39;, &amp;#39;encode&amp;#39;, &amp;#39;endswith&amp;#39;, &amp;#39;expandtabs&amp;#39;, &amp;#39;find&amp;#39;, &amp;#39;format&amp;#39;, &amp;#39;index&amp;#39;, &amp;#39;isalnum&amp;#39;, 10&amp;#39;isalpha&amp;#39;, &amp;#39;isdigit&amp;#39;, &amp;#39;islower&amp;#39;, &amp;#39;isspace&amp;#39;, &amp;#39;istitle&amp;#39;, &amp;#39;isupper&amp;#39;, &amp;#39;join&amp;#39;, &amp;#39;ljust&amp;#39;, 11&amp;#39;lower&amp;#39;, &amp;#39;lstrip&amp;#39;, &amp;#39;partition&amp;#39;, &amp;#39;replace&amp;#39;, &amp;#39;rfind&amp;#39;, &amp;#39;rindex&amp;#39;, &amp;#39;rjust&amp;#39;, &amp;#39;rpartition&amp;#39;, 12&amp;#39;rsplit&amp;#39;, &amp;#39;rstrip&amp;#39;, &amp;#39;split&amp;#39;, &amp;#39;splitlines&amp;#39;, &amp;#39;startswith&amp;#39;, &amp;#39;strip&amp;#39;, &amp;#39;swapcase&amp;#39;, &amp;#39;title&amp;#39;, 13&amp;#39;translate&amp;#39;, &amp;#39;upper&amp;#39;, &amp;#39;zfill&amp;#39;] Здесь у нас есть строка, присвоенная переменной x.</description></item><item><title>12. Интроспекция</title><link>https://romankurnovskii.com/ru/docs/python101/chapter12_introspection/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter12_introspection/</guid><description>Независимо от того, новичок ли вы в Python, используете ли вы его уже несколько лет или являетесь экспертом, умение использовать возможности интроспекции Python может помочь вам понять ваш код и тот новый пакет с ужасной документацией, который вы только что скачали. Интроспекция - это модное слово, которое означает наблюдение за собой и размышление о своих мыслях, чувствах и желаниях. В мире Python интроспекция - это нечто похожее. В данном случае интроспекция - это использование Python для изучения Python.</description></item><item><title>Часть II - Стандартные модули</title><link>https://romankurnovskii.com/ru/docs/python101/02-part_ii/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/02-part_ii/</guid><description>Во второй части вы получите сокращенное описание некоторых разделов стандартной библиотеки Python. Причина такого сокращения в том, что стандартная библиотека Python огромна! Поэтому этот раздел предназначен для того, чтобы вы познакомились с использованием модулей, поставляемых вместе с Python. Я расскажу о модулях, которые я чаще всего использую в своей повседневной работе, а также о тех, которые используют мои коллеги. Я думаю, что этот мини-тур подготовит вас к самостоятельной работе.
Что мы будем изучать:
csv ConfigParser logging os smtplib / email subprocess sys thread / queues time / datetime Далее мы научимся использовать ConfigParser, небольшой модуль, позволяющий читать и записывать файлы конфигурации.</description></item><item><title>13. Модуль csv</title><link>https://romankurnovskii.com/ru/docs/python101/chapter13_csv/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter13_csv/</guid><description>Модуль csv дает программисту Python возможность анализировать файлы CSV (Comma Separated Values – переменные, разделенные запятыми). CSV-файл - это текстовый файл, в котором каждая строка содержит несколько полей, разделенных запятыми или каким-либо другим разделителем. Каждую строку можно представить как ряд, а каждое поле - как столбец. Формат CSV не имеет стандарта, но они достаточно похожи, чтобы модуль csv мог читать подавляющее большинство CSV-файлов. Вы также можете записывать CSV-файлы с помощью модуля csv.
Чтение файла CSV Существует два способа чтения CSV-файла.</description></item><item><title>14. Модуль configparser</title><link>https://romankurnovskii.com/ru/docs/python101/chapter14_config_parser/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter14_config_parser/</guid><description>Файлы конфигурации используются как пользователями, так и программистами. Обычно они используются для хранения настроек вашего приложения или даже настроек вашей операционной системы. Основная библиотека Python включает модуль configparser, который можно использовать для создания конфигурационных файлов и взаимодействия с ними. В этой главе мы потратим несколько минут на изучение его работы.
Создание конфигурационного файла Создать конфигурационный файл с помощью configparser очень просто. Давайте создадим код для демонстрации:
1import configparser 2 3def createConfig(path): 4 &amp;#34;&amp;#34;&amp;#34; 5 Create a config file 6 &amp;#34;&amp;#34;&amp;#34; 7 config = configparser.</description></item><item><title>15. Логирование</title><link>https://romankurnovskii.com/ru/docs/python101/chapter15_logging/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter15_logging/</guid><description>Глава 15 - Логирование Python предоставляет очень мощную библиотеку протоколирования в своей стандартной библиотеке. Многие программисты используют операторы печати для отладки (в том числе и я), но вы также можете использовать для этого протоколирование. Использование лога также более чистый метод, если вы не хотите просматривать весь свой код, чтобы удалить все операторы print. В данном разделе мы рассмотрим следующее:
Создание простого логгера Как вести журнал из нескольких модулей Форматирование лога Конфигурация лога К концу этой главы вы должны быть в состоянии уверенно создавать собственные логи для своих приложений.</description></item><item><title>20. Модуль sys</title><link>https://romankurnovskii.com/ru/docs/python101/chapter20_sys/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter20_sys/</guid><description>Модуль sys предоставляет специфические для системы параметры и функции. Мы сузим наше исследование до следующих:
sys.argv sys.executable sys.exit sys.modules sys.path sys.platform sys.stdin/stdout/stderr sys.argv Значение sys.argv - это список аргументов командной строки Python, которые были переданы сценарию Python. Первый аргумент, argv[0] - это имя самого сценария Python. В зависимости от платформы, на которой вы работаете, первый аргумент может содержать полный путь к скрипту или только имя файла. Для получения дополнительной информации следует изучить документацию.
Давайте попробуем выполнить несколько примеров, чтобы ознакомиться с этим небольшим инструментом:</description></item><item><title>16. Модуль os</title><link>https://romankurnovskii.com/ru/docs/python101/chapter16_os/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter16_os/</guid><description>Модуль os имеет множество применений. Мы не будем рассматривать все его возможности. Вместо этого мы получим обзор его возможностей, а также рассмотрим один из его подмодулей, известный как os.path. В частности, мы рассмотрим следующее:
os.name os.environ os.chdir() os.getcwd() os.getenv() os.putenv() os.mkdir() os.makedirs() os.remove() os.rename() os.rmdir() os.startfile() os.walk() os.path Кажется, что этого очень много, но существует примерно в десять раз больше других действий, которые может выполнять модуль os. В этой главе мы просто дадим вам небольшое представление о том, что доступно.</description></item><item><title>17. Модуль email / smtplib</title><link>https://romankurnovskii.com/ru/docs/python101/chapter17_smtplib/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter17_smtplib/</guid><description>Python предоставляет пару действительно хороших модулей, с помощью которых мы можем создавать электронные письма. Это модули email и smtplib. Вместо того чтобы рассматривать различные методы этих двух модулей, мы потратим некоторое время на изучение того, как на самом деле использовать эти модули. В частности, мы рассмотрим следующее:
Основы работы с почтой Как выполнять рассылку несколько адресов одновременно Как отправлять письма, используя строки TO, CC и BCC Как создавать содержимое и тело письма при помощи модуля email Давайте начнем!</description></item><item><title>18. Модуль sqlite</title><link>https://romankurnovskii.com/ru/docs/python101/chapter18_sqlite/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter18_sqlite/</guid><description>SQLite - это самодостаточный, безсерверный, безконфигурационный транзакционный движок базы данных SQL. Python получил модуль sqlite3 еще в версии 2.5, что означает, что вы можете создавать базы данных SQLite с любым текущим Python без загрузки дополнительных зависимостей. Mozilla использует базы данных SQLite в своем популярном браузере Firefox для хранения закладок и другой различной информации. В этой главе вы узнаете следующее:
- Как создать базу данных SQLite - Как вставить данные в таблицу - Как редактировать данные - Как удалить данные - Основные SQL-запросы Другими словами, вместо того, чтобы рассказывать о модуле sqlite3 по кусочкам, мы рассмотрим, как его реально использовать.</description></item><item><title>19. Модуль subprocess</title><link>https://romankurnovskii.com/ru/docs/python101/chapter19_subprocess/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter19_subprocess/</guid><description>Модуль subprocess дает разработчику возможность запускать процессы или программы из Python. Другими словами, вы можете запускать приложения и передавать им аргументы с помощью модуля subprocess. Модуль subprocess был добавлен в Python 2.4, чтобы заменить модули os, состоящие из os.popen, os.spawn и os.system, а также заменить popen2 и старый модуль commands. Мы рассмотрим следующие аспекты модуля subprocess:
функция вызова класс Popen как взаимодействовать с порожденным процессом. Давайте начнем!
Функция вызова call Модуль subprocess предоставляет функцию call. Эта функция позволяет вам вызвать другую программу, дождаться завершения команды и затем вернуть код возврата.</description></item><item><title>21. Модуль потоков Thread</title><link>https://romankurnovskii.com/ru/docs/python101/chapter21_thread/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter21_thread/</guid><description>В Python есть несколько различных конструкций параллелизма, таких как threading, queues и мультипроцессинг. Раньше модуль threading был основным способом реализации multiprocessing. Несколько лет назад в набор стандартных библиотек Python был добавлен модуль multiprocessing. Эта глава будет посвящена использованию потоков и очередей.
Использование потоков Мы начнем с простого примера, который просто демонстрирует работу потоков. Мы создадим подкласс класса Thread и заставим его выводить свое имя в stdout. Приступим к кодированию!
1import random 2import time 3 4from threading import Thread 5 6class MyThread(Thread): 7 &amp;#34;&amp;#34;&amp;#34; 8 A threading example 9 &amp;#34;&amp;#34;&amp;#34; 10 11 def __init__(self, name): 12 &amp;#34;&amp;#34;&amp;#34;Initialize the thread&amp;#34;&amp;#34;&amp;#34; 13 Thread.</description></item><item><title>21-1. Модуль asyncio</title><link>https://romankurnovskii.com/ru/docs/python101/chapter21-1_asyncio/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter21-1_asyncio/</guid><description>Асинхронное программирование — это концепция программирования, при применении которой запуск длительных операций происходит без ожидания их завершения и не блокирует дальнейшее выполнение программы.
Корутина: корутины — это более общая форма подпрограмм. Подпрограммы имеют одну точку входа и одну точку выхода. А корутины поддерживают множество точек входа, выхода и возобновления их выполнения.
Python-модуль asyncio позволяет заниматься асинхронным программированием с применением конкурентного выполнения кода, основанного на корутинах. Хотя этот модуль имеется в Python уже много лет, он остаётся одним из самых интересных механизмов языка.</description></item><item><title>22. Работа с датами и временем</title><link>https://romankurnovskii.com/ru/docs/python101/chapter22_time/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter22_time/</guid><description>Python предоставляет разработчику несколько инструментов для работы с датами и временем. В этой главе мы рассмотрим модули datetime и time. Мы изучим, как они работают, и некоторые распространенные способы их использования. Начнем с модуля datetime!
Модуль datetime Мы познакомимся со следующими классами модуля datetime:
datetime.date datetime.timedelta datetime.datetime Они будут охватывать большинство случаев, когда вам понадобится использовать дату и объект datetime в Python. Существует также класс tzinfo для работы с часовыми поясами, который мы не будем рассматривать.</description></item><item><title>23. Модуль xml</title><link>https://romankurnovskii.com/ru/docs/python101/chapter23_xml/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter23_xml/</guid><description>Python имеет встроенные возможности разбора XML, доступ к которым можно получить с помощью модуля xml. В этой статье мы сосредоточимся на двух подмодулях модуля xml:
minidom ElementTree . Мы начнем с minidom просто потому, что этот метод раньше был де-факто методом разбора XML. Затем мы рассмотрим, как вместо него использовать ElementTree.
Работа с minidom Для начала необходимо разобрать XML. Взгляните на следующий короткий пример XML:
1&amp;lt;?xml version=&amp;#34;1.0&amp;#34; ?&amp;gt; 2&amp;lt;zAppointments reminder=&amp;#34;15&amp;#34;&amp;gt; 3 &amp;lt;appointment&amp;gt; 4 &amp;lt;begin&amp;gt;1181251680&amp;lt;/begin&amp;gt; 5 &amp;lt;uid&amp;gt;040000008200E000&amp;lt;/uid&amp;gt; 6 &amp;lt;alarmTime&amp;gt;1181572063&amp;lt;/alarmTime&amp;gt; 7 &amp;lt;state&amp;gt;&amp;lt;/state&amp;gt; 8 &amp;lt;location&amp;gt;&amp;lt;/location&amp;gt; 9 &amp;lt;duration&amp;gt;1800&amp;lt;/duration&amp;gt; 10 &amp;lt;subject&amp;gt;Bring pizza home&amp;lt;/subject&amp;gt; 11 &amp;lt;/appointment&amp;gt; 12&amp;lt;/zAppointments&amp;gt; Это довольно типичный XML, и на самом деле он довольно интуитивно понятен для чтения.</description></item><item><title>24. Отладчик Python</title><link>https://romankurnovskii.com/ru/docs/python101/chapter24_debugging/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter24_debugging/</guid><description>Python поставляется с собственным модулем отладчика, который называется pdb. Этот модуль предоставляет интерактивный отладчик исходного кода для ваших программ на Python. Вы можете устанавливать брейкпоинты, просматривать код, изучать кадры стека и многое другое. Мы рассмотрим следующие аспекты этого модуля:
Как запустить отладчик Переход по коду Установка точек останова Давайте начнем с создания небольшого фрагмента кода, чтобы попробовать отладку. Вот глупый пример:
1# debug_test.py 2 3def doubler(a): 4 &amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; 5 result = a*2 6 print(result) 7 return result 8 9def main(): 10 &amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; 11 for i in range(1,10): 12 doubler(i) 13 14if __name__ == &amp;#34;__main__&amp;#34;: 15 main() Теперь давайте узнаем, как запустить отладчик на этом фрагменте кода.</description></item><item><title>Часть III - Промежуточные вопросы и ответы</title><link>https://romankurnovskii.com/ru/docs/python101/03-part_iii/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/03-part_iii/</guid><description>В третьей части вы узнаете о некоторых внутренних компонентах Python, которые многие относят к владению Python среднего уровня. Вы перешли от молока и готовы к мясу! В этой части мы рассмотрим следующие темы:
Отладка Декораторы Оператор лямбда Профилирование кода Тестирование В первой главе этого раздела вы познакомитесь с модулем отладки Python, pdb, и узнаете, как использовать его для отладки кода. Следующая глава посвящена декораторам. Вы узнаете о том, как их создавать, и о некоторых декораторах, встроенных в Python.</description></item><item><title>25. Декораторы</title><link>https://romankurnovskii.com/ru/docs/python101/chapter25_decorators/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter25_decorators/</guid><description>Декораторы в Python - это действительно здорово, но поначалу их может быть трудно понять. Декоратор в Python - это функция, которая принимает в качестве аргумента другую функцию. Декоратор обычно изменяет или улучшает функцию, которую он принял, и возвращает измененную функцию. Это означает, что при вызове декорированной функции вы получите функцию, которая может быть немного другой, иметь дополнительные возможности по сравнению с базовым определением. Но давайте вернемся немного назад. Возможно, нам следует рассмотреть основной строительный блок декоратора, а именно функцию.</description></item><item><title>26. Лямбда</title><link>https://romankurnovskii.com/ru/docs/python101/chapter26_lambda/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter26_lambda/</guid><description>Оператор лямбда в Python - это анонимная или несвязанная функция, причем довольно ограниченная. Давайте рассмотрим несколько типичных примеров и посмотрим, сможем ли мы найти для нее применение. Примеры, которые обычно встречаются при изучении лямбды, - это что-то вроде скучной функции удвоения. Чтобы не быть голословным, наш простой пример покажет, как найти квадратный корень. Сначала мы покажем обычную функцию, а затем ее лямбда-эквивалент:
1import math 2 3def sqroot(x): 4 &amp;#34;&amp;#34;&amp;#34; 5 Finds the square root of the number passed in 6 &amp;#34;&amp;#34;&amp;#34; 7 return math.</description></item><item><title>27. Профилирование кода</title><link>https://romankurnovskii.com/ru/docs/python101/chapter27_profiling/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter27_profiling/</guid><description>Профилирование кода - это попытка найти узкие места в вашем коде. Профилирование должно выявить, какие части вашего кода занимают больше всего времени на выполнение. Узнав это, вы можете посмотреть на эти части кода и попытаться найти способы их оптимизации. Python содержит три встроенных профайлера: cProfile, profile и hotshot. Согласно документации Python, hotshot &amp;ldquo;больше не поддерживается и может быть отменен в будущей версии Python&amp;rdquo;. Модуль profile - это чистый модуль Python, но он добавляет много накладных расходов в профилируемые программы.</description></item><item><title>28. Введение в тестирование</title><link>https://romankurnovskii.com/ru/docs/python101/chapter28_testing/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter28_testing/</guid><description>Python включает пару встроенных модулей для тестирования кода. Эти два метода называются doctest и unittest. Сначала мы рассмотрим, как использовать doctest, а во втором разделе мы представим модульные тесты, используя Test Driven Development.
Тестирование с помощью doctest Модуль doctest будет искать в вашем коде фрагменты текста, напоминающие интерактивные сессии Python. Затем он выполнит эти сессии, чтобы проверить, что они работают именно так, как написано. Это означает, что если вы написали пример в docstring, который показывает вывод с пробелом или табуляцией, то фактический вывод функции также должен содержать пробел.</description></item><item><title>29. Установка пакетов</title><link>https://romankurnovskii.com/ru/docs/python101/chapter29_pip/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter29_pip/</guid><description>Когда вы только начинаете программировать на Python, вы не задумываетесь о том, что вам может понадобиться установить внешний пакет или модуль. Но когда такая необходимость возникнет, вы захотите узнать, как это сделать в кратчайшие сроки! Пакеты Python можно найти по всему интернету. Большинство популярных из них можно найти в Python Package Index (PyPI). Вы также найдете множество пакетов Python на github, bitbucket и Google code. В этой статье мы рассмотрим следующие методы установки пакетов Python:</description></item><item><title>Часть IV - Советы, приемы и учебные пособия</title><link>https://romankurnovskii.com/ru/docs/python101/04-part_iv/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/04-part_iv/</guid><description>В части IV вы узнаете, как устанавливать пакеты сторонних разработчиков из Python Package Index (PyPI). Вы узнаете немного о easy_install, pip и setup.py* и о том, как использовать эти инструменты для установки пакетов. Однако это только первая глава. Вот список пакетов, о которых вы узнаете:
configobj - работа с файлами Config более &amp;ldquo;питоническим&amp;rdquo; способом. lxml - пакет для работы с XML pylint / pyflakes - анализаторы кода Python requests - версия urllib для работы с Python SQLAlchemy - объектно-реляционный маппер для Python virtualenv - узнайте о виртуальных средах в Python Мы будем рассматривать configobj, потому что я считаю, что он работает лучше, чем ConfigParser, модуль, поставляемый вместе с Python.</description></item><item><title>30. ConfigObj</title><link>https://romankurnovskii.com/ru/docs/python101/chapter30_configobj/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter30_configobj/</guid><description>Python поставляется с удобным модулем под названием ConfigParser. Он хорошо подходит для создания и чтения конфигурационных файлов (они же INI-файлы). Однако Майкл Форд (автор IronPython in Action) и Никола Лароса решили написать свой собственный модуль конфигурации под названием ConfigObj. Во многих отношениях он является улучшением модуля стандартной библиотеки. Например, при чтении файла конфигурации он возвращает объект, похожий на словарь. ConfigObj также может понимать некоторые типы Python. Еще одна интересная особенность заключается в том, что вы можете создать спецификацию конфигурации, которую ConfigObj будет использовать для проверки файла конфигурации.</description></item><item><title>31. Парсинг XML с помощью lxml</title><link>https://romankurnovskii.com/ru/docs/python101/chapter31_lxml/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter31_lxml/</guid><description>В первой части мы рассмотрели некоторые встроенные в Python парсеры XML. В этой главе мы рассмотрим интересный пакет сторонних разработчиков, lxml от codespeak. Он использует, помимо прочего, ElementTree API. Пакет lxml имеет поддержку XPath и XSLT, включает API для SAX и API уровня C для совместимости с модулями C/Pyrex. Вот что мы рассмотрим:
Как разобрать XML с помощью lxml Пример рефакторинга Как разобрать XML с помощью lxml.objectify Как создать XML с помощью lxml.objectify В этой статье, мы используем примеры, основанные на примерах парсинга minidom, и посмотрим, как выполнять парсинг при помощи lxml Python.</description></item><item><title>32. Анализ кода Python</title><link>https://romankurnovskii.com/ru/docs/python101/chapter32_pylint/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter32_pylint/</guid><description>Анализ кода Python может быть тяжелой темой, но он может быть очень полезен для улучшения ваших программ. Существует несколько анализаторов кода Python, которые вы можете использовать для проверки вашего кода на соответствие стандартам. pylint, вероятно, является самым популярным. Он очень конфигурируемый, настраиваемый и подключаемый. Он также проверяет ваш код на соответствие PEP8, официальному руководству по стилю Python Core, и ищет ошибки программирования.
Обратите внимание, что pylint проверяет ваш код на соответствие большинству, но не всем стандартам PEP8.</description></item><item><title>33. Пакет requests</title><link>https://romankurnovskii.com/ru/docs/python101/chapter33_requests/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter33_requests/</guid><description>Пакет requests - это более питоническая замена для собственного urllib в Python. API пакета requests во многом проще в работе.
Использование requests Давайте рассмотрим несколько примеров использования пакета requests. Мы будем использовать серию небольших фрагментов кода, чтобы помочь объяснить, как использовать эту библиотеку.
1&amp;gt;&amp;gt;&amp;gt; r = requests.get(&amp;#34;http://www.google.com&amp;#34;) Этот пример возвращает объект Response. Вы можете использовать методы объекта Response, чтобы узнать много нового о том, как можно использовать запросы. Давайте воспользуемся функцией dir в Python, чтобы посмотреть, какие методы нам доступны:</description></item><item><title>34. Пакет SQLAlchemy</title><link>https://romankurnovskii.com/ru/docs/python101/chapter34_sqlalchemy/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter34_sqlalchemy/</guid><description>SQLAlchemy обычно называют объектно-реляционным маппером (Object Relational Mapper - ORM), хотя он гораздо более полнофункциональный, чем любой другой ORM для Python, который я использовал, например, SqlObject или тот, который встроен в Django. SQLAlchemy был создан парнем по имени Майкл Байер. Поскольку я помешан на музыке, мы создадим простую базу данных для хранения информации об альбомах. База данных не является базой данных без некоторых отношений, поэтому мы создадим две таблицы и соединим их. Вот несколько других вещей, которые мы будем изучать:</description></item><item><title>35. virtualenv</title><link>https://romankurnovskii.com/ru/docs/python101/chapter35_virtualenv/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter35_virtualenv/</guid><description>Виртуальные среды могут быть очень удобны для тестирования программного обеспечения. Это верно и в кругах программистов. Ян Бикинг создал проект virtualenv, который является инструментом для создания изолированных сред Python. Вы можете использовать эти среды для тестирования новых версий вашего программного обеспечения, новых версий пакетов, от которых вы зависите, или просто в качестве &amp;ldquo;песочницы&amp;rdquo; для опробования нового пакета в целом. Вы также можете использовать virtualenv в качестве рабочей среды, когда вы не можете скопировать файлы в пакеты сайта, потому что он находится на общем хосте.</description></item><item><title>36. Создание модулей и пакетов</title><link>https://romankurnovskii.com/ru/docs/python101/chapter36_creating_modules_and_packages/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter36_creating_modules_and_packages/</guid><description>Создание модулей Python - это то, что большинство программистов Python делают каждый день, даже не задумываясь об этом. Каждый раз, когда вы сохраняете новый сценарий Python, вы создаете новый модуль. Вы можете импортировать свой модуль в другие модули. Пакет - это коллекция связанных модулей. То, что вы импортируете в свои сценарии из стандартной библиотеки, является модулями или пакетами. В этой главе мы узнаем, как создавать модули и пакеты. Мы уделим больше времени пакетам, поскольку они сложнее модулей.</description></item><item><title>Часть V - Упаковка и распространение</title><link>https://romankurnovskii.com/ru/docs/python101/05-part_v/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/05-part_v/</guid><description>В части V вы узнаете об упаковке Python и различных методах распространения вашего кода. Вы узнаете о следующем:
Как создать модуль и пакет Публикация пакетов в Python Packaging Index (PyPI) Python eggs Python wheels py2exe bb_freeze cx_Freeze PyInstaller GUI2Exe Как создать инсталлятор с помощью InnoSetup В первой главе этого раздела описано, как создать модуль или пакет. Затем, в следующей главе, мы рассмотрим публикацию нашего пакета в PyPI. Далее мы узнаем, как создать и установить Python egg и Python wheel.</description></item><item><title>37. Как добавить пакет в PyPI</title><link>https://romankurnovskii.com/ru/docs/python101/chapter37_pypi_packaging/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter37_pypi_packaging/</guid><description>В предыдущей главе мы создали пакет под названием mymath. В этой главе мы узнаем, как разместить его на Python Packaging Index (PyPI). Для этого нам сначала нужно узнать, как создать файл setup.py Для справки, вот наша текущая иерархия папок:
1mymath/ 2 __init__.py 3 adv/ 4 __init__.py 5 sqrt.py 6 add.py 7 subtract.py 8 multiply.py 9 divide.py Это означает, что у вас есть папка mymath со следующими файлами в ней: init.py, add.py, subtract.py, multiply.py и divide.py. Внутри папки mymath также есть папка adv.</description></item><item><title>38. Python egg</title><link>https://romankurnovskii.com/ru/docs/python101/chapter38_eggs/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter38_eggs/</guid><description>Python egg - это старый формат распространения Python. Новый формат называется Python wheel, который мы рассмотрим в следующей главе. Файл egg - это, по сути, zip-файл с другим расширением. Python может импортироваться непосредственно из egg. Для работы с eggs вам понадобится пакет SetupTools. SetupTools - это оригинальный основной метод загрузки и установки пакетов Python из PyPI и других источников через командную строку, что-то вроде apt-get для Python. Существовал форк SetupTools под названием distribute, который в итоге был объединен обратно в SetupTools.</description></item><item><title>39. Python wheels</title><link>https://romankurnovskii.com/ru/docs/python101/chapter39_wheels/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter39_wheels/</guid><description>Первым распространенным форматом упаковки Python был файл .egg. Теперь в городе появился новый формат под названием wheel (.whl). Согласно описанию в Python Packaging Index, wheel предназначен для содержания всех файлов для установки, совместимой с PEP 376, в формате, очень близком к формату на диске. В этой главе мы узнаем, как создать wheel и затем установить его в virtualenv.
Начало работы Рекомендуемый способ работы с wheels - использование pip. Убедитесь, что вы установили последнюю версию pip, так как более ранние версии не поддерживают формат wheel.</description></item><item><title>40. py2exe</title><link>https://romankurnovskii.com/ru/docs/python101/chapter40_py2exe/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter40_py2exe/</guid><description>Проект py2exe раньше был основным способом создания исполняемых файлов Windows из ваших приложений Python. На PyPI лежит версия, которая будет работать и с Python 2 и 3.
У вас есть несколько вариантов для приложения. Вы можете создать программу, которая будет работать только в терминале, вы можете создать графический интерфейс пользователя (GUI) для рабочего стола или создать веб-приложение. Мы создадим очень простой настольный интерфейс, который ничего не делает, кроме отображения формы, которую пользователь может заполнить. Мы будем использовать инструментарий wxPython GUI, чтобы продемонстрировать, как py2exe может подбирать пакеты без нашего указания.</description></item><item><title>41. bbfreeze</title><link>https://romankurnovskii.com/ru/docs/python101/chapter41_bb_freeze/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter41_bb_freeze/</guid><description>Пакет bbfreeze также позволяет нам создавать двоичные файлы, но только в Linux и Windows. Когда вы создаете двоичный файл в Linux, результат будет работать только на машинах, имеющих ту же аппаратную архитектуру и версию libc, что ограничивает его полезность в Linux. Также следует отметить, что bbfreeze работает только с Python версий 2.4 - 2.7. Вы можете использовать easy_install или pip для установки пакета bbfreeze в вашу систему. Пакет bbfreeze включает поддержку egg, поэтому он может включать зависимости eggs в ваши двоичные файлы, в отличие от py2exe.</description></item><item><title>42. cx_Freeze</title><link>https://romankurnovskii.com/ru/docs/python101/chapter42_cx_freeze/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter42_cx_freeze/</guid><description>В этой главе мы познакомимся с cx_Freeze, кроссплатформенным набором скриптов, предназначенных для freeze скриптов Python в исполняемые файлы, подобно py2exe, PyInstaller и т.д. Мы заморозим один консольный скрипт и один оконный (т.е. GUI) скрипт, используя примеры из предыдущей главы. Инструмент cx_Freeze - единственный инструмент создания двоичных файлов, который на данный момент может работать как с Python 2.x, так и с 3.x на различных операционных системах. В этой главе мы будем использовать его с Python 2.7 только потому, что хотим сравнить его с другими инструментами создания двоичных файлов.</description></item><item><title>43. PyInstaller</title><link>https://romankurnovskii.com/ru/docs/python101/chapter43_pyinstaller/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter43_pyinstaller/</guid><description>PyInstaller - это последний инструмент, который мы рассмотрим для создания двоичных файлов. Он поддерживает Python 2.4 - 2.7. Мы продолжим использовать наши простые консольные и wxPython GUI скрипты для тестирования. PyInstaller должен работать на Windows, Linux, Mac, Solaris и AIX. Поддержка Solaris и AIX является экспериментальной. PyInstaller поддерживает подпись кода (Windows), eggs, скрытый импорт, один исполняемый файл, один каталог и многое другое!
Начало работы с PyInstaller Чтобы установить PyInstaller, вы можете скачать исходный код в tarball или zip архиве, распаковать его и запустить его файл setup.</description></item><item><title>44. Создание программы установки</title><link>https://romankurnovskii.com/ru/docs/python101/chapter44_creating_an_installer/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter44_creating_an_installer/</guid><description>В этой главе мы проведем вас через процесс создания исполняемого файла и его последующей упаковки в программу установки. Для создания исполняемого файла мы будем использовать очень аккуратный пользовательский интерфейс GUI2Exe, написанный Андреа Гаваной. Он основан на wxPython, поэтому для его использования вам потребуется его установить. GUI2Exe поддерживает py2exe, bbfreeze, cx_Freeze, PyInstaller и py2app. После создания папки dist мы используем Inno Setup для создания нашего инсталлятора.
Мы снова будем использовать следующий код:
1# sampleApp.py 2 3import wx 4 5class DemoPanel(wx.</description></item><item><title>45. Хостинг Python приложения</title><link>https://romankurnovskii.com/ru/docs/python101/chapter45_hosting/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/docs/python101/chapter45_hosting/</guid><description> Как хостить телеграм-бота (и другие скрипты на Python) на Repl.it бесплатно 24/7</description></item></channel></rss>