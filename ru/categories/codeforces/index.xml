<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Codeforces on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/categories/codeforces/</link><description>Recent content in Codeforces on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2023 &lt;a href="https://romankurnovskii.com">Roman Kurnovskii&lt;/a> personal page</copyright><lastBuildDate>Thu, 09 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/categories/codeforces/index.xml" rel="self" type="application/rss+xml"/><item><title>Data Structures</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/data-structures/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/data-structures/</guid><description>Tree 1class Node: 2 def __init__(self, value): 3 self.value = value 4 self.children = {} 5 6 def insert(self, s, idx): 7 # idx: index of the current character in s 8 if idx != len(s): 9 self.children.setdefault(s[idx], Node(s[idx])) 10 self.children.get(s[idx]).insert(s, idx + 1) Fenwick Tree 1class Fenwick: #also known as Binary Indexed Tree (BIT) 2 def __init__(self, n): 3 self.n = n 4 self.bit = [0] * (n+1) 5 6 def add(self, idx, val): 7 while idx &amp;lt;= self.</description></item></channel></rss>