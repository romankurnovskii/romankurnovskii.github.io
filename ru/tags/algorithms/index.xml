<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tags/algorithms/</link><description>Recent content in Algorithms on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2025</copyright><lastBuildDate>Mon, 04 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tags/algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>152. Maximum Product Subarray</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/152/</link><pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/152/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/maximum-product-subarray">LeetCode problem&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>In this problem, we&amp;rsquo;re given an integer array &lt;code>nums&lt;/code>, and our task is to find the maximum product of a contiguous subarray. A subarray is a contiguous part of an array. The interesting part of this problem is that the array can contain both positive and negative numbers, so the maximum product can be obtained by a subarray ending at any index of the array.&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A naive approach to this problem would be to calculate the product of all possible subarrays and return the maximum one. However, this would have a time complexity of O(nÂ²), as there are n*(n+1)/2 subarrays of an array, where n is the length of the array.&lt;/p>
&lt;p>This would be inefficient and time-consuming for large inputs.&lt;/p>
&lt;h2 id="dynamic-programming">Dynamic Programming&lt;/h2>
&lt;p>We can solve this problem efficiently using Dynamic Programming.&lt;/p>
&lt;p>The idea is to keep track of the maximum and minimum product ending at each position (as the array can contain negative numbers, and a negative number can become maximum when multiplied by another negative number).&lt;/p>
&lt;p>We initialize two variables, &lt;code>max_prod&lt;/code> and &lt;code>min_prod&lt;/code>, to &lt;code>nums[0]&lt;/code>. Then for each number in the array (from the second number to the end), we calculate &lt;code>max_prod&lt;/code> and &lt;code>min_prod&lt;/code> using the formulas:&lt;/p>
&lt;pre>&lt;code>max_prod = max(nums[i], max_prod * nums[i], min_prod * nums[i])
min_prod = min(nums[i], max_prod * nums[i], min_prod * nums[i])
&lt;/code>&lt;/pre>
&lt;p>We also keep track of &lt;code>res&lt;/code>, which stores the maximum product of a subarray as a result.&lt;/p>
&lt;p>If &lt;code>max_prod&lt;/code> is greater than &lt;code>res&lt;/code>, we update &lt;code>res&lt;/code>.&lt;/p>
&lt;p>Finally, &lt;code>res&lt;/code> will hold the maximum product of a subarray.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Initialize &lt;code>max_prod&lt;/code>, &lt;code>min_prod&lt;/code>, and &lt;code>res&lt;/code> to &lt;code>nums[0]&lt;/code>.&lt;/li>
&lt;li>For each number in the array (from the second number to the end):
&lt;ul>
&lt;li>Update &lt;code>max_prod&lt;/code> and &lt;code>min_prod&lt;/code>.&lt;/li>
&lt;li>Update &lt;code>res&lt;/code> if &lt;code>max_prod&lt;/code> is greater.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Return &lt;code>res&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h2 id="python-solution">Python Solution&lt;/h2>
&lt;p>Here is a Python solution following the described approach:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">maxProduct&lt;/span>(nums):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> nums:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_prod &lt;span style="color:#666">=&lt;/span> min_prod &lt;span style="color:#666">=&lt;/span> res &lt;span style="color:#666">=&lt;/span> nums[&lt;span style="color:#40a070">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> num &lt;span style="color:#007020;font-weight:bold">in&lt;/span> nums[&lt;span style="color:#40a070">1&lt;/span>:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_max &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">max&lt;/span>(num, max_prod &lt;span style="color:#666">*&lt;/span> num, min_prod &lt;span style="color:#666">*&lt;/span> num)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_prod &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">min&lt;/span>(num, max_prod &lt;span style="color:#666">*&lt;/span> num, min_prod &lt;span style="color:#666">*&lt;/span> num)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_prod &lt;span style="color:#666">=&lt;/span> new_max
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">max&lt;/span>(res, max_prod)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> res
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>189. Rotate Array</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/189/</link><pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/189/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/rotate-array/">LeetCode problem&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>Given an integer array &lt;code>nums&lt;/code>, rotate the array to the right by &lt;code>k&lt;/code> steps, where &lt;code>k&lt;/code> is non-negative.&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A simple, but inefficient, approach would be to rotate the array &lt;code>k&lt;/code> times. In each rotation, we shift every element of the array to the right by one and move the last element to the start of the array. This solution has a time complexity of O(n*k), where n is the number of elements in the array and k is the number of rotations. This is not an optimal solution, especially when we have a large &lt;code>k&lt;/code> or a large array.&lt;/p>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>An efficient solution can be found by using array reversal. Here&amp;rsquo;s the plan:&lt;/p>
&lt;ol>
&lt;li>Reverse the entire array.&lt;/li>
&lt;li>Reverse the first &lt;code>k&lt;/code> elements.&lt;/li>
&lt;li>Reverse the remaining &lt;code>n-k&lt;/code> elements.&lt;/li>
&lt;/ol>
&lt;p>This method allows us to achieve the desired output in O(n) time and O(1) space complexity.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;p>Let&amp;rsquo;s break down the steps using an example: &lt;code>nums = [1,2,3,4,5,6,7], k = 3&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>Reverse the entire array: &lt;code>nums = [7,6,5,4,3,2,1]&lt;/code>.&lt;/li>
&lt;li>Reverse the first &lt;code>k&lt;/code> elements: &lt;code>nums = [5,6,7,4,3,2,1]&lt;/code>.&lt;/li>
&lt;li>Reverse the remaining &lt;code>n-k&lt;/code> elements: &lt;code>nums = [5,6,7,1,2,3,4]&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>As you can see, we get the expected output &lt;code>[5,6,7,1,2,3,4]&lt;/code>.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>Here is the Python code that implements the aforementioned logic:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">rotate&lt;/span>(self, nums, k):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">reverse&lt;/span>(start, end):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> start &lt;span style="color:#666">&amp;lt;&lt;/span> end:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nums[start], nums[end] &lt;span style="color:#666">=&lt;/span> nums[end], nums[start]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end &lt;span style="color:#666">-=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">len&lt;/span>(nums)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#666">=&lt;/span> k &lt;span style="color:#666">%&lt;/span> n &lt;span style="color:#60a0b0;font-style:italic"># in case k &amp;gt; len(nums)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reverse(nums, &lt;span style="color:#40a070">0&lt;/span>, n &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reverse(nums, &lt;span style="color:#40a070">0&lt;/span>, k &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reverse(nums, k, n &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>202. Happy Number</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/202/</link><pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/202/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/happy-number/">LeetCode problem&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>In this problem, we are given a number &lt;code>n&lt;/code>. We have to determine whether this number is a &amp;ldquo;happy&amp;rdquo; number or not. A happy number is a number defined by the following process:&lt;/p>
&lt;ol>
&lt;li>Starting with any positive integer, replace the number by the sum of the squares of its digits.&lt;/li>
&lt;li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.&lt;/li>
&lt;li>Those numbers for which this process ends in 1 are happy.&lt;/li>
&lt;/ol>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A naive solution would be to follow the process as stated in the problem description and use a data structure such as a set to check for repetitions indicating a cycle. If during the process, the number becomes 1, we can conclude that the number is happy. However, if we encounter a number that was already visited, it means we are stuck in a cycle, and the number is not happy.&lt;/p>
&lt;ol>
&lt;li>We calculate the sum of squares of the digits of n in each iteration, and check if this sum is 1 or a number we&amp;rsquo;ve seen before.&lt;/li>
&lt;li>If it&amp;rsquo;s 1, we return true.&lt;/li>
&lt;li>If it&amp;rsquo;s a number we&amp;rsquo;ve seen before, we return false, as this means we&amp;rsquo;re in an endless loop.&lt;/li>
&lt;/ol>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;p>However, continuously checking if a number was already visited can be costly in terms of time complexity. A more efficient way to detect cycles is to use the Floyd Cycle detection algorithm (also known as the &lt;a href="https://www.youtube.com/watch?v=S5TcPmTl6ww">&amp;ldquo;Tortoise and the Hare&amp;rdquo; algorithm&lt;/a>).&lt;/p>
&lt;p>This algorithm allows us to detect a cycle in the sequence without having to store all previously seen numbers, making it more efficient in terms of space usage.&lt;/p>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>Floyd Cycle detection algorithm works by moving two pointers at different speeds - a slow pointer (tortoise) and a fast pointer (hare). If there is a cycle, the fast pointer will eventually meet the slow pointer again.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Initialize two pointers slow and fast as &lt;code>n&lt;/code>.&lt;/li>
&lt;li>Replace
&lt;ol>
&lt;li>slow with the sum of the squares of its digits,&lt;/li>
&lt;li>and fast with the sum of squares of the next number in the sequence.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>If fast becomes 1, return &lt;code>True&lt;/code>. - &lt;code>n&lt;/code> is a happy number.&lt;/li>
&lt;li>If slow meets fast and the number is not 1, return &lt;code>False&lt;/code>. - &lt;code>n&lt;/code> is not a happy number as we have detected a cycle.&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">isHappy&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_next&lt;/span>(num): &lt;span style="color:#60a0b0;font-style:italic"># get the next number in the sequence&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_sum &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> num &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># get the last digit of the number and the remaining part&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num, digit &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">divmod&lt;/span>(num, &lt;span style="color:#40a070">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_sum &lt;span style="color:#666">+=&lt;/span> digit &lt;span style="color:#666">**&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> total_sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slow &lt;span style="color:#666">=&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fast &lt;span style="color:#666">=&lt;/span> get_next(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> fast &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#007020;font-weight:bold">and&lt;/span> slow &lt;span style="color:#666">!=&lt;/span> fast:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slow &lt;span style="color:#666">=&lt;/span> get_next(slow)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fast &lt;span style="color:#666">=&lt;/span> get_next(get_next(fast))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited&lt;span style="color:#666">.&lt;/span>add(slow)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> fast &lt;span style="color:#007020;font-weight:bold">in&lt;/span> visited:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> fast &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this solution, the function &lt;code>get_next(n)&lt;/code> is used to get the next number in the sequence by replacing &lt;code>n&lt;/code> with the sum of the squares of its digits.&lt;/p>
&lt;p>We initialize &lt;code>slow&lt;/code> and &lt;code>fast&lt;/code> to &lt;code>n&lt;/code> and &lt;code>get_next(n)&lt;/code> respectively.&lt;/p>
&lt;p>Then, until &lt;code>fast&lt;/code> equals 1 or &lt;code>slow&lt;/code> catches up to &lt;code>fast&lt;/code>, we continue moving &lt;code>slow&lt;/code> one step at a time and &lt;code>fast&lt;/code> two steps at a time. If &lt;code>fast&lt;/code> equals 1 at the end of the loop, &lt;code>n&lt;/code> is a happy number.&lt;/p></description></item><item><title>394. Decode String</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/394/</link><pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/394/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/decode-string/">LeetCode Ð·Ð°Ð´Ð°ÑÐ° 394&lt;/a>&lt;/p>
&lt;h2 id="Ð·Ð°Ð´Ð°ÑÐ°">ÐÐ°Ð´Ð°ÑÐ°&lt;/h2>
&lt;p>ÐÐ° Ð²ÑÐ¾Ð´ Ð¿Ð¾Ð´Ð°ÐµÑÑÑ Ð·Ð°ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°Ð½Ð½Ð°Ñ ÑÑÑÐ¾ÐºÐ°, Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð²ÐµÑÐ½ÑÑÑ ÐµÑ Ð´ÐµÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾Ðµ Ð¿ÑÐµÐ´ÑÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ.&lt;/p>
&lt;p>ÐÑÐ°Ð²Ð¸Ð»Ð¾ ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ ÑÐ°ÐºÐ¾Ð²Ð¾: &lt;code>k[encoded_string]&lt;/code>, Ð³Ð´Ðµ &lt;code>encoded_string&lt;/code> - ÑÑÑÐ¾ÐºÐ° Ð²Ð½ÑÑÑÐ¸ ÐºÐ²Ð°Ð´ÑÐ°ÑÐ½ÑÑ ÑÐºÐ¾Ð±Ð¾Ðº, Ð¿Ð¾Ð²ÑÐ¾ÑÑÐµÑÑÑ ÑÐ¾Ð²Ð½Ð¾ &lt;code>k&lt;/code> ÑÐ°Ð·. &lt;code>k&lt;/code> - ÑÑÐ¾ Ð²ÑÐµÐ³Ð´Ð° Ð¿Ð¾Ð»Ð¾Ð¶Ð¸ÑÐµÐ»ÑÐ½Ð¾Ðµ ÑÐµÐ»Ð¾Ðµ ÑÐ¸ÑÐ»Ð¾.&lt;/p>
&lt;h2 id="Ð¿Ð¾Ð´ÑÐºÐ°Ð·ÐºÐ¸">ÐÐ¾Ð´ÑÐºÐ°Ð·ÐºÐ¸&lt;/h2>
&lt;p>ÐÐ»Ñ ÑÐµÑÐµÐ½Ð¸Ñ ÑÑÐ¾Ð¹ Ð·Ð°Ð´Ð°ÑÐ¸ Ð¼Ð¾Ð¶Ð½Ð¾ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÑÐµÐº, Ñ.Ðº. &lt;code>ÑÐ¸ÑÐ»Ð¾[ÑÑÑÐ¾ÐºÐ°]&lt;/code> Ð¼Ð¾Ð³ÑÑ Ð±ÑÑÑ Ð²Ð»Ð¾Ð¶ÐµÐ½Ð½ÑÐ¼Ð¸.&lt;/p>
&lt;h2 id="Ð¿Ð¾Ð´ÑÐ¾Ð´">ÐÐ¾Ð´ÑÐ¾Ð´&lt;/h2>
&lt;p>ÐÑÑ, ÑÑÐ¾ Ð½Ð°Ð¼ Ð½ÑÐ¶Ð½Ð¾, ÑÑÐ¾ Ð¸ÑÐµÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÑÑÐ¾ÐºÑ ÑÐ¸Ð¼Ð²Ð¾Ð» Ð·Ð° ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð¼ Ð¸ Ð¾Ð±ÑÐ°Ð±Ð°ÑÑÐ²Ð°ÑÑ &lt;mark>ÑÐµÑÑÑÐµ ÑÐ»ÑÑÐ°Ñ: ÑÐ¸ÑÐ»Ð°, Ð±ÑÐºÐ²Ñ Ð¸ ÑÐºÐ¾Ð±ÐºÐ¸&lt;/mark>. ÐÑ Ð±ÑÐ´ÐµÐ¼ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¾Ð´Ð¸Ð½ ÑÑÐµÐº Ð´Ð»Ñ ÑÑÐ°Ð½ÐµÐ½Ð¸Ñ Ð¿Ð°Ñ Ð²Ð¸Ð´Ð° (Ð¿ÑÐµÑÐ¸ÐºÑ ÑÑÑÐ¾ÐºÐ¸, ÑÐ¸ÑÐ»Ð¾).&lt;/p>
&lt;p>Ð¢.Ðº. ÑÐ¸ÑÐ»Ð¾ Ð¸ ÑÑÑÐ¾ÐºÐ° Ð¼Ð¾Ð³ÑÑ Ð±ÑÑÑ Ð²Ð½ÑÑÑÐ¸ Ð´ÑÑÐ³Ð¾Ð¹ ÑÑÑÐ¾ÐºÐ¸ (&lt;code>3[a2[c]] = 3 * (a + 2 * c)&lt;/code>). Ð¢Ð¾ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÑ ÑÑÐµÐº, Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ Ð¼Ð¾Ð¶ÐµÐ¼ ÑÑÐ°Ð½Ð¸ÑÑ ÑÐµÐºÑÑÑÑ ÑÑÑÐ¾ÐºÑ Ð´Ð¾ ÑÐµÑ Ð¿Ð¾Ñ Ð¿Ð¾ÐºÐ° Ð½Ðµ ÑÐ²Ð¸Ð´Ð¸Ð¼ Ð·Ð°ÐºÑÑÐ²Ð°ÑÑÑÑÑÑ ÑÐºÐ¾Ð±ÐºÑ Ð´Ð»Ñ ÑÑÐ¾Ð¹ ÑÑÑÐ¾ÐºÐ¸.&lt;/p>
&lt;p>ÐÐ°Ð¿ÑÐ¸Ð¼ÐµÑ:&lt;/p>
&lt;ol>
&lt;li>Ð§Ð¸ÑÐ»Ð¾ 3&lt;/li>
&lt;li>ÐÑÐºÑÑÐ²Ð°ÐµÑÑÑ ÑÐºÐ¾Ð±ÐºÐ°. ÐÑ ÐµÑÐµ Ð½Ðµ Ð·Ð½Ð°ÐµÐ¼ ÐºÐ°ÐºÐ°Ñ Ð±ÑÐ´ÐµÑ ÑÑÑÐ¾ÐºÐ° Ð´Ð°Ð»ÐµÐµ, Ð½Ð¾ Ð¾ÑÐºÑÑÐ²Ð°ÑÑÐ°ÑÑÑ &lt;code>[&lt;/code> ÑÐºÐ¾Ð±ÐºÐ° ÑÐ¾Ð¾Ð±ÑÐ°ÐµÑ, ÑÑÐ¾ Ð¼Ñ ÑÐ¶Ðµ ÑÐ¾ÑÐ½Ð¾ Ð·Ð½Ð°ÐµÐ¼ ÑÑÑÐ¾ÐºÑ(Ð¸Ð»Ð¸ ÐµÐµ Ð¿ÑÐµÑÐ¸ÐºÑ), ÐºÐ¾ÑÐ¾ÑÐ°Ñ Ð±ÑÐ»Ð° &lt;strong>Ð´Ð¾&lt;/strong> ÑÑÐ¾ ÑÐºÐ¾Ð±ÐºÐ¸.
&lt;ol>
&lt;li>
&lt;p>Ð Ð´Ð°Ð½Ð½Ð¾Ð¼ ÑÐ»ÑÑÐ°Ðµ Ð¿ÑÐ¸ Ð¿ÐµÑÐ²Ð¾Ð¹ ÑÐºÐ¾Ð±ÐºÐµ ÑÑÑÐ¾ÐºÐ° Ð´Ð¾ Ð½ÐµÐµ Ð¿ÑÑÑÐ°Ñ.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ð Ð¿ÑÐ¸ Ð¿ÐµÑÐ²Ð¾Ð¹ ÑÐºÐ¾Ð±ÐºÐµ Ð¿Ð¾ÑÐ»Ðµ 2, ÑÑÑÐ¾ÐºÐ° ÑÐ°Ð²Ð½Ð° &lt;code>a&lt;/code>. ÐÐ¾Ñ ÑÑÑ ÑÑÑÐ¾ÐºÑ Ð¼Ñ Ð¸ Ð±ÑÐ´ÐµÐ¼ ÑÐºÐ»Ð°Ð´ÑÐ²Ð°ÑÑ Ñ ÑÐ¾Ð¹ ÑÑÑÐ¾ÐºÐ¾Ð¹, ÐºÐ¾ÑÐ¾ÑÐ°Ñ Ð±ÑÐ´ÐµÑ Ð¿ÐµÑÐµÐ´ ÑÐ»ÐµÐ´ÑÑÑÐµÐ¹ Ð¾ÑÐºÑÑÐ²Ð°ÑÑÐµÐ¹ÑÑ ÑÐºÐ¾Ð±ÐºÐ¾Ð¹.&lt;/p>
&lt;ol>
&lt;li>Ð ÑÐ°ÐºÐ¾Ð¼ ÑÐ»ÑÑÐ°Ðµ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑÑ Ð½Ð°ÑÐ°Ð»Ð¾ &lt;code>'' + 3 * ('a' + 2 * ... )&lt;/code>&lt;/li>
&lt;li>B ÑÑÐµÐº Ð±ÑÐ´ÐµÑ ÑÐ»ÐµÐ´ÑÑÑÐµÐ³Ð¾ Ð²Ð¸Ð´Ð°:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">[&lt;/span>&lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span>, 3&lt;span style="color:#666">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">[&lt;/span>&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>, 2&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>ÐÐ¾Ð³Ð´Ð° Ð´Ð¾ÑÐ¾Ð´Ð¸Ð¼ Ð´Ð¾ ÑÐ»ÐµÐ´ÑÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐ¸ Ð¸ Ð²Ð¸Ð´Ð¸Ð¼ ÑÐºÐ¾Ð±ÐºÑ Ð·Ð°ÐºÑÑÑÐ¸Ñ &amp;lsquo;]&amp;rsquo;, ÑÐ¾ Ð±ÐµÑÐµÐ¼ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð´Ð°Ð½Ð½ÑÐµ Ð¸Ð· ÑÑÐµÐºÐ° Ð¸ ÑÐºÐ»Ð°Ð´ÑÐ²Ð°ÐµÐ¼ Ð¿ÑÐµÐ´ÑÐ´ÑÑÑÑ ÑÑÑÐ¾ÐºÑ Ñ ÑÐ¼Ð½Ð¾Ð¶ÐµÐ½Ð½Ð¾Ð¹ ÑÐµÐºÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐ¾Ð¹.
&lt;ol>
&lt;li>&lt;code>a + 2*c = acc&lt;/code>&lt;/li>
&lt;li>&lt;code>'' * 3 * acc&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="Ð°Ð»Ð³Ð¾ÑÐ¸ÑÐ¼">ÐÐ»Ð³Ð¾ÑÐ¸ÑÐ¼&lt;/h2>
&lt;ol>
&lt;li>ÐÐ½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð¸ÑÑÐµÐ¼ Ð¿ÑÑÑÐ¾Ð¹ ÑÑÐµÐº Ð¸ Ð´Ð²Ðµ Ð¿ÐµÑÐµÐ¼ÐµÐ½Ð½ÑÐµ Ð´Ð»Ñ ÑÐµÐºÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐ¸ Ð¸ ÑÐµÐºÑÑÐµÐ³Ð¾ ÑÐ¸ÑÐ»Ð°.&lt;/li>
&lt;li>ÐÑÐµÑÐ¸ÑÑÐµÐ¼ÑÑ Ð¿Ð¾ ÐºÐ°Ð¶Ð´Ð¾Ð¼Ñ ÑÐ¸Ð¼Ð²Ð¾Ð»Ñ Ð² Ð²ÑÐ¾Ð´Ð½Ð¾Ð¹ ÑÑÑÐ¾ÐºÐµ.
&lt;ol>
&lt;li>ÐÑÐ»Ð¸ ÑÐ¸Ð¼Ð²Ð¾Ð» ÑÐ²Ð»ÑÐµÑÑÑ ÑÐ¸ÑÐ»Ð¾Ð¼, Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÑÐµÐ¼ Ð²ÑÑ ÑÐ¸ÑÐ»Ð¾ (Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð¸Ð· Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¸Ñ ÑÐ¸ÑÑ).&lt;/li>
&lt;li>ÐÑÐ»Ð¸ ÑÐ¸Ð¼Ð²Ð¾Ð» Ð¾ÑÐºÑÑÐ²Ð°ÑÑÐ°Ñ ÑÐºÐ¾Ð±ÐºÐ°, Ð´Ð¾Ð±Ð°Ð²Ð»ÑÐµÐ¼ Ð¿Ð°ÑÑ (ÑÐµÐºÑÑÐ°Ñ ÑÑÑÐ¾ÐºÐ°, ÑÐµÐºÑÑÐµÐµ ÑÐ¸ÑÐ»Ð¾) Ð² ÑÑÐµÐº Ð¸ ÑÐ±ÑÐ°ÑÑÐ²Ð°ÐµÐ¼ Ð¿ÐµÑÐµÐ¼ÐµÐ½Ð½ÑÐµ.&lt;/li>
&lt;li>ÐÑÐ»Ð¸ ÑÐ¸Ð¼Ð²Ð¾Ð» Ð·Ð°ÐºÑÑÐ²Ð°ÑÑÐ°Ñ ÑÐºÐ¾Ð±ÐºÐ°, Ð²ÑÑÐ°ÑÐºÐ¸Ð²Ð°ÐµÐ¼ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¿Ð°ÑÑ Ð¸Ð· ÑÑÐµÐºÐ°, Ð¸ Ð¾Ð±Ð½Ð¾Ð²Ð»ÑÐµÐ¼ ÑÐµÐºÑÑÑÑ ÑÑÑÐ¾ÐºÑ.&lt;/li>
&lt;li>ÐÑÐ»Ð¸ ÑÐ¸Ð¼Ð²Ð¾Ð» ÑÐ²Ð»ÑÐµÑÑÑ Ð±ÑÐºÐ²Ð¾Ð¹, Ð´Ð¾Ð±Ð°Ð²Ð»ÑÐµÐ¼ ÐµÐ³Ð¾ Ðº ÑÐµÐºÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐµ.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="ÑÐµÑÐµÐ½Ð¸Ðµ">Ð ÐµÑÐµÐ½Ð¸Ðµ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">decodeString&lt;/span>(s: &lt;span style="color:#007020">str&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack &lt;span style="color:#666">=&lt;/span> [] &lt;span style="color:#60a0b0;font-style:italic"># ÑÑÐµÐº Ð´Ð»Ñ Ð¿Ð°Ñ (ÑÑÑÐ¾ÐºÐ°, ÑÐ¸ÑÐ»Ð¾)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curr_str &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># ÑÐµÐºÑÑÐ°Ñ Ð´ÐµÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°Ð½Ð½Ð°Ñ ÑÑÑÐ¾ÐºÐ°&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curr_num &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#60a0b0;font-style:italic"># ÑÐµÐºÑÑÐµÐµ ÑÐ¸ÑÐ»Ð¾&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> char &lt;span style="color:#007020;font-weight:bold">in&lt;/span> s:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> char&lt;span style="color:#666">.&lt;/span>isdigit():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curr_num &lt;span style="color:#666">+=&lt;/span> char
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">elif&lt;/span> char &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#34;[&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÑÐ¾ÑÑÐ°Ð½Ð¸Ð¼, ÑÑÐ¾ ÐµÑÑÑ Ð½Ð° ÑÐµÐºÑÑÐ¸Ð¹ Ð¼Ð¾Ð¼ÐµÐ½Ñ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack&lt;span style="color:#666">.&lt;/span>append((curr_str, &lt;span style="color:#007020">int&lt;/span>(curr_num)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curr_str &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curr_num &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">elif&lt;/span> char &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#34;]&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev_str, num &lt;span style="color:#666">=&lt;/span> stack&lt;span style="color:#666">.&lt;/span>pop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curr_str &lt;span style="color:#666">=&lt;/span> prev_str &lt;span style="color:#666">+&lt;/span> num &lt;span style="color:#666">*&lt;/span> curr_str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curr_str &lt;span style="color:#666">+=&lt;/span> char
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> curr_str
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;video width="100%" controls>
&lt;source src="../../assets/394.ru.mp4" type="video/mp4">
Your browser does not support the video tag.
&lt;/video>
&lt;figcaption>LeetCode 394 Ð ÐµÑÐµÐ½Ð¸Ðµ&lt;/figcaption></description></item><item><title>605. Can Place Flowers</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/605/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/605/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/can-place-flowers/">LeetCode Ð·Ð°Ð´Ð°ÑÐ° 605&lt;/a>&lt;/p>
&lt;h2 id="Ð·Ð°Ð´Ð°ÑÐ°">ÐÐ°Ð´Ð°ÑÐ°&lt;/h2>
&lt;p>ÐÐ°Ð½Ð° Ð´Ð»Ð¸Ð½Ð½Ð°Ñ Ð³ÑÑÐ´ÐºÐ°, Ð½Ð° ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ Ð½ÐµÐºÐ¾ÑÐ¾ÑÑÐµ ÑÑÐ°ÑÑÐºÐ¸ ÑÐ¶Ðµ Ð·Ð°ÑÐ°Ð¶ÐµÐ½Ñ, Ð° Ð½ÐµÐºÐ¾ÑÐ¾ÑÑÐµ Ð½ÐµÑ. ÐÐ´Ð½Ð°ÐºÐ¾ ÑÐ²ÐµÑÑ Ð½ÐµÐ»ÑÐ·Ñ ÑÐ°Ð¶Ð°ÑÑ Ð½Ð° ÑÐ¾ÑÐµÐ´Ð½Ð¸Ðµ ÑÑÐ°ÑÑÐºÐ¸.&lt;/p>
&lt;h2 id="Ð¿Ð¾Ð´ÑÐ¾Ð´">ÐÐ¾Ð´ÑÐ¾Ð´&lt;/h2>
&lt;p>Ð§ÑÐ¾Ð±Ñ ÑÐµÑÐ¸ÑÑ ÑÑÑ Ð·Ð°Ð´Ð°ÑÑ, Ð¼Ñ Ð±ÑÐ´ÐµÐ¼ Ð¸ÑÐµÑÐ¸ÑÐ¾Ð²Ð°ÑÑÑÑ Ð¿Ð¾ ÐºÐ°Ð¶Ð´Ð¾Ð¼Ñ ÑÑÐ°ÑÑÐºÑ Ð³ÑÑÐ´ÐºÐ¸. ÐÑÐ»Ð¸ ÑÑÐ°ÑÑÐ¾Ðº Ð¿ÑÑÑÐ¾Ð¹ Ð¸ ÐµÐ³Ð¾ ÑÐ¾ÑÐµÐ´Ð¸ (ÐµÑÐ»Ð¸ Ð¾Ð½Ð¸ ÑÑÑÐµÑÑÐ²ÑÑÑ) ÑÐ¾Ð¶Ðµ Ð¿ÑÑÑÑ, Ð¼Ñ ÑÐ°Ð¶Ð°ÐµÐ¼ ÑÐ²ÐµÑÐ¾Ðº Ð¸ ÑÐ¼ÐµÐ½ÑÑÐ°ÐµÐ¼ Ð½Ð°Ñ ÑÑÐµÑÑÐ¸Ðº.&lt;/p>
&lt;h2 id="Ð°Ð»Ð³Ð¾ÑÐ¸ÑÐ¼">ÐÐ»Ð³Ð¾ÑÐ¸ÑÐ¼&lt;/h2>
&lt;ol>
&lt;li>ÐÑÐµÑÐ¸ÑÑÐµÐ¼ÑÑ Ð¿Ð¾ ÐºÐ°Ð¶Ð´Ð¾Ð¼Ñ ÑÑÐ°ÑÑÐºÑ Ð³ÑÑÐ´ÐºÐ¸.&lt;/li>
&lt;li>ÐÑÐ»Ð¸ ÑÑÐ°ÑÑÐ¾Ðº Ð¿ÑÑÑÐ¾Ð¹, Ð¿ÑÐ¾Ð²ÐµÑÑÐµÐ¼ ÐµÐ³Ð¾ ÑÐ¾ÑÐµÐ´ÐµÐ¹.
&lt;ul>
&lt;li>ÐÑÐ»Ð¸ Ð»ÐµÐ²ÑÐ¹ ÑÐ¾ÑÐµÐ´ Ð¿ÑÑÑÐ¾Ð¹ Ð¸Ð»Ð¸ ÐµÐ³Ð¾ Ð½ÐµÑ (Ð½Ð°ÑÐ°Ð»Ð¾ Ð³ÑÑÐ´ÐºÐ¸), Ð¿ÑÐ¾Ð²ÐµÑÑÐµÐ¼ Ð¿ÑÐ°Ð²Ð¾Ð³Ð¾ ÑÐ¾ÑÐµÐ´Ð°.&lt;/li>
&lt;li>ÐÑÐ»Ð¸ Ð¿ÑÐ°Ð²ÑÐ¹ ÑÐ¾ÑÐµÐ´ Ð¿ÑÑÑÐ¾Ð¹ Ð¸Ð»Ð¸ ÐµÐ³Ð¾ Ð½ÐµÑ (ÐºÐ¾Ð½ÐµÑ Ð³ÑÑÐ´ÐºÐ¸), ÑÐ°Ð¶Ð°ÐµÐ¼ ÑÐ²ÐµÑÐ¾Ðº Ð½Ð° ÑÐµÐºÑÑÐ¸Ð¹ ÑÑÐ°ÑÑÐ¾Ðº Ð¸ ÑÐ¼ÐµÐ½ÑÑÐ°ÐµÐ¼ &lt;code>n&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ð ÐºÐ¾Ð½ÑÐµ Ð¿ÑÐ¾Ð²ÐµÑÑÐµÐ¼, Ð´Ð¾ÑÑÐ¸Ð³ Ð»Ð¸ &lt;code>n&lt;/code> Ð½ÑÐ»Ñ Ð¸Ð»Ð¸ ÑÑÐ°Ð» Ð¾ÑÑÐ¸ÑÐ°ÑÐµÐ»ÑÐ½ÑÐ¼.
&lt;ul>
&lt;li>ÐÑÐ»Ð¸ Ð´Ð°, ÑÐ¾ ÑÑÐ¾ Ð¾Ð·Ð½Ð°ÑÐ°ÐµÑ, ÑÑÐ¾ Ð¼Ñ Ð¼Ð¾Ð¶ÐµÐ¼ Ð¿Ð¾ÑÐ°Ð´Ð¸ÑÑ Ð²ÑÐµ ÑÐ²ÐµÑÑ.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="ÑÐµÑÐµÐ½Ð¸Ðµ">Ð ÐµÑÐµÐ½Ð¸Ðµ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">canPlaceFlowers&lt;/span>(flowerbed, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">check_neighbors&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#007020">len&lt;/span>(flowerbed) &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> flowerbed[i&lt;span style="color:#666">+&lt;/span>&lt;span style="color:#40a070">1&lt;/span>] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic">#2.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowerbed[i] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">-=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flowerbed[i] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">-=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#007020">len&lt;/span>(flowerbed)): &lt;span style="color:#60a0b0;font-style:italic">#1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> flowerbed[i] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic">#2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> i &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> flowerbed[i&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic">#2.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">=&lt;/span> check_neighbors(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">=&lt;/span> check_neighbors(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> n &lt;span style="color:#666">&amp;lt;=&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">#3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>643. Maximum Average Subarray I</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/643/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/643/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/maximum-average-subarray-i/">LeetCode problem&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>Given an integer array &lt;code>nums&lt;/code> consisting of &lt;code>n&lt;/code> elements and an integer &lt;code>k&lt;/code>, find a contiguous subarray whose length is equal to &lt;code>k&lt;/code> that has the maximum average value and return this value. The result must be accurate up to a decimal point of 10^(-5).&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A straightforward approach would be to calculate the average for every possible subarray of length &lt;code>k&lt;/code>. For each starting point, sum the next &lt;code>k&lt;/code> numbers and determine the average. This will take O(n*k) time which is not efficient for large values of &lt;code>n&lt;/code> and &lt;code>k&lt;/code>.&lt;/p>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;p>One way to improve the naive solution is by observing the overlapping computations. As we move from one subarray to the next, we are recalculating the sum for mostly the same numbers except for the first and the last numbers. This observation points towards the sliding window technique which can be very efficient for such problems.&lt;/p>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>We use the &lt;a href="https://romankurnovskii.com/en/tracks/algorithms-101/algorithms/#sliding-window">sliding window technique&lt;/a>. The idea is to maintain a window of size &lt;code>k&lt;/code> and slide it across the array. The sliding window technique is particularly useful in problems where the array input and the window size remain static, but the starting point of the sliding window moves.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Calculate the sum of the first &lt;code>k&lt;/code> numbers.&lt;/li>
&lt;li>Slide the window by one position at a time. For every slide, subtract the number that is left behind and add the new number that comes into the window. This will give the sum for the next window of &lt;code>k&lt;/code> numbers.&lt;/li>
&lt;li>Keep track of the maximum sum as we slide the window.&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">findMaxAverage&lt;/span>(nums, k):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calculate the sum of the first k numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_sum &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sum&lt;/span>(nums[:k])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_sum &lt;span style="color:#666">=&lt;/span> window_sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#007020">len&lt;/span>(nums) &lt;span style="color:#666">-&lt;/span> k):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_sum &lt;span style="color:#666">=&lt;/span> window_sum &lt;span style="color:#666">-&lt;/span> nums[i] &lt;span style="color:#666">+&lt;/span> nums[i&lt;span style="color:#666">+&lt;/span>k]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_sum &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">max&lt;/span>(max_sum, window_sum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> max_sum &lt;span style="color:#666">/&lt;/span> k
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1071. Greatest Common Divisor of Strings</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/1071/</link><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/1071/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/greatest-common-divisor-of-strings/">LeetCode Ð·Ð°Ð´Ð°ÑÐ° 1071&lt;/a>&lt;/p>
&lt;h2 id="Ð·Ð°Ð´Ð°ÑÐ°">ÐÐ°Ð´Ð°ÑÐ°&lt;/h2>
&lt;p>ÐÐ»Ñ Ð´Ð²ÑÑ ÑÑÑÐ¾Ðº &lt;code>str1&lt;/code> Ð¸ &lt;code>str2&lt;/code>, Ð²ÐµÑÐ½ÑÑÑ Ð½Ð°Ð¸Ð±Ð¾Ð»ÑÑÐ¸Ð¹ Ð¾Ð±ÑÐ¸Ð¹ Ð´ÐµÐ»Ð¸ÑÐµÐ»Ñ (ÐÐÐ). ÐÑÐ»Ð¸ ÑÐ°ÐºÐ¾Ð²Ð¾Ð³Ð¾ Ð½Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ, Ð²ÐµÑÐ½ÑÑÑ Ð¿ÑÑÑÑÑ ÑÑÑÐ¾ÐºÑ.&lt;/p>
&lt;h2 id="Ð¿Ð¾Ð´ÑÐ¾Ð´">ÐÐ¾Ð´ÑÐ¾Ð´&lt;/h2>
&lt;p>ÐÑÐ»Ð¸ ÑÑÑÐ¾ÐºÐ¸ &lt;code>str1&lt;/code> Ð¸ &lt;code>str2&lt;/code> Ð¸Ð¼ÐµÑÑ ÐÐÐ ÑÑÑÐ¾ÐºÐ¸ &lt;code>X&lt;/code>, ÑÐ¾ &lt;code>str1&lt;/code> Ð¸ &lt;code>str2&lt;/code> Ð¼Ð¾Ð³ÑÑ Ð±ÑÑÑ Ð¿ÑÐµÐ´ÑÑÐ°Ð²Ð»ÐµÐ½Ñ Ð² ÑÐ¾ÑÐ¼Ðµ &lt;code>Xn&lt;/code> Ð¸ &lt;code>Xm&lt;/code> (Ð³Ð´Ðµ &lt;code>n&lt;/code> Ð¸ &lt;code>m&lt;/code> â ÑÑÐ¾ Ð½Ð°ÑÑÑÐ°Ð»ÑÐ½ÑÐµ ÑÐ¸ÑÐ»Ð°), ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²ÐµÐ½Ð½Ð¾. Ð­ÑÐ¾ Ð¾Ð·Ð½Ð°ÑÐ°ÐµÑ, ÑÑÐ¾ &lt;code>str1&lt;/code> Ð´Ð¾Ð»Ð¶Ð½Ð° Ð½Ð°ÑÐ¸Ð½Ð°ÑÑÑÑ Ñ &lt;code>str2&lt;/code> Ð¸Ð»Ð¸ Ð½Ð°Ð¾Ð±Ð¾ÑÐ¾Ñ.&lt;/p>
&lt;h2 id="Ð°Ð»Ð³Ð¾ÑÐ¸ÑÐ¼">ÐÐ»Ð³Ð¾ÑÐ¸ÑÐ¼&lt;/h2>
&lt;ol>
&lt;li>ÐÑÐ¾Ð²ÐµÑÐºÐ° Ð½Ð°ÑÐ°Ð»Ð° ÑÑÑÐ¾Ðº: ÐµÑÐ»Ð¸ &lt;code>str1&lt;/code> Ð½Ðµ Ð½Ð°ÑÐ¸Ð½Ð°ÐµÑÑÑ Ñ &lt;code>str2&lt;/code> Ð¸Ð»Ð¸ Ð½Ð°Ð¾Ð±Ð¾ÑÐ¾Ñ, ÑÐ¾ ÐÐÐ Ð½Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ.&lt;/li>
&lt;li>ÐÑÑÐ¸ÑÐ»ÐµÐ½Ð¸Ðµ Ð¾ÑÑÐ°ÑÐºÐ°: ÑÐ´Ð°Ð»ÑÐµÐ¼ Ð½Ð°ÑÐ°Ð»ÑÐ½ÑÐ¹ ÑÑÐ°Ð³Ð¼ÐµÐ½Ñ Ð¾Ð´Ð½Ð¾Ð¹ ÑÑÑÐ¾ÐºÐ¸, ÐºÐ¾ÑÐ¾ÑÑÐ¹ ÑÐ¾Ð²Ð¿Ð°Ð´Ð°ÐµÑ Ñ Ð´ÑÑÐ³Ð¾Ð¹ ÑÑÑÐ¾ÐºÐ¾Ð¹. Ð­ÑÐ¾ Ð±ÑÐ´ÐµÑ Ð¾ÑÑÐ°ÑÐ¾Ðº &lt;code>remainder&lt;/code>.&lt;/li>
&lt;li>Ð ÐµÐºÑÑÑÐ¸Ð²Ð½ÑÐ¹ Ð²ÑÐ·Ð¾Ð²: Ð¿Ð¾Ð²ÑÐ¾ÑÑÐµÐ¼ Ð¿ÑÐ¾ÑÐµÐ´ÑÑÑ Ð´Ð»Ñ &lt;code>remainder&lt;/code> Ð¸ Ð¼ÐµÐ½ÑÑÐµÐ¹ Ð¸Ð· Ð´Ð²ÑÑ ÑÑÑÐ¾Ðº.&lt;/li>
&lt;/ol>
&lt;h2 id="ÑÐµÑÐµÐ½Ð¸Ðµ">Ð ÐµÑÐµÐ½Ð¸Ðµ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">gcdOfStrings&lt;/span>(str1: &lt;span style="color:#007020">str&lt;/span>, str2: &lt;span style="color:#007020">str&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÑÐ»Ð¸ Ð¾Ð´Ð½Ð° ÑÑÑÐ¾ÐºÐ° Ð½Ðµ Ð½Ð°ÑÐ¸Ð½Ð°ÐµÑÑÑ Ñ Ð´ÑÑÐ³Ð¾Ð¹, ÐÐÐ Ð½Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> str1&lt;span style="color:#666">.&lt;/span>startswith(str2) &lt;span style="color:#007020;font-weight:bold">and&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> str2&lt;span style="color:#666">.&lt;/span>startswith(str1):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÑÐ»Ð¸ ÑÑÑÐ¾ÐºÐ¸ ÑÐ°Ð²Ð½Ñ, Ð¾Ð´Ð½Ð° Ð¸Ð· Ð½Ð¸Ñ ÑÐ²Ð»ÑÐµÑÑÑ ÐÐÐ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> str1 &lt;span style="color:#666">==&lt;/span> str2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> str1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÐ¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ Ð±Ð¾Ð»ÐµÐµ ÐºÐ¾ÑÐ¾ÑÐºÐ¾Ð¹ Ð¸ Ð±Ð¾Ð»ÐµÐµ Ð´Ð»Ð¸Ð½Ð½Ð¾Ð¹ ÑÑÑÐ¾ÐºÐ¸&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">len&lt;/span>(str1) &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#007020">len&lt;/span>(str2):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> longer, shorter &lt;span style="color:#666">=&lt;/span> str1, str2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> longer, shorter &lt;span style="color:#666">=&lt;/span> str2, str1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÑÑÐ¸ÑÐ»ÐµÐ½Ð¸Ðµ Ð¾ÑÑÐ°ÑÐºÐ°&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> remainder &lt;span style="color:#666">=&lt;/span> longer[&lt;span style="color:#007020">len&lt;/span>(shorter):]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Ð ÐµÐºÑÑÑÐ¸Ð²Ð½ÑÐ¹ Ð²ÑÐ·Ð¾Ð² ÑÑÐ½ÐºÑÐ¸Ð¸ Ð´Ð»Ñ Ð¾ÑÑÐ°ÑÐºÐ° Ð¸ Ð±Ð¾Ð»ÐµÐµ ÐºÐ¾ÑÐ¾ÑÐºÐ¾Ð¹ ÑÑÑÐ¾ÐºÐ¸&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> gcdOfStrings(remainder, shorter)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1359. Count All Valid Pickup and Delivery Options</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/hard/1359/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/hard/1359/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/">LeetCode Ð·Ð°Ð´Ð°ÑÐ° 1359&lt;/a>&lt;/p>
&lt;h2 id="Ð·Ð°Ð´Ð°ÑÐ°">ÐÐ°Ð´Ð°ÑÐ°&lt;/h2>
&lt;p>ÐÐ°Ð½Ð¾ &lt;code>n&lt;/code> Ð·Ð°ÐºÐ°Ð·Ð¾Ð², ÐºÐ°Ð¶Ð´ÑÐ¹ Ð·Ð°ÐºÐ°Ð· ÑÐ¾ÑÑÐ¾Ð¸Ñ Ð¸Ð· ÑÑÐ»ÑÐ³ Ð¿Ð¾ Ð¿ÑÐ¸ÐµÐ¼Ñ Ð¸ Ð´Ð¾ÑÑÐ°Ð²ÐºÐµ.&lt;/p>
&lt;p>ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð¿Ð¾Ð´ÑÑÐ¸ÑÐ°ÑÑ Ð²ÑÐµ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÐµ Ð¿Ð¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°ÑÐµÐ»ÑÐ½Ð¾ÑÑÐ¸ Ð¿ÑÐ¸ÐµÐ¼Ð°/Ð´Ð¾ÑÑÐ°Ð²ÐºÐ¸ ÑÐ°Ðº, ÑÑÐ¾Ð±Ñ Ð´Ð¾ÑÑÐ°Ð²ÐºÐ°(i) Ð²ÑÐµÐ³Ð´Ð° ÑÐ»Ð° Ð¿Ð¾ÑÐ»Ðµ Ð¿ÑÐ¸ÐµÐ¼Ð°(i).&lt;/p>
&lt;p>Ð¢Ð°Ðº ÐºÐ°Ðº Ð¾ÑÐ²ÐµÑ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð¾ÑÐµÐ½Ñ Ð±Ð¾Ð»ÑÑÐ¸Ð¼, Ð²ÐµÑÐ½Ð¸ÑÐµ ÐµÐ³Ð¾ Ð¿Ð¾ Ð¼Ð¾Ð´ÑÐ»Ñ &lt;code>10^9 + 7&lt;/code>.&lt;/p>
&lt;h2 id="Ð¿Ð¾Ð´ÑÐºÐ°Ð·ÐºÐ¸">ÐÐ¾Ð´ÑÐºÐ°Ð·ÐºÐ¸&lt;/h2>
&lt;p>ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¾ÑÐ½ÑÐ¹ Ð¿Ð¾Ð´ÑÐ¾Ð´.&lt;/p>
&lt;p>ÐÐ»Ñ ÐºÐ°Ð¶Ð´Ð¾Ð³Ð¾ Ð½Ð¾Ð²Ð¾Ð³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð° Ñ Ð½Ð°Ñ ÐµÑÑÑ &lt;code>2 * (2n-1)&lt;/code> ÑÐ¿Ð¾ÑÐ¾Ð±Ð¾Ð² Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ ÐµÐ³Ð¾ Ð² ÑÐµÐºÑÑÑÑ Ð¿Ð¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ.&lt;/p>
&lt;p>ÐÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÐ¼ Ð´Ð°Ð½Ð½ÑÑ ÑÐ¾ÑÐ¼ÑÐ»Ñ, ÑÐ°Ðº ÐºÐ°Ðº:&lt;/p>
&lt;p>ÐÐ¾Ð²ÑÐ¹ Ð·Ð°ÐºÐ°Ð· Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð²ÑÑÐ°Ð²Ð»ÐµÐ½ Ð½Ð° Ð»ÑÐ±Ð¾Ðµ Ð¼ÐµÑÑÐ¾ ÑÑÐµÐ´Ð¸ ÑÑÑÐµÑÑÐ²ÑÑÑÐ¸Ñ Ð·Ð°ÐºÐ°Ð·Ð¾Ð² (2n-1 Ð¼ÐµÑÑ). Ð£ Ð½Ð°Ñ 2 Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¸ (Ð¿ÑÐ¸ÐµÐ¼ Ð¸ Ð´Ð¾ÑÑÐ°Ð²ÐºÐ°) Ð´Ð»Ñ ÐºÐ°Ð¶Ð´Ð¾Ð³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð°.&lt;/p>
&lt;h2 id="Ð¿Ð¾Ð´ÑÐ¾Ð´">ÐÐ¾Ð´ÑÐ¾Ð´&lt;/h2>
&lt;p>ÐÐ°ÑÐ½ÐµÐ¼ Ñ ÑÐ°Ð¼Ð¾Ð³Ð¾ Ð½Ð°ÑÐ°Ð»Ð°,&lt;/p>
&lt;ol>
&lt;li>
&lt;p>ÐÑ Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ 1-Ð¹ Ð·Ð°ÐºÐ°Ð· &lt;strong>n=1&lt;/strong>&lt;/p>
&lt;p>ÐÑ Ð¼Ð¾Ð¶ÐµÐ¼ ÑÐ°ÑÑÑÐ°Ð²Ð¸ÑÑ ÑÐ¾Ð»ÑÐºÐ¾ Ð² Ð¾Ð´Ð½Ð¾Ð¼ Ð¿Ð¾ÑÑÐ´ÐºÐµ: &lt;code>P1 D1&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ð¢ÐµÐ¿ÐµÑÑ Ð¼Ñ Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ 2-Ð¹ Ð·Ð°ÐºÐ°Ð· &lt;strong>n=2&lt;/strong>, Ð¸ Ð½ÑÐ¶Ð½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ðº Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ¼Ñ Ð¸ ÑÐ°ÑÑÑÐ°Ð²Ð¸ÑÑ &lt;code>P2, D2&lt;/code>.&lt;/p>
&lt;p>ÐÑÐ´Ð° Ð¼Ñ Ð¼Ð¾Ð¶ÐµÐ¼ Ð¿Ð¾ÑÑÐ°Ð²Ð¸ÑÑ P2?&lt;/p>
&lt;p>ÐÐ° Ð¿ÐµÑÐ²Ð¾Ðµ Ð¼ÐµÑÑÐ¾, Ð²ÑÐ¾ÑÐ¾Ðµ Ð¸Ð»Ð¸ ÑÑÐµÑÑÐµ. Ð Ð½Ðµ Ð¼Ð¾Ð¶ÐµÐ¼ Ð¿Ð¾ÑÑÐ°Ð²Ð¸ÑÑ Ð½Ð° Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐµ, Ñ.Ðº. Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐµ Ð¼ÐµÑÑÐ¾ Ð²ÑÐµÐ³Ð´Ð° Ð±ÑÐ´ÐµÑ ÑÐ°ÑÑÐ¸ Ð´Ð¾ÑÑÐ°Ð²ÐºÐ¸(D).&lt;/p>
&lt;p>ÐÐ¾Ð¿ÑÐ¾Ð±ÑÐµÐ¼ ÑÐ°ÑÑÑÐ°Ð²Ð¸ÑÑ:&lt;/p>
&lt;ol>
&lt;li>ÐÑÐµÐ³Ð¾ &lt;strong>3&lt;/strong> Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÑ Ð¿Ð¾Ð·Ð¸ÑÐ¸Ð¸ ÐºÑÐ´Ð° Ð¿Ð¾ÑÑÐ°Ð²Ð¸ÑÑ 2-Ð¹ (P2) Ð·Ð°ÐºÐ°Ð·. (ÐÐ±Ð¾Ð·Ð½Ð°ÑÐ¸Ð¼ Ð¿ÐµÑÐµÑÑÐ°Ð½Ð¾Ð²ÐºÐ¸ Ð¾Ñ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð° ÐºÐ°Ðº &lt;code>X&lt;/code>):&lt;/li>
&lt;li>ÐÑÐ»Ð¸ &lt;code>P2 X X&lt;/code>, ÑÐ¾ Ñ P2 Ð¸ D2 Ð¸Ð· ÑÐ°ÑÑÑÐ°Ð½Ð¾Ð²Ð¾Ðº - 3 Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÑ Ð²Ð°ÑÐ¸Ð°Ð½ÑÐ°: &lt;code>P2 D2 X X&lt;/code> Ð¸Ð»Ð¸ &lt;code>P2 X D2 X&lt;/code> Ð¸Ð»Ð¸ &lt;code>P2 X X D2&lt;/code>&lt;/li>
&lt;li>ÐÑÐ»Ð¸ &lt;code>X P2 X&lt;/code>, - 2 Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÑ Ð²Ð°ÑÐ¸Ð°Ð½ÑÐ°: &lt;code>X P2 D2 X&lt;/code> Ð¸Ð»Ð¸ &lt;code>X P2 X D2&lt;/code>&lt;/li>
&lt;li>ÐÑÐ»Ð¸ &lt;code>X X P2&lt;/code>, - 1 Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÐ¹ Ð²Ð°ÑÐ¸Ð°Ð½Ñ: &lt;code>X X P2 D2&lt;/code>&lt;/li>
&lt;li>ÐÑÑÑÐ´Ð° Ð¼Ñ Ð¿Ð¾Ð»ÑÑÐ°ÐµÐ¼ ÑÐ¾ÑÐ¼ÑÐ»Ñ, ÑÑÐ¾ Ð´Ð»Ñ &lt;code>n&lt;/code> Ð·Ð°ÐºÐ°Ð·Ð° - &lt;code>n*2&lt;/code> Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¹, Ð¸ &lt;code>n*2 -1&lt;/code> Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÑ ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¸Ð¹.&lt;/li>
&lt;li>ÐÑÐ¾Ð³Ð¾ Ð¿Ð¾Ð»ÑÑÐ°ÐµÐ¼, ÑÑÐ¾ Ð´Ð»Ñ Ð²ÑÐ¾ÑÐ¾Ð³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð° Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÑ Ð²ÑÐ±Ð¾ÑÐ¾Ð² Ð¿ÐµÑÐµÑÑÐ°Ð½Ð¾Ð²Ð¾Ðº &lt;code>3+2+1&lt;/code> - &lt;strong>6&lt;/strong>&lt;/li>
&lt;li>Ð¢Ð°ÐºÐ¶Ðµ Ð¼Ñ Ð²Ð¸Ð´Ð¸Ð¼, ÑÑÐ¾ &lt;code>X&lt;/code> - ÑÐ°ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ¸ Ñ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð° ÑÐ¾Ð¶Ðµ Ð¼ÐµÐ½ÑÐ»Ð¸ Ð¿Ð¾Ð·Ð¸ÑÐ¸Ð¸, Ð¿Ð¾ÑÑÐ¾Ð¼Ñ Ð¾Ð±ÑÐµÐµ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¸Ð¹ Ð±ÑÐ´ÐµÑ ÑÐ°Ð²Ð½Ð¾ &lt;mark>Ð¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð° ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¸Ð¹ ÑÐµÐºÑÑÐµÐ³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð° Ð¸ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ³Ð¾&lt;/mark> - &lt;strong>6*1=6&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Ð¢ÐµÐ¿ÐµÑÑ Ð¼Ñ Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ 3-Ð¹ Ð·Ð°ÐºÐ°Ð· &lt;strong>n=3&lt;/strong>,&lt;/p>
&lt;ol>
&lt;li>ÐÐ¾ Ð°Ð½Ð°Ð»Ð¾Ð³Ð¸Ð¸ Ñ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐ¸Ð¼, Ð¿ÐµÑÐµÑÑÐ°Ð½Ð¾Ð²Ð¾Ðº Ð¿Ð¾Ð»ÑÑÐ°ÐµÑÑÑ &lt;code>n*2=6&lt;/code>&lt;/li>
&lt;li>ÐÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¸Ð¹ Ð¿Ð¾Ð»ÑÑÐ°ÐµÑÑÑ &lt;code>5+4+3+2+1&lt;/code> = &lt;strong>15&lt;/strong>&lt;/li>
&lt;li>ÐÐµÑÐµÐ¼Ð½Ð¾Ð¶Ð°ÐµÐ¼ Ñ ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¸ÑÐ¼Ð¸ Ð¸Ð· Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð° &lt;code>15*6=90&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="Ð°Ð»Ð³Ð¾ÑÐ¸ÑÐ¼">ÐÐ»Ð³Ð¾ÑÐ¸ÑÐ¼&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>ÐÐ»Ñ ÐºÐ°Ð¶Ð´Ð¾Ð³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð° Ð¾Ñ 1 Ð´Ð¾ n:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ð Ð°ÑÑÑÐ¸ÑÑÐ²Ð°ÐµÐ¼ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÑÐ¿Ð¾ÑÐ¾Ð±Ð¾Ð² Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð·Ð°ÐºÐ°Ð·Ð° Ð² ÑÐµÐºÑÑÑÑ Ð¿Ð¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ.&lt;/p>
&lt;ol>
&lt;li>ÐÐ»Ñ Ð¿Ð¾Ð´ÑÑÐµÑÐ° ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¸Ð¹ ÑÐµÐºÑÑÐµÐ³Ð¾ Ð·Ð°ÐºÐ°Ð·Ð° Ð¼Ð¾Ð¶Ð½Ð¾ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÐ¾ÑÐ¼ÑÐ»Ñ:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> 2*n * (2*n-1) // 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Ð´Ð»Ñ n:3 2*3=6, 2*3-1=5, 6*5//2=15
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Ð£Ð¼Ð½Ð¾Ð¶Ð°ÐµÐ¼ ÑÐµÐºÑÑÐµÐµ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¸Ð¹ Ð½Ð° ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÑÐ¿Ð¾ÑÐ¾Ð±Ð¾Ð² Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð·Ð°ÐºÐ°Ð·Ð°.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="ÑÐµÑÐµÐ½Ð¸Ðµ">Ð ÐµÑÐµÐ½Ð¸Ðµ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">countOrders&lt;/span>(n: &lt;span style="color:#007020">int&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MOD &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">10&lt;/span>&lt;span style="color:#666">**&lt;/span>&lt;span style="color:#40a070">9&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> x &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">2&lt;/span>, n &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev_order_combinations &lt;span style="color:#666">=&lt;/span> res
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order_combinations &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">*&lt;/span> x) &lt;span style="color:#666">*&lt;/span> (&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">*&lt;/span> x &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#666">//&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#666">=&lt;/span> prev_order_combinations &lt;span style="color:#666">*&lt;/span> order_combinations &lt;span style="color:#666">%&lt;/span> MOD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> res
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1431. Kids With the Greatest Number of Candies</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/1431/</link><pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/1431/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/kids-with-the-greatest-number-of-candies">LeetCode problem 1431. Kids With the Greatest Number of Candies&lt;/a>&lt;/p>
&lt;h3 id="problem-statement">Problem Statement&lt;/h3>
&lt;p>Imagine you&amp;rsquo;re in a classroom with a bunch of kids, and each kid has a certain number of candies. You, being super generous, have some extra candies to give away. Now, you&amp;rsquo;re wondering, if you give all these extra candies to one kid at a time, will that kid end up having the most candies in the class? And you want to check this for every kid in the class.&lt;/p>
&lt;h3 id="hint">Hint&lt;/h3>
&lt;p>To figure this out, first, find out who currently has the most candies in the class. Then, add the extra candies to each kid&amp;rsquo;s current candies and see if that total is at least as much as the most-candies kid.&lt;/p>
&lt;h3 id="approach">Approach&lt;/h3>
&lt;p>Let&amp;rsquo;s make it more relatable:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Find the Kid with Most Candies Now:&lt;/strong> Imagine you&amp;rsquo;re counting how many candies each kid has. The kid with the most candies sets the record for everyone to beat.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Give Extra Candies to Each Kid:&lt;/strong> Now, you give your extra candies to each kid, one by one, and see if their new total beats or matches the record.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a List of True or False:&lt;/strong> For each kid, if their total candies with the extra ones are as many or more than the record, write down &lt;code>True&lt;/code>; otherwise, write down &lt;code>False&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">kidsWithCandies&lt;/span>(candies, extra_candies):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_candies &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">max&lt;/span>(candies)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> candy &lt;span style="color:#007020;font-weight:bold">in&lt;/span> candies:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#666">.&lt;/span>append(candy &lt;span style="color:#666">+&lt;/span> extra_candies &lt;span style="color:#666">&amp;gt;=&lt;/span> max_candies)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>kidsWithCandies&lt;/code> method, we first find the maximum number of candies any kid has. We then use list comprehension to create the result list.&lt;/p>
&lt;p>This problem shows how a problem that seems to require nested loops can be solved efficiently with a single pass over the array by making use of Python&amp;rsquo;s built-in functions and list comprehension. It&amp;rsquo;s a good practice problem for beginners to understand the concepts of array manipulation and using built-in functions.&lt;/p></description></item><item><title>1456. Maximum Number of Vowels in a Substring of Given Length</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/1456/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/1456/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/">LeetCode Problem 1456&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>Given a string &lt;code>s&lt;/code> and an integer &lt;code>k&lt;/code>, the task is to return the maximum number of vowel letters in any substring of &lt;code>s&lt;/code> with length &lt;code>k&lt;/code>.&lt;/p>
&lt;p>Vowel letters in English are &amp;lsquo;a&amp;rsquo;, &amp;rsquo;e&amp;rsquo;, &amp;lsquo;i&amp;rsquo;, &amp;lsquo;o&amp;rsquo;, and &amp;lsquo;u&amp;rsquo;.&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>The most straightforward solution to this problem is to take every possible substring of length &lt;code>k&lt;/code> and count the number of vowels in each of them. This can be done using nested loops. The outer loop runs through each character in the string while the inner loop counts the vowels for each substring of length &lt;code>k&lt;/code>. The maximum count is then returned.&lt;/p>
&lt;p>However, this naive solution would be computationally expensive, with a time complexity of $O(n*k)$ where n is the length of the string &lt;code>s&lt;/code>.&lt;/p>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;p>The problem can be efficiently solved using a technique called the sliding window approach.&lt;/p>
&lt;h2 id="approach-sliding-window">Approach: Sliding Window&lt;/h2>
&lt;p>The idea is to use a window of size &lt;code>k&lt;/code> and slide it across the string &lt;code>s&lt;/code>. Instead of counting the number of vowels in the entire window every time, we adjust the count by adding the new character and removing the leftmost character as the window slides.&lt;/p>
&lt;p>This way, the number of operations is reduced to just two for every slide, making it a more efficient solution.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Initialize a counter for the number of vowels and a &lt;code>max_vowels&lt;/code> variable to keep track of the maximum number of vowels seen.&lt;/li>
&lt;li>Traverse through the first &lt;code>k&lt;/code> characters of the string, increasing the counter for each vowel seen.&lt;/li>
&lt;li>Set &lt;code>max_vowels&lt;/code> to the value of the counter.&lt;/li>
&lt;li>Start sliding the window from the &lt;code>k&lt;/code>th character. For every new character:
&lt;ul>
&lt;li>If it&amp;rsquo;s a vowel, increase the counter.&lt;/li>
&lt;li>Check the leftmost character of the previous window (i.e., &lt;code>s[i - k]&lt;/code>). If it&amp;rsquo;s a vowel, decrease the counter.&lt;/li>
&lt;li>Update &lt;code>max_vowels&lt;/code> if the counter is greater than its current value.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">maxVowels&lt;/span>(s, k):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vowels &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">set&lt;/span>([&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;e&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;i&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;o&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;u&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sum&lt;/span>(&lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> char &lt;span style="color:#007020;font-weight:bold">in&lt;/span> s[:k] &lt;span style="color:#007020;font-weight:bold">if&lt;/span> char &lt;span style="color:#007020;font-weight:bold">in&lt;/span> vowels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_vowels &lt;span style="color:#666">=&lt;/span> count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(k, &lt;span style="color:#007020">len&lt;/span>(s)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Add the new character to the count if it&amp;#39;s a vowel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#666">+=&lt;/span> s[i] &lt;span style="color:#007020;font-weight:bold">in&lt;/span> vowels
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Remove the leftmost character of the previous window from the count if it&amp;#39;s a vowel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#666">-=&lt;/span> s[i &lt;span style="color:#666">-&lt;/span> k] &lt;span style="color:#007020;font-weight:bold">in&lt;/span> vowels
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_vowels &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">max&lt;/span>(max_vowels, count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> max_vowels
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1493. Longest Subarray of 1's After Deleting One Element</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/1493/</link><pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/1493/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/">LeetCode Problem 1493&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>Given a binary array &lt;code>nums&lt;/code>, you should delete one element from it. The goal is to return the size of the longest subarray containing only 1&amp;rsquo;s after this deletion. If no such subarray exists, return 0.&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A straightforward approach is to manually try deleting each element in the array and checking the length of the longest sequence of 1&amp;rsquo;s. This would involve nested loops: an outer loop for deleting an element and an inner loop to check sequences of 1&amp;rsquo;s. This method, however, can be inefficient for larger arrays.&lt;/p>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;p>Consider that we are allowed to have a subarray with a single zero. It might make things simpler! The sliding window approach will be handy here.&lt;/p>
&lt;h2 id="approach-sliding-window-with-a-twist">Approach: Sliding Window with a Twist&lt;/h2>
&lt;p>We can use the sliding window technique again for this problem. However, we need to adapt it slightly. This time, our window can contain at most one zero. Thus, while expanding the window, we should be mindful of the zeros.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Initialize two pointers, &lt;code>left&lt;/code> and &lt;code>right&lt;/code>, to represent the window&amp;rsquo;s boundaries. Also, initialize a counter &lt;code>zeroCount&lt;/code> to track zeros in the current window.&lt;/li>
&lt;li>Expand the right boundary of the window by moving the &lt;code>right&lt;/code> pointer.&lt;/li>
&lt;li>If the current number is 0, increment the &lt;code>zeroCount&lt;/code>.&lt;/li>
&lt;li>If &lt;code>zeroCount&lt;/code> becomes 2, move the &lt;code>left&lt;/code> pointer to the right until a zero is excluded, and decrement the &lt;code>zeroCount&lt;/code>.&lt;/li>
&lt;li>Track the maximum length of the window found.&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">longestSubarray&lt;/span>(nums):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zeroCount &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxLength &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> right &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#007020">len&lt;/span>(nums)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> nums[right] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zeroCount &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> zeroCount &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> nums[left] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zeroCount &lt;span style="color:#666">-=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Subtract 1 because we need to delete one element.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxLength &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">max&lt;/span>(maxLength, right &lt;span style="color:#666">-&lt;/span> left)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> maxLength
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1768. Merge Strings Alternately</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/1768/</link><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/1768/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/merge-strings-alternately">LeetCode Ð·Ð°Ð´Ð°ÑÐ° 1768&lt;/a>&lt;/p>
&lt;h2 id="Ð·Ð°Ð´Ð°ÑÐ°">ÐÐ°Ð´Ð°ÑÐ°&lt;/h2>
&lt;p>ÐÐ°Ð¼ Ð´Ð°Ð½Ñ Ð´Ð²Ðµ ÑÑÑÐ¾ÐºÐ¸ &lt;code>word1&lt;/code> Ð¸ &lt;code>word2&lt;/code>. ÐÐ±ÑÐµÐ´Ð¸Ð½Ð¸ÑÐµ ÑÑÐ¸ ÑÑÑÐ¾ÐºÐ¸, Ð´Ð¾Ð±Ð°Ð²Ð»ÑÑ Ð±ÑÐºÐ²Ñ Ð² ÑÐµÑÐµÐ´ÑÑÑÐµÐ¼ Ð¿Ð¾ÑÑÐ´ÐºÐµ, Ð½Ð°ÑÐ¸Ð½Ð°Ñ Ñ &lt;code>word1&lt;/code>. ÐÑÐ»Ð¸ Ð¾Ð´Ð½Ð° ÑÑÑÐ¾ÐºÐ° Ð´Ð»Ð¸Ð½Ð½ÐµÐµ Ð´ÑÑÐ³Ð¾Ð¹, Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÐµ Ð±ÑÐºÐ²Ñ Ð´Ð¾Ð±Ð°Ð²Ð»ÑÑÑÑÑ Ð² ÐºÐ¾Ð½ÐµÑ ÑÐµÐ·ÑÐ»ÑÑÐ¸ÑÑÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐ¸.&lt;/p>
&lt;h2 id="Ð¿Ð¾Ð´ÑÐ¾Ð´">ÐÐ¾Ð´ÑÐ¾Ð´&lt;/h2>
&lt;p>Ð§ÑÐ¾Ð±Ñ ÑÐµÑÐ¸ÑÑ ÑÑÑ Ð·Ð°Ð´Ð°ÑÑ, Ð¼Ñ Ð¼Ð¾Ð¶ÐµÐ¼ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð´Ð²Ð° ÑÐºÐ°Ð·Ð°ÑÐµÐ»Ñ Ð´Ð»Ñ ÐºÐ°Ð¶Ð´Ð¾Ð³Ð¾ ÑÐ»Ð¾Ð²Ð°. ÐÐ°ÑÐ½ÐµÐ¼ Ñ Ð¿ÐµÑÐ²Ð¾Ð³Ð¾ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð° ÐºÐ°Ð¶Ð´Ð¾Ð¹ ÑÑÑÐ¾ÐºÐ¸ Ð¸ Ð±ÑÐ´ÐµÐ¼ ÑÐµÑÐµÐ´Ð¾Ð²Ð°ÑÑ Ð¸Ñ, Ð¿Ð¾ÐºÐ° Ð¾Ð´Ð½Ð° Ð¸Ð· ÑÑÑÐ¾Ðº Ð½Ðµ Ð·Ð°ÐºÐ¾Ð½ÑÐ¸ÑÑÑ. ÐÐ¾ÑÐ»Ðµ ÑÑÐ¾Ð³Ð¾, Ð¼Ñ Ð¿ÑÐ¾ÑÑÐ¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÑÐµÐ¼ Ð¾ÑÑÐ°Ð²ÑÐ¸ÐµÑÑ ÑÐ¸Ð¼Ð²Ð¾Ð»Ñ Ð¸Ð· Ð±Ð¾Ð»ÐµÐµ Ð´Ð»Ð¸Ð½Ð½Ð¾Ð³Ð¾ ÑÐ»Ð¾Ð²Ð° Ðº ÑÐµÐ·ÑÐ»ÑÑÐ¸ÑÑÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐµ.&lt;/p>
&lt;h2 id="Ð°Ð»Ð³Ð¾ÑÐ¸ÑÐ¼">ÐÐ»Ð³Ð¾ÑÐ¸ÑÐ¼&lt;/h2>
&lt;ol>
&lt;li>ÐÐ½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ ÑÐµÐ·ÑÐ»ÑÑÐ¸ÑÑÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐ¸ Ð¸ Ð´Ð²ÑÑ ÑÐºÐ°Ð·Ð°ÑÐµÐ»ÐµÐ¹ Ð´Ð»Ñ &lt;code>word1&lt;/code> Ð¸ &lt;code>word2&lt;/code>.&lt;/li>
&lt;li>ÐÑÐµÑÐ°ÑÐ¸Ñ Ð¿Ð¾ ÐºÐ°Ð¶Ð´Ð¾Ð¼Ñ ÑÐ»Ð¾Ð²Ñ, Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²ÑÑÑÐ¸Ñ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð² Ð² ÑÐµÐ·ÑÐ»ÑÑÐ¸ÑÑÑÑÑÑ ÑÑÑÐ¾ÐºÑ Ð² ÑÐµÑÐµÐ´ÑÑÑÐµÐ¼ Ð¿Ð¾ÑÑÐ´ÐºÐµ.&lt;/li>
&lt;li>ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð¾ÑÑÐ°Ð²ÑÐ¸ÑÑÑ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð² Ð¸Ð· Ð±Ð¾Ð»ÐµÐµ Ð´Ð»Ð¸Ð½Ð½Ð¾Ð³Ð¾ ÑÐ»Ð¾Ð²Ð° Ðº ÑÐµÐ·ÑÐ»ÑÑÐ¸ÑÑÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐµ.&lt;/li>
&lt;/ol>
&lt;h2 id="ÑÐµÑÐµÐ½Ð¸Ðµ">Ð ÐµÑÐµÐ½Ð¸Ðµ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">mergeAlternately&lt;/span>(word1: &lt;span style="color:#007020">str&lt;/span>, word2: &lt;span style="color:#007020">str&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÐ½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ ÑÐµÐ·ÑÐ»ÑÑÐ¸ÑÑÑÑÐµÐ¹ ÑÑÑÐ¾ÐºÐ¸ Ð¸ ÑÐºÐ°Ð·Ð°ÑÐµÐ»ÐµÐ¹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i, j &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÑÐµÑÐ°ÑÐ¸Ñ Ð¿Ð¾ ÐºÐ°Ð¶Ð´Ð¾Ð¼Ñ ÑÐ»Ð¾Ð²Ñ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#007020">len&lt;/span>(word1) &lt;span style="color:#007020;font-weight:bold">and&lt;/span> j &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#007020">len&lt;/span>(word2):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#666">.&lt;/span>append(word1[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#666">.&lt;/span>append(word2[j])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð¾ÑÑÐ°Ð²ÑÐ¸ÑÑÑ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#007020">len&lt;/span>(word1):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#666">.&lt;/span>append(word1[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> j &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#007020">len&lt;/span>(word2):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#666">.&lt;/span>append(word2[j])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">.&lt;/span>join(result)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>2839. Check if Strings Can be Made Equal With Operations I</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/2839/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/2839/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-i/">LeetCode Problem&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>You are given two strings &lt;code>s1&lt;/code> and &lt;code>s2&lt;/code>, both of length 4, consisting of lowercase English letters. The objective is to find out if it&amp;rsquo;s possible to make the two strings equal by swapping certain pairs of characters.&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A naive approach would be to try out all possible swap combinations. However, this can be very inefficient, especially when the strings have a large number of characters.&lt;/p>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;ol>
&lt;li>Observe that the swapping condition is quite specific: &lt;code>j - i = 2&lt;/code>.&lt;/li>
&lt;li>The strings should be permutations of each other.&lt;/li>
&lt;/ol>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>The efficient solution for this problem involves sorting the characters at even and odd positions separately for both strings and then comparing them.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Sort the characters at even indices for &lt;code>s1&lt;/code> and &lt;code>s2&lt;/code>.&lt;/li>
&lt;li>Sort the characters at odd indices for &lt;code>s1&lt;/code> and &lt;code>s2&lt;/code>.&lt;/li>
&lt;li>Compare the sorted characters at even indices for both strings and the sorted characters at odd indices for both strings.&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">canBeEqual&lt;/span>(self, s1: &lt;span style="color:#007020">str&lt;/span>, s2: &lt;span style="color:#007020">str&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">bool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> even_s1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sorted&lt;/span>(s1[::&lt;span style="color:#40a070">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> odd_s1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sorted&lt;/span>(s1[&lt;span style="color:#40a070">1&lt;/span>::&lt;span style="color:#40a070">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> even_s2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sorted&lt;/span>(s2[::&lt;span style="color:#40a070">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> odd_s2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sorted&lt;/span>(s2[&lt;span style="color:#40a070">1&lt;/span>::&lt;span style="color:#40a070">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> even_s1 &lt;span style="color:#666">==&lt;/span> even_s2 &lt;span style="color:#007020;font-weight:bold">and&lt;/span> odd_s1 &lt;span style="color:#666">==&lt;/span> odd_s2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>2840. Check if Strings Can be Made Equal With Operations II</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/2840/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/2840/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-ii/">LeetCode Problem 2840&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>You are given two strings &lt;code>s1&lt;/code> and &lt;code>s2&lt;/code>, both of length &lt;code>n&lt;/code>, consisting of lowercase English letters. You can apply certain operations to make them equal. The question is, is it possible?&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A naive approach would be to try all possible swap operations and compare the two strings at each step, which would be highly inefficient.&lt;/p>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;ol>
&lt;li>Observe that swapping can only occur at indices &lt;code>i&lt;/code> and &lt;code>j&lt;/code> where &lt;code>j - i&lt;/code> is even.&lt;/li>
&lt;li>Separate the string into two different sequences, one containing characters at even indices and the other at odd indices.&lt;/li>
&lt;li>Check the frequency of characters in both sequences.&lt;/li>
&lt;/ol>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>The efficient approach involves separating characters at even and odd positions into two different sequences for each string and then comparing the frequency of characters in these sequences.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Initialize two empty lists for &lt;code>s1&lt;/code> and &lt;code>s2&lt;/code>, each to store characters at even and odd positions.&lt;/li>
&lt;li>Populate these lists with characters from &lt;code>s1&lt;/code> and &lt;code>s2&lt;/code>.&lt;/li>
&lt;li>Sort these lists.&lt;/li>
&lt;li>Compare the sorted lists for equality.&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">collections&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> Counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">checkStrings&lt;/span>(s1: &lt;span style="color:#007020">str&lt;/span>, s2: &lt;span style="color:#007020">str&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">bool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> even_s1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sorted&lt;/span>(s1[::&lt;span style="color:#40a070">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> odd_s1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sorted&lt;/span>(s1[&lt;span style="color:#40a070">1&lt;/span>::&lt;span style="color:#40a070">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> even_s2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sorted&lt;/span>(s2[::&lt;span style="color:#40a070">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> odd_s2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sorted&lt;/span>(s2[&lt;span style="color:#40a070">1&lt;/span>::&lt;span style="color:#40a070">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> even_s1 &lt;span style="color:#666">==&lt;/span> even_s2 &lt;span style="color:#007020;font-weight:bold">and&lt;/span> odd_s1 &lt;span style="color:#666">==&lt;/span> odd_s2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>2841. Maximum Sum of Almost Unique Subarray</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/2841/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/2841/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/">LeetCode Problem 2841&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>You are given an integer array &lt;code>nums&lt;/code> and two positive integers &lt;code>m&lt;/code> and &lt;code>k&lt;/code>.&lt;/p>
&lt;p>The task is to return the maximum sum out of all almost unique subarrays of length &lt;code>k&lt;/code> of &lt;code>nums&lt;/code>. If no such subarray exists, return 0.&lt;/p>
&lt;p>A subarray is &lt;strong>almost unique&lt;/strong> if it contains at least &lt;code>m&lt;/code> pairwise distinct elements.&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A naive solution would be to generate all the possible subarrays of length &lt;code>k&lt;/code> and check each one to see if it is almost unique and what its sum is. This would involve nested loops and would not be efficient.&lt;/p>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;ol>
&lt;li>Use sliding window technique to find subarrays of length &lt;code>k&lt;/code>.&lt;/li>
&lt;li>Keep track of unique elements using a set.&lt;/li>
&lt;/ol>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>The solution adopts a &lt;strong>sliding window&lt;/strong> approach to go through the given array &lt;code>nums&lt;/code>, checking each subarray of size &lt;code>k&lt;/code> for its &amp;ldquo;almost uniqueness&amp;rdquo; and sum.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Define a helper function, &lt;code>is_unique&lt;/code>, which will take a subarray and return whether it contains at least &lt;code>m&lt;/code> distinct elements or not.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Initialize a variable &lt;code>_max&lt;/code> to keep track of the maximum sum among the almost unique subarrays.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Loop through &lt;code>nums&lt;/code> using the sliding window technique:&lt;/p>
&lt;ul>
&lt;li>Use the &lt;code>is_unique&lt;/code> function to check if the current subarray is almost unique.&lt;/li>
&lt;li>Update &lt;code>_max&lt;/code> with the maximum sum found so far.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Return &lt;code>_max&lt;/code> if it is not 0; otherwise, return 0.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">maxSum&lt;/span>(nums: List[&lt;span style="color:#007020">int&lt;/span>], m: &lt;span style="color:#007020">int&lt;/span>, k: &lt;span style="color:#007020">int&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">len&lt;/span>(nums)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">is_unique&lt;/span>(arr, start, end, m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> distinct_elements &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">set&lt;/span>(arr[start:end])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">len&lt;/span>(distinct_elements) &lt;span style="color:#666">&amp;gt;=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _max &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(n &lt;span style="color:#666">-&lt;/span> k &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> is_unique(nums, i, i &lt;span style="color:#666">+&lt;/span> k, m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _max &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">max&lt;/span>(_max, &lt;span style="color:#007020">sum&lt;/span>(nums[i:i &lt;span style="color:#666">+&lt;/span> k]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> _max &lt;span style="color:#007020;font-weight:bold">if&lt;/span> _max &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>2844. Minimum Operations to Make a Special Number</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/2844/</link><pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/2844/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/minimum-operations-to-make-a-special-number/">LeetCode Ð·Ð°Ð´Ð°ÑÐ° 2844&lt;/a>&lt;/p>
&lt;h2 id="Ð·Ð°Ð´Ð°ÑÐ°">ÐÐ°Ð´Ð°ÑÐ°&lt;/h2>
&lt;p>ÐÐ°Ð½Ð° ÑÑÑÐ¾ÐºÐ° &lt;code>num&lt;/code>, Ð¿ÑÐµÐ´ÑÑÐ°Ð²Ð»ÑÑÑÐ°Ñ Ð½ÐµÐ¾ÑÑÐ¸ÑÐ°ÑÐµÐ»ÑÐ½Ð¾Ðµ ÑÐµÐ»Ð¾Ðµ ÑÐ¸ÑÐ»Ð¾. ÐÐ° Ð¾Ð´Ð½Ñ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ñ Ð²Ñ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²ÑÐ±ÑÐ°ÑÑ Ð»ÑÐ±ÑÑ ÑÐ¸ÑÑÑ ÑÐ¸ÑÐ»Ð° &lt;code>num&lt;/code> Ð¸ ÑÐ´Ð°Ð»Ð¸ÑÑ ÐµÑ. ÐÐ°ÑÐµÐ¹ Ð·Ð°Ð´Ð°ÑÐµÐ¹ ÑÐ²Ð»ÑÐµÑÑÑ Ð¾Ð¿ÑÐµÐ´ÐµÐ»Ð¸ÑÑ Ð¼Ð¸Ð½Ð¸Ð¼Ð°Ð»ÑÐ½Ð¾Ðµ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¹, Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼ÑÑ Ð´Ð»Ñ Ð¿ÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ñ Ð´Ð°Ð½Ð½Ð¾Ð³Ð¾ ÑÐ¸ÑÐ»Ð° Ð² &amp;ldquo;ÑÐ¿ÐµÑÐ¸Ð°Ð»ÑÐ½Ð¾Ðµ&amp;rdquo; ÑÐ¸ÑÐ»Ð¾.&lt;/p>
&lt;p>Ð§Ð¸ÑÐ»Ð¾ ÑÑÐ¸ÑÐ°ÐµÑÑÑ &amp;ldquo;ÑÐ¿ÐµÑÐ¸Ð°Ð»ÑÐ½ÑÐ¼&amp;rdquo;, ÐµÑÐ»Ð¸ Ð¾Ð½Ð¾ Ð´ÐµÐ»Ð¸ÑÑÑ Ð½Ð° 25.&lt;/p>
&lt;h2 id="Ð¿Ð¾Ð´ÑÐ¾Ð´">ÐÐ¾Ð´ÑÐ¾Ð´&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>ÐÐ½Ð°Ð»Ð¸Ð· Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÑ Ð¾ÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ð¹ ÑÐ¸ÑÐ»Ð°: Ð§Ð¸ÑÐ»Ð¾, Ð´ÐµÐ»Ð¸ÑÑÑ Ð½Ð° 25 ÐµÑÐ»Ð¸ Ð¾Ð´Ð½Ð¾ Ð¸Ð· ÑÐµÑÑÑÑÑ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÑ Ð¾ÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ð¹: &amp;lsquo;00&amp;rsquo;, &amp;lsquo;25&amp;rsquo;, &amp;lsquo;50&amp;rsquo;, &amp;lsquo;75&amp;rsquo;.&lt;/p>
&lt;p>ÐÑÐ¸ ÑÑÐ¾Ð¼ ÑÐ°Ð¼Ð¾Ðµ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐµ ÑÐ¸ÑÐ»Ð¾ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¸Ð· Ð´Ð²ÑÑ Ð²Ð°ÑÐ¸Ð°Ð½ÑÐ¾Ð²: &amp;lsquo;5&amp;rsquo; Ð¸ &amp;lsquo;0&amp;rsquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ÐÐ±ÑÐ°ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾Ð´ Ð¿Ð¾ ÑÑÑÐ¾ÐºÐµ: ÐÑÐ¾ÑÐ¾Ð´Ð¸Ð¼ Ð¿Ð¾ ÑÑÑÐ¾ÐºÐµ ÑÐ¿ÑÐ°Ð²Ð° Ð½Ð°Ð»ÐµÐ²Ð¾, ÑÐ¸ÐºÑÐ¸ÑÑÑ Ð½Ð°Ð»Ð¸ÑÐ¸Ðµ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð² &amp;lsquo;5&amp;rsquo; Ð¸ &amp;lsquo;0&amp;rsquo;.&lt;/p>
&lt;p>ÐÑÐ¿Ð¾Ð»ÑÐ·ÑÑ ÑÑÐ¸ ÑÐ»Ð°Ð³Ð¸, Ð¸ÑÐµÐ¼ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÐµ Ð¾ÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ñ &amp;lsquo;00&amp;rsquo;, &amp;lsquo;25&amp;rsquo;, &amp;lsquo;50&amp;rsquo;, &amp;lsquo;75&amp;rsquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ÐÐ¾Ð´ÑÑÐµÑ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¹: Ð Ð¿ÑÐ¾ÑÐµÑÑÐµ Ð¿ÑÐ¾ÑÐ¾Ð´Ð° Ð¿Ð¾Ð´ÑÑÐ¸ÑÑÐ²Ð°ÐµÐ¼ Ð¼Ð¸Ð½Ð¸Ð¼Ð°Ð»ÑÐ½Ð¾Ðµ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¹, Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼ÑÑ Ð´Ð»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ &amp;ldquo;ÑÐ¿ÐµÑÐ¸Ð°Ð»ÑÐ½Ð¾Ð³Ð¾&amp;rdquo; ÑÐ¸ÑÐ»Ð°, ÑÐ¾ÑÐ½ÐµÐµ, ÐºÐ°Ðº ÑÐ¾Ð»ÑÐºÐ¾ Ð½Ð°Ð¹Ð´ÐµÐ¼ Ð¾Ð±Ð° ÑÐ¸ÑÐ»Ð°.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>ÐÑÐ¾Ð²ÐµÑÐºÐ° Ð½Ð° Ð½Ð°Ð»Ð¸ÑÐ¸Ðµ &amp;lsquo;0&amp;rsquo;: ÐÑÐ»Ð¸ Ð² ÑÑÑÐ¾ÐºÐµ Ð½ÐµÑ &amp;lsquo;0&amp;rsquo;, ÑÐ¾ ÑÐ¸ÑÐ»Ð¾ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ &amp;ldquo;ÑÐ¿ÐµÑÐ¸Ð°Ð»ÑÐ½ÑÐ¼&amp;rdquo;, Ð¸ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¹ Ð±ÑÐ´ÐµÑ ÑÐ°Ð²Ð½Ð¾ Ð´Ð»Ð¸Ð½Ðµ ÑÑÑÐ¾ÐºÐ¸. Ð­ÑÐ¾ ÑÐ»ÑÑÐ°Ð¹ ÐºÐ¾Ð³Ð´Ð° Ð½Ð¾Ð»Ñ (Ð² ÑÐ»ÑÑÐ°Ðµ ÑÐ´Ð°Ð»ÐµÐ½Ð¸Ñ ÐºÐ°Ð¶Ð´Ð¾Ð¹ ÑÐ¸ÑÑÑ Ð¸Ð· ÑÐ¸ÑÐ»Ð°, Ð¾ÑÑÐ°ÐµÑÑÑ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¼, ÑÐ¾Ð³Ð´Ð° 0 Ð´ÐµÐ»Ð¸ÑÑÑ Ð½Ð° 25).&lt;/p>
&lt;h2 id="Ð°Ð»Ð³Ð¾ÑÐ¸ÑÐ¼">ÐÐ»Ð³Ð¾ÑÐ¸ÑÐ¼&lt;/h2>
&lt;ol>
&lt;li>ÐÐ½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ Ð¿ÐµÑÐµÐ¼ÐµÐ½Ð½ÑÑ Ð´Ð»Ñ Ð¾ÑÑÐ»ÐµÐ¶Ð¸Ð²Ð°Ð½Ð¸Ñ Ð½Ð°Ð»Ð¸ÑÐ¸Ñ &amp;lsquo;5&amp;rsquo; Ð¸ &amp;lsquo;0&amp;rsquo;.&lt;/li>
&lt;li>ÐÐ±ÑÐ°ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾Ð´ Ð¿Ð¾ ÑÑÑÐ¾ÐºÐµ, Ð¿Ð¾Ð¸ÑÐº Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÑ Ð¾ÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ð¹ Ð¸ Ð¿Ð¾Ð´ÑÑÐµÑ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¹.&lt;/li>
&lt;li>ÐÐ¾Ð·Ð²ÑÐ°Ñ ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐ°.&lt;/li>
&lt;/ol>
&lt;h2 id="ÑÐµÑÐµÐ½Ð¸Ðµ">Ð ÐµÑÐµÐ½Ð¸Ðµ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">minimumOperations&lt;/span>(num: &lt;span style="color:#007020">str&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">len&lt;/span>(num)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÐ½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ Ð¿ÐµÑÐµÐ¼ÐµÐ½Ð½ÑÑ Ð´Ð»Ñ Ð¾ÑÑÐ»ÐµÐ¶Ð¸Ð²Ð°Ð½Ð¸Ñ Ð½Ð°Ð»Ð¸ÑÐ¸Ñ &amp;#39;5&amp;#39; Ð¸ &amp;#39;0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> had_5 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> had_0 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÐ±ÑÐ°ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾Ð´ Ð¿Ð¾ ÑÑÑÐ¾ÐºÐµ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(n &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> had_0 &lt;span style="color:#007020;font-weight:bold">and&lt;/span> num[i] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;0&amp;#39;&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># &amp;#39;00&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> n &lt;span style="color:#666">-&lt;/span> i &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> had_0 &lt;span style="color:#007020;font-weight:bold">and&lt;/span> num[i] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;5&amp;#39;&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># &amp;#39;50&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> n &lt;span style="color:#666">-&lt;/span> i &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> had_5 &lt;span style="color:#007020;font-weight:bold">and&lt;/span> num[i] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;2&amp;#39;&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># &amp;#39;25&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> n &lt;span style="color:#666">-&lt;/span> i &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> had_5 &lt;span style="color:#007020;font-weight:bold">and&lt;/span> num[i] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;7&amp;#39;&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># &amp;#39;75&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> n &lt;span style="color:#666">-&lt;/span> i &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÐ»Ð°Ð³Ð¾Ð² Ð½Ð°Ð»Ð¸ÑÐ¸Ñ &amp;#39;5&amp;#39; Ð¸ &amp;#39;0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> had_0 &lt;span style="color:#666">=&lt;/span> had_0 &lt;span style="color:#007020;font-weight:bold">or&lt;/span> num[i] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> had_5 &lt;span style="color:#666">=&lt;/span> had_5 &lt;span style="color:#007020;font-weight:bold">or&lt;/span> num[i] &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;5&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> n &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> had_0 &lt;span style="color:#007020;font-weight:bold">else&lt;/span> n
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ð Ð½ÐµÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ ÑÐ¼ÑÑÐ»Ðµ ÑÐ°ÐºÐ¾Ð¹ Ð¿Ð¾Ð´ÑÐ¾Ð´ Ð½Ð°Ð¿Ð¾Ð¼Ð¸Ð½Ð°ÐµÑ Ð°Ð»Ð³Ð¾ÑÐ¸ÑÐ¼ Ð¿ÑÐ¾ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ Ñ Ð´Ð²ÑÐ¼Ñ ÑÐºÐ°Ð·Ð°ÑÐµÐ»ÑÐ¼Ð¸. ÐÐ°Ðº ÑÐ¾Ð»ÑÐºÐ¾ Ð¾Ð´Ð¸Ð½ ÑÐºÐ°Ð·Ð°ÑÐµÐ»Ñ Ð½Ð°ÑÐµÐ» 0 Ð¸Ð»Ð¸ 5, Ð¾Ð½ ÑÐ°ÐºÑÐ¸ÑÐµÑÐºÐ¸ Ð¾ÑÑÐ°ÐµÑÑÑ Ð½Ð° Ð¼ÐµÑÑÐµ, Ð° Ð²ÑÐ¾ÑÐ¾Ð¹ ÑÐºÐ°Ð·Ð°ÑÐµÐ»Ñ &lt;code>i&lt;/code> Ð¸Ð´ÐµÑ Ð´Ð°Ð»ÑÑÐµ Ðº Ð½Ð°ÑÐ°Ð»Ñ ÑÑÑÐ¾ÐºÐ¸ Ð² Ð¿Ð¾Ð¸ÑÐºÐ°Ñ Ð²ÑÐ¾ÑÐ¾Ð¹ ÑÐ°ÑÑÐ¸ Ð¸ÑÐºÐ¾Ð¼Ð¾Ð³Ð¾ ÑÐ¸ÑÐ»Ð°.&lt;/p>
&lt;rawhtml>
&lt;/rawhtml></description></item><item><title>2848. Points That Intersect With Cars</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/2848/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/easy/2848/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/points-that-intersect-with-cars/">LeetCode problem 2848&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>Given cars parked on a number line, represented by starting and ending coordinates, we aim to determine the number of points on this line that are covered by any part of these cars.&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A basic approach is to simply iterate through each interval and for each interval, iterate through its range, adding each point to a list. Finally, we can return the length of this list to get the total points. However, this approach has a risk of counting points multiple times when two cars overlap.&lt;/p>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;ul>
&lt;li>Utilizing a set can prevent duplicate counting since sets do not allow duplicates.&lt;/li>
&lt;li>Iterating through each interval&amp;rsquo;s range and adding it to the set will ensure unique counting.&lt;/li>
&lt;/ul>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>The idea is to use a set to hold all the integer points that the cars cover. We iterate through each car&amp;rsquo;s interval, and for each interval, we iterate through its range, adding each point to the set. As sets do not allow duplicate values, points that are covered by multiple cars are not double-counted. Finally, we return the size of the set which gives the total unique points covered by the cars.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Initialize an empty set &lt;code>points&lt;/code>.&lt;/li>
&lt;li>Iterate through each interval in &lt;code>nums&lt;/code>.&lt;/li>
&lt;li>For each interval, iterate through its range from start to end, adding each point to the &lt;code>points&lt;/code> set.&lt;/li>
&lt;li>Return the size of the &lt;code>points&lt;/code> set.&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">numberOfPoints&lt;/span>(nums: List[List[&lt;span style="color:#007020">int&lt;/span>]]) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> start, end &lt;span style="color:#007020;font-weight:bold">in&lt;/span> nums:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> p &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(start, end &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points&lt;span style="color:#666">.&lt;/span>add(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">len&lt;/span>(points)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>2849. Determine if a Cell Is Reachable at a Given Time</title><link>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/2849/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/algorithms-101/leetcode/medium/2849/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/determine-if-a-cell-is-reachable-at-a-given-time">LeetCode problem 2849&lt;/a>&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>You are given starting coordinates &lt;code>(sx, sy)&lt;/code> and final coordinates &lt;code>(fx, fy)&lt;/code> on a 2D infinite grid. Starting from the initial position, you can move to any of the 8 adjacent cells in one second. The challenge is to determine if you can reach the final cell &lt;code>(fx, fy)&lt;/code> in exactly &lt;code>t&lt;/code> seconds.&lt;/p>
&lt;h2 id="naive-solution">Naive Solution&lt;/h2>
&lt;p>A naive approach would be to use a recursive function to navigate the grid from the starting point &lt;code>(sx, sy)&lt;/code> and attempt to reach the target &lt;code>(fx, fy)&lt;/code> in &lt;code>t&lt;/code> seconds. This approach will check every possible path, which can be very inefficient, especially for larger grids and values of &lt;code>t&lt;/code>.&lt;/p>
&lt;h2 id="hints--tips">Hints &amp;amp; Tips&lt;/h2>
&lt;ul>
&lt;li>Understand that not all paths are equal. Moving diagonally is more efficient than moving in a straight line if both x and y distances are positive.&lt;/li>
&lt;li>Check the constraints. If you cannot reach the destination within the given time &lt;code>t&lt;/code>, there&amp;rsquo;s no need to try any further.&lt;/li>
&lt;/ul>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>The idea is to calculate the shortest possible time to reach the target and then compare it to the given time &lt;code>t&lt;/code>. If the starting point and the ending point are the same, we can always return to the same position unless the time is exactly 1.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>Calculate the difference in x (&lt;code>diff_x&lt;/code>) and y (&lt;code>diff_y&lt;/code>) coordinates.&lt;/li>
&lt;li>For the minimum of &lt;code>diff_x&lt;/code> and &lt;code>diff_y&lt;/code>, move diagonally. This reduces both x and y distances by 1 in a single step.&lt;/li>
&lt;li>Move horizontally or vertically for the absolute difference between &lt;code>diff_x&lt;/code> and &lt;code>diff_y&lt;/code>.&lt;/li>
&lt;li>If &lt;code>(diff_x + diff_y)&lt;/code> is less than or equal to &lt;code>t&lt;/code>, and &lt;code>(t - (diff_x + diff_y))&lt;/code> is an even number or zero, return &lt;code>True&lt;/code>, otherwise return &lt;code>False&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">isReachableAtTime&lt;/span>(sx: &lt;span style="color:#007020">int&lt;/span>, sy: &lt;span style="color:#007020">int&lt;/span>, fx: &lt;span style="color:#007020">int&lt;/span>, fy: &lt;span style="color:#007020">int&lt;/span>, t: &lt;span style="color:#007020">int&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">bool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> diff_x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">abs&lt;/span>(fx &lt;span style="color:#666">-&lt;/span> sx) &lt;span style="color:#60a0b0;font-style:italic"># Calculating the differences in x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> diff_y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">abs&lt;/span>(fy &lt;span style="color:#666">-&lt;/span> sy) &lt;span style="color:#60a0b0;font-style:italic"># and y coordinates&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> diff_x &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#007020;font-weight:bold">and&lt;/span> diff_y &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>: &lt;span style="color:#60a0b0;font-style:italic"># If both starting and ending points are same&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> t &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> diff_x &lt;span style="color:#666">&amp;lt;=&lt;/span> t &lt;span style="color:#007020;font-weight:bold">and&lt;/span> diff_y &lt;span style="color:#666">&amp;lt;=&lt;/span> t: &lt;span style="color:#60a0b0;font-style:italic"># Check if we can reach the target within given time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>