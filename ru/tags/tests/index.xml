<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tests on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tags/tests/</link><description>Recent content in Tests on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2025</copyright><lastBuildDate>Mon, 25 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tags/tests/index.xml" rel="self" type="application/rss+xml"/><item><title>3. Ориентированность на приложения</title><link>https://romankurnovskii.com/ru/tracks/90daysofdevops/day03/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/90daysofdevops/day03/</guid><description>&lt;h2 id="жизненный-цикл-devops--ориентированность-на-приложения">Жизненный цикл DevOps — ориентированность на приложения&lt;/h2>
&lt;p>По мере того, как мы будем продолжать в течение следующих нескольких недель, мы будем сталкиваться с этими названиями (Continuous Development, Testing, Deployment, Monitor) (непрерывная разработка, тестирование, развертывание, мониторинг) снова и снова.
Если вы стремитесь стать инженером DevOps, то повторяемость будет тем, к чему вы привыкнете, но постоянное улучшение каждый раз — это еще одна вещь, которая делает вещи интересными.&lt;/p>
&lt;p>В этом часе мы рассмотрим общий вид приложения от начала до конца, а затем вернемся назад, как в постоянном цикле.&lt;/p>
&lt;h3 id="разработка">Разработка&lt;/h3>
&lt;p>Давайте возьмем совершенно новый пример приложения, для начала у нас ничего не создано, возможно, как разработчик вы должны обсудить с вашим клиентом или конечным пользователем требования и придумать какой-то план или требования для вашего приложения. Затем нам нужно создать согласно требованиям наше новое приложение.&lt;/p>
&lt;p>Что касается инструментов на данном этапе, здесь нет никаких реальных требований, кроме выбора вашей IDE и языка программирования, который вы хотите использовать для написания своего приложения.&lt;/p>
&lt;p>Как инженер DevOps, помните, что вы, вероятно, не тот, кто создает этот план или создает приложение для конечного пользователя, этим занимается опытный разработчик.&lt;/p>
&lt;p>Но вам также не помешает иметь возможность прочитать часть кода, чтобы вы могли принимать наилучшие решения по инфраструктуре для своего приложения.&lt;/p>
&lt;p>Ранее мы упоминали, что приложение может быть написано на любом языке. Важно, чтобы это поддерживалось с помощью системы контроля версий, это то, что мы также подробно рассмотрим позже, и, в частности, мы углубимся в &lt;strong>Git&lt;/strong>.&lt;/p>
&lt;p>Также вероятно, что над этим проектом будет работать не один разработчик, хотя это может иметь место, но даже в этом случае передовой опыт потребует репозиторий кода для хранения и совместной работы над кодом, он может быть частным или общедоступным и может быть размещен или если говорить о частном развертывании, вы наверняка слышали, как &lt;strong>GitHub или GitLab&lt;/strong> используются в качестве репозитория кода. Мы снова рассмотрим их позже в разделе &lt;strong>Git&lt;/strong>.&lt;/p>
&lt;h3 id="тестирование">Тестирование&lt;/h3>
&lt;p>На данном этапе у нас есть свои требования и наша задача - разработать приложение. Но нам нужно убедиться, что мы тестируем наш код во всех различных средах, которые у нас есть, или, возможно, в выбранном языке программирования.&lt;/p>
&lt;p>Этот этап позволяет QA тестировать на наличие ошибок, чаще мы видим, что контейнеры используются для моделирования тестовой среды, что в целом может снизить накладные расходы на физическую или облачную инфраструктуру.&lt;/p>
&lt;p>Этот этап также, вероятно, будет автоматизирован как часть следующей области — непрерывной интеграции.&lt;/p>
&lt;p>Возможность автоматизировать это тестирование по сравнению с 10, 100 или даже 1000 инженерами по контролю качества, которые должны делать это вручную, говорит сама за себя, эти инженеры могут сосредоточиться на чем-то другом в стеке, чтобы гарантировать, что вы двигаетесь быстрее и разрабатываете больше функций по сравнению с тестированием ошибок и программного обеспечения. что, как правило, является задержкой для большинства традиционных выпусков программного обеспечения, использующих методологию водопада (Waterfall).&lt;/p>
&lt;h3 id="интеграция">Интеграция&lt;/h3>
&lt;p>Очень важно, что интеграция находится в середине жизненного цикла DevOps. Это практика, когда разработчикам требуется чаще вносить изменения в исходный код. Это может быть ежедневно или еженедельно.&lt;/p>
&lt;p>С каждым коммитом ваше приложение может проходить этапы автоматизированного тестирования, что позволяет на раннем этапе обнаруживать проблемы или ошибки до следующего этапа.&lt;/p>
&lt;p>На этом этапе вы можете сказать: «Но мы не создаем приложения, мы покупаем их в готовом виде у поставщика программного обеспечения». Не волнуйтесь, многие компании делают это и будут продолжать делать, и именно поставщик программного обеспечения будет концентрируется на трех вышеупомянутых этапах, но вы, возможно, захотите принять последний этап, поскольку это позволит быстрее и эффективнее развертывать готовые развертывания.&lt;/p>
&lt;p>Я бы также сказал, что очень важно просто иметь эти вышеперечисленные знания, поскольку сегодня вы можете купить готовое программное обеспечение, но что насчет завтра или в будущем &amp;hellip; может быть, на следующей работе?&lt;/p>
&lt;h3 id="развертывание--deployment">Развертывание / Deployment&lt;/h3>
&lt;p>Итак, наше приложение создано и протестировано в соответствии с требованиями нашего конечного пользователя, и теперь нам нужно приступить к развертыванию этого приложения в рабочей среде для использования нашими конечными пользователями.&lt;/p>
&lt;p>Это этап, когда код развертывается на рабочих серверах, теперь все становится чрезвычайно интересным, и именно здесь оставшиеся 86 дней мы глубже погружаемся в эти области. Потому что разные приложения требуют различного аппаратного обеспечения или конфигураций. Именно здесь &lt;strong>Управление конфигурацией приложений&lt;/strong> и &lt;strong>Инфраструктура как код&lt;/strong> могут сыграть ключевую роль в жизненном цикле DevOps. Возможно, ваше приложение &lt;strong>контейнеризовано&lt;/strong>, но его также можно запустить на виртуальной машине. Это также приводит наше изучение к таким платформам, как &lt;strong>Kubernetes&lt;/strong>, которые будут организовывать эти контейнеры и следить за тем, чтобы желаемое состояние было доступно вашим конечным пользователям.&lt;/p>
&lt;p>Все эти смелые темы мы рассмотрим более подробно в течение следующих нескольких недель, чтобы лучше понять основы того, что они из себя представляют и когда их использовать.&lt;/p>
&lt;h3 id="мониторинг--monitoring">Мониторинг / Monitoring&lt;/h3>
&lt;p>Все быстро меняется, и у нас есть наше приложение, которое мы постоянно обновляем новыми функциями и функциями, и у нас есть наше тестирование, чтобы убедиться, что функциональность не нарушена. У нас есть приложение, работающее в нашей среде, которое может постоянно поддерживать требуемую конфигурацию и производительность.&lt;/p>
&lt;p>Но теперь мы должны быть уверены, что наши конечные пользователи получают то, что им нужно. Здесь нам нужно убедиться, что производительность нашего приложения постоянно отслеживается, этот этап позволит вашим разработчикам принимать более взвешенные решения об улучшениях приложения в будущих выпусках, чтобы лучше обслуживать конечных пользователей.&lt;/p>
&lt;p>Надежность также является ключевым фактором здесь, в конце концов, мы хотим, чтобы наше приложение было доступно все время, когда оно требуется. Затем это дает возможность другим областям &lt;strong>наблюдаемости, безопасности и управления данными&lt;/strong>, которые следует постоянно контролировать, а обратную связь всегда можно использовать для улучшения, обновления и непрерывного выпуска приложения.&lt;/p>
&lt;p>Некоторый вклад от сообщества здесь, в частности &lt;a href="https://twitter.com/_ediri">@_ediri&lt;/a>, упоминает также часть этого непрерывного процесса, мы также должны привлечь команды FinOps. Приложения и данные работают и хранятся где-то, за чем вы должны постоянно следить, чтобы убедиться, что если что-то изменится с точки зрения ресурсов, ваши расходы не вызовут серьезных финансовых проблем с вашими облачными счетами.&lt;/p>
&lt;p>Я думаю, что сейчас самое время упомянуть упомянутого выше «инженера DevOps». Я имею в виду, что из разговора с другими членами сообщества звание инженера DevOps не должно быть целью ни для кого, потому что на самом деле любая должность должна включать процессы DevOps и культуру, описанную здесь. DevOps следует использовать на самых разных должностях, таких как облачный инженер/архитектор, администратор виртуализации, облачный архитектор/инженер, администратор инфраструктуры. Это лишь некоторые из них, но причина использования DevOps Engineer, описанная выше, на самом деле заключалась в том, чтобы выделить объем или процесс, используемый любой из вышеперечисленных должностей, и многое другое.&lt;/p>
&lt;h2 id="источники">Источники&lt;/h2>
&lt;p>Я всегда открыт для добавления дополнительных ресурсов в эти файлы readme, поскольку они здесь в качестве учебного пособия.&lt;/p>
&lt;p>Мой совет — посмотрите все, что ниже, и, надеюсь, вы тоже что-то почерпнули из текста и объяснений выше.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://itglobal.com/ru-ru/company/blog/development-method-ci-cd/">Методология разработки CI/CD&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=UnjwVYAN7Ns">Continuous Development&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=RYQbmjLgubM">Continuous Testing - IBM YouTube&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=1er2cjUq1UI">Continuous Integration - IBM YouTube&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Zu53QQuYqJ0">Continuous Monitoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.notion.so/The-Remote-Flow-d90982e77a144f4f990c135f115f41c6">The Remote Flow&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.finops.org/introduction/what-is-finops/">FinOps Foundation - What is FinOps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.amazon.co.uk/Phoenix-Project-DevOps-Helping-Business-ebook/dp/B00AZRBLHO">&lt;strong>NOT FREE&lt;/strong> The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>До встречи в &lt;a href="../day04">День 4&lt;/a>&lt;/p>
&lt;h2 id="thanks">Thanks&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/soudjiro">Alexey&lt;/a> for reviewing&lt;/li>
&lt;/ul></description></item><item><title>5. Plan > Code > Build > Testing > Release > Deploy > Operate > Monitor</title><link>https://romankurnovskii.com/ru/tracks/90daysofdevops/day05/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/90daysofdevops/day05/</guid><description>&lt;p>Сегодня мы сосредоточимся на отдельных шагах от начала до конца и на непрерывном цикле приложения в мире DevOps.&lt;/p>
&lt;p>&lt;p class="md__image">
&lt;img
src="Day5_DevOps8.ru.png"
id="zoom-default"
alt="DevOps"
loading="lazy"
/>
&lt;/p>
&lt;/p>
&lt;h3 id="план">План&lt;/h3>
&lt;p>Все начинается с процесса планирования, когда команда разработчиков собирается вместе и выясняет, какие типы функций и исправлений ошибок они собираются внедрить в следующем спринте. Это возможность для вас как инженера DevOps принять участие в этом и узнать, какие вещи будут происходить на вашем пути, с которыми вам нужно участвовать, а также повлиять на их решения или их путь и как бы помочь им работать с инфраструктура, которую вы построили, или направьте их к чему-то, что будет работать лучше для них, если они не на этом пути, и поэтому одна ключевая вещь, на которую здесь следует указать, это то, что разработчики или команда разработчиков программного обеспечения являются вашим клиентом как DevOps инженер, так что это ваша возможность поработать с вашим клиентом до того, как он пойдет по плохому пути.&lt;/p>
&lt;h3 id="code">Code&lt;/h3>
&lt;p>Теперь, как только эта сессия планирования будет завершена, разработчики начинают писать код, в разработку котоого вы можете быть вовлечены, предоставляя информацю об инфрастуктуре, микросеврисах, если таковые имеются, и т.д.
Когда разработчики заканчивают писать код/часть кода, они объединяют (merge) все измененияю и выгруат в репозиторий.&lt;/p>
&lt;h3 id="build">Build&lt;/h3>
&lt;p>Здесь мы начнем первый из наших процессов автоматизации, потому что мы &amp;ldquo;возьмем&amp;rdquo; их код и построим (скомпилируем, &amp;ldquo;сбилдим&amp;rdquo;) его в зависимости от того, какой язык они используют, это может быть транспиляция или компиляция, а может создать образ докера из этого кода в любом случае, мы собираемся пройти этот процесс, используя наш cicd pipeline (&amp;ldquo;пайплайн&amp;rdquo;)&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>После того, как мы его скомпилировали проект, мы проведем на нем несколько тестов. Команда разработчиков обычно пишет тесты. У вас может быть некоторый вклад в то, какие тесты пишутся, но нам нужно запустить эти тесты. Тестирование — это способ провериь и свести к минимуму появление проблем в рабочей среде. И хотя это не гарантирует полной проверки, но мы хотим максимально точно быть уверенными, что одна из новых функций не создает новых ошибок, а две другие не ломают то, что раньше работало.&lt;/p>
&lt;h2 id="release">Release&lt;/h2>
&lt;p>Как только эти тесты пройдены, мы собираемся выполнить процесс выпуска, и, опять же, в зависимости от того, над каким типом приложения вы работаете, это может быть поэтапным. Код может просто находиться в репозитории GitHub или репозитории git или где-то еще, а также это может быть процесс зарузки вашего скомпилированного кода или созданного образа докера и помещения его в реестр или репозиторий, где он находится.&lt;/p>
&lt;h2 id="deploy">Deploy&lt;/h2>
&lt;p>Следующее, что мы собираемся сделать - это &amp;ldquo;деплой&amp;rdquo; (публикация/развертывание). Развертывание похоже на конечный результат процесса. Потому что после развертывания приложения, когда мы запускаем код в производство, наш бизнес действительно осознает ценность всех временных усилий и тяжелой работы, которые вы и команда разработчиков программного обеспечения вложили в этот продукт до этого момента.&lt;/p>
&lt;h2 id="operate">Operate&lt;/h2>
&lt;p>После того, как код выгружен скомпилирован, мы собираемся эксплуатировать его, и эксплуатация может включать в себя что-то вроде того, что вы начинаете получать звонки от своих клиентов, которые все раздражены тем, что сайт работает медленно или их приложение работает медленно, поэтому вам нужно выяснить, почему это так.
А а затем, возможно, создать автоматическое масштабирование, которое связано с увеличением количества серверов, доступных в пиковые периоды, и уменьшением количества серверов в непиковые периоды.&lt;/p>
&lt;h2 id="monitor">Monitor&lt;/h2>
&lt;p>Все вышеперечисленные части ведут к последнему шагу - мониторингу, что важно особенно в отношении проблем, возникающих в рельном времени, автоматического масштабирования, устранения неполадок.
Во время мониторига мы сохраняем данные об использовании памяти, использовании ЦП на диске, времени отклика, скорость отклика и т.д. Большая часть этого также является журналами. Журналы дают разработчикам возможность видеть, что происходит, без доступа к производственным системам.&lt;/p>
&lt;h2 id="rince--repeat">Rince &amp;amp; Repeat&lt;/h2>
&lt;p>Once that&amp;rsquo;s in place you go right back to the beginning to the planning stage and go through the whole thing again&lt;/p>
&lt;h2 id="continuous">Continuous&lt;/h2>
&lt;p>Многие инструменты помогают нам достичь вышеуказанного непрерывного процесса, весь этот код и конечная цель полной автоматизации облачной инфраструктуры или любой среды часто описывается как непрерывная интеграция/непрерывная доставка/непрерывное развертывание или сокращенно «CI/CD». Позже, в течение 90 дней, мы посвятим целую неделю CI/CD с некоторыми примерами и пошаговыми руководствами, чтобы понять основы.&lt;/p>
&lt;h3 id="continuous-delivery">Continuous Delivery&lt;/h3>
&lt;p>Continuous Delivery = Plan &amp;gt; Code &amp;gt; Build &amp;gt; Test&lt;/p>
&lt;h3 id="continuous-integration">Continuous Integration&lt;/h3>
&lt;p>Непрерывная интеграция - это результат описанных выше этапов непрерывной &amp;ldquo;доставки&amp;rdquo; и результат этапа выпуска. Это относится как к неудаче, так и к успеху, но это возвращается в непрерывную доставку или перемещается в непрерывное развертывание.&lt;/p>
&lt;p>Continuous Integration = Plan &amp;gt; Code &amp;gt; Build &amp;gt; Test &amp;gt; Release&lt;/p>
&lt;h3 id="continuous-deployment">Continuous Deployment&lt;/h3>
&lt;p>Если у вас есть успешный релиз, перейдите к непрерывному развертыванию, которое включает следующие этапы.&lt;/p>
&lt;p>Выпуск CI выполнен успешно = непрерывное развертывание = развертывание &amp;gt; эксплуатация &amp;gt; мониторинг&lt;/p>
&lt;p>Вы можете рассматривать эти три понятия выше как простой набор фаз жизненного цикла DevOps.&lt;/p>
&lt;p>Этот последний фрагмент был для меня чем-то вроде подведения итогов третьего дня, но думаю, что на самом деле это проясняет для меня ситуацию.&lt;/p>
&lt;h3 id="источники">Источники&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=a0-uE3rOyeU">DevOps for Developers – Software or DevOps Engineer?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=9pZ2xmsSDdo&amp;amp;t=125s">Techworld with Nana -DevOps Roadmap 2022 - How to become a DevOps Engineer? What is DevOps?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=5pxbp6FyTfk">How to become a DevOps Engineer in 2021 - DevOps Roadmap&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>До встречи в &lt;a href="../day06">День 6&lt;/a>&lt;/p></description></item></channel></rss>