<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Мультипоточность on Roman Kurnovskii</title><link>https://romankurnovskii.com/ru/tags/%D0%BC%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C/</link><description>Recent content in Мультипоточность on Roman Kurnovskii</description><generator>Hugo -- gohugo.io</generator><language>ru</language><copyright>&amp;copy; 2025</copyright><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://romankurnovskii.com/ru/tags/%D0%BC%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>Модуль потоков threading</title><link>https://romankurnovskii.com/ru/tracks/python-101/standard_library/threading/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://romankurnovskii.com/ru/tracks/python-101/standard_library/threading/</guid><description>&lt;p>Модуль &lt;code>threading&lt;/code> в Python предоставляет возможность создавать и управлять потоками выполнения. &lt;strong>Потоки&lt;/strong> - это легковесные процессы, которые выполняются параллельно в пределах одного процесса, что позволяет лучше использовать ресурсы компьютера.&lt;/p>
&lt;p>Для создания нового потока необходимо создать объект &lt;code>Thread&lt;/code> и передать в его конструктор функцию, которую вы хотите запустить в отдельном потоке. Затем вызовите метод &lt;code>start()&lt;/code> у этого объекта, чтобы запустить поток. Если вы хотите дождаться завершения потока, вызовите метод &lt;code>join()&lt;/code>, который блокирует текущий поток, пока поток, на который вы вызываете &lt;code>join()&lt;/code>, не завершится.&lt;/p>
&lt;p>Пример использования модуля &lt;code>threading&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">time&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> sleep
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">print_numbers&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">10&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># задержка печати для примера&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">print_letters&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> letter &lt;span style="color:#007020;font-weight:bold">in&lt;/span> [&lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;c&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;d&amp;#39;&lt;/span>, &lt;span style="color:#4070a0">&amp;#39;e&amp;#39;&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(letter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> __name__ &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t1 &lt;span style="color:#666">=&lt;/span> threading&lt;span style="color:#666">.&lt;/span>Thread(target&lt;span style="color:#666">=&lt;/span>print_numbers)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t2 &lt;span style="color:#666">=&lt;/span> threading&lt;span style="color:#666">.&lt;/span>Thread(target&lt;span style="color:#666">=&lt;/span>print_letters)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t1&lt;span style="color:#666">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t2&lt;span style="color:#666">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Done!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t1&lt;span style="color:#666">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t2&lt;span style="color:#666">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Done!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Мы создали две функции &lt;code>print_numbers()&lt;/code> и &lt;code>print_letters()&lt;/code>, каждая из которых печатает набор символов в консоль. Затем мы создали два потока, один для каждой из этих функций, и запустили их, вызвав метод start(). Затем мы дождались завершения каждого потока, вызвав метод &lt;code>join()&lt;/code>, и напечатали сообщение &amp;ldquo;Done!&amp;rdquo;.&lt;/p>
&lt;p>В последнем примере кода мы увидим, что каждый поток будет печатать свою информацию в консоль, в произвольном порядке, так как потоки будут конкурировать за доступ к ресурсу (в данном случае, к выводу в консоль).&lt;/p>
&lt;p>Результат может отличаться от запуска к запуску программы, так как порядок выполнения потоков не гарантирован и зависит от того, как ОС распределяет ресурсы между потоками.&lt;/p>
&lt;p>Модуль &lt;code>threading&lt;/code> также предоставляет другие полезные классы, такие как &lt;code>Lock&lt;/code>, &lt;code>Condition&lt;/code>, &lt;code>Semaphore&lt;/code>, которые помогают управлять доступом к ресурсам между несколькими потоками.&lt;/p></description></item></channel></rss>